generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.11s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="User"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006071s   0ms DEBUG Building graph for supergraph with 14 definitions
  └─┐build_root_nodes{}
    ├─   0.006130s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006198s   0ms INFO [x] Creating owned field move edge 'User.__typename/A' (type: String)
    ├─   0.006211s   0ms INFO [ ] Field 'User.name/A' is external, skipping edge creation
    ├─   0.006218s   0ms INFO [x] Creating field move edge 'User.rid/A' (type: ID)
    ├─   0.006226s   0ms INFO [x] Creating field move edge 'User.rid/A' (type: ID)
    ├─   0.006234s   0ms INFO [ ] Field 'User.nickname/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006239s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006245s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006251s   0ms INFO [x] Creating owned field move edge 'User.__typename/B' (type: String)
    ├─   0.006260s   0ms INFO [x] Creating field move edge 'User.name/B' (type: String)
    ├─   0.006266s   0ms INFO [x] Creating field move edge 'User.name/B' (type: String)
    ├─   0.006272s   0ms INFO [ ] Field 'User.rid/B' does is not available in the subgraph, skipping edge creation (type: ID)
    ├─   0.006276s   0ms INFO [x] Creating field move edge 'User.nickname/B' (type: String)
    ├─   0.006282s   0ms INFO [x] Creating field move edge 'User.nickname/B' (type: String)
    ├─   0.006288s   0ms INFO [x] Creating field move edge 'User.id/B' (type: ID)
    ├─   0.006294s   0ms INFO [x] Creating field move edge 'User.id/B' (type: ID)
    ├─   0.006300s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006306s   0ms INFO [x] Creating field move edge 'Query.providedRandomUser/A' (type: User)
    ├─   0.006312s   0ms INFO [x] Creating field move edge 'Query.providedRandomUser/A' (type: User)
    ├─   0.006318s   0ms INFO [x] Creating field move edge 'Query.randomUser/A' (type: User)
    ├─   0.006324s   0ms INFO [x] Creating field move edge 'Query.randomUser/A' (type: User)
    ├─   0.006330s   0ms INFO [ ] Field 'Query.userById/A' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006335s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006341s   0ms INFO [ ] Field 'Query.providedRandomUser/B' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006346s   0ms INFO [ ] Field 'Query.randomUser/B' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006351s   0ms INFO [x] Creating field move edge 'Query.userById/B' (type: User)
    ├─   0.006356s   0ms INFO [x] Creating field move edge 'Query.userById/B' (type: User)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006463s   0ms INFO Creating self-referencing entity move edge in 'User/A' via key 'id'
    ├─   0.006538s   0ms INFO Creating entity move edge from 'User/A' to 'User/B' via key 'id'
    ├─   0.006590s   0ms INFO Creating entity move edge from 'User/B' to 'User/A' via key 'id'
    ├─   0.006623s   0ms INFO Creating self-referencing entity move edge in 'User/B' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
    ├─   0.006694s   0ms INFO Creating viewed (#1) link for provided field 'Query.providedRandomUser/"A"' (type: User)
    └─┐handle_viewed_selection_set{graph_id="A", view_id=1, parent_type_name="User"}
      ├─   0.006727s   0ms INFO Upserting graph viewed node for 'String.A'
      ├─   0.006734s   0ms INFO Creating viewed (#1) field edge for 'User.name' (type: String)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.062430s INFO Starting server on http://localhost:4000
   0.063490s INFO starting 16 workers
   0.063534s INFO Actix runtime found; starting in Actix runtime
   0.063543s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.205896s DEBUG original document: query ping {
  __typename
}

   0.206005s DEBUG normalized document: query ping {__typename}

   0.206035s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.206422s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.285096s DEBUG original document: query {
  randomUser {
    id
    name
  }
  userById(id: "u2") {
    id
    name
    nickname
  }
}

   0.285241s DEBUG normalized document: query{randomUser{id name} userById(id: "u2"){id name nickname}}

   0.285265s DEBUG executable operation: query{randomUser{id name} userById(id: "u2"){id name nickname}}
┐walk_operation{}
├─   0.285732s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="userById", leaf=false}
  ├─   0.285781s   0ms DEBUG Trying to advance to: userById(id: "u2"){id name nickname} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.285837s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.285863s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.285894s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.285916s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.285935s   0ms DEBUG Indirect paths found: 0
    ├─   0.285945s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.285990s   0ms DEBUG checking edge Query/b -(userById)- User/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="userById"}
        ├─   0.286011s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.286027s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(userById)- User/b
      ├─   0.286039s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.286072s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.286110s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.286117s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.286129s   0ms DEBUG Indirect paths found: 0
    ├─   0.286138s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.286152s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="nickname", leaf=true}
  ├─   0.286184s   0ms DEBUG Trying to advance to: nickname through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userById)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.286212s   0ms DEBUG checking edge User/b -(nickname)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="nickname"}
        ├─   0.286228s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.286243s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(nickname)- String/b
      ├─   0.286251s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.286265s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.286287s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.286295s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.286301s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.286319s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.286356s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
                ├─   0.286374s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.286391s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
              ├─   0.286400s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.286432s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.286439s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.286446s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.286454s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.286462s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.286485s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.286506s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.286525s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.286539s   0ms DEBUG Paths for id
        ├─   0.286550s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userById)- User/b -(id)- ID/b is valid
        ├─   0.286556s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.286573s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.286579s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.286595s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.286625s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.286642s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.286665s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.286711s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.286725s   0ms DEBUG No direct paths found
      ├─   0.286735s   0ms DEBUG going deeper
      ├─   0.286743s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      ├─   0.286749s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.286755s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.286760s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.286769s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.286774s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.286786s   0ms DEBUG Indirect paths found: 0
    ├─   0.286794s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(userById)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.286820s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userById)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.286845s   0ms DEBUG checking edge User/b -(name)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="name"}
        ├─   0.286861s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.286876s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(name)- String/b
      ├─   0.286884s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.286897s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.286917s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.286922s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.286928s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.286944s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.286975s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
                ├─   0.286992s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.287009s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
              ├─   0.287017s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.287045s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.287052s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.287059s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.287065s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.287073s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.287079s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.287094s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.287109s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.287123s   0ms DEBUG Paths for id
        ├─   0.287131s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userById)- User/b -(id)- ID/b is valid
        ├─   0.287137s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.287147s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.287153s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.287167s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.287190s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.287204s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.287224s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.287266s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.287278s   0ms DEBUG No direct paths found
      ├─   0.287286s   0ms DEBUG going deeper
      ├─   0.287293s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      ├─   0.287299s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.287305s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.287310s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.287317s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.287322s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.287334s   0ms DEBUG Indirect paths found: 0
    ├─   0.287341s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(userById)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.287367s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userById)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.287391s   0ms DEBUG checking edge User/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.287406s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.287421s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
      ├─   0.287428s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.287441s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.287460s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.287465s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.287471s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.287487s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.287517s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
                ├─   0.287534s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.287550s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
              ├─   0.287559s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.287587s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.287594s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.287600s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.287606s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.287614s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.287620s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.287634s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.287650s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.287663s   0ms DEBUG Paths for id
        ├─   0.287671s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userById)- User/b -(id)- ID/b is valid
        ├─   0.287677s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.287687s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.287693s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.287707s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.287730s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.287744s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.287764s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.287826s   0ms DEBUG checking edge User/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", edge="id"}
          ├─   0.287846s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.287863s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
        ├─   0.287872s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(16) --> EdgeIndex(4)" }])
      ┌─┘
      ├─   0.287890s   0ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/a
      ├─   0.287901s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.287906s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(16) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.287920s   0ms DEBUG Indirect paths found: 1
    ├─   0.287930s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(userById)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="randomUser", leaf=false}
  ├─   0.287966s   0ms DEBUG Trying to advance to: randomUser{id name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.287995s   0ms DEBUG checking edge Query/a -(randomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="randomUser"}
        ├─   0.288011s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.288025s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(randomUser)- User/a
      ├─   0.288033s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.288046s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.288065s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.288071s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.288082s   0ms DEBUG Indirect paths found: 0
    ├─   0.288088s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.288116s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.288127s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.288143s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.288148s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.288159s   0ms DEBUG Indirect paths found: 0
    ├─   0.288165s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.288177s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.288195s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.288217s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.288229s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.288245s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.288263s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.288294s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.288310s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.288327s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.288336s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.288367s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.288374s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.288381s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.288388s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.288395s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.288400s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.288416s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.288431s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.288444s   0ms DEBUG Paths for id
        ├─   0.288452s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.288458s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.288469s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.288475s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.288489s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.288513s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.288526s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.288547s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.288588s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.288606s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.288621s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.288630s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(6)" }])
      ┌─┘
      ├─   0.288663s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.288674s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.288681s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.288688s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.288694s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.288710s   0ms DEBUG Indirect paths found: 1
    ├─   0.288718s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.288745s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.288771s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.288787s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.288801s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.288809s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.288823s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.288841s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.288857s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.288888s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.288905s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.288922s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.288930s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.288958s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.288966s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.288973s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.288979s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.288986s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.288992s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.289007s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.289022s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.289036s   0ms DEBUG Paths for id
        ├─   0.289044s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.289050s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.289060s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.289066s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.289080s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.289104s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.289118s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.289138s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.289179s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.289197s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.289212s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.289221s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(8)" }])
      ┌─┘
      ├─   0.289236s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.289244s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.289249s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.289256s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.289261s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.289275s   0ms DEBUG Indirect paths found: 1
    ├─   0.289283s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(7)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.289324s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.289336s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.289348s   0ms DEBUG Processing edge: Query/b -(userById)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.289360s   0ms DEBUG Processing edge: User/b -(nickname)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.289379s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.289391s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.289402s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(6)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.289435s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.289446s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.289458s   0ms DEBUG Processing edge: Query/b -(userById)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.289470s   0ms DEBUG Processing edge: User/b -(name)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.289488s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.289499s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.289509s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.289542s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.289553s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.289565s   0ms DEBUG Processing edge: Query/b -(userById)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.289580s   0ms DEBUG Processing edge: User/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.289598s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.289609s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.289619s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(6)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.289652s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.289664s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.289675s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.289688s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.289700s   0ms DEBUG Processing edge: User/b -(name)- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.289719s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.289730s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.289741s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.289751s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.289784s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.289795s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.289806s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.289818s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.289837s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.289847s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.289858s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=5}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=2}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="userById", arguments="id: \"u2\"", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.289991s   0ms DEBUG adding output field 'userById' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="nickname", leaf=true, list=false, response_path="userById", fetch_path="userById"}
              ├─   0.290024s   0ms DEBUG adding output field 'nickname' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="name", leaf=true, list=false, response_path="userById", fetch_path="userById"}
              ├─   0.290065s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="userById", fetch_path="userById"}
              ├─   0.290104s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=2}
      ┌─┘
      └─┐connect{parent=0, child=2}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
        └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Query", field="randomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.290203s   0ms DEBUG adding output field 'randomUser' to fetch step [2]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=2}
            └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/b", parent_fetch_step_index=2}
              ├─   0.290233s   0ms DEBUG created a new fetch step [3] subgraph(b) type(User) requirement() key({id}) in children of 2
              ├─   0.290241s   0ms DEBUG adding input requirement '{id}' to fetch step [3]
              ├─   0.290249s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.290257s   0ms DEBUG connecting fetch step to parent [2] -> [3]
              └─┐connect{parent=2, child=3}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, requiring_fetch_step_index=3, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
                      ├─   0.290317s   0ms DEBUG connecting parent fetch step [2] to requiring fetch step [3]
                      └─┐connect{parent=2, child=3}
                      ┌─┘
                      ├─   0.290342s   0ms DEBUG adding output field 'id' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=2, child=3}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                └─┐process_plain_field_edge{parent_fetch_step_index=3, type_name="User", field="name", leaf=true, list=false, response_path="randomUser", fetch_path=""}
                  ├─   0.290429s   0ms DEBUG adding output field 'name' to fetch step [3]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.290482s   0ms DEBUG adding output field 'id' to fetch step [2]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.290545s   0ms DEBUG Done
├─   0.290553s   0ms DEBUG found roots
├─   0.290558s   0ms DEBUG print graph
├─   0.290562s   0ms DEBUG Nodes:
│ [1] Query/b {} → {userById(id: "u2"){nickname name id}} at $.
│ [2] Query/a {} → {randomUser{__typename id}} at $.
│ [3] User/b {__typename id} → {name} at $.randomUser
│ 
│ Tree:
│ [2]
│   [3]
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐ParallelNode::execute{data=Null, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[]}
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.291088s   0ms DEBUG starting new connection: http://localhost:4200/
    └─┐FetchNode::execute{data=Null, representations=[]}
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.291363s   0ms DEBUG starting new connection: http://localhost:4200/
          ├─   0.291484s   0ms DEBUG connecting to 127.0.0.1:4200
          ├─   0.291588s   0ms DEBUG connecting to 127.0.0.1:4200
          ├─   0.291884s   1ms DEBUG connected to 127.0.0.1:4200
          ├─   0.292047s   0ms DEBUG connected to 127.0.0.1:4200
          ├─   0.297777s   6ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
          ├─   0.300744s   9ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"randomUser": Object {"__typename": String("User"), "id": String("u1")}, "userById": Object {"nickname": String("u2-nickname"), "name": String("u2-name"), "id": String("u2")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.301149s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.302996s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.303217s DEBUG execution result: ExecutionResult { data: Some(Object {"randomUser": Object {"id": String("u1"), "name": String("u1-name")}, "userById": Object {"id": String("u2"), "name": String("u2-name"), "nickname": String("u2-nickname")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Parallel"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{randomUser{__typename id}}")}, Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{userById(id: \"u2\"){nickname name id}}")}]}, Object {"kind": String("Flatten"), "path": Array [String("randomUser")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.309725s DEBUG original document: query {
  randomUser {
    id
    rid
  }
}

   0.309819s DEBUG normalized document: query{randomUser{id rid}}

   0.309839s DEBUG executable operation: query{randomUser{id rid}}
┐walk_operation{}
├─   0.310157s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="randomUser", leaf=false}
  ├─   0.310203s   0ms DEBUG Trying to advance to: randomUser{id rid} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.310251s   0ms DEBUG checking edge Query/a -(randomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="randomUser"}
        ├─   0.310272s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.310295s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(randomUser)- User/a
      ├─   0.310307s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.310323s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.310351s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.310357s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.310368s   0ms DEBUG Indirect paths found: 0
    ├─   0.310376s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.310403s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.310416s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.310434s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.310439s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.310450s   0ms DEBUG Indirect paths found: 0
    ├─   0.310457s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.310470s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="rid", leaf=true}
  ├─   0.310490s   0ms DEBUG Trying to advance to: rid through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.310518s   0ms DEBUG checking edge User/a -(rid)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="rid"}
        ├─   0.310533s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.310548s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(rid)- ID/a
      ├─   0.310556s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.310569s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.310588s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.310606s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.310640s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.310658s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.310675s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.310683s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.310712s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.310720s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.310729s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.310735s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.310742s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.310748s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.310765s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.310781s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.310795s   0ms DEBUG Paths for id
        ├─   0.310803s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.310810s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.310825s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.310831s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.310846s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.310872s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.310887s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.310908s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.310954s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.310967s   0ms DEBUG No direct paths found
      ├─   0.310976s   0ms DEBUG going deeper
      ├─   0.310983s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.310989s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.310995s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.311000s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.311006s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.311011s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.311019s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.311024s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.311035s   0ms DEBUG Indirect paths found: 0
    ├─   0.311043s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.311069s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.311093s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.311109s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.311124s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.311132s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.311145s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.311164s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.311180s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.311210s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.311245s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.311270s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.311280s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.311313s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.311320s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.311327s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.311334s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.311341s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.311347s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.311362s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.311378s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.311391s   0ms DEBUG Paths for id
        ├─   0.311399s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.311405s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.311416s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.311421s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.311435s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.311460s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.311474s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.311494s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.311536s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.311554s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.311570s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.311579s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(8)" }])
      ┌─┘
      ├─   0.311594s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.311602s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.311608s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.311615s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.311620s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.311634s   0ms DEBUG Indirect paths found: 1
    ├─   0.311643s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.311684s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.311696s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.311707s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.311719s   0ms DEBUG Processing edge: User/a -(rid)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.311737s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.311748s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.311759s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.311791s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.311803s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.311814s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.311825s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.311843s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.311854s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.311864s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="randomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.311975s   0ms DEBUG adding output field 'randomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="rid", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.312006s   0ms DEBUG adding output field 'rid' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.312047s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.312109s   0ms DEBUG Done
├─   0.312117s   0ms DEBUG found roots
├─   0.312121s   0ms DEBUG print graph
├─   0.312126s   0ms DEBUG Nodes:
│ [1] Query/a {} → {randomUser{rid id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.312507s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.314412s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.314605s DEBUG execution result: ExecutionResult { data: Some(Object {"randomUser": Object {"id": String("u1"), "rid": String("u1-rid")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{randomUser{rid id}}")}}}) }
   0.317705s DEBUG original document: query {
  randomUser {
    id
    rid
    name
  }
}

   0.317777s DEBUG normalized document: query{randomUser{id rid name}}

   0.317803s DEBUG executable operation: query{randomUser{id rid name}}
┐walk_operation{}
├─   0.318085s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="randomUser", leaf=false}
  ├─   0.318129s   0ms DEBUG Trying to advance to: randomUser{id rid name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.318178s   0ms DEBUG checking edge Query/a -(randomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="randomUser"}
        ├─   0.318199s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.318243s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(randomUser)- User/a
      ├─   0.318265s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.318285s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.318317s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.318323s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.318335s   0ms DEBUG Indirect paths found: 0
    ├─   0.318342s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.318372s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.318386s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.318403s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.318409s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.318420s   0ms DEBUG Indirect paths found: 0
    ├─   0.318426s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.318441s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.318462s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.318488s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.318500s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.318517s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.318536s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.318572s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.318590s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.318607s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.318616s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.318646s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.318654s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.318662s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.318668s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.318675s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.318681s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.318698s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.318714s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.318728s   0ms DEBUG Paths for id
        ├─   0.318737s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.318743s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.318759s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.318765s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.318779s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.318806s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.318822s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.318842s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.318888s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.318906s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.318922s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.318931s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(6)" }])
      ┌─┘
      ├─   0.318946s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.318954s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.318960s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.318967s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.318972s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.318985s   0ms DEBUG Indirect paths found: 1
    ├─   0.318993s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="rid", leaf=true}
  ├─   0.319020s   0ms DEBUG Trying to advance to: rid through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.319045s   0ms DEBUG checking edge User/a -(rid)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="rid"}
        ├─   0.319060s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.319075s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(rid)- ID/a
      ├─   0.319082s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.319095s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.319113s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.319130s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.319161s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.319178s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.319194s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.319202s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.319230s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.319238s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.319261s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.319284s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.319296s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.319302s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.319322s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.319339s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.319353s   0ms DEBUG Paths for id
        ├─   0.319363s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.319369s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.319379s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.319385s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.319399s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.319426s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.319440s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.319460s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.319518s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.319538s   0ms DEBUG No direct paths found
      ├─   0.319548s   0ms DEBUG going deeper
      ├─   0.319557s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.319563s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.319569s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.319575s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.319581s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.319586s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.319594s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.319600s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.319611s   0ms DEBUG Indirect paths found: 0
    ├─   0.319621s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.319648s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.319673s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.319689s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.319703s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.319714s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.319728s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.319764s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.319790s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.319823s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.319840s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.319859s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.319868s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.319897s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.319904s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.319912s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.319918s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.319925s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.319931s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.319947s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.319962s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.319976s   0ms DEBUG Paths for id
        ├─   0.319984s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.319989s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.320000s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.320006s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.320020s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.320043s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.320057s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.320077s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.320118s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.320136s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.320152s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.320183s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(8)" }])
      ┌─┘
      ├─   0.320210s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.320219s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.320224s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.320232s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.320237s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.320251s   0ms DEBUG Indirect paths found: 1
    ├─   0.320262s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(6)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.320306s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.320319s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.320330s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.320343s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.320355s   0ms DEBUG Processing edge: User/b -(name)- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.320374s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.320386s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.320396s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.320407s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.320440s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.320451s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.320462s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.320474s   0ms DEBUG Processing edge: User/a -(rid)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.320492s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.320502s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.320513s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.320545s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.320556s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.320567s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.320579s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.320597s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.320607s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.320618s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="randomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.320730s   0ms DEBUG adding output field 'randomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/b", parent_fetch_step_index=1}
              ├─   0.320764s   0ms DEBUG created a new fetch step [2] subgraph(b) type(User) requirement() key({id}) in children of 1
              ├─   0.320771s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.320779s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.320787s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
                      ├─   0.320843s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.320866s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="name", leaf=true, list=false, response_path="randomUser", fetch_path=""}
                  ├─   0.320954s   0ms DEBUG adding output field 'name' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="rid", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.321012s   0ms DEBUG adding output field 'rid' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.321051s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.321114s   0ms DEBUG Done
├─   0.321120s   0ms DEBUG found roots
├─   0.321125s   0ms DEBUG print graph
├─   0.321130s   0ms DEBUG Nodes:
│ [1] Query/a {} → {randomUser{__typename id rid}} at $.
│ [2] User/b {__typename id} → {name} at $.randomUser
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.321556s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.323648s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"randomUser": Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.324135s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.325568s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.325828s DEBUG execution result: ExecutionResult { data: Some(Object {"randomUser": Object {"id": String("u1"), "rid": String("u1-rid"), "name": String("u1-name")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{randomUser{__typename id rid}}")}, Object {"kind": String("Flatten"), "path": Array [String("randomUser")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.328783s DEBUG original document: query {
  providedRandomUser {
    id
    rid
    name
  }
}

   0.328865s DEBUG normalized document: query{providedRandomUser{id rid name}}

   0.328890s DEBUG executable operation: query{providedRandomUser{id rid name}}
┐walk_operation{}
├─   0.329196s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="providedRandomUser", leaf=false}
  ├─   0.329244s   0ms DEBUG Trying to advance to: providedRandomUser{id rid name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.329295s   0ms DEBUG checking edge Query/a -(providedRandomUser)- User/a/1
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="providedRandomUser"}
        ├─   0.329316s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.329339s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(providedRandomUser)- User/a/1
      ├─   0.329351s   0ms DEBUG checking edge Query/a -(providedRandomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="providedRandomUser"}
        ├─   0.329366s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.329380s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(providedRandomUser)- User/a
      ├─   0.329387s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(18)" },  { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.329405s   0ms DEBUG Direct paths found: 2
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.329436s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.329442s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.329454s   0ms DEBUG Indirect paths found: 0
    ├─   0.329462s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.329491s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.329503s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.329519s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.329525s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.329536s   0ms DEBUG Indirect paths found: 0
    ├─   0.329543s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.329557s   0ms DEBUG Found 2 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.329579s   0ms DEBUG Trying to advance to: name through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.329605s   0ms DEBUG checking edge User/a/1 -(name)- String/a/1
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", edge="name"}
        ├─   0.329620s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.329635s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1 with edge User/a/1 -(name)- String/a/1
      ├─   0.329643s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(18) --> EdgeIndex(19)" }])
    ┌─┘
    ├─   0.329657s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.329679s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.329685s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.329697s   0ms DEBUG Indirect paths found: 0
    ├─   0.329704s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.329733s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.329744s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.329762s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.329781s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.329816s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
                ├─   0.329834s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.329851s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.329860s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.329889s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.329897s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.329906s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.329913s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.329920s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.329926s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.329943s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.329960s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.329974s   0ms DEBUG Paths for id
        ├─   0.329983s   0ms DEBUG   Path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(id)- ID/a is valid
        ├─   0.329989s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.330005s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.330011s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.330026s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.330053s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.330069s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.330090s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.330136s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.330155s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.330170s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.330180s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(15) --> EdgeIndex(6)" }])
      ┌─┘
      ├─   0.330196s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.330204s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.330210s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.330217s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.330222s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(15) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.330256s   0ms DEBUG Indirect paths found: 1
    ├─   0.330270s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="rid", leaf=true}
  ├─   0.330303s   0ms DEBUG Trying to advance to: rid through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.330329s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.330342s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.330360s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.330365s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.330377s   0ms DEBUG Indirect paths found: 0
    ├─   0.330384s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.330413s   0ms DEBUG checking edge User/a -(rid)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="rid"}
        ├─   0.330430s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.330445s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(rid)- ID/a
      ├─   0.330453s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.330467s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.330486s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.330502s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.330534s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
                ├─   0.330551s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.330569s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.330577s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.330606s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.330614s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.330621s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.330627s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.330634s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.330640s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.330656s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.330672s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.330685s   0ms DEBUG Paths for id
        ├─   0.330693s   0ms DEBUG   Path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(id)- ID/a is valid
        ├─   0.330699s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.330710s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.330716s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.330730s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.330755s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.330769s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.330790s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.330832s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.330845s   0ms DEBUG No direct paths found
      ├─   0.330854s   0ms DEBUG going deeper
      ├─   0.330862s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.330867s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.330873s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.330879s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.330885s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.330890s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.330898s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.330903s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.330915s   0ms DEBUG Indirect paths found: 0
    ├─   0.330922s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.330949s   0ms DEBUG Trying to advance to: id through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.330973s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.330985s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.331002s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.331007s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.331018s   0ms DEBUG Indirect paths found: 0
    ├─   0.331025s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.331054s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.331088s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.331106s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.331115s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.331129s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.331150s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.331167s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.331198s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
                ├─   0.331216s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.331232s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.331241s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.331269s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.331277s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.331284s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.331290s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.331298s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.331304s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.331319s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.331335s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.331349s   0ms DEBUG Paths for id
        ├─   0.331357s   0ms DEBUG   Path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(id)- ID/a is valid
        ├─   0.331363s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.331374s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.331380s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.331394s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.331418s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.331432s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.331453s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.331495s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.331513s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.331529s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.331538s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(15) --> EdgeIndex(8)" }])
      ┌─┘
      ├─   0.331553s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.331562s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.331567s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.331574s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.331580s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(15) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.331593s   0ms DEBUG Indirect paths found: 1
    ├─   0.331602s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(18) --> EdgeIndex(19)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.331644s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.331656s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.331668s   0ms DEBUG Processing edge: Query/a -(providedRandomUser)- User/a/1
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.331681s   0ms DEBUG Processing edge: User/a/1 -(name)- String/a/1
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.331699s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.331711s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.331721s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.331755s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.331766s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.331778s   0ms DEBUG Processing edge: Query/a -(providedRandomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.331790s   0ms DEBUG Processing edge: User/a -(rid)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.331808s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.331819s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.331830s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(4)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.331863s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.331874s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.331886s   0ms DEBUG Processing edge: Query/a -(providedRandomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.331898s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.331916s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.331927s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.331938s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="providedRandomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.332052s   0ms DEBUG adding output field 'providedRandomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="name", leaf=false, list=false, response_path="providedRandomUser", fetch_path="providedRandomUser"}
              ├─   0.332082s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="providedRandomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.332137s   0ms DEBUG adding output field 'providedRandomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="rid", leaf=true, list=false, response_path="providedRandomUser", fetch_path="providedRandomUser"}
              ├─   0.332161s   0ms DEBUG adding output field 'rid' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="providedRandomUser", fetch_path="providedRandomUser"}
              ├─   0.332219s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.332294s   0ms DEBUG Done
├─   0.332302s   0ms DEBUG found roots
├─   0.332307s   0ms DEBUG print graph
├─   0.332311s   0ms DEBUG Nodes:
│ [1] Query/a {} → {providedRandomUser{name rid id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.332717s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.334651s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.334893s DEBUG execution result: ExecutionResult { data: Some(Object {"providedRandomUser": Object {"id": String("u1"), "rid": String("u1-rid"), "name": String("u1-name")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{providedRandomUser{name rid id}}")}}}) }
