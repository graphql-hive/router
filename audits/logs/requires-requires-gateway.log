generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.12s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Product"}
    └─┐build_fields{fields_count=7}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=1}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
└─┐decompose_from_supergraph{graph_id="D"}
┌─┘
└─┐decompose_from_supergraph{graph_id="C"}
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006679s   0ms DEBUG Building graph for supergraph with 15 definitions
  └─┐build_root_nodes{}
    ├─   0.006740s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006797s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006809s   0ms INFO [ ] Field 'Query.product/A' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006816s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006825s   0ms INFO [x] Creating field move edge 'Query.product/B' (type: Product)
    ├─   0.006833s   0ms INFO [x] Creating field move edge 'Query.product/B' (type: Product)
    ├─   0.006841s   0ms INFO [x] Creating owned field move edge 'Query.__typename/C' (type: String)
    ├─   0.006850s   0ms INFO [ ] Field 'Query.product/C' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006855s   0ms INFO [x] Creating owned field move edge 'Query.__typename/D' (type: String)
    ├─   0.006862s   0ms INFO [ ] Field 'Query.product/D' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006868s   0ms INFO [x] Creating owned field move edge 'Product.__typename/A' (type: String)
    ├─   0.006875s   0ms INFO [ ] Field 'Product.hasDiscount/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006881s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.006887s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.006893s   0ms INFO [ ] Field 'Product.isExpensiveWithDiscount/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006898s   0ms INFO [x] Creating field move edge 'Product.price/A' (type: Float)
    ├─   0.006904s   0ms INFO [x] Creating field move edge 'Product.price/A' (type: Float)
    ├─   0.006910s   0ms INFO [ ] Field 'Product.canAffordWithDiscount/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006915s   0ms INFO [ ] Field 'Product.canAfford/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006921s   0ms INFO [ ] Field 'Product.isExpensive/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006926s   0ms INFO [x] Creating owned field move edge 'Product.__typename/B' (type: String)
    ├─   0.006932s   0ms INFO [x] Creating field move edge 'Product.hasDiscount/B' (type: Boolean)
    ├─   0.006938s   0ms INFO [x] Creating field move edge 'Product.hasDiscount/B' (type: Boolean)
    ├─   0.006944s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.006953s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.006958s   0ms INFO [ ] Field 'Product.isExpensiveWithDiscount/B' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006963s   0ms INFO [ ] Field 'Product.price/B' does is not available in the subgraph, skipping edge creation (type: Float)
    ├─   0.006968s   0ms INFO [ ] Field 'Product.canAffordWithDiscount/B' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006973s   0ms INFO [ ] Field 'Product.canAfford/B' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006978s   0ms INFO [ ] Field 'Product.isExpensive/B' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006983s   0ms INFO [x] Creating owned field move edge 'Product.__typename/C' (type: String)
    ├─   0.006991s   0ms INFO [ ] Field 'Product.hasDiscount/C' is external, skipping edge creation
    ├─   0.006996s   0ms INFO [x] Creating field move edge 'Product.id/C' (type: ID)
    ├─   0.007003s   0ms INFO [x] Creating field move edge 'Product.id/C' (type: ID)
    ├─   0.007085s   0ms INFO [x] Creating field move edge 'Product.isExpensiveWithDiscount/C' (type: Boolean)
    ├─   0.007116s   0ms INFO [x] Creating field move edge 'Product.isExpensiveWithDiscount/C' (type: Boolean)
    ├─   0.007129s   0ms INFO [ ] Field 'Product.price/C' is external, skipping edge creation
    ├─   0.007135s   0ms INFO [ ] Field 'Product.canAffordWithDiscount/C' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.007140s   0ms INFO [ ] Field 'Product.canAfford/C' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.007190s   0ms INFO [x] Creating field move edge 'Product.isExpensive/C' (type: Boolean)
    ├─   0.007201s   0ms INFO [x] Creating field move edge 'Product.isExpensive/C' (type: Boolean)
    ├─   0.007209s   0ms INFO [x] Creating owned field move edge 'Product.__typename/D' (type: String)
    ├─   0.007219s   0ms INFO [ ] Field 'Product.hasDiscount/D' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.007224s   0ms INFO [x] Creating field move edge 'Product.id/D' (type: ID)
    ├─   0.007231s   0ms INFO [x] Creating field move edge 'Product.id/D' (type: ID)
    ├─   0.007237s   0ms INFO [ ] Field 'Product.isExpensiveWithDiscount/D' is external, skipping edge creation
    ├─   0.007242s   0ms INFO [ ] Field 'Product.price/D' does is not available in the subgraph, skipping edge creation (type: Float)
    ├─   0.007277s   0ms INFO [x] Creating field move edge 'Product.canAffordWithDiscount/D' (type: Boolean)
    ├─   0.007287s   0ms INFO [x] Creating field move edge 'Product.canAffordWithDiscount/D' (type: Boolean)
    ├─   0.007320s   0ms INFO [x] Creating field move edge 'Product.canAfford/D' (type: Boolean)
    ├─   0.007347s   0ms INFO [x] Creating field move edge 'Product.canAfford/D' (type: Boolean)
    ├─   0.007360s   0ms INFO [ ] Field 'Product.isExpensive/D' is external, skipping edge creation
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.007481s   0ms INFO Creating self-referencing entity move edge in 'Product/A' via key 'id'
    ├─   0.007525s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/B' via key 'id'
    ├─   0.007605s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/C' via key 'id'
    ├─   0.007674s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/D' via key 'id'
    ├─   0.007744s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/A' via key 'id'
    ├─   0.007825s   0ms INFO Creating self-referencing entity move edge in 'Product/B' via key 'id'
    ├─   0.007864s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/C' via key 'id'
    ├─   0.007898s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/D' via key 'id'
    ├─   0.007937s   0ms INFO Creating entity move edge from 'Product/C' to 'Product/A' via key 'id'
    ├─   0.007970s   0ms INFO Creating entity move edge from 'Product/C' to 'Product/B' via key 'id'
    ├─   0.008035s   0ms INFO Creating self-referencing entity move edge in 'Product/C' via key 'id'
    ├─   0.008073s   0ms INFO Creating entity move edge from 'Product/C' to 'Product/D' via key 'id'
    ├─   0.008110s   0ms INFO Creating entity move edge from 'Product/D' to 'Product/A' via key 'id'
    ├─   0.008177s   0ms INFO Creating entity move edge from 'Product/D' to 'Product/B' via key 'id'
    ├─   0.008246s   0ms INFO Creating entity move edge from 'Product/D' to 'Product/C' via key 'id'
    ├─   0.008315s   0ms INFO Creating self-referencing entity move edge in 'Product/D' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.067750s INFO Starting server on http://localhost:4000
   0.069102s INFO starting 16 workers
   0.069170s INFO Actix runtime found; starting in Actix runtime
   0.069183s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.227632s DEBUG original document: query ping {
  __typename
}

   0.227758s DEBUG normalized document: query ping {__typename}

   0.227779s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.228279s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.311680s DEBUG original document: query {
  product {
    canAfford
  }
}

   0.311793s DEBUG normalized document: query{product{canAfford}}

   0.311807s DEBUG executable operation: query{product{canAfford}}
┐walk_operation{}
├─   0.312170s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="product", leaf=false}
  ├─   0.312228s   0ms DEBUG Trying to advance to: product{canAfford} through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "canAfford", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.312285s   0ms DEBUG checking edge Query/b -(product)- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="product"}
        ├─   0.312307s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.312332s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(product)- Product/b
      ├─   0.312344s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.312369s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "canAfford", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.312440s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.312449s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.312473s   0ms DEBUG Indirect paths found: 0
    ├─   0.312485s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.312502s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="canAfford", leaf=true}
  ├─   0.312527s   0ms DEBUG Trying to advance to: canAfford through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(product)- Product/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.312555s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.312567s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.312586s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.312608s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.312651s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.312686s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.312712s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.312723s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.312758s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              ├─   0.312768s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
              ├─   0.312777s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.312797s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.312843s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.312866s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.312885s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.312894s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.312946s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.312958s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                      ├─   0.312967s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.312974s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                      ├─   0.312986s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.313006s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.313014s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.313063s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.313133s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.313170s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.313197s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.313209s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.313271s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.313282s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                              ├─   0.313291s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.313299s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                              ├─   0.313308s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.313316s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.313324s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.313331s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                              ├─   0.313342s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.313350s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.313373s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.313395s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.313414s   0ms DEBUG Paths for id
                        ├─   0.313424s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.313433s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.313457s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.313468s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.313493s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.313544s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.313572s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.313605s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.313677s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.313710s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.313732s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.313744s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.313766s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.313780s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.313788s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.313808s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.313826s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.313843s   1ms DEBUG Paths for id
                ├─   0.313852s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.313861s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.313869s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.313880s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.313887s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.313903s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.313930s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.313946s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.313969s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.314017s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.314036s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.314053s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.314063s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.314079s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.314088s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.314095s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.314106s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.314125s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.314161s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.314179s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.314198s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.314207s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.314239s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.314246s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                      ├─   0.314255s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.314274s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.314313s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.314337s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.314357s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.314368s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.314402s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.314411s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                              ├─   0.314419s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.314427s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                              ├─   0.314435s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.314443s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.314451s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.314459s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                              ├─   0.314468s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.314476s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.314495s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.314513s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.314530s   0ms DEBUG Paths for id
                        ├─   0.314540s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.314548s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.314559s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.314567s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.314584s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.314614s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.314631s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.314657s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.314709s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.314731s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.314750s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.314760s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.314778s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.314788s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.314796s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.314803s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.314810s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                      ├─   0.314820s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.314827s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.314846s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.314865s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.314881s   0ms DEBUG Paths for id
                ├─   0.314890s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.314899s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.314907s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.314917s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.314924s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.314940s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.314967s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.314982s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.315005s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.315051s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.315071s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.315088s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.315096s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.315113s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.315127s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.315133s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.315151s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.315168s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.315186s   2ms DEBUG Paths for id
        ├─   0.315195s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.315203s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.315211s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.315218s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.315227s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.315233s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.315247s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.315270s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.315303s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.315331s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
        ├─   0.315381s   0ms DEBUG checking edge Product/d -(canAfford🧩{isExpensive})- Boolean/d
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="canAfford"}
          ├─   0.315400s   0ms DEBUG checking requirements {isExpensive} for edge 'Product/d -(canAfford🧩{isExpensive})- Boolean/d'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.315436s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.315466s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                ├─   0.315474s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
                ├─   0.315482s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.315504s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.315548s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.315569s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.315589s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.315601s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.315635s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.315643s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                        ├─   0.315651s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        ├─   0.315658s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                        ├─   0.315666s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.315688s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.315731s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.315760s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.315782s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.315794s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.315832s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.315840s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "b"})
                                ├─   0.315849s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.315857s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "b"})
                                ├─   0.315866s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.315873s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "c", "b"})
                                ├─   0.315882s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.315912s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.315965s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.315996s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.316020s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.316033s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.316093s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.316107s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c", "b"})
                                        ├─   0.316117s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.316126s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c", "b"})
                                        ├─   0.316136s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.316144s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "a", "c", "b"})
                                        ├─   0.316154s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.316162s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c", "b"})
                                        ├─   0.316173s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.316182s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.316209s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.316233s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.316254s   0ms DEBUG Paths for id
                                  ├─   0.316266s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.316275s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.316290s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.316299s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.316320s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.316355s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.316375s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.316405s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.316468s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.316494s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.316517s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.316527s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.316550s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                                ├─   0.316563s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.316573s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.316595s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.316616s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.316636s   0ms DEBUG Paths for id
                          ├─   0.316646s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.316657s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.316665s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.316677s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.316685s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.316703s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.316733s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.316751s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.316778s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.316833s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.316856s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.316876s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.316886s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.316905s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                        ├─   0.316915s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.316939s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.316982s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.317006s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.317028s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.317038s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.317077s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.317086s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                                ├─   0.317095s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.317103s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                                ├─   0.317111s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.317136s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.317182s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.317207s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.317231s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.317243s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.317285s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.317295s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c", "b"})
                                        ├─   0.317304s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.317313s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c", "b"})
                                        ├─   0.317323s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.317331s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "a", "c", "b"})
                                        ├─   0.317341s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.317350s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c", "b"})
                                        ├─   0.317360s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.317369s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.317390s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.317412s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.317432s   0ms DEBUG Paths for id
                                  ├─   0.317444s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.317453s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.317485s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.317495s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.317520s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.317556s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.317576s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.317606s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.317686s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.317722s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.317747s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.317759s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.317781s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                                ├─   0.317793s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.317802s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                                ├─   0.317813s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.317822s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.317844s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.317865s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.317885s   0ms DEBUG Paths for id
                          ├─   0.317896s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.317906s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.317915s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.317927s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.317934s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.317952s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.317983s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.318001s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.318028s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.318087s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.318111s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.318132s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.318141s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.318161s   2ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                        ├─   0.318174s   2ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.318181s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                      ┌─┘
                      ├─   0.318202s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                    ┌─┘
                    ├─   0.318224s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                  ┌─┘
                  ├─   0.318243s   2ms DEBUG Paths for id
                  ├─   0.318253s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.318262s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.318272s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.318280s   2ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.318290s   2ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.318297s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.318313s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.318340s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.318356s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.318380s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                  ├─   0.318431s   0ms DEBUG checking edge Product/c -(isExpensive🧩{price})- Boolean/c
                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="isExpensive"}
                    ├─   0.318453s   0ms DEBUG checking requirements {price} for edge 'Product/c -(isExpensive🧩{price})- Boolean/c'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.318492s   0ms INFO return=Ok([])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.318527s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                          ├─   0.318535s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                          ├─   0.318543s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                          ├─   0.318551s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                          ├─   0.318559s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.318582s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.318645s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.318682s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.318707s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.318719s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.318761s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                  ├─   0.318770s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "b"})
                                  ├─   0.318780s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                  ├─   0.318788s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "b"})
                                  ├─   0.318797s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                  ├─   0.318805s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "c", "b"})
                                  ├─   0.318814s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.318841s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                                    └─┐validate_field_requirement{}
                                      └─┐validate_field_requirement{}
                                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.318893s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                            ├─   0.318927s   0ms INFO return=Ok(Some([]))
                                          ┌─┘
                                          ├─   0.318952s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                          ├─   0.318964s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                        ┌─┘
                                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.319007s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                          ├─   0.319017s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c", "b"})
                                          ├─   0.319028s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                          ├─   0.319036s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c", "b"})
                                          ├─   0.319046s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                          ├─   0.319055s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "a", "c", "b"})
                                          ├─   0.319065s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                          ├─   0.319074s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c", "b"})
                                          ├─   0.319085s   0ms DEBUG Finished finding indirect paths, found total of 0
                                          ├─   0.319094s   0ms INFO return=Ok([])
                                        ┌─┘
                                        ├─   0.319116s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                      ┌─┘
                                      ├─   0.319139s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.319159s   0ms DEBUG Paths for id
                                    ├─   0.319172s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                    ├─   0.319181s   0ms DEBUG Found 1 best paths for this leaf requirement
                                    ├─   0.319195s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                    ├─   0.319204s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                  ┌─┘
                                  ├─   0.319225s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                      ├─   0.319259s   0ms DEBUG Building root query tree node: Product/c
                                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                        ├─   0.319279s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                        ┌─┘
                                        ├─   0.319310s   0ms DEBUG No subsequent steps (leaf or end of path)
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=4007}
                                    ├─   0.319373s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                    └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                                      ├─   0.319400s   0ms INFO return=Ok(Some([]))
                                    ┌─┘
                                    ├─   0.319424s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                    ├─   0.319434s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                  ┌─┘
                                  ├─   0.319457s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                                  ├─   0.319470s   0ms DEBUG Finished finding indirect paths, found total of 1
                                  ├─   0.319478s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.319500s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                              ┌─┘
                              ├─   0.319522s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.319543s   0ms DEBUG Paths for id
                            ├─   0.319555s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                            ├─   0.319566s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                            ├─   0.319574s   1ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.319586s   1ms DEBUG path Product/c -(id)- ID/c is valid
                            ├─   0.319594s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                          ┌─┘
                          ├─   0.319612s   1ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                            └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                              ├─   0.319663s   0ms DEBUG Building root query tree node: Product/c
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.319685s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.319726s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=4007}
                            ├─   0.319809s   0ms INFO return=Ok([])
                          ┌─┘
                          ├─   0.319834s   1ms DEBUG No direct paths found
                          ├─   0.319847s   1ms DEBUG going deeper
                          ├─   0.319859s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.319890s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.319938s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.319965s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.319989s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.320000s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.320041s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                  ├─   0.320051s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                                  ├─   0.320060s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                  ├─   0.320068s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                                  ├─   0.320077s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.320104s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                                    └─┐validate_field_requirement{}
                                      └─┐validate_field_requirement{}
                                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.320153s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                            ├─   0.320181s   0ms INFO return=Ok(Some([]))
                                          ┌─┘
                                          ├─   0.320206s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                          ├─   0.320217s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                        ┌─┘
                                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.320260s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                          ├─   0.320269s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c", "b"})
                                          ├─   0.320279s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                          ├─   0.320288s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c", "b"})
                                          ├─   0.320298s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                          ├─   0.320307s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "a", "c", "b"})
                                          ├─   0.320316s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                          ├─   0.320325s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c", "b"})
                                          ├─   0.320336s   0ms DEBUG Finished finding indirect paths, found total of 0
                                          ├─   0.320345s   0ms INFO return=Ok([])
                                        ┌─┘
                                        ├─   0.320367s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                      ┌─┘
                                      ├─   0.320390s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.320411s   0ms DEBUG Paths for id
                                    ├─   0.320423s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                    ├─   0.320432s   0ms DEBUG Found 1 best paths for this leaf requirement
                                    ├─   0.320447s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                    ├─   0.320455s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                  ┌─┘
                                  ├─   0.320476s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                      ├─   0.320511s   0ms DEBUG Building root query tree node: Product/c
                                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                        ├─   0.320531s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                        ┌─┘
                                        ├─   0.320561s   0ms DEBUG No subsequent steps (leaf or end of path)
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=4007}
                                    ├─   0.320624s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                    └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                                      ├─   0.320651s   0ms INFO return=Ok(Some([]))
                                    ┌─┘
                                    ├─   0.320675s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                    ├─   0.320686s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                  ┌─┘
                                  ├─   0.320708s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                                  ├─   0.320720s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                  ├─   0.320728s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                                  ├─   0.320739s   0ms DEBUG Finished finding indirect paths, found total of 1
                                  ├─   0.320748s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.320770s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                              ┌─┘
                              ├─   0.320792s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.320813s   0ms DEBUG Paths for id
                            ├─   0.320824s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                            ├─   0.320835s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                            ├─   0.320844s   0ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.320856s   0ms DEBUG path Product/c -(id)- ID/c is valid
                            ├─   0.320863s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                          ┌─┘
                          ├─   0.320884s   2ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                            └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                              ├─   0.320916s   0ms DEBUG Building root query tree node: Product/c
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.320935s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.320963s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=4007}
                            ├─   0.321019s   0ms DEBUG checking edge Product/a -(price)- Float/a
                            └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="price"}
                              ├─   0.321044s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.321066s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(price)- Float/a
                            ├─   0.321076s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(8)" }])
                          ┌─┘
                          ├─   0.321096s   2ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                          ├─   0.321107s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                          ├─   0.321115s   2ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "b"})
                          ├─   0.321123s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                          ├─   0.321130s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "b"})
                          ├─   0.321138s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                          ├─   0.321145s   2ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "c", "b"})
                          ├─   0.321153s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                          ├─   0.321164s   2ms DEBUG Ignoring. Already visited similar edge
                          ├─   0.321175s   2ms DEBUG Finished finding indirect paths, found total of 1
                          ├─   0.321182s   2ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(8)" }])
                        ┌─┘
                        ├─   0.321203s   2ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(8)" }], [])))
                      ┌─┘
                      ├─   0.321221s   2ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(8)" }], [])))
                    ┌─┘
                    ├─   0.321239s   2ms DEBUG Paths for price
                    ├─   0.321250s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.321257s   2ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.321269s   2ms DEBUG path Product/c -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.321276s   2ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(28) --> EdgeIndex(8)" }]))
                  ┌─┘
                  ├─   0.321298s   2ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(isExpensive🧩{price})- Boolean/c
                  └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(28) --> EdgeIndex(8)" }, root_node="Product/c"}
                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=2}
                      ├─   0.321351s   0ms DEBUG Building root query tree node: Product/c
                      └─┐from_path_segment_sequences{current_index=0, total_segments=2}
                        ├─   0.321370s   0ms DEBUG Processing edge: Product/c -(🔑🧩{id})- Product/a
                        └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                          ├─   0.321386s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
                          └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                          ┌─┘
                          ├─   0.321414s   0ms DEBUG No subsequent steps (leaf or end of path)
                        ┌─┘
                        ├─   0.321430s   0ms DEBUG Adding subsequent step as child
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.321465s   3ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(15)" }])
                ┌─┘
                ├─   0.321484s   6ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                ├─   0.321494s   6ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.321518s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.321557s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.321578s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.321597s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.321607s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.321642s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.321650s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "b"})
                        ├─   0.321658s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.321681s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.321723s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.321747s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.321769s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.321780s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.321844s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.321855s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "b", "c"})
                                ├─   0.321864s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.321872s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "b", "c"})
                                ├─   0.321881s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.321888s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "b", "c"})
                                ├─   0.321897s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.321930s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.321993s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.322019s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.322045s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.322058s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.322128s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.322140s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "b", "c"})
                                        ├─   0.322150s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.322159s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "b", "c"})
                                        ├─   0.322168s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.322177s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "a", "b", "c"})
                                        ├─   0.322186s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.322195s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "b", "c"})
                                        ├─   0.322206s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.322215s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.322238s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.322261s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.322281s   0ms DEBUG Paths for id
                                  ├─   0.322293s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.322301s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.322315s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.322324s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.322344s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.322379s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.322399s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.322429s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.322524s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.322552s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.322575s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.322586s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.322608s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                                ├─   0.322622s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.322630s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.322652s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.322673s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.322692s   1ms DEBUG Paths for id
                          ├─   0.322703s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.322714s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.322722s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.322734s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.322742s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.322760s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.322790s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.322808s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.322836s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.322890s   0ms DEBUG checking edge Product/c -(id)- ID/c
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.322913s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.322934s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                          ├─   0.322943s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.322962s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                        ├─   0.322995s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        ├─   0.323008s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "b"})
                        ├─   0.323017s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.323048s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.323092s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.323117s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.323141s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.323153s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.323192s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.323200s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "b"})
                                ├─   0.323209s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.323234s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.323304s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.323332s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.323358s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.323372s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.323413s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.323423s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "b", "c"})
                                        ├─   0.323434s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.323442s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "b", "c"})
                                        ├─   0.323452s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.323460s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "a", "b", "c"})
                                        ├─   0.323470s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.323478s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "b", "c"})
                                        ├─   0.323489s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.323498s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.323520s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.323542s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.323562s   0ms DEBUG Paths for id
                                  ├─   0.323573s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.323582s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.323596s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.323604s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.323625s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.323658s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.323678s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.323708s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.323781s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.323807s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.323830s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.323841s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                ├─   0.323862s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                                ├─   0.323874s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.323882s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "d", "b"})
                                ├─   0.323891s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.323899s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "b"})
                                ├─   0.323909s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.323917s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                              ┌─┘
                              ├─   0.323939s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                            ┌─┘
                            ├─   0.323960s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                          ┌─┘
                          ├─   0.323995s   0ms DEBUG Paths for id
                          ├─   0.324010s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.324021s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.324030s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.324042s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.324050s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.324070s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.324102s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.324120s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.324148s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.324206s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.324231s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.324251s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.324261s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.324280s   2ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                        ├─   0.324294s   2ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.324302s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.324323s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.324343s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.324363s   2ms DEBUG Paths for id
                  ├─   0.324373s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.324382s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.324391s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.324399s   2ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.324410s   2ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.324416s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.324432s   8ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.324459s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.324475s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.324499s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                  ├─   0.324547s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.324562s   9ms DEBUG No direct paths found
                ├─   0.324571s   9ms DEBUG going deeper
                ├─   0.324579s   9ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.324600s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.324637s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.324658s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.324677s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.324687s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.324721s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.324729s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                        ├─   0.324737s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.324759s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.324800s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.324824s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.324846s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.324857s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.324894s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.324903s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                                ├─   0.324912s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.324919s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                                ├─   0.324928s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.324953s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.324999s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.325024s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.325048s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.325059s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.325099s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.325109s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c", "b"})
                                        ├─   0.325118s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.325127s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c", "b"})
                                        ├─   0.325137s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.325145s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "a", "c", "b"})
                                        ├─   0.325155s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.325164s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c", "b"})
                                        ├─   0.325238s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.325250s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.325277s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.325302s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.325322s   0ms DEBUG Paths for id
                                  ├─   0.325336s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.325345s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.325359s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.325367s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.325387s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.325423s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.325443s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.325473s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.325535s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.325561s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.325584s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.325595s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.325617s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                                ├─   0.325628s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.325637s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                                ├─   0.325648s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.325656s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.325678s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.325698s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.325717s   0ms DEBUG Paths for id
                          ├─   0.325728s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.325739s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.325747s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.325758s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.325766s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.325784s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.325814s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.325831s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.325858s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.325913s   0ms DEBUG checking edge Product/c -(id)- ID/c
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.325936s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.325956s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                          ├─   0.325966s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.325985s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                        ├─   0.325995s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.326018s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.326061s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.326084s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.326106s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.326116s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.326172s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.326183s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "b"})
                                ├─   0.326192s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.326222s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.326270s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.326295s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.326320s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.326333s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.326375s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.326385s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "b", "c"})
                                        ├─   0.326395s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.326403s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "b", "c"})
                                        ├─   0.326413s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.326421s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "a", "b", "c"})
                                        ├─   0.326431s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.326439s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "b", "c"})
                                        ├─   0.326450s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.326459s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.326480s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.326508s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.326531s   0ms DEBUG Paths for id
                                  ├─   0.326545s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.326556s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.326583s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.326593s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.326618s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.326657s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.326677s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.326706s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.326767s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.326792s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.326815s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.326825s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                ├─   0.326847s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                                ├─   0.326859s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.326868s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "d", "b"})
                                ├─   0.326876s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.326884s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "b"})
                                ├─   0.326895s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.326903s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                              ┌─┘
                              ├─   0.326924s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                            ┌─┘
                            ├─   0.326945s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                          ┌─┘
                          ├─   0.326964s   0ms DEBUG Paths for id
                          ├─   0.326975s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.326985s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.326994s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.327019s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.327029s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.327051s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.327083s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.327101s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.327129s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.327202s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.327235s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.327258s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.327269s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.327289s   2ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                        ├─   0.327301s   2ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        ├─   0.327309s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                        ├─   0.327320s   2ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.327327s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.327349s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.327375s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.327395s   2ms DEBUG Paths for id
                  ├─   0.327405s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.327414s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.327424s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.327432s   2ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.327443s   2ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.327450s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.327466s  12ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.327493s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.327510s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.327533s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                  ├─   0.327582s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.327597s  12ms DEBUG No direct paths found
                ├─   0.327606s  12ms DEBUG going deeper
                ├─   0.327616s  12ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
                ├─   0.327622s  12ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                ├─   0.327630s  12ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                ├─   0.327639s  12ms DEBUG Ignoring. Already visited similar edge
                ├─   0.327645s  12ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                ├─   0.327652s  12ms DEBUG Ignoring. Already visited similar edge
                ├─   0.327659s  12ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                ├─   0.327665s  12ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                ├─   0.327674s  12ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                ├─   0.327680s  12ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "b"})
                ├─   0.327687s  12ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                ├─   0.327693s  12ms DEBUG Ignoring. Already visited similar edge
                ├─   0.327700s  12ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                ├─   0.327706s  12ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "b"})
                ├─   0.327712s  12ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                ├─   0.327719s  12ms DEBUG Ignoring. Already visited similar edge
                ├─   0.327728s  12ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.327734s  12ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(15)" }])
              ┌─┘
              ├─   0.327754s  12ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(15)" }], [])))
            ┌─┘
            ├─   0.327770s  12ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(15)" }], [])))
          ┌─┘
          ├─   0.327784s  12ms DEBUG Paths for isExpensive
          ├─   0.327795s  12ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(isExpensive🧩{price})- Boolean/c is valid
          ├─   0.327801s  12ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.327813s  12ms DEBUG path Product/d -(🔑🧩{id})- Product/c -(isExpensive🧩{price})- Boolean/c is valid
          ├─   0.327819s  12ms INFO return=Ok(Some([ { cost: 1005, egdes: "EdgeIndex(34) --> EdgeIndex(15)" }]))
        ┌─┘
        ├─   0.327837s  12ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(canAfford🧩{isExpensive})- Boolean/d
        └─┐from_path{path= { cost: 1005, egdes: "EdgeIndex(34) --> EdgeIndex(15)" }, root_node="Product/d"}
          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=2}
            ├─   0.327862s   0ms DEBUG Building root query tree node: Product/d
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.327876s   0ms DEBUG Processing edge: Product/d -(🔑🧩{id})- Product/c
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.327890s   0ms DEBUG Processing edge: Product/c -(isExpensive🧩{price})- Boolean/c
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.327911s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.327924s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.327953s  12ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(19)" }])
      ┌─┘
      ├─   0.327971s  15ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
      ├─   0.327979s  15ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.327997s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.328029s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.328045s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.328062s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.328070s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.328099s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.328117s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.328151s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.328169s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.328187s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.328196s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.328227s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.328234s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                      ├─   0.328242s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.328249s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                      ├─   0.328256s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.328264s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.328271s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.328290s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.328350s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.328380s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.328403s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.328416s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.328452s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.328461s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.328470s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.328477s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.328486s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.328494s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.328502s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.328509s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.328519s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.328527s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.328545s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.328564s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.328582s   0ms DEBUG Paths for id
                        ├─   0.328592s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.328599s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.328612s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.328619s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.328637s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.328667s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.328684s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.328710s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.328761s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.328783s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.328802s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.328812s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.328830s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.328845s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.328852s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.328871s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.328888s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.328905s   0ms DEBUG Paths for id
                ├─   0.328914s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.328923s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.328930s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.328940s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.328961s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.328986s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.329017s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.329033s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.329056s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.329104s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.329124s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.329141s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.329151s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.329167s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.329177s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              ├─   0.329184s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.329191s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.329197s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.329203s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.329222s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.329258s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.329300s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.329322s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.329333s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.329367s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.329388s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.329427s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.329450s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.329470s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.329480s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.329514s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.329523s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.329532s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.329539s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.329548s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.329555s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.329564s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.329571s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.329581s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.329589s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.329607s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.329626s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.329643s   0ms DEBUG Paths for id
                        ├─   0.329653s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.329660s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.329673s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.329680s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.329697s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.329727s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.329744s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.329770s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.329820s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.329843s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.329862s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.329872s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.329890s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.329900s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.329907s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.329915s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.329922s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.329929s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.329936s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.329945s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.329951s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.329970s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.329988s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.330005s   0ms DEBUG Paths for id
                ├─   0.330014s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.330022s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.330030s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.330040s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.330046s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.330061s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.330088s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.330103s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.330126s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.330171s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.330190s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.330207s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.330216s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.330232s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.330244s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.330250s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.330267s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.330284s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.330301s   2ms DEBUG Paths for id
        ├─   0.330309s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.330316s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.330324s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.330331s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.330340s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.330345s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.330359s  17ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.330382s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.330395s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.330414s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.330454s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.330466s  17ms DEBUG No direct paths found
      ├─   0.330474s  17ms DEBUG going deeper
      ├─   0.330481s  17ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.330487s  17ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.330505s  17ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.330547s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.330583s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.330601s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.330619s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.330629s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.330659s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.330677s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.330711s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.330729s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.330747s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.330756s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.330786s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.330794s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                      ├─   0.330802s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.330821s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.330859s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.330882s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.330902s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.330912s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.330946s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.330955s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                              ├─   0.330963s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.330971s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                              ├─   0.330979s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.330987s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.330995s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.331003s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                              ├─   0.331012s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.331021s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.331040s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.331059s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.331076s   0ms DEBUG Paths for id
                        ├─   0.331085s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.331093s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.331106s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.331113s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.331130s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.331159s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.331177s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.331202s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.331254s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.331277s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.331296s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.331306s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.331324s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.331334s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.331342s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.331349s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.331356s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                      ├─   0.331365s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.331372s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.331390s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.331427s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.331448s   0ms DEBUG Paths for id
                ├─   0.331459s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.331468s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.331476s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.331487s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.331494s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.331509s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.331538s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.331553s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.331576s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.331623s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.331643s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.331660s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.331685s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.331701s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.331710s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.331753s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.331804s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.331831s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.331852s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.331873s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.331919s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.331960s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.332014s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.332045s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.332068s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.332079s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.332117s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.332134s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.332143s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.332150s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.332159s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.332167s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.332175s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.332183s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.332192s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.332200s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.332219s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.332238s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.332255s   0ms DEBUG Paths for id
                        ├─   0.332265s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.332272s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.332285s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.332298s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.332315s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.332345s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.332362s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.332388s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.332439s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.332461s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.332481s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.332491s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.332509s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.332519s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.332527s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.332534s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.332541s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.332549s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.332555s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.332564s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.332571s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.332590s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.332607s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.332624s   0ms DEBUG Paths for id
                ├─   0.332632s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.332641s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.332648s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.332659s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.332679s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.332716s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.332749s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.332765s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.332789s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.332841s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.332861s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.332878s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.332888s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.332925s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.332940s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.332949s   2ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.332955s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              ├─   0.332962s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.332971s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.332999s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.333027s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.333057s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.333078s   2ms DEBUG Paths for id
        ├─   0.333088s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.333108s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.333118s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.333126s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.333136s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.333142s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.333160s  20ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.333202s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.333218s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.333240s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
        ├─   0.333285s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.333298s  20ms DEBUG No direct paths found
      ├─   0.333306s  20ms DEBUG going deeper
      ├─   0.333314s  20ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
      ├─   0.333322s  20ms DEBUG Ignoring. Already visited similar edge
      ├─   0.333328s  20ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      ├─   0.333333s  20ms DEBUG Ignoring. Already visited similar edge
      ├─   0.333339s  20ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      ├─   0.333344s  20ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.333349s  20ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.333355s  20ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.333362s  20ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
      ├─   0.333368s  20ms DEBUG Ignoring. Already visited similar edge
      ├─   0.333374s  20ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
      ├─   0.333379s  20ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.333385s  20ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
      ├─   0.333397s  20ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.333406s  20ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
      ├─   0.333413s  20ms DEBUG Ignoring. Already visited similar edge
      ├─   0.333422s  20ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.333427s  20ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(19)" }])
    ┌─┘
    ├─   0.333448s  20ms DEBUG Indirect paths found: 1
    ├─   0.333459s  20ms DEBUG advanced: root(Query) -(b)- Query/b -(product)- Product/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(19)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.333506s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.333519s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.333530s   0ms DEBUG Processing edge: Query/b -(product)- Product/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.333542s   0ms DEBUG Processing edge: Product/b -(🔑🧩{id})- Product/d
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.333555s   0ms DEBUG Processing edge: Product/d -(canAfford🧩{isExpensive})- Boolean/d
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.333575s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.333586s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.333597s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.333607s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="product", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.333778s   0ms DEBUG adding output field 'product' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/b -(🔑🧩{id})- Product/d", parent_fetch_step_index=1}
              ├─   0.333820s   0ms DEBUG created a new fetch step [2] subgraph(d) type(Product) requirement() key({id}) in children of 1
              ├─   0.333829s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.333837s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.333845s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path="product"}
                      ├─   0.333902s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.333925s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/d"}
                    └─┐can_satisfy_edge{path="Product/d", edge="id"}
                      ├─   0.334049s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/d'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/d", current_cost=0}
                            ├─   0.334088s   0ms DEBUG checking edge Product/d -(id)- ID/d
                            └─┐can_satisfy_edge{path="Product/d", edge="id"}
                              ├─   0.334114s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.334132s   0ms DEBUG Advancing path Product/d with edge Product/d -(id)- ID/d
                            ├─   0.334143s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(17)" }])
                          ┌─┘
                          ├─   0.334165s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(17)" }], [])))
                        ┌─┘
                        ├─   0.334182s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(17)" }], [])))
                      ┌─┘
                      ├─   0.334198s   0ms DEBUG Paths for id
                      ├─   0.334207s   0ms DEBUG   Path Product/d -(id)- ID/d is valid
                      ├─   0.334215s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.334226s   0ms DEBUG path Product/d -(id)- ID/d is valid
                      ├─   0.334233s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.334260s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.334269s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.334281s   0ms DEBUG created a new fetch step [3] subgraph(d) type(Product) requirement({isExpensive}) in children of 1
                  ├─   0.334291s   0ms DEBUG Adding {isExpensive} to fetch([3]).input
                  ├─   0.334300s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.334308s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.334317s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.334347s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/d -(🔑🧩{id})- Product/c", parent_fetch_step_index=4}
                        ├─   0.334414s   0ms DEBUG created a new fetch step [5] subgraph(c) type(Product) requirement() key({id}) in children of 4
                        ├─   0.334425s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                        ├─   0.334433s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.334442s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                ├─   0.334513s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.334541s   0ms DEBUG adding output field 'id' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_requires_field_edge{parent_fetch_step_index=5}
                            └─┐find_satisfiable_key{node="Product/c"}
                              └─┐can_satisfy_edge{path="Product/c", edge="id"}
                                ├─   0.334676s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                                └─┐validate_field_requirement{}
                                  └─┐validate_field_requirement{}
                                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/c", current_cost=0}
                                      ├─   0.334721s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                      └─┐can_satisfy_edge{path="Product/c", edge="id"}
                                        ├─   0.334745s   0ms INFO return=Ok(Some([]))
                                      ┌─┘
                                      ├─   0.334767s   0ms DEBUG Advancing path Product/c with edge Product/c -(id)- ID/c
                                      ├─   0.334780s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(13)" }])
                                    ┌─┘
                                    ├─   0.334804s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.334824s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                                ┌─┘
                                ├─   0.334871s   0ms DEBUG Paths for id
                                ├─   0.334889s   0ms DEBUG   Path Product/c -(id)- ID/c is valid
                                ├─   0.334898s   0ms DEBUG Found 1 best paths for this leaf requirement
                                ├─   0.334912s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                ├─   0.334920s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                              ┌─┘
                            ┌─┘
                            ├─   0.334954s   0ms DEBUG Key to re-enter: {id}
                            ├─   0.334965s   0ms DEBUG Creating a fetch step for children of @requires
                            ├─   0.334977s   0ms DEBUG created a new fetch step [6] subgraph(c) type(Product) requirement({price}) in children of 4
                            ├─   0.334988s   0ms DEBUG Adding {price} to fetch([6]).input
                            ├─   0.334997s   0ms DEBUG Adding {id} to fetch([6]).input
                            ├─   0.335005s   0ms DEBUG Creating a fetch step for requirement of @requires
                            ├─   0.335013s   0ms DEBUG Adding {id} to fetch([7]).input
                            └─┐connect{parent=4, child=7}
                            ┌─┘
                            ├─   0.335049s   0ms DEBUG Processing requirements
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7}
                                └─┐process_entity_move_edge{edge="Product/c -(🔑🧩{id})- Product/a", parent_fetch_step_index=7}
                                  ├─   0.335099s   0ms DEBUG created a new fetch step [8] subgraph(a) type(Product) requirement() key({id}) in children of 7
                                  ├─   0.335109s   0ms DEBUG adding input requirement '{id}' to fetch step [8]
                                  ├─   0.335119s   0ms DEBUG adding __typename field to output for type 'Product'
                                  ├─   0.335128s   0ms DEBUG connecting fetch step to parent [7] -> [8]
                                  └─┐connect{parent=7, child=8}
                                  ┌─┘
                                  └─┐process_requirements_for_fetch_steps{count=1}
                                    └─┐process_noop_edge{}
                                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                        └─┐process_plain_field_edge{parent_fetch_step_index=7, requiring_fetch_step_index=8, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                          ├─   0.335250s   0ms DEBUG connecting parent fetch step [7] to requiring fetch step [8]
                                          └─┐connect{parent=7, child=8}
                                          ┌─┘
                                          ├─   0.335291s   0ms DEBUG adding output field 'id' to fetch step [7]
                                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                          ┌─┘
                                        ┌─┘
                                      ┌─┘
                                    ┌─┘
                                    └─┐connect{parent=7, child=8}
                                    ┌─┘
                                  ┌─┘
                                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=8}
                                    └─┐process_plain_field_edge{parent_fetch_step_index=8, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path=""}
                                      ├─   0.335422s   0ms DEBUG adding output field 'price' to fetch step [8]
                                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=8}
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            ├─   0.335517s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                            └─┐connect{parent=8, child=6}
                            ┌─┘
                            ├─   0.335549s   0ms DEBUG Processing children
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.335615s   1ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=6, child=3}
                  ┌─┘
                  ├─   0.335637s   1ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.335713s   2ms DEBUG Done
├─   0.335721s   2ms DEBUG found roots
├─   0.335726s   2ms DEBUG print graph
├─   0.335731s   2ms DEBUG Nodes:
│ [1] Query/b {} → {product{__typename id}} at $.
│ [2] Product/d {__typename id} → {} at $.product
│ [3] Product/d {__typename isExpensive id} → {canAfford} at $.product
│ [4] Product/d {__typename id} → {__typename id} at $.product
│ [5] Product/c {__typename id} → {} at $.product
│ [6] Product/c {__typename price id} → {isExpensive} at $.product
│ [7] Product/c {__typename id} → {__typename id} at $.product
│ [8] Product/a {__typename id} → {price} at $.product
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│     [7]
│       [8]
│         [6]
│           [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.335780s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.335796s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=7}
      ┌─┘
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
    ├─   0.335842s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [7]
    └─┐perform_passthrough_child_merge{}
      ├─   0.335854s   0ms DEBUG merging fetch steps [1] and [7]
      └─┐connect{parent=1, child=8}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.335938s   0ms DEBUG optimization found: remove 'Product/d {__typename id} → {} at $.product'
    ├─   0.335946s   0ms DEBUG optimization found: remove 'Product/c {__typename id} → {} at $.product'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="b"}
      └─┐execute{subgraph_name="b"}
        ├─   0.336462s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.336860s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.337239s   1ms DEBUG connected to 127.0.0.1:4200
        ├─   0.342410s   6ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.342850s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.346388s   3ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(699.99)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.346806s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.350845s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Bool(true)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="d"}
        └─┐execute{subgraph_name="d"}
          ├─   0.351230s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.355324s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.355785s DEBUG execution result: ExecutionResult { data: Some(Object {"product": Object {"canAfford": Bool(false)}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{product{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{price}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{isExpensive}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("d"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{canAfford}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("isExpensive")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.362767s DEBUG original document: query {
  product {
    isExpensive
  }
}

   0.362878s DEBUG normalized document: query{product{isExpensive}}

   0.362900s DEBUG executable operation: query{product{isExpensive}}
┐walk_operation{}
├─   0.363271s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="product", leaf=false}
  ├─   0.363327s   0ms DEBUG Trying to advance to: product{isExpensive} through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.363387s   0ms DEBUG checking edge Query/b -(product)- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="product"}
        ├─   0.363410s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.363437s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(product)- Product/b
      ├─   0.363449s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.363465s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.363494s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.363500s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.363512s   0ms DEBUG Indirect paths found: 0
    ├─   0.363519s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.363533s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="isExpensive", leaf=true}
  ├─   0.363554s   0ms DEBUG Trying to advance to: isExpensive through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(product)- Product/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.363580s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.363591s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.363608s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.363627s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.363668s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.363687s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.363703s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.363712s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.363742s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              ├─   0.363750s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
              ├─   0.363758s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.363777s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.363822s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.363843s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.363862s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.363871s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.363902s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.363910s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                      ├─   0.363918s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.363924s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                      ├─   0.363932s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.363939s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.363947s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.363977s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.364023s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.364061s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.364082s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.364093s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.364127s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.364136s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.364144s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.364152s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.364160s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.364168s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.364207s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.364218s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.364229s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.364237s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.364264s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.364288s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.364305s   0ms DEBUG Paths for id
                        ├─   0.364316s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.364325s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.364343s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.364351s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.364369s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.364404s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.364423s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.364450s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.364512s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.364535s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.364554s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.364565s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.364584s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.364595s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.364602s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.364621s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.364638s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.364655s   0ms DEBUG Paths for id
                ├─   0.364663s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.364672s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.364680s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.364690s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.364697s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.364713s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.364739s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.364754s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.364777s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.364824s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.364843s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.364860s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.364869s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.364885s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.364894s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.364900s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.364907s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.364926s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.364961s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.364979s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.364997s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.365006s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.365037s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.365045s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                      ├─   0.365052s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.365072s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.365113s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.365136s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.365157s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.365167s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.365201s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.365226s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.365240s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.365247s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.365256s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.365264s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.365272s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.365279s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.365291s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.365299s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.365323s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.365345s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.365362s   0ms DEBUG Paths for id
                        ├─   0.365372s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.365380s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.365393s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.365400s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.365419s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.365465s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.365482s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.365508s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.365560s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.365583s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.365602s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.365612s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.365630s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.365640s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.365647s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.365654s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.365661s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                      ├─   0.365671s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.365678s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.365696s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.365714s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.365731s   0ms DEBUG Paths for id
                ├─   0.365740s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.365748s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.365755s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.365765s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.365772s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.365787s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.365813s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.365828s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.365851s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.365896s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.365915s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.365932s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.365941s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.365957s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.365969s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.365976s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.365994s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.366011s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.366027s   2ms DEBUG Paths for id
        ├─   0.366035s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.366043s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.366050s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.366057s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.366066s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.366071s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.366086s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.366109s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.366122s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.366141s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
        ├─   0.366182s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.366194s   2ms DEBUG No direct paths found
      ├─   0.366204s   2ms DEBUG going deeper
      ├─   0.366212s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.366228s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.366262s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.366279s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.366296s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.366304s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.366333s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.366375s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.366416s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.366435s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.366455s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.366466s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.366498s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.366506s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                      ├─   0.366514s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.366520s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                      ├─   0.366528s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.366535s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.366542s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.366562s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.366602s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.366625s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.366646s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.366656s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.366690s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.366699s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.366707s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.366715s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.366723s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.366731s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.366739s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.366746s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.366756s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.366764s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.366782s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.366801s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.366818s   0ms DEBUG Paths for id
                        ├─   0.366828s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.366835s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.366848s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.366855s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.366872s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.366901s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.366918s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.366944s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.366994s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.367016s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.367035s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.367045s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.367063s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.367074s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.367081s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.367098s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.367116s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.367132s   0ms DEBUG Paths for id
                ├─   0.367141s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.367149s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.367157s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.367166s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.367173s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.367188s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.367214s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.367229s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.367251s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.367296s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.367315s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.367332s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.367341s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.367357s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.367365s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              ├─   0.367372s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.367379s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.367385s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.367391s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.367409s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.367444s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.367461s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.367479s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.367488s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.367519s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.367538s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.367576s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.367601s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.367623s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.367633s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.367666s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.367675s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "a"})
                              ├─   0.367684s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.367691s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "a"})
                              ├─   0.367699s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.367707s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.367715s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.367723s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "c", "a"})
                              ├─   0.367732s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.367739s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.367758s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.367776s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.367793s   0ms DEBUG Paths for id
                        ├─   0.367803s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.367810s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.367822s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.367829s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.367846s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.367875s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.367892s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.367917s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.367967s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.367988s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.368007s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.368017s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.368035s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.368044s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.368052s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                      ├─   0.368059s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.368066s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.368073s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.368080s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                      ├─   0.368089s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.368096s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.368114s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.368131s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.368147s   0ms DEBUG Paths for id
                ├─   0.368156s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.368165s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.368172s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.368182s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.368188s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.368203s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.368229s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.368244s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.368266s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.368311s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.368329s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.368351s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.368360s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.368377s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.368388s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.368395s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.368413s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.368431s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.368448s   2ms DEBUG Paths for id
        ├─   0.368456s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.368464s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.368472s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.368479s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.368488s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.368494s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.368508s   4ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.368557s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.368573s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.368596s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.368643s   0ms DEBUG checking edge Product/c -(isExpensive🧩{price})- Boolean/c
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="isExpensive"}
          ├─   0.368663s   0ms DEBUG checking requirements {price} for edge 'Product/c -(isExpensive🧩{price})- Boolean/c'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.368697s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.368727s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.368767s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.368816s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.368839s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.368861s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.368873s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.368909s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                        ├─   0.368917s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                        ├─   0.368926s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.368933s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                        ├─   0.368941s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.368964s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.369008s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.369040s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.369063s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.369075s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.369114s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                ├─   0.369123s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "c", "d"})
                                ├─   0.369132s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.369140s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c", "d"})
                                ├─   0.369149s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.369157s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c", "d"})
                                ├─   0.369166s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.369215s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.369285s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                          ├─   0.369318s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.369345s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                        ├─   0.369359s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.369404s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                        ├─   0.369419s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c", "b"})
                                        ├─   0.369430s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                        ├─   0.369439s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c", "b"})
                                        ├─   0.369449s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                        ├─   0.369460s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "a", "c", "b"})
                                        ├─   0.369470s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                        ├─   0.369479s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c", "b"})
                                        ├─   0.369490s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.369513s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.369542s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.369567s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.369589s   0ms DEBUG Paths for id
                                  ├─   0.369603s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                  ├─   0.369613s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.369641s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                  ├─   0.369653s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                ┌─┘
                                ├─   0.369680s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                    ├─   0.369719s   0ms DEBUG Building root query tree node: Product/c
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.369741s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.369773s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.369838s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.369865s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.369889s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.369900s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.369923s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                                ├─   0.369937s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.369945s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.369968s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.369990s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.370011s   1ms DEBUG Paths for id
                          ├─   0.370022s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.370033s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.370041s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.370053s   1ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.370061s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                        ┌─┘
                        ├─   0.370079s   1ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.370111s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.370129s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.370158s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.370214s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.370238s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.370259s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.370269s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.370289s   1ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                        ├─   0.370299s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.370323s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.370367s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.370397s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.370420s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.370431s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.370477s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                ├─   0.370486s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                                ├─   0.370496s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.370504s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                                ├─   0.370513s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.370539s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.370586s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                          ├─   0.370614s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.370638s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                        ├─   0.370651s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.370706s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                        ├─   0.370733s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "b", "c", "a"})
                                        ├─   0.370748s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                        ├─   0.370757s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "b", "c", "a"})
                                        ├─   0.370767s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                        ├─   0.370776s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "b", "c", "a"})
                                        ├─   0.370786s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                        ├─   0.370795s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "b", "c", "a"})
                                        ├─   0.370807s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.370816s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.370844s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.370870s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.370892s   0ms DEBUG Paths for id
                                  ├─   0.370905s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                  ├─   0.370914s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.370929s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                  ├─   0.370938s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                ┌─┘
                                ├─   0.370959s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                    ├─   0.371020s   0ms DEBUG Building root query tree node: Product/c
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.371043s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.371076s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.371160s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.371197s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.371223s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.371235s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.371278s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                                ├─   0.371293s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.371303s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                                ├─   0.371315s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.371323s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.371349s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.371371s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.371392s   1ms DEBUG Paths for id
                          ├─   0.371404s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.371415s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.371424s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.371437s   1ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.371458s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                        ┌─┘
                        ├─   0.371486s   2ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.371521s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.371539s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.371569s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.371631s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.371656s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.371678s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.371688s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.371709s   2ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                        ├─   0.371723s   2ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.371730s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                      ┌─┘
                      ├─   0.371752s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                    ┌─┘
                    ├─   0.371774s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                  ┌─┘
                  ├─   0.371794s   3ms DEBUG Paths for id
                  ├─   0.371804s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.371814s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.371824s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.371832s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.371844s   3ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.371851s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                ┌─┘
                ├─   0.371867s   3ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/d
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.371904s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.371920s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.371944s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", current_cost=3005}
                  ├─   0.371994s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.372009s   3ms DEBUG No direct paths found
                ├─   0.372019s   3ms DEBUG going deeper
                ├─   0.372028s   3ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                ├─   0.372035s   3ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
                ├─   0.372043s   3ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.372065s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.372103s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.372125s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.372146s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.372156s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.372191s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.372214s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.372257s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.372282s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.372304s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.372316s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.372358s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                ├─   0.372368s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "b"})
                                ├─   0.372377s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.372387s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "b"})
                                ├─   0.372396s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.372404s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "c", "b"})
                                ├─   0.372413s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.372449s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.372497s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                          ├─   0.372628s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.372671s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                        ├─   0.372686s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.372733s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                        ├─   0.372743s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "a", "c", "d"})
                                        ├─   0.372754s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                        ├─   0.372764s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "a", "c", "d"})
                                        ├─   0.372774s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                        ├─   0.372782s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a", "c", "d"})
                                        ├─   0.372792s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                        ├─   0.372801s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a", "c", "d"})
                                        ├─   0.372812s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.372822s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.372845s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.372882s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.372909s   0ms DEBUG Paths for id
                                  ├─   0.372923s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                  ├─   0.372932s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.372947s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                  ├─   0.372956s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                ┌─┘
                                ├─   0.372977s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                    ├─   0.373041s   0ms DEBUG Building root query tree node: Product/c
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.373069s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.373197s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.373283s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.373312s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.373337s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.373349s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.373374s   1ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                                ├─   0.373393s   1ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.373402s   1ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.373425s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.373448s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.373469s   1ms DEBUG Paths for id
                          ├─   0.373481s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.373492s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.373502s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.373515s   1ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.373524s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                        ┌─┘
                        ├─   0.373544s   1ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/d
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.373578s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.373597s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.373626s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", current_cost=3005}
                          ├─   0.373685s   0ms DEBUG checking edge Product/d -(id)- ID/d
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", edge="id"}
                            ├─   0.373711s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.373732s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                          ├─   0.373743s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                        ┌─┘
                        ├─   0.373763s   1ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/d
                        ├─   0.373775s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.373786s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                        ├─   0.373795s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        ├─   0.373802s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                        ├─   0.373810s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.373860s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.373916s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.373944s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.373970s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.373984s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.374027s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.374055s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.374107s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                          ├─   0.374154s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.374189s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                        ├─   0.374203s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.374250s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                        ├─   0.374262s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d", "c", "a"})
                                        ├─   0.374273s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                        ├─   0.374282s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "d", "c", "a"})
                                        ├─   0.374292s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                        ├─   0.374301s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d", "c", "a"})
                                        ├─   0.374311s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                        ├─   0.374320s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "d", "c", "a"})
                                        ├─   0.374332s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.374342s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.374366s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.374389s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.374410s   0ms DEBUG Paths for id
                                  ├─   0.374423s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                  ├─   0.374432s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.374448s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                  ├─   0.374457s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                ┌─┘
                                ├─   0.374479s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/d
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                    ├─   0.374515s   0ms DEBUG Building root query tree node: Product/c
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.374537s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.374568s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", current_cost=3005}
                                  ├─   0.374633s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", edge="id"}
                                    ├─   0.374675s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.374699s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                  ├─   0.374711s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                                ┌─┘
                                ├─   0.374761s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/d
                                ├─   0.374778s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.374788s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "b"})
                                ├─   0.374798s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.374806s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "c", "b"})
                                ├─   0.374815s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.374823s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "b"})
                                ├─   0.374836s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.374845s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                              ┌─┘
                              ├─   0.374879s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                            ┌─┘
                            ├─   0.374901s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                          ┌─┘
                          ├─   0.374922s   1ms DEBUG Paths for id
                          ├─   0.374934s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.374945s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.374954s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.374967s   1ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.374988s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                        ┌─┘
                        ├─   0.375017s   2ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.375071s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.375092s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.375123s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.375200s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.375235s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.375259s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.375282s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.375312s   3ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                        ├─   0.375329s   3ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.375337s   3ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.375361s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                    ┌─┘
                    ├─   0.375382s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.375403s   3ms DEBUG Paths for id
                  ├─   0.375414s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.375424s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.375434s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.375443s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.375455s   3ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.375463s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                ┌─┘
                ├─   0.375481s   6ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.375512s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.375529s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.375554s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                  ├─   0.375607s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.375623s   6ms DEBUG No direct paths found
                ├─   0.375634s   6ms DEBUG going deeper
                ├─   0.375644s   6ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.375666s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.375706s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.375728s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.375749s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.375759s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.375795s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.375819s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.375863s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.375888s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.375911s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.375923s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.375962s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                ├─   0.375971s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "a"})
                                ├─   0.375981s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.375989s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "a"})
                                ├─   0.375998s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.376025s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.376075s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                          ├─   0.376101s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.376126s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                        ├─   0.376139s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.376182s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                        ├─   0.376192s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "c", "d"})
                                        ├─   0.376202s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                        ├─   0.376211s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "b", "c", "d"})
                                        ├─   0.376221s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                        ├─   0.376230s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "c", "d"})
                                        ├─   0.376240s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                        ├─   0.376249s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "c", "d"})
                                        ├─   0.376260s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.376270s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.376292s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.376315s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.376336s   0ms DEBUG Paths for id
                                  ├─   0.376348s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                  ├─   0.376357s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.376371s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                  ├─   0.376380s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                ┌─┘
                                ├─   0.376401s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                    ├─   0.376437s   0ms DEBUG Building root query tree node: Product/c
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.376458s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.376490s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.376555s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.376581s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.376605s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.376616s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.376639s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                                ├─   0.376651s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.376660s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "c", "a"})
                                ├─   0.376671s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.376679s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.376702s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.376724s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.376745s   0ms DEBUG Paths for id
                          ├─   0.376757s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.376770s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.376778s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.376790s   0ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.376798s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                        ┌─┘
                        ├─   0.376817s   1ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/d
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.376848s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.376867s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.376897s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", current_cost=3005}
                          ├─   0.376956s   0ms DEBUG checking edge Product/d -(id)- ID/d
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", edge="id"}
                            ├─   0.376985s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.377008s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                          ├─   0.377070s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                        ┌─┘
                        ├─   0.377100s   1ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/d
                        ├─   0.377112s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.377120s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                        ├─   0.377128s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.377172s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.377225s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.377252s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.377277s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.377289s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.377330s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.377357s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.377404s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                          ├─   0.377435s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.377460s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                        ├─   0.377472s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.377514s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                        ├─   0.377524s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c", "b"})
                                        ├─   0.377534s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                        ├─   0.377543s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c", "b"})
                                        ├─   0.377553s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                        ├─   0.377562s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "d", "c", "b"})
                                        ├─   0.377572s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                        ├─   0.377581s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c", "b"})
                                        ├─   0.377592s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.377601s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.377623s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.377645s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.377666s   0ms DEBUG Paths for id
                                  ├─   0.377678s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                  ├─   0.377687s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.377702s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                  ├─   0.377711s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                ┌─┘
                                ├─   0.377731s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/d
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                    ├─   0.377766s   0ms DEBUG Building root query tree node: Product/c
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.377787s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.377818s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", current_cost=3005}
                                  ├─   0.377884s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", edge="id"}
                                    ├─   0.377911s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.377934s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                  ├─   0.377945s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                                ┌─┘
                                ├─   0.377969s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/d
                                ├─   0.377980s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.377989s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c", "a"})
                                ├─   0.377999s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.378007s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c", "a"})
                                ├─   0.378015s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.378023s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "c", "a"})
                                ├─   0.378034s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.378051s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                              ┌─┘
                              ├─   0.378073s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                            ┌─┘
                            ├─   0.378094s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                          ┌─┘
                          ├─   0.378115s   0ms DEBUG Paths for id
                          ├─   0.378126s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.378137s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.378145s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.378157s   1ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.378165s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                        ┌─┘
                        ├─   0.378183s   2ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.378214s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.378232s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.378261s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.378348s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.378375s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.378397s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.378407s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.378428s   2ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                        ├─   0.378440s   2ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        ├─   0.378448s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                        ├─   0.378460s   2ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.378467s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.378490s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                    ┌─┘
                    ├─   0.378520s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.378540s   2ms DEBUG Paths for id
                  ├─   0.378550s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.378560s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.378570s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.378578s   2ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.378590s   2ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.378600s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                ┌─┘
                ├─   0.378618s   9ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.378647s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.378663s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.378689s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                  ├─   0.378760s   0ms DEBUG checking edge Product/a -(price)- Float/a
                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="price"}
                    ├─   0.378792s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.378815s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(price)- Float/a
                  ├─   0.378838s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(8)" }])
                ┌─┘
                ├─   0.378878s  10ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                ├─   0.378893s  10ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                ├─   0.378905s  10ms DEBUG Ignoring. Already visited similar edge
                ├─   0.378914s  10ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                ├─   0.378920s  10ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                ├─   0.378928s  10ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                ├─   0.378935s  10ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                ├─   0.378942s  10ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                ├─   0.378949s  10ms DEBUG Ignoring. Already visited similar edge
                ├─   0.378958s  10ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                ├─   0.378965s  10ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                ├─   0.378972s  10ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                ├─   0.378978s  10ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                ├─   0.378986s  10ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                ├─   0.378993s  10ms DEBUG Ignoring. Already visited similar edge
                ├─   0.379000s  10ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                ├─   0.379006s  10ms DEBUG Ignoring. Already visited similar edge
                ├─   0.379016s  10ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.379034s  10ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(8)" }])
              ┌─┘
              ├─   0.379064s  10ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(8)" }], [])))
            ┌─┘
            ├─   0.379081s  10ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.379097s  10ms DEBUG Paths for price
          ├─   0.379110s  10ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(price)- Float/a is valid
          ├─   0.379116s  10ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.379130s  10ms DEBUG path Product/c -(🔑🧩{id})- Product/a -(price)- Float/a is valid
          ├─   0.379137s  10ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(28) --> EdgeIndex(8)" }]))
        ┌─┘
        ├─   0.379156s  10ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(isExpensive🧩{price})- Boolean/c
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(28) --> EdgeIndex(8)" }, root_node="Product/c"}
          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=2}
            ├─   0.379185s   0ms DEBUG Building root query tree node: Product/c
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.379200s   0ms DEBUG Processing edge: Product/c -(🔑🧩{id})- Product/a
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.379214s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.379237s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.379250s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.379283s  10ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(15)" }])
      ┌─┘
      ├─   0.379320s  15ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
      ├─   0.379345s  15ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.379352s  15ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.379358s  15ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.379396s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.379438s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.379457s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.379476s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.379487s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.379519s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.379538s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.379589s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.379617s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.379638s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.379649s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.379683s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.379691s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a"})
                      ├─   0.379700s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.379720s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.379761s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.379786s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.379807s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.379818s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.379853s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.379862s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "a"})
                              ├─   0.379871s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.379879s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "a"})
                              ├─   0.379887s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.379895s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.379904s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.379911s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "c", "a"})
                              ├─   0.379921s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.379929s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.379952s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.379971s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.379989s   0ms DEBUG Paths for id
                        ├─   0.380000s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.380010s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.380027s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.380036s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.380055s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.380097s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.380118s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.380146s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.380198s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.380248s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.380272s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.380284s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.380304s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.380315s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.380323s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.380331s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.380341s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a"})
                      ├─   0.380351s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.380358s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.380378s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.380397s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.380415s   0ms DEBUG Paths for id
                ├─   0.380424s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.380434s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.380442s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.380453s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.380460s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.380476s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.380504s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.380520s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.380544s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.380593s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.380614s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.380631s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.380641s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.380658s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.380667s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.380687s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.380723s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.380742s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.380761s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.380770s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.380802s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.380822s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.380862s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.380886s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.380907s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.380917s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.380952s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.380961s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "a"})
                              ├─   0.380971s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.380979s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "a"})
                              ├─   0.380987s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.380995s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.381003s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.381011s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "c", "a"})
                              ├─   0.381021s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.381029s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.381048s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.381067s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.381085s   0ms DEBUG Paths for id
                        ├─   0.381095s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.381103s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.381115s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.381122s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.381140s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.381170s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.381188s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.381215s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.381267s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.381290s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.381310s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.381320s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.381339s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.381349s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.381357s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                      ├─   0.381365s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.381372s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.381380s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.381387s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                      ├─   0.381396s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.381403s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.381422s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.381440s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.381458s   0ms DEBUG Paths for id
                ├─   0.381467s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.381476s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.381483s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.381509s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.381524s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.381546s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.381576s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.381593s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.381616s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.381666s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.381686s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.381704s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.381714s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.381731s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.381743s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.381750s   2ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.381757s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              ├─   0.381763s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.381773s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.381780s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.381800s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.381819s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.381836s   2ms DEBUG Paths for id
        ├─   0.381845s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.381853s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.381861s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.381868s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.381879s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.381885s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.381900s  18ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.381925s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.381939s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.381960s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
        ├─   0.382002s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.382015s  18ms DEBUG No direct paths found
      ├─   0.382025s  18ms DEBUG going deeper
      ├─   0.382035s  18ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
      ├─   0.382044s  18ms DEBUG Ignoring. Already visited similar edge
      ├─   0.382050s  18ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      ├─   0.382056s  18ms DEBUG Ignoring. Already visited similar edge
      ├─   0.382062s  18ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      ├─   0.382068s  18ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.382074s  18ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.382080s  18ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.382088s  18ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
      ├─   0.382094s  18ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
      ├─   0.382100s  18ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
      ├─   0.382106s  18ms DEBUG Ignoring. Already visited similar edge
      ├─   0.382112s  18ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
      ├─   0.382117s  18ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.382123s  18ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
      ├─   0.382129s  18ms DEBUG Ignoring. Already visited similar edge
      ├─   0.382137s  18ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.382143s  18ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.382164s  18ms DEBUG Indirect paths found: 1
    ├─   0.382176s  18ms DEBUG advanced: root(Query) -(b)- Query/b -(product)- Product/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(15)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.382231s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.382244s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.382256s   0ms DEBUG Processing edge: Query/b -(product)- Product/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.382269s   0ms DEBUG Processing edge: Product/b -(🔑🧩{id})- Product/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.382282s   0ms DEBUG Processing edge: Product/c -(isExpensive🧩{price})- Boolean/c
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.382302s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.382314s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.382325s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.382336s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="product", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.382451s   0ms DEBUG adding output field 'product' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/b -(🔑🧩{id})- Product/c", parent_fetch_step_index=1}
              ├─   0.382489s   0ms DEBUG created a new fetch step [2] subgraph(c) type(Product) requirement() key({id}) in children of 1
              ├─   0.382496s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.382504s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.382512s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path="product"}
                      ├─   0.382570s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.382594s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/c"}
                    └─┐can_satisfy_edge{path="Product/c", edge="id"}
                      ├─   0.382715s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/c", current_cost=0}
                            ├─   0.382755s   0ms DEBUG checking edge Product/c -(id)- ID/c
                            └─┐can_satisfy_edge{path="Product/c", edge="id"}
                              ├─   0.382775s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.382794s   0ms DEBUG Advancing path Product/c with edge Product/c -(id)- ID/c
                            ├─   0.382805s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(13)" }])
                          ┌─┘
                          ├─   0.382827s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                        ┌─┘
                        ├─   0.382845s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                      ┌─┘
                      ├─   0.382861s   0ms DEBUG Paths for id
                      ├─   0.382871s   0ms DEBUG   Path Product/c -(id)- ID/c is valid
                      ├─   0.382878s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.382890s   0ms DEBUG path Product/c -(id)- ID/c is valid
                      ├─   0.382897s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.382923s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.382932s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.382943s   0ms DEBUG created a new fetch step [3] subgraph(c) type(Product) requirement({price}) in children of 1
                  ├─   0.382952s   0ms DEBUG Adding {price} to fetch([3]).input
                  ├─   0.382960s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.382968s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.382993s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.383035s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/c -(🔑🧩{id})- Product/a", parent_fetch_step_index=4}
                        ├─   0.383075s   0ms DEBUG created a new fetch step [5] subgraph(a) type(Product) requirement() key({id}) in children of 4
                        ├─   0.383083s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                        ├─   0.383091s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.383099s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                ├─   0.383167s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.383196s   0ms DEBUG adding output field 'id' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path=""}
                            ├─   0.383301s   0ms DEBUG adding output field 'price' to fetch step [5]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.383369s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  ├─   0.383392s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.383469s   1ms DEBUG Done
├─   0.383477s   1ms DEBUG found roots
├─   0.383481s   1ms DEBUG print graph
├─   0.383486s   1ms DEBUG Nodes:
│ [1] Query/b {} → {product{__typename id}} at $.
│ [2] Product/c {__typename id} → {} at $.product
│ [3] Product/c {__typename price id} → {isExpensive} at $.product
│ [4] Product/c {__typename id} → {__typename id} at $.product
│ [5] Product/a {__typename id} → {price} at $.product
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│       [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.383530s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.383545s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.383628s   0ms DEBUG optimization found: remove 'Product/c {__typename id} → {} at $.product'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="b"}
      └─┐execute{subgraph_name="b"}
        ├─   0.384169s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.386377s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.386801s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.388775s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(699.99)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.389368s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.390743s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.391016s DEBUG execution result: ExecutionResult { data: Some(Object {"product": Object {"isExpensive": Bool(true)}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{product{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{price}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{isExpensive}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.394534s DEBUG original document: query {
  product {
    isExpensive
    canAfford
  }
}

   0.394628s DEBUG normalized document: query{product{isExpensive canAfford}}

   0.394638s DEBUG executable operation: query{product{isExpensive canAfford}}
┐walk_operation{}
├─   0.395016s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="product", leaf=false}
  ├─   0.395066s   0ms DEBUG Trying to advance to: product{isExpensive canAfford} through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "canAfford", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.395120s   0ms DEBUG checking edge Query/b -(product)- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="product"}
        ├─   0.395142s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.395168s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(product)- Product/b
      ├─   0.395190s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.395207s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "canAfford", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.395237s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.395259s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.395278s   0ms DEBUG Indirect paths found: 0
    ├─   0.395289s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.395305s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="canAfford", leaf=true}
  ├─   0.395329s   0ms DEBUG Trying to advance to: canAfford through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(product)- Product/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.395357s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.395369s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.395388s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.395408s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.395444s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.395464s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.395481s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.395506s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.395552s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              ├─   0.395573s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
              ├─   0.395586s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.395613s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.395656s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.395680s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.395701s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.395712s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.395748s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.395757s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                      ├─   0.395765s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.395772s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                      ├─   0.395780s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.395787s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.395795s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.395818s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.395860s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.395895s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.395917s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.395948s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.396000s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.396009s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                              ├─   0.396019s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.396027s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                              ├─   0.396036s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.396044s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.396053s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.396060s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                              ├─   0.396070s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.396079s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.396100s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.396122s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.396140s   0ms DEBUG Paths for id
                        ├─   0.396150s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.396173s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.396197s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.396205s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.396228s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.396278s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.396303s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.396348s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.396426s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.396452s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.396472s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.396483s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.396504s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.396517s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.396524s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.396544s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.396562s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.396579s   0ms DEBUG Paths for id
                ├─   0.396589s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.396598s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.396607s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.396618s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.396625s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.396641s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.396670s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.396687s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.396711s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.396761s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.396782s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.396800s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.396809s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.396826s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.396835s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.396843s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.396852s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.396872s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.396909s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.396928s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.396947s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.396956s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.396990s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.396998s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                      ├─   0.397006s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.397027s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.397069s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.397093s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.397114s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.397125s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.397161s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.397170s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                              ├─   0.397179s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.397187s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                              ├─   0.397195s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.397203s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.397212s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.397220s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                              ├─   0.397229s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.397237s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.397257s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.397286s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.397304s   0ms DEBUG Paths for id
                        ├─   0.397314s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.397322s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.397334s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.397341s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.397359s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.397390s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.397408s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.397435s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.397488s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.397510s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.397531s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.397541s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.397562s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.397573s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.397580s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.397588s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.397596s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                      ├─   0.397609s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.397616s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.397636s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.397665s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.397682s   0ms DEBUG Paths for id
                ├─   0.397691s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.397700s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.397708s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.397718s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.397725s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.397740s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.397770s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.397786s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.397809s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.397891s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.397921s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.397941s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.397952s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.397973s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.397987s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.397993s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.398012s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.398030s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.398047s   2ms DEBUG Paths for id
        ├─   0.398055s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.398063s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.398071s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.398078s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.398088s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.398094s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.398135s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.398166s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.398180s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.398201s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
        ├─   0.398248s   0ms DEBUG checking edge Product/d -(canAfford🧩{isExpensive})- Boolean/d
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="canAfford"}
          ├─   0.398267s   0ms DEBUG checking requirements {isExpensive} for edge 'Product/d -(canAfford🧩{isExpensive})- Boolean/d'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.398316s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.398359s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                ├─   0.398368s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
                ├─   0.398375s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.398396s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.398436s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.398457s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.398477s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.398489s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.398523s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.398531s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                        ├─   0.398539s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        ├─   0.398547s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                        ├─   0.398555s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.398577s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.398621s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.398652s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.398675s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.398686s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.398724s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.398733s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d", "c"})
                                ├─   0.398742s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.398751s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "d", "c"})
                                ├─   0.398760s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.398768s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d", "c"})
                                ├─   0.398777s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.398804s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.398862s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.398890s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.398914s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.398925s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.398966s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.398977s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "d", "c"})
                                        ├─   0.398987s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.398996s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "b", "d", "c"})
                                        ├─   0.399006s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.399015s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "d", "c"})
                                        ├─   0.399024s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.399033s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "d", "c"})
                                        ├─   0.399060s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.399072s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.399109s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.399138s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.399159s   0ms DEBUG Paths for id
                                  ├─   0.399173s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.399182s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.399197s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.399206s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.399245s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.399286s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.399307s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.399338s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.399405s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.399433s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.399456s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.399475s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.399498s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                                ├─   0.399513s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.399521s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.399543s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.399567s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.399587s   1ms DEBUG Paths for id
                          ├─   0.399599s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.399610s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.399618s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.399631s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.399638s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.399657s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.399688s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.399706s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.399734s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.399806s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.399840s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.399864s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.399875s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.399895s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                        ├─   0.399906s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.399930s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.399991s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.400037s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.400126s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.400167s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.400233s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.400244s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                                ├─   0.400254s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.400262s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                                ├─   0.400271s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.400324s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.400385s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.400415s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.400462s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.400480s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.400530s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.400543s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "d", "c"})
                                        ├─   0.400567s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.400580s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "b", "d", "c"})
                                        ├─   0.400591s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.400600s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "d", "c"})
                                        ├─   0.400610s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.400619s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "d", "c"})
                                        ├─   0.400630s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.400686s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.400738s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.400766s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.400797s   0ms DEBUG Paths for id
                                  ├─   0.400813s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.400824s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.400839s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.400848s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.400870s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.400931s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.400955s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.400987s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.401058s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.401089s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.401124s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.401136s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.401159s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                                ├─   0.401172s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.401181s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                                ├─   0.401193s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.401203s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.401229s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.401251s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.401271s   1ms DEBUG Paths for id
                          ├─   0.401283s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.401313s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.401326s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.401339s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.401347s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.401372s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.401452s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.401482s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.401533s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.401622s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.401668s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.401698s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.401720s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.401750s   3ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                        ├─   0.401766s   3ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.401774s   3ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                      ┌─┘
                      ├─   0.401797s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                    ┌─┘
                    ├─   0.401819s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                  ┌─┘
                  ├─   0.401856s   3ms DEBUG Paths for id
                  ├─   0.401872s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.401884s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.401896s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.401905s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.401918s   3ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.401926s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.401964s   3ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.402000s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.402016s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.402042s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                  ├─   0.402097s   0ms DEBUG checking edge Product/c -(isExpensive🧩{price})- Boolean/c
                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="isExpensive"}
                    ├─   0.402128s   0ms DEBUG checking requirements {price} for edge 'Product/c -(isExpensive🧩{price})- Boolean/c'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.402170s   0ms INFO return=Ok([])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.402206s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                          ├─   0.402215s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                          ├─   0.402224s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                          ├─   0.402232s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                          ├─   0.402241s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.402265s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.402337s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.402368s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.402394s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.402406s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.402465s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                  ├─   0.402477s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d", "c"})
                                  ├─   0.402487s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                  ├─   0.402495s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "d", "c"})
                                  ├─   0.402505s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                  ├─   0.402513s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d", "c"})
                                  ├─   0.402522s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.402570s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                                    └─┐validate_field_requirement{}
                                      └─┐validate_field_requirement{}
                                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.402639s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                            ├─   0.402690s   0ms INFO return=Ok(Some([]))
                                          ┌─┘
                                          ├─   0.402721s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                          ├─   0.402739s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                        ┌─┘
                                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.402786s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                          ├─   0.402797s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "d", "c"})
                                          ├─   0.402807s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                          ├─   0.402816s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "b", "d", "c"})
                                          ├─   0.402826s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                          ├─   0.402835s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "d", "c"})
                                          ├─   0.402845s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                          ├─   0.402855s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "d", "c"})
                                          ├─   0.402866s   0ms DEBUG Finished finding indirect paths, found total of 0
                                          ├─   0.402875s   0ms INFO return=Ok([])
                                        ┌─┘
                                        ├─   0.402908s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                      ┌─┘
                                      ├─   0.402951s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.402979s   0ms DEBUG Paths for id
                                    ├─   0.402999s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                    ├─   0.403019s   0ms DEBUG Found 1 best paths for this leaf requirement
                                    ├─   0.403039s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                    ├─   0.403048s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                  ┌─┘
                                  ├─   0.403076s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                      ├─   0.403130s   0ms DEBUG Building root query tree node: Product/c
                                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                        ├─   0.403167s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                        ┌─┘
                                        ├─   0.403202s   0ms DEBUG No subsequent steps (leaf or end of path)
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=4007}
                                    ├─   0.403305s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                    └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                                      ├─   0.403340s   0ms INFO return=Ok(Some([]))
                                    ┌─┘
                                    ├─   0.403367s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                    ├─   0.403379s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                  ┌─┘
                                  ├─   0.403404s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                                  ├─   0.403419s   0ms DEBUG Finished finding indirect paths, found total of 1
                                  ├─   0.403428s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.403452s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                              ┌─┘
                              ├─   0.403475s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.403497s   1ms DEBUG Paths for id
                            ├─   0.403509s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                            ├─   0.403520s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                            ├─   0.403530s   1ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.403543s   1ms DEBUG path Product/c -(id)- ID/c is valid
                            ├─   0.403551s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                          ┌─┘
                          ├─   0.403570s   1ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                            └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                              ├─   0.403603s   0ms DEBUG Building root query tree node: Product/c
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.403644s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.403676s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=4007}
                            ├─   0.403739s   0ms INFO return=Ok([])
                          ┌─┘
                          ├─   0.403757s   1ms DEBUG No direct paths found
                          ├─   0.403771s   1ms DEBUG going deeper
                          ├─   0.403781s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.403807s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.403853s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.403880s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.403904s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.403915s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.403958s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                  ├─   0.403967s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                                  ├─   0.403977s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                  ├─   0.403985s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                                  ├─   0.403994s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.404022s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                                    └─┐validate_field_requirement{}
                                      └─┐validate_field_requirement{}
                                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.404071s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                            ├─   0.404100s   0ms INFO return=Ok(Some([]))
                                          ┌─┘
                                          ├─   0.404125s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                          ├─   0.404137s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                        ┌─┘
                                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.404210s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                          ├─   0.404223s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "d", "c"})
                                          ├─   0.404233s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                          ├─   0.404243s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "b", "d", "c"})
                                          ├─   0.404255s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                          ├─   0.404264s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "d", "c"})
                                          ├─   0.404274s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                          ├─   0.404283s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "d", "c"})
                                          ├─   0.404295s   0ms DEBUG Finished finding indirect paths, found total of 0
                                          ├─   0.404314s   0ms INFO return=Ok([])
                                        ┌─┘
                                        ├─   0.404337s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                      ┌─┘
                                      ├─   0.404361s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.404383s   0ms DEBUG Paths for id
                                    ├─   0.404396s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                    ├─   0.404405s   0ms DEBUG Found 1 best paths for this leaf requirement
                                    ├─   0.404420s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                    ├─   0.404429s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                  ┌─┘
                                  ├─   0.404451s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                      ├─   0.404487s   0ms DEBUG Building root query tree node: Product/c
                                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                        ├─   0.404508s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                        ┌─┘
                                        ├─   0.404542s   0ms DEBUG No subsequent steps (leaf or end of path)
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=4007}
                                    ├─   0.404612s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                    └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                                      ├─   0.404648s   0ms INFO return=Ok(Some([]))
                                    ┌─┘
                                    ├─   0.404673s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                    ├─   0.404684s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                  ┌─┘
                                  ├─   0.404707s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                                  ├─   0.404719s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                  ├─   0.404728s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                                  ├─   0.404740s   0ms DEBUG Finished finding indirect paths, found total of 1
                                  ├─   0.404748s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.404771s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                              ┌─┘
                              ├─   0.404794s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.404837s   1ms DEBUG Paths for id
                            ├─   0.404854s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                            ├─   0.404866s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                            ├─   0.404876s   1ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.404889s   1ms DEBUG path Product/c -(id)- ID/c is valid
                            ├─   0.404899s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                          ┌─┘
                          ├─   0.404919s   2ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                            └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                              ├─   0.404955s   0ms DEBUG Building root query tree node: Product/c
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.404987s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.405016s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=4007}
                            ├─   0.405094s   0ms DEBUG checking edge Product/a -(price)- Float/a
                            └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="price"}
                              ├─   0.405142s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.405175s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(price)- Float/a
                            ├─   0.405188s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(8)" }])
                          ┌─┘
                          ├─   0.405225s   3ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                          ├─   0.405245s   3ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                          ├─   0.405257s   3ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d", "c"})
                          ├─   0.405267s   3ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                          ├─   0.405275s   3ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "d", "c"})
                          ├─   0.405285s   3ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                          ├─   0.405293s   3ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d", "c"})
                          ├─   0.405302s   3ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                          ├─   0.405320s   3ms DEBUG Ignoring. Already visited similar edge
                          ├─   0.405341s   3ms DEBUG Finished finding indirect paths, found total of 1
                          ├─   0.405350s   3ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(8)" }])
                        ┌─┘
                        ├─   0.405384s   3ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(8)" }], [])))
                      ┌─┘
                      ├─   0.405402s   3ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(8)" }], [])))
                    ┌─┘
                    ├─   0.405420s   3ms DEBUG Paths for price
                    ├─   0.405432s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.405440s   3ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.405470s   3ms DEBUG path Product/c -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.405492s   3ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(28) --> EdgeIndex(8)" }]))
                  ┌─┘
                  ├─   0.405525s   3ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(isExpensive🧩{price})- Boolean/c
                  └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(28) --> EdgeIndex(8)" }, root_node="Product/c"}
                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=2}
                      ├─   0.405574s   0ms DEBUG Building root query tree node: Product/c
                      └─┐from_path_segment_sequences{current_index=0, total_segments=2}
                        ├─   0.405594s   0ms DEBUG Processing edge: Product/c -(🔑🧩{id})- Product/a
                        └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                          ├─   0.405613s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
                          └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                          ┌─┘
                          ├─   0.405641s   0ms DEBUG No subsequent steps (leaf or end of path)
                        ┌─┘
                        ├─   0.405667s   0ms DEBUG Adding subsequent step as child
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.405704s   3ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(15)" }])
                ┌─┘
                ├─   0.405727s   7ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                ├─   0.405759s   7ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.405794s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.405835s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.405857s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.405879s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.405892s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.405928s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.405937s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d"})
                        ├─   0.405946s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.405968s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.406012s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.406037s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.406080s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.406096s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.406144s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.406167s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d", "c"})
                                ├─   0.406180s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.406188s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "d", "c"})
                                ├─   0.406201s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.406221s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d", "c"})
                                ├─   0.406235s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.406281s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.406339s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.406371s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.406399s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.406429s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.406486s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.406497s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "d", "c"})
                                        ├─   0.406508s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.406516s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "b", "d", "c"})
                                        ├─   0.406526s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.406535s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "d", "c"})
                                        ├─   0.406545s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.406554s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "d", "c"})
                                        ├─   0.406565s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.406575s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.406599s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.406622s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.406643s   0ms DEBUG Paths for id
                                  ├─   0.406656s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.406666s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.406685s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.406694s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.406715s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.406772s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.406806s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.406845s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.406920s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.406947s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.406971s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.406983s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.407021s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                                ├─   0.407036s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.407045s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.407070s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.407093s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.407113s   1ms DEBUG Paths for id
                          ├─   0.407125s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.407135s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.407145s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.407157s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.407165s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.407184s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.407216s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.407241s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.407289s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.407362s   0ms DEBUG checking edge Product/c -(id)- ID/c
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.407388s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.407409s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                          ├─   0.407419s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.407439s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                        ├─   0.407451s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        ├─   0.407459s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d"})
                        ├─   0.407468s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.407501s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.407546s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.407571s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.407593s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.407604s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.407672s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.407697s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "d"})
                                ├─   0.407711s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.407758s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.407816s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.407883s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.407982s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.408012s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.408074s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.408094s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "d", "c"})
                                        ├─   0.408105s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.408114s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "b", "d", "c"})
                                        ├─   0.408125s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.408134s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "d", "c"})
                                        ├─   0.408144s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.408153s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "d", "c"})
                                        ├─   0.408164s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.408174s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.408198s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.408229s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.408250s   0ms DEBUG Paths for id
                                  ├─   0.408263s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.408272s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.408288s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.408297s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.408319s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.408356s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.408396s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.408440s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.408511s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.408539s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.408563s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.408584s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                ├─   0.408607s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                                ├─   0.408620s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.408629s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "d"})
                                ├─   0.408639s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.408647s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "d"})
                                ├─   0.408659s   1ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.408668s   1ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                              ┌─┘
                              ├─   0.408691s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                            ┌─┘
                            ├─   0.408734s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                          ┌─┘
                          ├─   0.408760s   1ms DEBUG Paths for id
                          ├─   0.408773s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.408784s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.408795s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.408808s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.408816s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.408836s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.408869s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.408890s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.408931s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.408992s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.409017s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.409038s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.409049s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.409070s   3ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                        ├─   0.409088s   3ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.409096s   3ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.409129s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.409152s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.409173s   3ms DEBUG Paths for id
                  ├─   0.409183s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.409193s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.409203s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.409211s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.409223s   3ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.409231s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.409249s  10ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.409280s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.409296s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.409321s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                  ├─   0.409372s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.409389s  11ms DEBUG No direct paths found
                ├─   0.409402s  11ms DEBUG going deeper
                ├─   0.409429s  11ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.409472s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.409513s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.409535s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.409558s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.409569s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.409606s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.409614s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                        ├─   0.409623s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.409645s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.409690s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.409716s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.409738s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.409757s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.409796s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.409805s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                                ├─   0.409814s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.409822s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                                ├─   0.409848s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.409899s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.409958s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.409985s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.410013s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.410035s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.410079s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.410089s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "d", "c"})
                                        ├─   0.410099s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.410108s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "b", "d", "c"})
                                        ├─   0.410118s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.410127s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "d", "c"})
                                        ├─   0.410153s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.410165s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "d", "c"})
                                        ├─   0.410177s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.410186s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.410213s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.410238s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.410259s   0ms DEBUG Paths for id
                                  ├─   0.410272s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.410281s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.410295s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.410304s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.410344s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.410386s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.410406s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.410448s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.410515s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.410545s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.410569s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.410580s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.410624s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                                ├─   0.410639s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.410649s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                                ├─   0.410661s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.410669s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.410696s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.410718s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.410755s   1ms DEBUG Paths for id
                          ├─   0.410771s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.410794s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.410807s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.410820s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.410837s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.410865s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.410915s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.410936s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.410967s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.411028s   0ms DEBUG checking edge Product/c -(id)- ID/c
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.411054s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.411076s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                          ├─   0.411089s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.411118s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                        ├─   0.411130s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.411158s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.411203s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.411229s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.411252s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.411264s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.411304s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.411314s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "d"})
                                ├─   0.411323s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.411349s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.411396s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.411439s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.411464s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.411477s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.411520s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.411530s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "d", "c"})
                                        ├─   0.411541s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.411550s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "b", "d", "c"})
                                        ├─   0.411559s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.411568s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "d", "c"})
                                        ├─   0.411578s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.411589s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "d", "c"})
                                        ├─   0.411600s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.411610s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.411632s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.411678s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.411705s   0ms DEBUG Paths for id
                                  ├─   0.411720s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.411729s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.411744s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.411759s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.411781s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.411818s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.411840s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.411882s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.411948s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.411977s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.412001s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.412030s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                ├─   0.412061s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                                ├─   0.412074s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.412083s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "d"})
                                ├─   0.412093s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.412101s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "d"})
                                ├─   0.412112s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.412121s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                              ┌─┘
                              ├─   0.412145s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                            ┌─┘
                            ├─   0.412186s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                          ┌─┘
                          ├─   0.412211s   1ms DEBUG Paths for id
                          ├─   0.412224s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.412235s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.412245s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.412258s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.412268s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.412290s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.412339s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.412363s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.412410s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.412479s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.412527s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.412552s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.412564s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.412586s   2ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                        ├─   0.412599s   3ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        ├─   0.412608s   3ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                        ├─   0.412619s   3ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.412640s   3ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.412672s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.412694s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.412729s   3ms DEBUG Paths for id
                  ├─   0.412741s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.412751s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.412761s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.412770s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.412782s   3ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.412789s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.412807s  14ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.412856s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.412875s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.412902s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                  ├─   0.412958s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.412975s  14ms DEBUG No direct paths found
                ├─   0.413004s  14ms DEBUG going deeper
                ├─   0.413017s  14ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
                ├─   0.413024s  14ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                ├─   0.413032s  14ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                ├─   0.413041s  14ms DEBUG Ignoring. Already visited similar edge
                ├─   0.413049s  14ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                ├─   0.413056s  14ms DEBUG Ignoring. Already visited similar edge
                ├─   0.413063s  14ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                ├─   0.413069s  14ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                ├─   0.413079s  14ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                ├─   0.413085s  14ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d"})
                ├─   0.413092s  14ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                ├─   0.413099s  14ms DEBUG Ignoring. Already visited similar edge
                ├─   0.413107s  14ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                ├─   0.413113s  14ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d"})
                ├─   0.413121s  14ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                ├─   0.413127s  14ms DEBUG Ignoring. Already visited similar edge
                ├─   0.413138s  14ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.413159s  14ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(15)" }])
              ┌─┘
              ├─   0.413191s  14ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(15)" }], [])))
            ┌─┘
            ├─   0.413208s  14ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(15)" }], [])))
          ┌─┘
          ├─   0.413224s  14ms DEBUG Paths for isExpensive
          ├─   0.413238s  14ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(isExpensive🧩{price})- Boolean/c is valid
          ├─   0.413245s  14ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.413258s  15ms DEBUG path Product/d -(🔑🧩{id})- Product/c -(isExpensive🧩{price})- Boolean/c is valid
          ├─   0.413265s  15ms INFO return=Ok(Some([ { cost: 1005, egdes: "EdgeIndex(34) --> EdgeIndex(15)" }]))
        ┌─┘
        ├─   0.413285s  15ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(canAfford🧩{isExpensive})- Boolean/d
        └─┐from_path{path= { cost: 1005, egdes: "EdgeIndex(34) --> EdgeIndex(15)" }, root_node="Product/d"}
          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=2}
            ├─   0.413316s   0ms DEBUG Building root query tree node: Product/d
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.413332s   0ms DEBUG Processing edge: Product/d -(🔑🧩{id})- Product/c
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.413347s   0ms DEBUG Processing edge: Product/c -(isExpensive🧩{price})- Boolean/c
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.413392s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.413407s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.413441s  15ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(19)" }])
      ┌─┘
      ├─   0.413462s  18ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
      ├─   0.413473s  18ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.413495s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.413548s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.413575s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.413594s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.413604s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.413637s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.413667s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.413704s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.413723s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.413742s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.413751s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.413784s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.413807s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                      ├─   0.413820s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.413827s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                      ├─   0.413835s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.413842s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.413850s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.413890s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.413940s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.413984s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.414010s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.414022s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.414083s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.414105s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.414118s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.414126s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.414135s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.414144s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.414154s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.414171s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.414195s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.414214s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.414241s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.414278s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.414300s   0ms DEBUG Paths for id
                        ├─   0.414312s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.414320s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.414333s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.414341s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.414360s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.414407s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.414431s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.414474s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.414551s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.414597s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.414620s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.414632s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.414652s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.414665s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.414673s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.414693s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.414711s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.414729s   1ms DEBUG Paths for id
                ├─   0.414738s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.414747s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.414755s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.414766s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.414788s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.414814s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.414844s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.414861s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.414885s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.414935s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.414956s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.414974s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.414984s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.415001s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.415011s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              ├─   0.415020s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.415027s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.415034s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.415040s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.415060s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.415097s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.415116s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.415144s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.415154s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.415215s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.415293s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.415389s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.415419s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.415445s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.415458s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.415526s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.415537s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.415547s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.415555s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.415564s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.415573s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.415581s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.415589s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.415599s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.415608s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.415629s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.415669s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.415691s   0ms DEBUG Paths for id
                        ├─   0.415703s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.415711s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.415725s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.415735s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.415793s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.415839s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.415859s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.415908s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.415986s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.416020s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.416044s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.416056s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.416077s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.416088s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.416097s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.416106s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.416114s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.416122s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.416129s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.416139s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.416146s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.416166s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.416204s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.416226s   1ms DEBUG Paths for id
                ├─   0.416237s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.416247s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.416256s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.416268s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.416287s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.416312s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.416359s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.416377s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.416403s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.416460s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.416481s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.416500s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.416510s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.416528s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.416629s   3ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.416698s   3ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.416771s   3ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.416797s   3ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.416817s   3ms DEBUG Paths for id
        ├─   0.416836s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.416848s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.416857s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.416867s   3ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.416885s   3ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.416892s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.416911s  21ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.416956s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.416972s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.416996s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.417084s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.417100s  21ms DEBUG No direct paths found
      ├─   0.417129s  21ms DEBUG going deeper
      ├─   0.417143s  21ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.417150s  21ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.417156s  21ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.417182s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.417220s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.417241s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.417262s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.417272s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.417318s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.417343s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.417387s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.417411s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.417433s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.417443s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.417496s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.417510s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                      ├─   0.417519s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.417550s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.417601s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.417652s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.417685s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.417698s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.417748s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.417757s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                              ├─   0.417767s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.417775s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                              ├─   0.417784s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.417792s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.417801s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.417809s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                              ├─   0.417819s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.417828s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.417859s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.417879s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.417898s   0ms DEBUG Paths for id
                        ├─   0.417908s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.417917s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.417931s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.417956s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.417986s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.418021s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.418040s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.418067s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.418126s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.418151s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.418171s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.418185s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.418206s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.418218s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.418226s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.418233s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.418241s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                      ├─   0.418252s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.418259s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.418279s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.418300s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.418317s   0ms DEBUG Paths for id
                ├─   0.418327s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.418336s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.418344s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.418356s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.418362s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.418379s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.418407s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.418424s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.418469s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.418530s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.418551s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.418570s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.418580s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.418601s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.418611s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.418632s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.418669s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.418689s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.418710s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.418720s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.418753s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.418774s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.418814s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.418839s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.418860s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.418871s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.418908s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.418917s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.418926s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.418934s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.418943s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.418952s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.418960s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.418968s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.418978s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.418987s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.419007s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.419027s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.419045s   0ms DEBUG Paths for id
                        ├─   0.419056s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.419063s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.419077s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.419084s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.419103s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.419136s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.419154s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.419182s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.419246s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.419269s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.419289s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.419300s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.419320s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.419331s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.419339s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.419348s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.419355s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.419366s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.419374s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.419383s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.419391s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.419411s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.419430s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.419448s   0ms DEBUG Paths for id
                ├─   0.419457s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.419467s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.419475s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.419486s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.419503s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.419520s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.419548s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.419564s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.419588s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.419640s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.419661s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.419703s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.419715s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.419734s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.419745s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.419753s   2ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.419761s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              ├─   0.419769s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.419778s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.419785s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.419805s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.419824s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.419842s   2ms DEBUG Paths for id
        ├─   0.419851s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.419860s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.419869s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.419876s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.419887s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.419893s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.419908s  24ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.419935s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.419950s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.420000s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
        ├─   0.420052s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.420066s  24ms DEBUG No direct paths found
      ├─   0.420075s  24ms DEBUG going deeper
      ├─   0.420084s  24ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
      ├─   0.420093s  24ms DEBUG Ignoring. Already visited similar edge
      ├─   0.420099s  24ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      ├─   0.420105s  24ms DEBUG Ignoring. Already visited similar edge
      ├─   0.420111s  24ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      ├─   0.420117s  24ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.420124s  24ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.420132s  24ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.420146s  24ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
      ├─   0.420154s  24ms DEBUG Ignoring. Already visited similar edge
      ├─   0.420162s  24ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
      ├─   0.420170s  24ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.420177s  24ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
      ├─   0.420187s  24ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.420195s  24ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
      ├─   0.420201s  24ms DEBUG Ignoring. Already visited similar edge
      ├─   0.420217s  24ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.420226s  24ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(19)" }])
    ┌─┘
    ├─   0.420262s  24ms DEBUG Indirect paths found: 1
    ├─   0.420280s  24ms DEBUG advanced: root(Query) -(b)- Query/b -(product)- Product/b
  ┌─┘
┌─┘
└─┐process_field{field_name="isExpensive", leaf=true}
  ├─   0.420317s   0ms DEBUG Trying to advance to: isExpensive through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(product)- Product/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.420348s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.420360s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.420409s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.420430s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.420464s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.420483s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.420503s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.420529s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.420576s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              ├─   0.420584s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
              ├─   0.420592s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.420631s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.420686s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.420707s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.420729s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.420740s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.420775s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.420784s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                      ├─   0.420792s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.420799s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                      ├─   0.420808s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.420816s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.420823s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.420845s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.420885s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.420930s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.420962s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.420975s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.421018s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.421028s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "a", "d"})
                              ├─   0.421038s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.421046s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "d"})
                              ├─   0.421055s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.421064s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.421073s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.421082s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "d"})
                              ├─   0.421092s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.421101s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.421121s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.421142s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.421165s   0ms DEBUG Paths for id
                        ├─   0.421176s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.421185s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.421198s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.421207s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.421226s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.421259s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.421278s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.421327s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.421401s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.421425s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.421446s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.421458s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.421478s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.421495s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.421503s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.421523s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.421543s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.421561s   0ms DEBUG Paths for id
                ├─   0.421571s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.421580s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.421588s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.421600s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.421607s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.421624s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.421653s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.421670s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.421696s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.421751s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.421772s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.421790s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.421800s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.421818s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.421828s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.421836s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.421843s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.421863s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.421902s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.421922s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.421942s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.421952s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.421986s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.421994s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                      ├─   0.422002s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.422028s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.422070s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.422094s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.422118s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.422129s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.422167s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.422176s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "a", "d"})
                              ├─   0.422186s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.422194s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "d"})
                              ├─   0.422203s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.422211s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.422220s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.422228s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "d"})
                              ├─   0.422238s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.422246s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.422267s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.422288s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.422306s   0ms DEBUG Paths for id
                        ├─   0.422318s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.422346s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.422367s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.422375s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.422400s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.422458s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.422480s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.422510s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.422571s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.422610s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.422631s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.422642s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.422663s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.422674s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.422682s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.422690s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.422699s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                      ├─   0.422709s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.422717s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.422762s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.422813s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.422836s   0ms DEBUG Paths for id
                ├─   0.422848s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.422882s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.422894s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.422907s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.422914s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.422936s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.422996s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.423031s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.423063s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.423122s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.423143s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.423162s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.423191s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.423219s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.423234s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.423255s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.423284s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.423303s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.423320s   2ms DEBUG Paths for id
        ├─   0.423331s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.423357s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.423368s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.423376s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.423387s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.423393s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.423412s   3ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.423456s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.423477s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.423501s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
        ├─   0.423550s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.423563s   3ms DEBUG No direct paths found
      ├─   0.423572s   3ms DEBUG going deeper
      ├─   0.423580s   3ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.423598s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.423631s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.423649s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.423667s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.423675s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.423727s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.423757s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.423796s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.423816s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.423838s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.423849s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.423883s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.423891s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                      ├─   0.423900s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.423907s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                      ├─   0.423915s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.423922s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.423930s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.423979s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.424039s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.424067s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.424092s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.424104s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.424142s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.424152s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c"})
                              ├─   0.424161s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.424169s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c"})
                              ├─   0.424178s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.424186s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.424195s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.424203s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c"})
                              ├─   0.424213s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.424221s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.424241s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.424261s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.424291s   0ms DEBUG Paths for id
                        ├─   0.424301s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.424309s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.424323s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.424330s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.424349s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.424382s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.424400s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.424453s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.424536s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.424578s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.424602s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.424614s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.424657s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.424717s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.424739s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.424777s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.424798s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.424816s   1ms DEBUG Paths for id
                ├─   0.425000s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.425026s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.425042s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.425078s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.425092s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.425147s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.425211s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.425251s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.425297s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.425375s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.425415s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.425444s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.425459s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.425482s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.425497s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              ├─   0.425506s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.425515s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.425522s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.425529s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.425553s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.425620s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.425647s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.425669s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.425681s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.425743s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.425792s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.425865s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.425901s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.425926s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.425939s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.425978s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.425988s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c"})
                              ├─   0.425998s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.426006s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c"})
                              ├─   0.426015s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.426024s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.426033s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.426041s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c"})
                              ├─   0.426054s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.426063s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.426085s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.426132s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.426155s   0ms DEBUG Paths for id
                        ├─   0.426168s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.426176s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.426193s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.426201s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.426223s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.426268s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.426286s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.426315s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.426391s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.426425s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.426448s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.426461s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.426482s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.426494s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.426503s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.426511s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.426519s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.426526s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.426534s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.426546s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.426554s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.426578s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.426597s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.426632s   1ms DEBUG Paths for id
                ├─   0.426647s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.426656s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.426666s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.426678s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.426685s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.426704s   3ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.426768s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.426787s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.426814s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.426868s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.426902s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.426929s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.426941s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.426960s   3ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.426976s   3ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.426995s   3ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.427026s   3ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.427059s   3ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.427081s   3ms DEBUG Paths for id
        ├─   0.427092s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.427101s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.427109s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.427118s   3ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.427130s   3ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.427142s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.427159s   6ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.427187s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.427201s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.427222s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.427271s   0ms DEBUG checking edge Product/c -(isExpensive🧩{price})- Boolean/c
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="isExpensive"}
          ├─   0.427291s   0ms DEBUG checking requirements {price} for edge 'Product/c -(isExpensive🧩{price})- Boolean/c'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.427351s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.427387s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.427410s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.427449s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.427471s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.427494s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.427506s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.427568s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                        ├─   0.427578s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                        ├─   0.427587s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.427594s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                        ├─   0.427603s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.427646s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.427710s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.427740s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.427765s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.427778s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.427819s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                ├─   0.427828s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "b", "c"})
                                ├─   0.427838s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.427846s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "b", "c"})
                                ├─   0.427855s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.427863s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "b", "c"})
                                ├─   0.427873s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.427901s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.428007s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                          ├─   0.428045s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.428073s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                        ├─   0.428087s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.428139s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                        ├─   0.428150s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "b", "a", "d"})
                                        ├─   0.428160s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                        ├─   0.428169s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b", "a", "d"})
                                        ├─   0.428179s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                        ├─   0.428188s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b", "a", "d"})
                                        ├─   0.428198s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                        ├─   0.428206s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "b", "a", "d"})
                                        ├─   0.428218s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.428228s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.428250s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.428276s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.428313s   0ms DEBUG Paths for id
                                  ├─   0.428331s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                  ├─   0.428341s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.428357s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                  ├─   0.428366s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                ┌─┘
                                ├─   0.428392s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                    ├─   0.428436s   0ms DEBUG Building root query tree node: Product/c
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.428456s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.428488s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.428582s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.428619s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.428645s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.428657s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.428682s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                                ├─   0.428697s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.428707s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.428730s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.428752s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.428772s   1ms DEBUG Paths for id
                          ├─   0.428800s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.428814s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.428824s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.428837s   1ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.428845s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                        ┌─┘
                        ├─   0.428869s   1ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.428920s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.428941s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.428987s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.429055s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.429094s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.429125s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.429137s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.429158s   1ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                        ├─   0.429182s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.429216s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.429293s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.429329s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.429355s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.429368s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.429419s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                ├─   0.429428s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c"})
                                ├─   0.429438s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.429446s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c"})
                                ├─   0.429455s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.429481s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.429540s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                          ├─   0.429567s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.429592s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                        ├─   0.429604s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.429649s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                        ├─   0.429673s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "a", "b", "d"})
                                        ├─   0.429687s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                        ├─   0.429697s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "b", "d"})
                                        ├─   0.429706s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                        ├─   0.429715s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "a", "b", "d"})
                                        ├─   0.429725s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                        ├─   0.429734s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "b", "d"})
                                        ├─   0.429746s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.429755s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.429784s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.429809s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.429830s   0ms DEBUG Paths for id
                                  ├─   0.429843s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                  ├─   0.429852s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.429883s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                  ├─   0.429896s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                ┌─┘
                                ├─   0.429922s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                    ├─   0.429959s   0ms DEBUG Building root query tree node: Product/c
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.429984s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.430015s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.430107s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.430148s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.430181s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.430204s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.430236s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                                ├─   0.430250s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.430259s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c"})
                                ├─   0.430271s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.430279s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.430316s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.430345s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.430379s   1ms DEBUG Paths for id
                          ├─   0.430392s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.430403s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.430413s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.430425s   1ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.430433s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                        ┌─┘
                        ├─   0.430452s   2ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.430485s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.430504s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.430533s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.430627s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.430654s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.430677s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.430687s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.430708s   3ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                        ├─   0.430723s   3ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.430745s   3ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                      ┌─┘
                      ├─   0.430776s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                    ┌─┘
                    ├─   0.430798s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                  ┌─┘
                  ├─   0.430833s   3ms DEBUG Paths for id
                  ├─   0.430848s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.430858s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.430868s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.430877s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.430889s   3ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.430896s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                ┌─┘
                ├─   0.430914s   3ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/d
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.430945s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.430962s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.431007s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", current_cost=3005}
                  ├─   0.431101s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.431120s   3ms DEBUG No direct paths found
                ├─   0.431132s   3ms DEBUG going deeper
                ├─   0.431143s   3ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                ├─   0.431150s   3ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
                ├─   0.431158s   3ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.431182s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.431245s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.431270s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.431293s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.431304s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.431342s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.431388s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.431453s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.431493s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.431526s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.431539s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.431596s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                ├─   0.431609s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "b", "c"})
                                ├─   0.431619s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.431627s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "b", "c"})
                                ├─   0.431637s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.431645s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "b", "c"})
                                ├─   0.431654s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.431700s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.431758s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                          ├─   0.431800s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.431835s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                        ├─   0.431849s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.431917s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                        ├─   0.431929s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "b", "a", "d"})
                                        ├─   0.431940s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                        ├─   0.431949s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b", "a", "d"})
                                        ├─   0.431959s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                        ├─   0.431968s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b", "a", "d"})
                                        ├─   0.431978s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                        ├─   0.431987s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "b", "a", "d"})
                                        ├─   0.431999s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.432008s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.432034s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.432074s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.432103s   0ms DEBUG Paths for id
                                  ├─   0.432117s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                  ├─   0.432126s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.432142s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                  ├─   0.432151s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                ┌─┘
                                ├─   0.432188s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                    ├─   0.432243s   0ms DEBUG Building root query tree node: Product/c
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.432270s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.432317s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.432388s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.432414s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.432438s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.432450s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.432473s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                                ├─   0.432488s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.432497s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.432539s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.432579s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.432603s   1ms DEBUG Paths for id
                          ├─   0.432616s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.432627s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.432637s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.432650s   1ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.432666s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                        ┌─┘
                        ├─   0.432685s   1ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/d
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.432719s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.432751s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.432788s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", current_cost=3005}
                          ├─   0.432878s   0ms DEBUG checking edge Product/d -(id)- ID/d
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", edge="id"}
                            ├─   0.432923s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.433057s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                          ├─   0.433121s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                        ┌─┘
                        ├─   0.433159s   1ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/d
                        ├─   0.433172s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.433181s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                        ├─   0.433189s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        ├─   0.433197s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                        ├─   0.433205s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.433237s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.433286s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.433335s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.433369s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.433419s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.433536s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.433573s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.433627s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                          ├─   0.433668s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.433695s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                        ├─   0.433709s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.433753s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                        ├─   0.433764s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "b", "a", "c"})
                                        ├─   0.433774s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                        ├─   0.433783s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "b", "a", "c"})
                                        ├─   0.433793s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                        ├─   0.433818s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "b", "a", "c"})
                                        ├─   0.433833s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                        ├─   0.433842s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "b", "a", "c"})
                                        ├─   0.433855s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.433865s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.433893s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.433918s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.433939s   0ms DEBUG Paths for id
                                  ├─   0.433952s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                  ├─   0.433961s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.433976s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                  ├─   0.433985s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                ┌─┘
                                ├─   0.434007s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/d
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                    ├─   0.434052s   0ms DEBUG Building root query tree node: Product/c
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.434072s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.434103s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", current_cost=3005}
                                  ├─   0.434185s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", edge="id"}
                                    ├─   0.434222s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.434249s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                  ├─   0.434261s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                                ┌─┘
                                ├─   0.434285s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/d
                                ├─   0.434298s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.434307s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "a", "c"})
                                ├─   0.434316s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.434325s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a", "c"})
                                ├─   0.434333s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.434341s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a", "c"})
                                ├─   0.434353s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.434361s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                              ┌─┘
                              ├─   0.434384s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                            ┌─┘
                            ├─   0.434406s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                          ┌─┘
                          ├─   0.434426s   1ms DEBUG Paths for id
                          ├─   0.434438s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.434449s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.434458s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.434470s   1ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.434478s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                        ┌─┘
                        ├─   0.434497s   3ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.434529s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.434547s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.434576s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.434635s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.434659s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.434680s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.434690s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.434710s   3ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                        ├─   0.434724s   3ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.434732s   3ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.434754s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                    ┌─┘
                    ├─   0.434775s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.434795s   3ms DEBUG Paths for id
                  ├─   0.434806s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.434815s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.434825s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.434833s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.434844s   3ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.434851s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                ┌─┘
                ├─   0.434868s   7ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.434896s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.434912s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.434936s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                  ├─   0.434987s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.435002s   7ms DEBUG No direct paths found
                ├─   0.435013s   7ms DEBUG going deeper
                ├─   0.435022s   7ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.435045s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.435084s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.435116s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.435136s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.435156s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.435205s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.435229s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.435284s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.435312s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.435335s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.435347s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.435431s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                ├─   0.435444s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c"})
                                ├─   0.435453s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.435462s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c"})
                                ├─   0.435470s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.435503s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.435557s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                          ├─   0.435597s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.435624s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                        ├─   0.435638s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.435681s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                        ├─   0.435691s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "a", "b", "d"})
                                        ├─   0.435701s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                        ├─   0.435710s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "b", "d"})
                                        ├─   0.435719s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                        ├─   0.435728s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "a", "b", "d"})
                                        ├─   0.435738s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                        ├─   0.435747s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "b", "d"})
                                        ├─   0.435758s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.435767s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.435789s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.435812s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.435833s   0ms DEBUG Paths for id
                                  ├─   0.435845s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                  ├─   0.435854s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.435868s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                  ├─   0.435877s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                ┌─┘
                                ├─   0.435898s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                    ├─   0.435934s   0ms DEBUG Building root query tree node: Product/c
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.435971s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.436011s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.436093s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.436130s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.436156s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.436169s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.436193s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                                ├─   0.436219s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.436232s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c"})
                                ├─   0.436244s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.436252s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.436293s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.436319s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.436339s   1ms DEBUG Paths for id
                          ├─   0.436353s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.436364s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.436373s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.436386s   1ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.436394s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                        ┌─┘
                        ├─   0.436430s   1ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/d
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.436468s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.436486s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.436517s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", current_cost=3005}
                          ├─   0.436584s   0ms DEBUG checking edge Product/d -(id)- ID/d
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", edge="id"}
                            ├─   0.436610s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.436651s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                          ├─   0.436664s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                        ┌─┘
                        ├─   0.436685s   1ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/d
                        ├─   0.436697s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.436705s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                        ├─   0.436713s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.436740s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.436786s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.436811s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.436834s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.436846s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.436894s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.436920s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.436967s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                                          ├─   0.436993s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.437017s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                        ├─   0.437029s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                                        ├─   0.437070s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                        ├─   0.437080s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "b", "c"})
                                        ├─   0.437090s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                        ├─   0.437099s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "b", "c"})
                                        ├─   0.437109s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                        ├─   0.437117s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "a", "b", "c"})
                                        ├─   0.437127s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                        ├─   0.437136s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "b", "c"})
                                        ├─   0.437147s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.437156s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.437178s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.437205s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.437226s   0ms DEBUG Paths for id
                                  ├─   0.437239s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                  ├─   0.437248s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.437262s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                  ├─   0.437286s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                ┌─┘
                                ├─   0.437317s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/d
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                    ├─   0.437355s   0ms DEBUG Building root query tree node: Product/c
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.437388s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.437427s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", current_cost=3005}
                                  ├─   0.437508s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d", edge="id"}
                                    ├─   0.437557s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.437587s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                  ├─   0.437600s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                                ┌─┘
                                ├─   0.437625s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/d
                                ├─   0.437642s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.437653s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "b", "c"})
                                ├─   0.437663s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.437671s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "c"})
                                ├─   0.437680s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.437688s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "c"})
                                ├─   0.437704s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.437714s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                              ┌─┘
                              ├─   0.437751s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                            ┌─┘
                            ├─   0.437790s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                          ┌─┘
                          ├─   0.437815s   1ms DEBUG Paths for id
                          ├─   0.437828s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.437839s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.437849s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.437862s   1ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.437869s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                        ┌─┘
                        ├─   0.437888s   2ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.437922s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.437940s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.437969s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.438028s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.438054s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.438075s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.438099s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.438128s   2ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                        ├─   0.438141s   2ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        ├─   0.438151s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                        ├─   0.438162s   2ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.438169s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.438192s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                    ┌─┘
                    ├─   0.438214s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(29) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(31) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.438235s   3ms DEBUG Paths for id
                  ├─   0.438245s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.438255s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.438265s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.438273s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.438285s   3ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.438293s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                ┌─┘
                ├─   0.438311s  10ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.438343s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.438360s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.438385s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                  ├─   0.438439s   0ms DEBUG checking edge Product/a -(price)- Float/a
                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="price"}
                    ├─   0.438462s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.438482s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(price)- Float/a
                  ├─   0.438492s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(8)" }])
                ┌─┘
                ├─   0.438513s  11ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                ├─   0.438524s  11ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                ├─   0.438534s  11ms DEBUG Ignoring. Already visited similar edge
                ├─   0.438542s  11ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                ├─   0.438549s  11ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                ├─   0.438558s  11ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                ├─   0.438564s  11ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                ├─   0.438572s  11ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                ├─   0.438579s  11ms DEBUG Ignoring. Already visited similar edge
                ├─   0.438588s  11ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                ├─   0.438594s  11ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                ├─   0.438602s  11ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                ├─   0.438608s  11ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                ├─   0.438616s  11ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                ├─   0.438623s  11ms DEBUG Ignoring. Already visited similar edge
                ├─   0.438630s  11ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                ├─   0.438637s  11ms DEBUG Ignoring. Already visited similar edge
                ├─   0.438646s  11ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.438653s  11ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(8)" }])
              ┌─┘
              ├─   0.438675s  11ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(8)" }], [])))
            ┌─┘
            ├─   0.438692s  11ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(28) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.438708s  11ms DEBUG Paths for price
          ├─   0.438719s  11ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(price)- Float/a is valid
          ├─   0.438726s  11ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.438738s  11ms DEBUG path Product/c -(🔑🧩{id})- Product/a -(price)- Float/a is valid
          ├─   0.438745s  11ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(28) --> EdgeIndex(8)" }]))
        ┌─┘
        ├─   0.438765s  11ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(isExpensive🧩{price})- Boolean/c
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(28) --> EdgeIndex(8)" }, root_node="Product/c"}
          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=2}
            ├─   0.438792s   0ms DEBUG Building root query tree node: Product/c
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.438808s   0ms DEBUG Processing edge: Product/c -(🔑🧩{id})- Product/a
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.438822s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.438845s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.438859s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.438890s  11ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(15)" }])
      ┌─┘
      ├─   0.438909s  18ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
      ├─   0.438918s  18ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.438926s  18ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.438932s  18ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.438951s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.438986s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.439003s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.439021s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.439030s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.439062s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.439082s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.439117s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.439137s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.439156s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.439165s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.439197s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.439205s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                      ├─   0.439214s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.439234s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.439275s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.439299s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.439321s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.439332s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.439367s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.439376s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "a", "d"})
                              ├─   0.439385s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.439393s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "d"})
                              ├─   0.439402s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.439410s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.439419s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.439427s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "d"})
                              ├─   0.439437s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.439445s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.439464s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.439484s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.439502s   0ms DEBUG Paths for id
                        ├─   0.439513s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.439521s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.439533s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.439541s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.439559s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.439590s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.439608s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.439636s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.439689s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.439742s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.439768s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.439780s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.439800s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.439811s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.439819s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.439827s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.439835s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                      ├─   0.439845s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.439852s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.439944s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.439991s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.440011s   0ms DEBUG Paths for id
                ├─   0.440024s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.440035s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.440044s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.440056s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.440063s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.440086s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.440118s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.440135s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.440160s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.440214s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.440237s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.440256s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.440266s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.440284s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.440297s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.440318s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.440356s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.440376s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.440395s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.440405s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.440439s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.440460s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.440523s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.440558s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.440582s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.440594s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.440639s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.440648s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c"})
                              ├─   0.440657s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.440665s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c"})
                              ├─   0.440674s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.440682s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.440691s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.440699s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c"})
                              ├─   0.440709s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.440717s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.440738s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.440757s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.440776s   0ms DEBUG Paths for id
                        ├─   0.440786s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.440794s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.440808s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.440815s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.440834s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.440875s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.440893s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.440920s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.440973s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.440996s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.441015s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.441026s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.441045s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.441055s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.441063s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.441071s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.441078s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.441086s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.441093s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.441102s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.441110s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.441129s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.441148s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.441165s   0ms DEBUG Paths for id
                ├─   0.441174s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.441183s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.441191s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.441201s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.441208s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.441224s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.441251s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.441267s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.441290s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.441343s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.441398s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.441422s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.441434s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.441453s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.441464s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.441473s   2ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.441479s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              ├─   0.441486s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.441496s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.441502s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.441522s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.441540s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.441557s   2ms DEBUG Paths for id
        ├─   0.441565s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.441574s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.441582s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.441589s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.441600s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.441606s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.441622s  21ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.441647s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.441661s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.441682s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
        ├─   0.441726s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.441739s  21ms DEBUG No direct paths found
      ├─   0.441749s  21ms DEBUG going deeper
      ├─   0.441757s  21ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
      ├─   0.441766s  21ms DEBUG Ignoring. Already visited similar edge
      ├─   0.441772s  21ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      ├─   0.441778s  21ms DEBUG Ignoring. Already visited similar edge
      ├─   0.441783s  21ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      ├─   0.441789s  21ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.441794s  21ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.441800s  21ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.441808s  21ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
      ├─   0.441831s  21ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
      ├─   0.441839s  21ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
      ├─   0.441845s  21ms DEBUG Ignoring. Already visited similar edge
      ├─   0.441851s  21ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
      ├─   0.441856s  21ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.441862s  21ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
      ├─   0.441868s  21ms DEBUG Ignoring. Already visited similar edge
      ├─   0.441877s  21ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.441883s  21ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.441907s  21ms DEBUG Indirect paths found: 1
    ├─   0.441918s  21ms DEBUG advanced: root(Query) -(b)- Query/b -(product)- Product/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(19)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.441970s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.441983s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.441995s   0ms DEBUG Processing edge: Query/b -(product)- Product/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.442008s   0ms DEBUG Processing edge: Product/b -(🔑🧩{id})- Product/d
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.442021s   0ms DEBUG Processing edge: Product/d -(canAfford🧩{isExpensive})- Boolean/d
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.442041s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.442053s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.442065s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.442075s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(15)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.442131s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.442144s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.442156s   0ms DEBUG Processing edge: Query/b -(product)- Product/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.442169s   0ms DEBUG Processing edge: Product/b -(🔑🧩{id})- Product/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.442183s   0ms DEBUG Processing edge: Product/c -(isExpensive🧩{price})- Boolean/c
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.442203s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.442214s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.442225s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.442236s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="product", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.442372s   0ms DEBUG adding output field 'product' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/b -(🔑🧩{id})- Product/d", parent_fetch_step_index=1}
              ├─   0.442418s   0ms DEBUG created a new fetch step [2] subgraph(d) type(Product) requirement() key({id}) in children of 1
              ├─   0.442426s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.442433s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.442441s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path="product"}
                      ├─   0.442516s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.442549s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/d"}
                    └─┐can_satisfy_edge{path="Product/d", edge="id"}
                      ├─   0.442686s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/d'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/d", current_cost=0}
                            ├─   0.442726s   0ms DEBUG checking edge Product/d -(id)- ID/d
                            └─┐can_satisfy_edge{path="Product/d", edge="id"}
                              ├─   0.442746s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.442765s   0ms DEBUG Advancing path Product/d with edge Product/d -(id)- ID/d
                            ├─   0.442777s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(17)" }])
                          ┌─┘
                          ├─   0.442799s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(17)" }], [])))
                        ┌─┘
                        ├─   0.442817s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(17)" }], [])))
                      ┌─┘
                      ├─   0.442834s   0ms DEBUG Paths for id
                      ├─   0.442843s   0ms DEBUG   Path Product/d -(id)- ID/d is valid
                      ├─   0.442851s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.442863s   0ms DEBUG path Product/d -(id)- ID/d is valid
                      ├─   0.442870s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.442896s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.442904s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.442916s   0ms DEBUG created a new fetch step [3] subgraph(d) type(Product) requirement({isExpensive}) in children of 1
                  ├─   0.442936s   0ms DEBUG Adding {isExpensive} to fetch([3]).input
                  ├─   0.442944s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.442952s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.442971s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.443038s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/d -(🔑🧩{id})- Product/c", parent_fetch_step_index=4}
                        ├─   0.443083s   0ms DEBUG created a new fetch step [5] subgraph(c) type(Product) requirement() key({id}) in children of 4
                        ├─   0.443101s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                        ├─   0.443109s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.443118s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                ├─   0.443201s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.443239s   0ms DEBUG adding output field 'id' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_requires_field_edge{parent_fetch_step_index=5}
                            └─┐find_satisfiable_key{node="Product/c"}
                              └─┐can_satisfy_edge{path="Product/c", edge="id"}
                                ├─   0.443406s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                                └─┐validate_field_requirement{}
                                  └─┐validate_field_requirement{}
                                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/c", current_cost=0}
                                      ├─   0.443454s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                      └─┐can_satisfy_edge{path="Product/c", edge="id"}
                                        ├─   0.443478s   0ms INFO return=Ok(Some([]))
                                      ┌─┘
                                      ├─   0.443501s   0ms DEBUG Advancing path Product/c with edge Product/c -(id)- ID/c
                                      ├─   0.443515s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(13)" }])
                                    ┌─┘
                                    ├─   0.443546s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.443567s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                                ┌─┘
                                ├─   0.443587s   0ms DEBUG Paths for id
                                ├─   0.443597s   0ms DEBUG   Path Product/c -(id)- ID/c is valid
                                ├─   0.443606s   0ms DEBUG Found 1 best paths for this leaf requirement
                                ├─   0.443620s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                ├─   0.443629s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                              ┌─┘
                            ┌─┘
                            ├─   0.443658s   0ms DEBUG Key to re-enter: {id}
                            ├─   0.443668s   0ms DEBUG Creating a fetch step for children of @requires
                            ├─   0.443678s   0ms DEBUG created a new fetch step [6] subgraph(c) type(Product) requirement({price}) in children of 4
                            ├─   0.443688s   0ms DEBUG Adding {price} to fetch([6]).input
                            ├─   0.443697s   0ms DEBUG Adding {id} to fetch([6]).input
                            ├─   0.443706s   0ms DEBUG Creating a fetch step for requirement of @requires
                            ├─   0.443714s   0ms DEBUG Adding {id} to fetch([7]).input
                            └─┐connect{parent=4, child=7}
                            ┌─┘
                            ├─   0.443755s   0ms DEBUG Processing requirements
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7}
                                └─┐process_entity_move_edge{edge="Product/c -(🔑🧩{id})- Product/a", parent_fetch_step_index=7}
                                  ├─   0.443806s   0ms DEBUG created a new fetch step [8] subgraph(a) type(Product) requirement() key({id}) in children of 7
                                  ├─   0.443834s   0ms DEBUG adding input requirement '{id}' to fetch step [8]
                                  ├─   0.443848s   0ms DEBUG adding __typename field to output for type 'Product'
                                  ├─   0.443858s   0ms DEBUG connecting fetch step to parent [7] -> [8]
                                  └─┐connect{parent=7, child=8}
                                  ┌─┘
                                  └─┐process_requirements_for_fetch_steps{count=1}
                                    └─┐process_noop_edge{}
                                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                        └─┐process_plain_field_edge{parent_fetch_step_index=7, requiring_fetch_step_index=8, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                          ├─   0.443945s   0ms DEBUG connecting parent fetch step [7] to requiring fetch step [8]
                                          └─┐connect{parent=7, child=8}
                                          ┌─┘
                                          ├─   0.443978s   0ms DEBUG adding output field 'id' to fetch step [7]
                                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                          ┌─┘
                                        ┌─┘
                                      ┌─┘
                                    ┌─┘
                                    └─┐connect{parent=7, child=8}
                                    ┌─┘
                                  ┌─┘
                                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=8}
                                    └─┐process_plain_field_edge{parent_fetch_step_index=8, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path=""}
                                      ├─   0.444131s   0ms DEBUG adding output field 'price' to fetch step [8]
                                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=8}
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            ├─   0.444215s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                            └─┐connect{parent=8, child=6}
                            ┌─┘
                            ├─   0.444242s   0ms DEBUG Processing children
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.444310s   1ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=6, child=3}
                  ┌─┘
                  ├─   0.444333s   1ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_entity_move_edge{edge="Product/b -(🔑🧩{id})- Product/c", parent_fetch_step_index=1}
              ├─   0.444394s   0ms DEBUG created a new fetch step [9] subgraph(c) type(Product) requirement() key({id}) in children of 1
              ├─   0.444401s   0ms DEBUG adding input requirement '{id}' to fetch step [9]
              ├─   0.444408s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.444415s   0ms DEBUG connecting fetch step to parent [1] -> [9]
              └─┐connect{parent=1, child=9}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=9}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=9, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path="product"}
                      ├─   0.444473s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [9]
                      └─┐connect{parent=1, child=9}
                      ┌─┘
                      ├─   0.444498s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=9}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=9}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=9}
                └─┐process_requires_field_edge{parent_fetch_step_index=9}
                  └─┐find_satisfiable_key{node="Product/c"}
                    └─┐can_satisfy_edge{path="Product/c", edge="id"}
                      ├─   0.444617s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/c", current_cost=0}
                            ├─   0.444658s   0ms DEBUG checking edge Product/c -(id)- ID/c
                            └─┐can_satisfy_edge{path="Product/c", edge="id"}
                              ├─   0.444679s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.444699s   0ms DEBUG Advancing path Product/c with edge Product/c -(id)- ID/c
                            ├─   0.444711s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(13)" }])
                          ┌─┘
                          ├─   0.444734s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                        ┌─┘
                        ├─   0.444753s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                      ┌─┘
                      ├─   0.444770s   0ms DEBUG Paths for id
                      ├─   0.444780s   0ms DEBUG   Path Product/c -(id)- ID/c is valid
                      ├─   0.444787s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.444800s   0ms DEBUG path Product/c -(id)- ID/c is valid
                      ├─   0.444807s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.444835s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.444843s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.444853s   0ms DEBUG created a new fetch step [10] subgraph(c) type(Product) requirement({price}) in children of 1
                  ├─   0.444862s   0ms DEBUG Adding {price} to fetch([10]).input
                  ├─   0.444870s   0ms DEBUG Adding {id} to fetch([10]).input
                  ├─   0.444878s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.444886s   0ms DEBUG Adding {id} to fetch([11]).input
                  └─┐connect{parent=1, child=11}
                  ┌─┘
                  ├─   0.444915s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=11}
                      └─┐process_entity_move_edge{edge="Product/c -(🔑🧩{id})- Product/a", parent_fetch_step_index=11}
                        ├─   0.444960s   0ms DEBUG created a new fetch step [12] subgraph(a) type(Product) requirement() key({id}) in children of 11
                        ├─   0.444968s   0ms DEBUG adding input requirement '{id}' to fetch step [12]
                        ├─   0.444977s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.444985s   0ms DEBUG connecting fetch step to parent [11] -> [12]
                        └─┐connect{parent=11, child=12}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=11, requiring_fetch_step_index=12}
                              └─┐process_plain_field_edge{parent_fetch_step_index=11, requiring_fetch_step_index=12, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                ├─   0.445075s   0ms DEBUG connecting parent fetch step [11] to requiring fetch step [12]
                                └─┐connect{parent=11, child=12}
                                ┌─┘
                                ├─   0.445114s   0ms DEBUG adding output field 'id' to fetch step [11]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=11, requiring_fetch_step_index=12}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=11, child=12}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=12}
                          └─┐process_plain_field_edge{parent_fetch_step_index=12, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path=""}
                            ├─   0.445225s   0ms DEBUG adding output field 'price' to fetch step [12]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=12}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.445297s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=12, child=10}
                  ┌─┘
                  ├─   0.445320s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=10}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.445423s   3ms DEBUG Done
├─   0.445443s   3ms DEBUG found roots
├─   0.445451s   3ms DEBUG print graph
├─   0.445456s   3ms DEBUG Nodes:
│ [1] Query/b {} → {product{__typename id}} at $.
│ [2] Product/d {__typename id} → {} at $.product
│ [3] Product/d {__typename isExpensive id} → {canAfford} at $.product
│ [4] Product/d {__typename id} → {__typename id} at $.product
│ [5] Product/c {__typename id} → {} at $.product
│ [6] Product/c {__typename price id} → {isExpensive} at $.product
│ [7] Product/c {__typename id} → {__typename id} at $.product
│ [8] Product/a {__typename id} → {price} at $.product
│ [9] Product/c {__typename id} → {} at $.product
│ [10] Product/c {__typename price id} → {isExpensive} at $.product
│ [11] Product/c {__typename id} → {__typename id} at $.product
│ [12] Product/a {__typename id} → {price} at $.product
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│     [7]
│       [8]
│         [6]
│           [3]
│   [9]
│   [11]
│     [12]
│       [10]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.445514s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [11]
    ├─   0.445534s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.445554s   0ms DEBUG merging fetch steps [1] and [11]
      └─┐connect{parent=1, child=12}
      ┌─┘
    ┌─┘
    └─┐perform_passthrough_child_merge{}
      ├─   0.445598s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=7}
      ┌─┘
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
    ├─   0.445644s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [7]
    └─┐perform_passthrough_child_merge{}
      ├─   0.445658s   0ms DEBUG merging fetch steps [1] and [7]
      └─┐connect{parent=1, child=8}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.445772s   0ms DEBUG Found optimization: 8 <- 12
    ├─   0.445793s   0ms DEBUG Found optimization: 5 <- 9
    └─┐perform_fetch_step_merge{}
      ├─   0.445816s   0ms DEBUG merging fetch steps [8] and [12]
      └─┐connect{parent=8, child=10}
      ┌─┘
      └─┐connect{parent=1, child=8}
      ┌─┘
    ┌─┘
    └─┐perform_fetch_step_merge{}
      ├─   0.445883s   0ms DEBUG merging fetch steps [5] and [9]
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
    ├─   0.445912s   0ms DEBUG Found optimization: 10 <- 6
    └─┐perform_fetch_step_merge{}
      ├─   0.445925s   0ms DEBUG merging fetch steps [10] and [6]
      └─┐connect{parent=10, child=3}
      ┌─┘
      └─┐connect{parent=8, child=10}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.445982s   0ms DEBUG optimization found: remove 'Product/d {__typename id} → {} at $.product'
    ├─   0.445992s   0ms DEBUG optimization found: remove 'Product/c {__typename id} → {} at $.product'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="b"}
      └─┐execute{subgraph_name="b"}
        ├─   0.446400s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.448367s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.448773s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.450143s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(699.99)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.450583s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.452652s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Bool(true)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="d"}
        └─┐execute{subgraph_name="d"}
          ├─   0.453284s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.454898s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.455175s DEBUG execution result: ExecutionResult { data: Some(Object {"product": Object {"isExpensive": Bool(true), "canAfford": Bool(false)}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{product{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{price}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{isExpensive}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("d"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{canAfford}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("isExpensive")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.458177s DEBUG original document: query {
  product {
    canAffordWithDiscount
  }
}

   0.458261s DEBUG normalized document: query{product{canAffordWithDiscount}}

   0.458270s DEBUG executable operation: query{product{canAffordWithDiscount}}
┐walk_operation{}
├─   0.458585s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="product", leaf=false}
  ├─   0.458638s   0ms DEBUG Trying to advance to: product{canAffordWithDiscount} through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "canAffordWithDiscount", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.458692s   0ms DEBUG checking edge Query/b -(product)- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="product"}
        ├─   0.458768s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.458795s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(product)- Product/b
      ├─   0.458810s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.458828s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "canAffordWithDiscount", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.458859s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.458865s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.458877s   0ms DEBUG Indirect paths found: 0
    ├─   0.458885s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.458899s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="canAffordWithDiscount", leaf=true}
  ├─   0.458921s   0ms DEBUG Trying to advance to: canAffordWithDiscount through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(product)- Product/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "canAffordWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.458973s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.458990s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "canAffordWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.459010s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.459037s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.459075s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.459110s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.459136s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.459147s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.459183s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              ├─   0.459192s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
              ├─   0.459200s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.459221s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.459264s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.459285s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.459304s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.459314s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.459346s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.459354s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                      ├─   0.459362s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.459369s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                      ├─   0.459377s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.459385s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.459393s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.459420s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.459462s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.459488s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.459510s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.459521s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.459556s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.459565s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                              ├─   0.459574s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.459609s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                              ├─   0.459623s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.459631s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.459640s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.459648s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                              ├─   0.459658s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.459667s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.459692s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.459715s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.459733s   0ms DEBUG Paths for id
                        ├─   0.459745s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.459753s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.459772s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.459780s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.459798s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.459833s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.459853s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.459880s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.459938s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.459962s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.459982s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.459993s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.460013s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.460025s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.460033s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.460052s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.460070s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.460087s   0ms DEBUG Paths for id
                ├─   0.460097s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.460115s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.460123s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.460134s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.460140s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.460157s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.460185s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.460200s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.460226s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.460278s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.460298s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.460316s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.460327s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.460344s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.460353s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.460361s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.460367s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.460387s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.460424s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.460443s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.460462s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.460472s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.460504s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.460512s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                      ├─   0.460520s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.460540s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.460582s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.460614s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.460635s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.460646s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.460682s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.460692s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                              ├─   0.460701s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.460709s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                              ├─   0.460717s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.460725s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.460734s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.460741s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                              ├─   0.460751s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.460759s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.460778s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.460803s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.460820s   0ms DEBUG Paths for id
                        ├─   0.460830s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.460838s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.460850s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.460858s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.460877s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.460926s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.460950s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.460979s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.461039s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.461064s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.461084s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.461095s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.461115s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.461126s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.461134s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.461141s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.461149s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                      ├─   0.461159s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.461166s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.461186s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.461204s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.461221s   0ms DEBUG Paths for id
                ├─   0.461231s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.461240s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.461248s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.461259s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.461266s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.461282s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.461310s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.461325s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.461349s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.461396s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.461416s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.461434s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.461444s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.461460s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.461473s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.461483s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.461503s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.461521s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.461537s   2ms DEBUG Paths for id
        ├─   0.461546s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.461554s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.461561s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.461568s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.461578s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.461584s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.461599s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.461623s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.461637s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.461657s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAffordWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
        ├─   0.461701s   0ms DEBUG checking edge Product/d -(canAffordWithDiscount🧩{isExpensiveWithDiscount})- Boolean/d
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="canAffordWithDiscount"}
          ├─   0.461720s   0ms DEBUG checking requirements {isExpensiveWithDiscount} for edge 'Product/d -(canAffordWithDiscount🧩{isExpensiveWithDiscount})- Boolean/d'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.461768s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.461814s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                ├─   0.461822s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
                ├─   0.461830s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.461851s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.461907s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.461938s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.461961s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.461974s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.462016s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.462024s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                        ├─   0.462033s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        ├─   0.462040s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                        ├─   0.462048s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.462071s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.462116s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.462144s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.462167s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.462178s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.462217s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.462226s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d", "c"})
                                ├─   0.462235s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.462243s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "d", "c"})
                                ├─   0.462252s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.462260s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d", "c"})
                                ├─   0.462269s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.462296s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.462352s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.462380s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.462404s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.462417s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.462458s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.462468s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "c", "a", "d"})
                                        ├─   0.462478s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.462487s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c", "a", "d"})
                                        ├─   0.462497s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.462506s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c", "a", "d"})
                                        ├─   0.462517s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.462526s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "c", "a", "d"})
                                        ├─   0.462541s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.462550s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.462573s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.462606s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.462628s   0ms DEBUG Paths for id
                                  ├─   0.462640s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.462649s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.462664s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.462673s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.462694s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.462729s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.462750s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.462781s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.462863s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.462900s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.462943s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.462958s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.462982s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                                ├─   0.462997s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.463005s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.463028s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.463050s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.463071s   1ms DEBUG Paths for id
                          ├─   0.463082s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.463093s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.463102s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.463114s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.463122s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.463141s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.463174s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.463192s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.463221s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.463285s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.463310s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.463331s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.463340s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.463360s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                        ├─   0.463371s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.463395s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.463439s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.463463s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.463486s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.463497s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.463556s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.463569s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                                ├─   0.463579s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.463587s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                                ├─   0.463596s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.463631s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.463685s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.463712s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.463739s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.463753s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.463810s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.463820s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "c", "a", "d"})
                                        ├─   0.463830s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.463855s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c", "a", "d"})
                                        ├─   0.463869s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.463879s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c", "a", "d"})
                                        ├─   0.463888s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.463897s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "c", "a", "d"})
                                        ├─   0.463909s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.463918s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.463970s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.464000s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.464022s   0ms DEBUG Paths for id
                                  ├─   0.464036s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.464045s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.464059s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.464068s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.464089s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.464126s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.464149s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.464179s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.464244s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.464271s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.464295s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.464306s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.464328s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                                ├─   0.464340s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.464349s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                                ├─   0.464361s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.464370s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.464392s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.464414s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.464434s   1ms DEBUG Paths for id
                          ├─   0.464445s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.464456s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.464464s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.464476s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.464484s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.464502s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.464533s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.464553s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.464581s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.464682s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.464712s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.464735s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.464746s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.464767s   2ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                        ├─   0.464780s   2ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.464787s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                      ┌─┘
                      ├─   0.464813s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                    ┌─┘
                    ├─   0.464834s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                  ┌─┘
                  ├─   0.464873s   3ms DEBUG Paths for id
                  ├─   0.464888s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.464904s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.464914s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.464923s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.464934s   3ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.464941s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.464961s   3ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.465009s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.465027s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.465053s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                  ├─   0.465109s   0ms DEBUG checking edge Product/c -(isExpensiveWithDiscount🧩{hasDiscount})- Boolean/c
                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="isExpensiveWithDiscount"}
                    ├─   0.465140s   0ms DEBUG checking requirements {hasDiscount} for edge 'Product/c -(isExpensiveWithDiscount🧩{hasDiscount})- Boolean/c'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "hasDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.465196s   0ms INFO return=Ok([])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "hasDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.465256s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                          ├─   0.465268s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                          ├─   0.465277s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                          ├─   0.465285s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                          ├─   0.465294s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.465324s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.465372s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.465399s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.465425s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.465438s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.465486s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                  ├─   0.465495s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d", "c"})
                                  ├─   0.465504s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                  ├─   0.465513s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "d", "c"})
                                  ├─   0.465522s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                  ├─   0.465531s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d", "c"})
                                  ├─   0.465541s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.465569s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                                    └─┐validate_field_requirement{}
                                      └─┐validate_field_requirement{}
                                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.465635s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                            ├─   0.465687s   0ms INFO return=Ok(Some([]))
                                          ┌─┘
                                          ├─   0.465716s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                          ├─   0.465729s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                        ┌─┘
                                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.465776s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                          ├─   0.465787s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "c", "a", "d"})
                                          ├─   0.465797s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                          ├─   0.465807s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c", "a", "d"})
                                          ├─   0.465816s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                          ├─   0.465826s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c", "a", "d"})
                                          ├─   0.465836s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                          ├─   0.465845s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "c", "a", "d"})
                                          ├─   0.465856s   0ms DEBUG Finished finding indirect paths, found total of 0
                                          ├─   0.465866s   0ms INFO return=Ok([])
                                        ┌─┘
                                        ├─   0.465888s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                      ┌─┘
                                      ├─   0.465912s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.465933s   0ms DEBUG Paths for id
                                    ├─   0.465946s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                    ├─   0.465955s   0ms DEBUG Found 1 best paths for this leaf requirement
                                    ├─   0.465970s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                    ├─   0.465979s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                  ┌─┘
                                  ├─   0.466000s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                      ├─   0.466037s   0ms DEBUG Building root query tree node: Product/c
                                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                        ├─   0.466058s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                        ┌─┘
                                        ├─   0.466089s   0ms DEBUG No subsequent steps (leaf or end of path)
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=4007}
                                    ├─   0.466182s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                    └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                                      ├─   0.466213s   0ms INFO return=Ok(Some([]))
                                    ┌─┘
                                    ├─   0.466277s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                    ├─   0.466290s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                  ┌─┘
                                  ├─   0.466315s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                                  ├─   0.466330s   0ms DEBUG Finished finding indirect paths, found total of 1
                                  ├─   0.466339s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.466363s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                              ┌─┘
                              ├─   0.466386s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.466408s   1ms DEBUG Paths for id
                            ├─   0.466420s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                            ├─   0.466431s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                            ├─   0.466441s   1ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.466454s   1ms DEBUG path Product/c -(id)- ID/c is valid
                            ├─   0.466471s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                          ┌─┘
                          ├─   0.466490s   1ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                            └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                              ├─   0.466525s   0ms DEBUG Building root query tree node: Product/c
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.466545s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.466574s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "hasDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=4007}
                            ├─   0.466650s   0ms DEBUG checking edge Product/b -(hasDiscount)- Boolean/b
                            └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="hasDiscount"}
                              ├─   0.466678s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.466700s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(hasDiscount)- Boolean/b
                            ├─   0.466710s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(10)" }])
                          ┌─┘
                          ├─   0.466731s   1ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                          ├─   0.466742s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.466768s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.466815s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.466841s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.466864s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.466876s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.466923s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                  ├─   0.466932s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                                  ├─   0.466942s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                  ├─   0.466950s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                                  ├─   0.466959s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.466987s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                                    └─┐validate_field_requirement{}
                                      └─┐validate_field_requirement{}
                                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.467036s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                            ├─   0.467064s   0ms INFO return=Ok(Some([]))
                                          ┌─┘
                                          ├─   0.467090s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                          ├─   0.467102s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                        ┌─┘
                                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.467145s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                          ├─   0.467155s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "c", "a", "d"})
                                          ├─   0.467165s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                          ├─   0.467175s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c", "a", "d"})
                                          ├─   0.467184s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                          ├─   0.467194s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c", "a", "d"})
                                          ├─   0.467204s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                          ├─   0.467230s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "c", "a", "d"})
                                          ├─   0.467245s   0ms DEBUG Finished finding indirect paths, found total of 0
                                          ├─   0.467255s   0ms INFO return=Ok([])
                                        ┌─┘
                                        ├─   0.467282s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                      ┌─┘
                                      ├─   0.467311s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.467338s   0ms DEBUG Paths for id
                                    ├─   0.467353s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                    ├─   0.467373s   0ms DEBUG Found 1 best paths for this leaf requirement
                                    ├─   0.467393s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                    ├─   0.467411s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                  ┌─┘
                                  ├─   0.467443s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                      ├─   0.467493s   0ms DEBUG Building root query tree node: Product/c
                                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                        ├─   0.467514s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                        ┌─┘
                                        ├─   0.467546s   0ms DEBUG No subsequent steps (leaf or end of path)
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=4007}
                                    ├─   0.467619s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                    └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                                      ├─   0.467671s   0ms INFO return=Ok(Some([]))
                                    ┌─┘
                                    ├─   0.467707s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                    ├─   0.467720s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                  ┌─┘
                                  ├─   0.467746s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                                  ├─   0.467759s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                  ├─   0.467768s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                                  ├─   0.467792s   0ms DEBUG Finished finding indirect paths, found total of 1
                                  ├─   0.467804s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.467834s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                              ┌─┘
                              ├─   0.467857s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.467879s   1ms DEBUG Paths for id
                            ├─   0.467893s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                            ├─   0.467905s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                            ├─   0.467920s   1ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.467934s   1ms DEBUG path Product/c -(id)- ID/c is valid
                            ├─   0.467942s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                          ┌─┘
                          ├─   0.467961s   2ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                            └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                              ├─   0.467995s   0ms DEBUG Building root query tree node: Product/c
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.468015s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.468044s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "hasDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=4007}
                            ├─   0.468140s   0ms INFO return=Ok([])
                          ┌─┘
                          ├─   0.468164s   2ms DEBUG No direct paths found
                          ├─   0.468186s   2ms DEBUG going deeper
                          ├─   0.468203s   2ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
                          ├─   0.468211s   2ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                          ├─   0.468220s   2ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                          ├─   0.468228s   3ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                          ├─   0.468236s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                          ├─   0.468247s   3ms DEBUG Ignoring. Already visited similar edge
                          ├─   0.468255s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                          ├─   0.468262s   3ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                          ├─   0.468287s   3ms DEBUG Finished finding indirect paths, found total of 1
                          ├─   0.468308s   3ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(10)" }])
                        ┌─┘
                        ├─   0.468341s   3ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(10)" }], [])))
                      ┌─┘
                      ├─   0.468360s   3ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(10)" }], [])))
                    ┌─┘
                    ├─   0.468378s   3ms DEBUG Paths for hasDiscount
                    ├─   0.468392s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(hasDiscount)- Boolean/b is valid
                    ├─   0.468400s   3ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.468414s   3ms DEBUG path Product/c -(🔑🧩{id})- Product/b -(hasDiscount)- Boolean/b is valid
                    ├─   0.468422s   3ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(29) --> EdgeIndex(10)" }]))
                  ┌─┘
                  ├─   0.468443s   3ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(isExpensiveWithDiscount🧩{hasDiscount})- Boolean/c
                  └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(29) --> EdgeIndex(10)" }, root_node="Product/c"}
                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=2}
                      ├─   0.468475s   0ms DEBUG Building root query tree node: Product/c
                      └─┐from_path_segment_sequences{current_index=0, total_segments=2}
                        ├─   0.468492s   0ms DEBUG Processing edge: Product/c -(🔑🧩{id})- Product/b
                        └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                          ├─   0.468511s   0ms DEBUG Processing edge: Product/b -(hasDiscount)- Boolean/b
                          └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                          ┌─┘
                          ├─   0.468538s   0ms DEBUG No subsequent steps (leaf or end of path)
                        ┌─┘
                        ├─   0.468553s   0ms DEBUG Adding subsequent step as child
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.468588s   3ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(14)" }])
                ┌─┘
                ├─   0.468609s   6ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                ├─   0.468619s   6ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.468643s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.468684s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.468723s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.468752s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.468765s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.468805s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.468814s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d"})
                        ├─   0.468822s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.468845s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.468891s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.468916s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.468938s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.468950s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.468989s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.468998s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d", "c"})
                                ├─   0.469007s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.469030s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "d", "c"})
                                ├─   0.469043s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.469052s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d", "c"})
                                ├─   0.469060s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.469098s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.469148s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.469174s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.469201s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.469215s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.469258s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.469268s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "c", "a", "d"})
                                        ├─   0.469278s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.469287s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c", "a", "d"})
                                        ├─   0.469296s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.469305s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c", "a", "d"})
                                        ├─   0.469315s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.469324s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "c", "a", "d"})
                                        ├─   0.469335s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.469344s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.469382s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.469412s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.469434s   0ms DEBUG Paths for id
                                  ├─   0.469448s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.469457s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.469471s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.469480s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.469501s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.469538s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.469558s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.469589s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.469656s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.469683s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.469707s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.469719s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.469741s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                                ├─   0.469755s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.469764s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.469786s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.469807s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.469828s   0ms DEBUG Paths for id
                          ├─   0.469838s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.469849s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.469858s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.469870s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.469877s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.469896s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.469927s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.469945s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.469973s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.470031s   0ms DEBUG checking edge Product/c -(id)- ID/c
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.470056s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.470077s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                          ├─   0.470104s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.470135s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                        ├─   0.470146s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        ├─   0.470155s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d"})
                        ├─   0.470163s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.470205s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.470259s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.470297s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.470329s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.470342s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.470400s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.470412s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "a", "d"})
                                ├─   0.470422s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.470467s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.470536s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.470588s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.470632s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.470654s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.470702s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.470712s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "c", "a", "d"})
                                        ├─   0.470723s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.470732s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c", "a", "d"})
                                        ├─   0.470741s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.470751s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c", "a", "d"})
                                        ├─   0.470761s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.470770s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "c", "a", "d"})
                                        ├─   0.470781s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.470802s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.470832s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.470856s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.470877s   0ms DEBUG Paths for id
                                  ├─   0.470903s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.470915s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.470929s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.470938s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.470964s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.471003s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.471037s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.471076s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.471153s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.471180s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.471204s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.471219s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                ├─   0.471243s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                                ├─   0.471255s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.471264s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a", "d"})
                                ├─   0.471274s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.471282s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a", "d"})
                                ├─   0.471293s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.471302s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                              ┌─┘
                              ├─   0.471325s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                            ┌─┘
                            ├─   0.471358s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                          ┌─┘
                          ├─   0.471379s   1ms DEBUG Paths for id
                          ├─   0.471390s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.471401s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.471410s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.471423s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.471431s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.471471s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.471515s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.471534s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.471579s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.471646s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.471672s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.471694s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.471704s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.471725s   2ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                        ├─   0.471755s   2ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.471767s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.471802s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.471824s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.471844s   3ms DEBUG Paths for id
                  ├─   0.471856s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.471866s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.471876s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.471884s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.471896s   3ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.471903s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.471921s  10ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.471958s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.471975s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.471999s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                  ├─   0.472051s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.472067s  10ms DEBUG No direct paths found
                ├─   0.472077s  10ms DEBUG going deeper
                ├─   0.472086s  10ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.472109s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.472148s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.472170s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.472190s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.472200s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.472236s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.472244s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                        ├─   0.472253s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.472276s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.472320s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.472344s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.472367s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.472378s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.472418s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.472427s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                                ├─   0.472436s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.472444s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                                ├─   0.472453s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.472478s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.472526s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.472552s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.472576s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.472588s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.472650s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.472662s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "c", "a", "d"})
                                        ├─   0.472673s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.472682s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c", "a", "d"})
                                        ├─   0.472692s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.472700s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c", "a", "d"})
                                        ├─   0.472710s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.472719s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "c", "a", "d"})
                                        ├─   0.472731s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.472740s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.472765s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.472789s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.472810s   0ms DEBUG Paths for id
                                  ├─   0.472822s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.472831s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.472846s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.472854s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.472875s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.472911s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.472932s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.472962s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.473077s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.473116s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.473143s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.473182s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.473213s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                                ├─   0.473261s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.473274s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                                ├─   0.473287s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.473295s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.473327s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.473355s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.473376s   1ms DEBUG Paths for id
                          ├─   0.473388s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.473399s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.473408s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.473420s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.473428s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.473447s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.473483s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.473501s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.473553s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.473618s   0ms DEBUG checking edge Product/c -(id)- ID/c
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.473643s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.473665s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                          ├─   0.473675s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.473696s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                        ├─   0.473707s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.473731s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.473778s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.473803s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.473825s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.473837s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.473876s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.473886s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "d"})
                                ├─   0.473895s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.473931s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.473987s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.474014s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.474041s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.474055s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.474098s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.474108s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "c", "a", "d"})
                                        ├─   0.474118s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.474127s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c", "a", "d"})
                                        ├─   0.474137s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.474147s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c", "a", "d"})
                                        ├─   0.474156s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.474165s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "c", "a", "d"})
                                        ├─   0.474176s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.474186s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.474208s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.474230s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.474251s   0ms DEBUG Paths for id
                                  ├─   0.474263s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.474272s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.474287s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.474295s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.474316s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.474351s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.474371s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.474402s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.474465s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.474491s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.474519s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.474530s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                ├─   0.474553s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                                ├─   0.474565s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.474574s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "d"})
                                ├─   0.474583s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.474591s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "d"})
                                ├─   0.474602s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.474610s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                              ┌─┘
                              ├─   0.474633s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                            ┌─┘
                            ├─   0.474654s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                          ┌─┘
                          ├─   0.474674s   0ms DEBUG Paths for id
                          ├─   0.474685s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.474696s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.474705s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.474717s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.474724s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.474743s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.474774s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.474804s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.474843s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.474936s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.474977s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.475001s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.475015s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.475039s   2ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                        ├─   0.475055s   2ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        ├─   0.475063s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                        ├─   0.475074s   2ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.475081s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.475104s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.475126s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.475146s   3ms DEBUG Paths for id
                  ├─   0.475157s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.475166s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.475176s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.475184s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.475196s   3ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.475203s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.475221s  13ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.475251s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.475267s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.475291s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                  ├─   0.475342s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.475357s  13ms DEBUG No direct paths found
                ├─   0.475367s  13ms DEBUG going deeper
                ├─   0.475377s  13ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
                ├─   0.475385s  13ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                ├─   0.475392s  13ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                ├─   0.475401s  13ms DEBUG Ignoring. Already visited similar edge
                ├─   0.475408s  13ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                ├─   0.475415s  13ms DEBUG Ignoring. Already visited similar edge
                ├─   0.475422s  13ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                ├─   0.475428s  13ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                ├─   0.475437s  13ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                ├─   0.475444s  13ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d"})
                ├─   0.475451s  13ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                ├─   0.475458s  13ms DEBUG Ignoring. Already visited similar edge
                ├─   0.475464s  13ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                ├─   0.475471s  13ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d"})
                ├─   0.475478s  13ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                ├─   0.475484s  13ms DEBUG Ignoring. Already visited similar edge
                ├─   0.475493s  13ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.475500s  13ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(14)" }])
              ┌─┘
              ├─   0.475520s  13ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(14)" }], [])))
            ┌─┘
            ├─   0.475536s  13ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.475551s  13ms DEBUG Paths for isExpensiveWithDiscount
          ├─   0.475563s  13ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(isExpensiveWithDiscount🧩{hasDiscount})- Boolean/c is valid
          ├─   0.475569s  13ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.475581s  13ms DEBUG path Product/d -(🔑🧩{id})- Product/c -(isExpensiveWithDiscount🧩{hasDiscount})- Boolean/c is valid
          ├─   0.475588s  13ms INFO return=Ok(Some([ { cost: 1005, egdes: "EdgeIndex(34) --> EdgeIndex(14)" }]))
        ┌─┘
        ├─   0.475607s  13ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(canAffordWithDiscount🧩{isExpensiveWithDiscount})- Boolean/d
        └─┐from_path{path= { cost: 1005, egdes: "EdgeIndex(34) --> EdgeIndex(14)" }, root_node="Product/d"}
          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=2}
            ├─   0.475657s   0ms DEBUG Building root query tree node: Product/d
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.475675s   0ms DEBUG Processing edge: Product/d -(🔑🧩{id})- Product/c
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.475690s   0ms DEBUG Processing edge: Product/c -(isExpensiveWithDiscount🧩{hasDiscount})- Boolean/c
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.475714s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.475728s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.475760s  14ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(18)" }])
      ┌─┘
      ├─   0.475778s  16ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
      ├─   0.475788s  16ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.475808s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.475842s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.475859s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.475876s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.475885s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.475914s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.475933s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.475968s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.475986s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.476005s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.476014s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.476045s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.476053s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                      ├─   0.476061s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.476068s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                      ├─   0.476076s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.476086s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.476093s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.476114s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.476154s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.476193s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.476224s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.476237s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.476281s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.476290s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.476299s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.476307s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.476315s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.476323s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.476332s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.476340s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.476349s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.476357s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.476377s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.476397s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.476415s   0ms DEBUG Paths for id
                        ├─   0.476425s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.476432s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.476445s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.476453s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.476471s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.476502s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.476519s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.476546s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.476598s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.476621s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.476641s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.476651s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.476672s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.476683s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.476690s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.476709s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.476727s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.476744s   0ms DEBUG Paths for id
                ├─   0.476753s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.476762s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.476770s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.476780s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.476786s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.476802s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.476829s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.476845s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.476868s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.476915s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.476934s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.476952s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.476961s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.477000s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.477012s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              ├─   0.477019s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.477027s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.477033s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.477040s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.477064s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.477102s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.477121s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.477141s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.477151s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.477183s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.477204s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.477243s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.477267s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.477289s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.477299s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.477335s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.477344s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.477353s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.477360s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.477369s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.477377s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.477386s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.477393s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.477403s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.477411s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.477431s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.477450s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.477468s   0ms DEBUG Paths for id
                        ├─   0.477478s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.477489s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.477501s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.477509s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.477527s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.477558s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.477577s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.477604s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.477657s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.477679s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.477703s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.477714s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.477733s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.477743s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.477751s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.477759s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.477766s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.477774s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.477781s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.477790s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.477797s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.477816s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.477835s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.477852s   0ms DEBUG Paths for id
                ├─   0.477861s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.477870s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.477878s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.477888s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.477895s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.477911s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.477938s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.477954s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.477978s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.478025s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.478045s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.478063s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.478072s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.478089s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.478101s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.478108s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.478127s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.478145s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.478162s   2ms DEBUG Paths for id
        ├─   0.478171s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.478179s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.478187s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.478193s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.478203s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.478209s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.478224s  19ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.478251s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.478265s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.478286s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAffordWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.478332s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.478345s  19ms DEBUG No direct paths found
      ├─   0.478354s  19ms DEBUG going deeper
      ├─   0.478362s  19ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.478368s  19ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.478374s  19ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.478392s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.478424s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.478442s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.478459s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.478467s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.478497s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.478518s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.478553s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.478572s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.478591s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.478621s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.478680s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.478689s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                      ├─   0.478697s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.478718s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.478759s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.478785s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.478808s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.478823s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.478864s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.478874s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d", "c"})
                              ├─   0.478884s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.478892s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "d", "c"})
                              ├─   0.478900s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.478910s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.478918s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.478926s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d", "c"})
                              ├─   0.478940s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.478948s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.478974s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.478996s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.479014s   0ms DEBUG Paths for id
                        ├─   0.479024s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.479032s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.479045s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.479053s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.479071s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.479102s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.479120s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.479176s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.479243s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.479267s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.479287s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.479299s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.479319s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.479330s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.479338s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.479347s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.479354s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                      ├─   0.479365s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.479372s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.479392s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.479410s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.479428s   0ms DEBUG Paths for id
                ├─   0.479437s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.479446s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.479453s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.479465s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.479471s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.479487s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.479534s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.479578s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.479606s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.479659s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.479680s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.479698s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.479708s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.479726s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.479736s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.479756s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.479792s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.479811s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.479829s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.479839s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.479871s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.479892s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.479931s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.479955s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.479976s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.479987s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.480032s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.480041s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.480050s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.480058s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.480067s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.480075s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.480084s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.480092s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.480102s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.480110s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.480129s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.480149s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.480167s   0ms DEBUG Paths for id
                        ├─   0.480177s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.480185s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.480197s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.480205s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.480223s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.480254s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.480271s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.480298s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.480351s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.480374s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.480393s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.480404s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.480423s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.480433s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.480440s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.480448s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.480456s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.480463s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.480470s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.480480s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.480487s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.480506s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.480524s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.480542s   0ms DEBUG Paths for id
                ├─   0.480551s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.480560s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.480568s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.480578s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.480585s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.480601s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.480628s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.480644s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.480667s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.480714s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.480734s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.480752s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.480761s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.480778s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.480788s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.480794s   2ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.480801s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              ├─   0.480807s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.480816s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.480823s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.480842s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.480860s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.480877s   2ms DEBUG Paths for id
        ├─   0.480887s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.480895s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.480903s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.480910s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.480919s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.480925s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.480939s  21ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.480964s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.480978s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.480999s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAffordWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
        ├─   0.481040s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.481054s  22ms DEBUG No direct paths found
      ├─   0.481063s  22ms DEBUG going deeper
      ├─   0.481072s  22ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
      ├─   0.481082s  22ms DEBUG Ignoring. Already visited similar edge
      ├─   0.481090s  22ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      ├─   0.481096s  22ms DEBUG Ignoring. Already visited similar edge
      ├─   0.481102s  22ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      ├─   0.481107s  22ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.481113s  22ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.481120s  22ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.481130s  22ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
      ├─   0.481136s  22ms DEBUG Ignoring. Already visited similar edge
      ├─   0.481143s  22ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
      ├─   0.481148s  22ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.481154s  22ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
      ├─   0.481159s  22ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.481165s  22ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
      ├─   0.481171s  22ms DEBUG Ignoring. Already visited similar edge
      ├─   0.481179s  22ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.481185s  22ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.481208s  22ms DEBUG Indirect paths found: 1
    ├─   0.481220s  22ms DEBUG advanced: root(Query) -(b)- Query/b -(product)- Product/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(18)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.481283s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.481295s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.481307s   0ms DEBUG Processing edge: Query/b -(product)- Product/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.481358s   0ms DEBUG Processing edge: Product/b -(🔑🧩{id})- Product/d
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.481378s   0ms DEBUG Processing edge: Product/d -(canAffordWithDiscount🧩{isExpensiveWithDiscount})- Boolean/d
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.481401s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.481413s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.481424s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.481435s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="product", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.481562s   0ms DEBUG adding output field 'product' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/b -(🔑🧩{id})- Product/d", parent_fetch_step_index=1}
              ├─   0.481615s   0ms DEBUG created a new fetch step [2] subgraph(d) type(Product) requirement() key({id}) in children of 1
              ├─   0.481623s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.481631s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.481639s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path="product"}
                      ├─   0.481701s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.481726s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/d"}
                    └─┐can_satisfy_edge{path="Product/d", edge="id"}
                      ├─   0.481850s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/d'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/d", current_cost=0}
                            ├─   0.481889s   0ms DEBUG checking edge Product/d -(id)- ID/d
                            └─┐can_satisfy_edge{path="Product/d", edge="id"}
                              ├─   0.481910s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.481929s   0ms DEBUG Advancing path Product/d with edge Product/d -(id)- ID/d
                            ├─   0.481941s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(17)" }])
                          ┌─┘
                          ├─   0.481963s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(17)" }], [])))
                        ┌─┘
                        ├─   0.481981s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(17)" }], [])))
                      ┌─┘
                      ├─   0.481998s   0ms DEBUG Paths for id
                      ├─   0.482007s   0ms DEBUG   Path Product/d -(id)- ID/d is valid
                      ├─   0.482015s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.482027s   0ms DEBUG path Product/d -(id)- ID/d is valid
                      ├─   0.482034s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.482060s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.482068s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.482082s   0ms DEBUG created a new fetch step [3] subgraph(d) type(Product) requirement({isExpensiveWithDiscount}) in children of 1
                  ├─   0.482091s   0ms DEBUG Adding {isExpensiveWithDiscount} to fetch([3]).input
                  ├─   0.482099s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.482107s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.482128s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.482159s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/d -(🔑🧩{id})- Product/c", parent_fetch_step_index=4}
                        ├─   0.482198s   0ms DEBUG created a new fetch step [5] subgraph(c) type(Product) requirement() key({id}) in children of 4
                        ├─   0.482206s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                        ├─   0.482217s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.482225s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                ├─   0.482293s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.482322s   0ms DEBUG adding output field 'id' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_requires_field_edge{parent_fetch_step_index=5}
                            └─┐find_satisfiable_key{node="Product/c"}
                              └─┐can_satisfy_edge{path="Product/c", edge="id"}
                                ├─   0.482452s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                                └─┐validate_field_requirement{}
                                  └─┐validate_field_requirement{}
                                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/c", current_cost=0}
                                      ├─   0.482497s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                      └─┐can_satisfy_edge{path="Product/c", edge="id"}
                                        ├─   0.482521s   0ms INFO return=Ok(Some([]))
                                      ┌─┘
                                      ├─   0.482547s   0ms DEBUG Advancing path Product/c with edge Product/c -(id)- ID/c
                                      ├─   0.482560s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(13)" }])
                                    ┌─┘
                                    ├─   0.482608s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.482639s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                                ┌─┘
                                ├─   0.482659s   0ms DEBUG Paths for id
                                ├─   0.482671s   0ms DEBUG   Path Product/c -(id)- ID/c is valid
                                ├─   0.482680s   0ms DEBUG Found 1 best paths for this leaf requirement
                                ├─   0.482694s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                ├─   0.482702s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                              ┌─┘
                            ┌─┘
                            ├─   0.482732s   0ms DEBUG Key to re-enter: {id}
                            ├─   0.482741s   0ms DEBUG Creating a fetch step for children of @requires
                            ├─   0.482752s   0ms DEBUG created a new fetch step [6] subgraph(c) type(Product) requirement({hasDiscount}) in children of 4
                            ├─   0.482762s   0ms DEBUG Adding {hasDiscount} to fetch([6]).input
                            ├─   0.482771s   0ms DEBUG Adding {id} to fetch([6]).input
                            ├─   0.482780s   0ms DEBUG Creating a fetch step for requirement of @requires
                            ├─   0.482788s   0ms DEBUG Adding {id} to fetch([7]).input
                            └─┐connect{parent=4, child=7}
                            ┌─┘
                            ├─   0.482823s   0ms DEBUG Processing requirements
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7}
                                └─┐process_entity_move_edge{edge="Product/c -(🔑🧩{id})- Product/b", parent_fetch_step_index=7}
                                  ├─   0.482875s   0ms DEBUG created a new fetch step [8] subgraph(b) type(Product) requirement() key({id}) in children of 7
                                  ├─   0.482885s   0ms DEBUG adding input requirement '{id}' to fetch step [8]
                                  ├─   0.482894s   0ms DEBUG adding __typename field to output for type 'Product'
                                  ├─   0.482903s   0ms DEBUG connecting fetch step to parent [7] -> [8]
                                  └─┐connect{parent=7, child=8}
                                  ┌─┘
                                  └─┐process_requirements_for_fetch_steps{count=1}
                                    └─┐process_noop_edge{}
                                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                        └─┐process_plain_field_edge{parent_fetch_step_index=7, requiring_fetch_step_index=8, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                          ├─   0.483007s   0ms DEBUG connecting parent fetch step [7] to requiring fetch step [8]
                                          └─┐connect{parent=7, child=8}
                                          ┌─┘
                                          ├─   0.483047s   0ms DEBUG adding output field 'id' to fetch step [7]
                                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                          ┌─┘
                                        ┌─┘
                                      ┌─┘
                                    ┌─┘
                                    └─┐connect{parent=7, child=8}
                                    ┌─┘
                                  ┌─┘
                                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=8}
                                    └─┐process_plain_field_edge{parent_fetch_step_index=8, type_name="Product", field="hasDiscount", leaf=true, list=false, response_path="product", fetch_path=""}
                                      ├─   0.483196s   0ms DEBUG adding output field 'hasDiscount' to fetch step [8]
                                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=8}
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            ├─   0.483283s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                            └─┐connect{parent=8, child=6}
                            ┌─┘
                            ├─   0.483325s   0ms DEBUG Processing children
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.483399s   1ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=6, child=3}
                  ┌─┘
                  ├─   0.483422s   1ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.483522s   2ms DEBUG Done
├─   0.483533s   2ms DEBUG found roots
├─   0.483538s   2ms DEBUG print graph
├─   0.483543s   2ms DEBUG Nodes:
│ [1] Query/b {} → {product{__typename id}} at $.
│ [2] Product/d {__typename id} → {} at $.product
│ [3] Product/d {__typename isExpensiveWithDiscount id} → {canAffordWithDiscount} at $.product
│ [4] Product/d {__typename id} → {__typename id} at $.product
│ [5] Product/c {__typename id} → {} at $.product
│ [6] Product/c {__typename hasDiscount id} → {isExpensiveWithDiscount} at $.product
│ [7] Product/c {__typename id} → {__typename id} at $.product
│ [8] Product/b {__typename id} → {hasDiscount} at $.product
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│     [7]
│       [8]
│         [6]
│           [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.483759s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.483784s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=7}
      ┌─┘
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
    ├─   0.483839s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [7]
    └─┐perform_passthrough_child_merge{}
      ├─   0.483871s   0ms DEBUG merging fetch steps [1] and [7]
      └─┐connect{parent=1, child=8}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.483945s   0ms DEBUG optimization found: merge parent [1] with child [8]
    └─┐perform_fetch_step_merge{}
      ├─   0.483960s   0ms DEBUG merging fetch steps [1] and [8]
      └─┐connect{parent=1, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.484015s   0ms DEBUG Found optimization: 6 <- 5
    └─┐perform_fetch_step_merge{}
      ├─   0.484028s   0ms DEBUG merging fetch steps [6] and [5]
      └─┐connect{parent=1, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.484071s   0ms DEBUG optimization found: remove 'Product/d {__typename id} → {} at $.product'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="b"}
      └─┐execute{subgraph_name="b"}
        ├─   0.484644s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.487194s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "hasDiscount", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "hasDiscount", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Bool(true)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.487745s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.489932s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Bool(false)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="d"}
        └─┐execute{subgraph_name="d"}
          ├─   0.490406s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.492709s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.493194s DEBUG execution result: ExecutionResult { data: Some(Object {"product": Object {"canAffordWithDiscount": Bool(true)}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{product{__typename id hasDiscount}}")}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{isExpensiveWithDiscount}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("hasDiscount")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("d"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{canAffordWithDiscount}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("isExpensiveWithDiscount")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.497350s DEBUG original document: query {
  product {
    canAfford
    canAffordWithDiscount
  }
}

   0.497465s DEBUG normalized document: query{product{canAfford canAffordWithDiscount}}

   0.497478s DEBUG executable operation: query{product{canAfford canAffordWithDiscount}}
┐walk_operation{}
├─   0.497880s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="product", leaf=false}
  ├─   0.497938s   0ms DEBUG Trying to advance to: product{canAfford canAffordWithDiscount} through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "canAfford", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "canAffordWithDiscount", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.497999s   0ms DEBUG checking edge Query/b -(product)- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="product"}
        ├─   0.498024s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.498051s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(product)- Product/b
      ├─   0.498064s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.498082s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "canAfford", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "canAffordWithDiscount", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.498115s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.498122s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.498134s   0ms DEBUG Indirect paths found: 0
    ├─   0.498142s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.498156s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="canAffordWithDiscount", leaf=true}
  ├─   0.498181s   0ms DEBUG Trying to advance to: canAffordWithDiscount through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(product)- Product/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "canAffordWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.498207s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.498219s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "canAffordWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.498266s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.498352s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.498417s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.498439s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.498462s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.498473s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.498507s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              ├─   0.498516s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
              ├─   0.498524s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.498546s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.498629s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.498660s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.498683s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.498694s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.498758s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.498768s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                      ├─   0.498776s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.498783s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                      ├─   0.498791s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.498799s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.498807s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.498832s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.498931s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.498966s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.499012s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.499028s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.499081s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.499091s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "a"})
                              ├─   0.499101s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.499109s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "a"})
                              ├─   0.499118s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.499126s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.499134s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.499142s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "c", "a"})
                              ├─   0.499153s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.499162s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.499183s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.499213s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.499232s   0ms DEBUG Paths for id
                        ├─   0.499243s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.499251s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.499270s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.499279s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.499320s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.499361s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.499382s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.499411s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.499471s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.499495s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.499516s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.499528s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.499548s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.499565s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.499576s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.499597s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.499635s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.499658s   1ms DEBUG Paths for id
                ├─   0.499670s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.499679s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.499688s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.499701s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.499709s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.499744s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.499784s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.499802s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.499833s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.499887s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.499908s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.499927s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.499937s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.499955s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.499965s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.499973s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.499979s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.499999s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.500062s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.500103s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.500128s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.500139s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.500184s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.500194s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a"})
                      ├─   0.500202s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.500239s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.500290s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.500330s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.500361s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.500373s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.500430s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.500442s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c"})
                              ├─   0.500451s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.500459s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c"})
                              ├─   0.500468s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.500476s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.500485s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.500493s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c"})
                              ├─   0.500505s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.500513s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.500537s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.500559s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.500577s   0ms DEBUG Paths for id
                        ├─   0.500588s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.500596s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.500610s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.500631s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.500659s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.500708s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.500753s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.500797s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.500857s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.500881s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.500901s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.500912s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.500932s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.500944s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.500967s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.500978s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.500986s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a"})
                      ├─   0.500997s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.501005s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.501032s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.501066s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.501088s   1ms DEBUG Paths for id
                ├─   0.501129s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.501214s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.501244s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.501262s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.501287s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.501324s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.501378s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.501404s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.501434s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.501515s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.501546s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.501574s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.501595s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.501619s   3ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.501640s   3ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.501652s   3ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.501755s   3ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.501788s   3ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.501806s   3ms DEBUG Paths for id
        ├─   0.501818s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.501828s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.501874s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.501899s   3ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.501917s   3ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.501924s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.501949s   3ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.501983s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.501998s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.502020s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAffordWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
        ├─   0.502091s   0ms DEBUG checking edge Product/d -(canAffordWithDiscount🧩{isExpensiveWithDiscount})- Boolean/d
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="canAffordWithDiscount"}
          ├─   0.502121s   0ms DEBUG checking requirements {isExpensiveWithDiscount} for edge 'Product/d -(canAffordWithDiscount🧩{isExpensiveWithDiscount})- Boolean/d'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.502174s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.502220s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                ├─   0.502229s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
                ├─   0.502237s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.502264s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.502323s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.502355s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.502378s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.502390s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.502462s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.502474s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                        ├─   0.502483s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        ├─   0.502490s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                        ├─   0.502499s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.502527s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.502587s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.502615s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.502641s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.502653s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.502716s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.502726s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "b"})
                                ├─   0.502735s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.502743s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "b"})
                                ├─   0.502752s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.502760s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "c", "b"})
                                ├─   0.502769s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.502798s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.502852s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.502881s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.502928s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.502950s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.502998s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.503009s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "a", "d", "b"})
                                        ├─   0.503019s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.503028s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "d", "b"})
                                        ├─   0.503038s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.503047s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "a", "d", "b"})
                                        ├─   0.503057s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.503066s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "d", "b"})
                                        ├─   0.503077s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.503086s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.503109s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.503132s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.503155s   0ms DEBUG Paths for id
                                  ├─   0.503167s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.503176s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.503194s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.503214s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.503236s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.503294s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.503318s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.503352s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.503423s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.503454s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.503479s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.503508s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.503542s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                                ├─   0.503557s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.503566s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.503590s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.503613s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.503635s   1ms DEBUG Paths for id
                          ├─   0.503647s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.503658s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.503668s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.503681s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.503689s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.503708s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.503742s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.503798s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.503832s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.503895s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.503920s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.503942s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.503953s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.503974s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                        ├─   0.503986s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.504027s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.504083s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.504126s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.504158s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.504172s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.504216s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.504226s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "a"})
                                ├─   0.504236s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.504244s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "a"})
                                ├─   0.504253s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.504282s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.504334s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.504376s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.504411s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.504425s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.504472s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.504482s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "a", "d", "b"})
                                        ├─   0.504493s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.504502s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "d", "b"})
                                        ├─   0.504513s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.504525s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "a", "d", "b"})
                                        ├─   0.504535s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.504544s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "d", "b"})
                                        ├─   0.504556s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.504565s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.504588s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.504612s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.504633s   0ms DEBUG Paths for id
                                  ├─   0.504645s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.504657s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.504672s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.504681s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.504704s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.504740s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.504761s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.504795s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.504860s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.504889s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.504912s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.504924s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.504947s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                                ├─   0.504960s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.504969s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "c", "a"})
                                ├─   0.504981s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.504989s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.505015s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.505037s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.505069s   1ms DEBUG Paths for id
                          ├─   0.505081s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.505091s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.505100s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.505112s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.505120s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.505139s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.505170s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.505188s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.505217s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.505291s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.505337s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.505368s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.505390s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.505419s   2ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                        ├─   0.505447s   3ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.505457s   3ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                      ┌─┘
                      ├─   0.505486s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                    ┌─┘
                    ├─   0.505509s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                  ┌─┘
                  ├─   0.505530s   3ms DEBUG Paths for id
                  ├─   0.505542s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.505552s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.505562s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.505570s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.505582s   3ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.505590s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.505607s   3ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.505639s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.505655s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.505680s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                  ├─   0.505735s   0ms DEBUG checking edge Product/c -(isExpensiveWithDiscount🧩{hasDiscount})- Boolean/c
                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="isExpensiveWithDiscount"}
                    ├─   0.505758s   0ms DEBUG checking requirements {hasDiscount} for edge 'Product/c -(isExpensiveWithDiscount🧩{hasDiscount})- Boolean/c'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "hasDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.505798s   0ms INFO return=Ok([])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "hasDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.505836s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                          ├─   0.505856s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                          ├─   0.505884s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                          ├─   0.505907s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                          ├─   0.505928s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.505966s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.506017s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.506048s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.506074s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.506087s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.506130s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                  ├─   0.506140s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "b"})
                                  ├─   0.506149s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                  ├─   0.506158s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "b"})
                                  ├─   0.506167s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                  ├─   0.506175s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "c", "b"})
                                  ├─   0.506184s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.506213s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                                    └─┐validate_field_requirement{}
                                      └─┐validate_field_requirement{}
                                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.506283s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                            ├─   0.506323s   0ms INFO return=Ok(Some([]))
                                          ┌─┘
                                          ├─   0.506352s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                          ├─   0.506365s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                        ┌─┘
                                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.506412s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                          ├─   0.506423s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "a", "d", "b"})
                                          ├─   0.506433s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                          ├─   0.506443s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "d", "b"})
                                          ├─   0.506453s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                          ├─   0.506462s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "a", "d", "b"})
                                          ├─   0.506472s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                          ├─   0.506481s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "d", "b"})
                                          ├─   0.506492s   0ms DEBUG Finished finding indirect paths, found total of 0
                                          ├─   0.506502s   0ms INFO return=Ok([])
                                        ┌─┘
                                        ├─   0.506525s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                      ┌─┘
                                      ├─   0.506567s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.506592s   0ms DEBUG Paths for id
                                    ├─   0.506608s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                    ├─   0.506617s   0ms DEBUG Found 1 best paths for this leaf requirement
                                    ├─   0.506632s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                    ├─   0.506648s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                  ┌─┘
                                  ├─   0.506669s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                      ├─   0.506713s   0ms DEBUG Building root query tree node: Product/c
                                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                        ├─   0.506735s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                        ┌─┘
                                        ├─   0.506786s   0ms DEBUG No subsequent steps (leaf or end of path)
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=4007}
                                    ├─   0.506873s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                    └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                                      ├─   0.506911s   0ms INFO return=Ok(Some([]))
                                    ┌─┘
                                    ├─   0.506938s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                    ├─   0.506951s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                  ┌─┘
                                  ├─   0.506997s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                                  ├─   0.507014s   0ms DEBUG Finished finding indirect paths, found total of 1
                                  ├─   0.507023s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.507049s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                              ┌─┘
                              ├─   0.507088s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.507114s   1ms DEBUG Paths for id
                            ├─   0.507139s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                            ├─   0.507154s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                            ├─   0.507164s   1ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.507189s   1ms DEBUG path Product/c -(id)- ID/c is valid
                            ├─   0.507200s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                          ┌─┘
                          ├─   0.507224s   1ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                            └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                              ├─   0.507260s   0ms DEBUG Building root query tree node: Product/c
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.507297s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.507334s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "hasDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=4007}
                            ├─   0.507412s   0ms DEBUG checking edge Product/b -(hasDiscount)- Boolean/b
                            └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="hasDiscount"}
                              ├─   0.507449s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.507474s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(hasDiscount)- Boolean/b
                            ├─   0.507486s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(10)" }])
                          ┌─┘
                          ├─   0.507525s   1ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                          ├─   0.507539s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.507583s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.507653s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.507689s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.507716s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.507729s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.507799s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                  ├─   0.507814s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "a"})
                                  ├─   0.507828s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                  ├─   0.507839s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "a"})
                                  ├─   0.507851s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.507897s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                                    └─┐validate_field_requirement{}
                                      └─┐validate_field_requirement{}
                                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.507951s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                            ├─   0.507981s   0ms INFO return=Ok(Some([]))
                                          ┌─┘
                                          ├─   0.508010s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                          ├─   0.508024s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                        ┌─┘
                                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.508112s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                          ├─   0.508128s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "a", "d", "b"})
                                          ├─   0.508139s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                          ├─   0.508148s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "d", "b"})
                                          ├─   0.508158s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                          ├─   0.508178s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "a", "d", "b"})
                                          ├─   0.508192s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                          ├─   0.508202s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "d", "b"})
                                          ├─   0.508214s   0ms DEBUG Finished finding indirect paths, found total of 0
                                          ├─   0.508232s   0ms INFO return=Ok([])
                                        ┌─┘
                                        ├─   0.508262s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                      ┌─┘
                                      ├─   0.508289s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.508312s   0ms DEBUG Paths for id
                                    ├─   0.508327s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                    ├─   0.508336s   0ms DEBUG Found 1 best paths for this leaf requirement
                                    ├─   0.508351s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                    ├─   0.508360s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                  ┌─┘
                                  ├─   0.508383s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                      ├─   0.508421s   0ms DEBUG Building root query tree node: Product/c
                                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                        ├─   0.508442s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                        ┌─┘
                                        ├─   0.508474s   0ms DEBUG No subsequent steps (leaf or end of path)
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=4007}
                                    ├─   0.508542s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                    └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                                      ├─   0.508571s   0ms INFO return=Ok(Some([]))
                                    ┌─┘
                                    ├─   0.508595s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                    ├─   0.508607s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                  ┌─┘
                                  ├─   0.508630s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                                  ├─   0.508642s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                  ├─   0.508651s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "c", "a"})
                                  ├─   0.508663s   0ms DEBUG Finished finding indirect paths, found total of 1
                                  ├─   0.508672s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.508695s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                              ┌─┘
                              ├─   0.508718s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.508740s   1ms DEBUG Paths for id
                            ├─   0.508752s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                            ├─   0.508763s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                            ├─   0.508772s   1ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.508784s   1ms DEBUG path Product/c -(id)- ID/c is valid
                            ├─   0.508792s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                          ┌─┘
                          ├─   0.508811s   2ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                            └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                              ├─   0.508843s   0ms DEBUG Building root query tree node: Product/c
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.508863s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.508909s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "hasDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=4007}
                            ├─   0.508980s   0ms INFO return=Ok([])
                          ┌─┘
                          ├─   0.508998s   3ms DEBUG No direct paths found
                          ├─   0.509011s   3ms DEBUG going deeper
                          ├─   0.509023s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
                          ├─   0.509031s   3ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "a"})
                          ├─   0.509040s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                          ├─   0.509048s   3ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "a"})
                          ├─   0.509057s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                          ├─   0.509066s   3ms DEBUG Ignoring. Already visited similar edge
                          ├─   0.509075s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                          ├─   0.509082s   3ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "c", "a"})
                          ├─   0.509095s   3ms DEBUG Finished finding indirect paths, found total of 1
                          ├─   0.509102s   3ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(10)" }])
                        ┌─┘
                        ├─   0.509126s   3ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(10)" }], [])))
                      ┌─┘
                      ├─   0.509145s   3ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(10)" }], [])))
                    ┌─┘
                    ├─   0.509162s   3ms DEBUG Paths for hasDiscount
                    ├─   0.509174s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(hasDiscount)- Boolean/b is valid
                    ├─   0.509182s   3ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.509195s   3ms DEBUG path Product/c -(🔑🧩{id})- Product/b -(hasDiscount)- Boolean/b is valid
                    ├─   0.509203s   3ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(29) --> EdgeIndex(10)" }]))
                  ┌─┘
                  ├─   0.509224s   3ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(isExpensiveWithDiscount🧩{hasDiscount})- Boolean/c
                  └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(29) --> EdgeIndex(10)" }, root_node="Product/c"}
                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=2}
                      ├─   0.509255s   0ms DEBUG Building root query tree node: Product/c
                      └─┐from_path_segment_sequences{current_index=0, total_segments=2}
                        ├─   0.509273s   0ms DEBUG Processing edge: Product/c -(🔑🧩{id})- Product/b
                        └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                          ├─   0.509290s   0ms DEBUG Processing edge: Product/b -(hasDiscount)- Boolean/b
                          └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                          ┌─┘
                          ├─   0.509316s   0ms DEBUG No subsequent steps (leaf or end of path)
                        ┌─┘
                        ├─   0.509332s   0ms DEBUG Adding subsequent step as child
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.509366s   3ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(14)" }])
                ┌─┘
                ├─   0.509385s   7ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                ├─   0.509396s   7ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.509426s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.509466s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.509488s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.509508s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.509518s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.509554s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.509562s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "b"})
                        ├─   0.509570s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.509593s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.509636s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.509661s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.509685s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.509705s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.509744s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.509753s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "b", "c"})
                                ├─   0.509763s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.509771s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "b", "c"})
                                ├─   0.509780s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.509789s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "b", "c"})
                                ├─   0.509797s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.509824s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.509871s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.509898s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.509923s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.509936s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.510021s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.510036s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "a", "d", "b"})
                                        ├─   0.510046s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.510055s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "d", "b"})
                                        ├─   0.510065s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.510074s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "a", "d", "b"})
                                        ├─   0.510084s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.510093s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "d", "b"})
                                        ├─   0.510105s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.510115s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.510142s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.510186s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.510211s   0ms DEBUG Paths for id
                                  ├─   0.510226s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.510248s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.510279s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.510291s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.510319s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.510377s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.510400s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.510434s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.510523s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.510552s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.510577s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.510589s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.510613s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                                ├─   0.510629s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.510638s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.510661s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.510687s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.510709s   1ms DEBUG Paths for id
                          ├─   0.510720s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.510731s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.510740s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.510753s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.510761s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.510780s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.510812s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.510831s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.510860s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.510917s   0ms DEBUG checking edge Product/c -(id)- ID/c
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.510943s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.510963s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                          ├─   0.510974s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.510993s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                        ├─   0.511004s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        ├─   0.511013s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "b"})
                        ├─   0.511022s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.511046s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.511091s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.511117s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.511140s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.511151s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.511192s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.511201s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "b", "a"})
                                ├─   0.511211s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.511237s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.511284s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.511310s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.511335s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.511347s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.511390s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.511400s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d", "b"})
                                        ├─   0.511410s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.511419s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d", "b"})
                                        ├─   0.511430s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.511439s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "c", "d", "b"})
                                        ├─   0.511448s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.511459s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d", "b"})
                                        ├─   0.511470s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.511479s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.511501s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.511523s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.511546s   0ms DEBUG Paths for id
                                  ├─   0.511558s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.511567s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.511584s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.511593s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.511615s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.511651s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.511672s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.511704s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.511769s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.511796s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.511819s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.511830s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                ├─   0.511853s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                                ├─   0.511865s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.511877s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "b", "a"})
                                ├─   0.511886s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.511895s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "b", "a"})
                                ├─   0.511905s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.511914s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                              ┌─┘
                              ├─   0.511937s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                            ┌─┘
                            ├─   0.511960s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                          ┌─┘
                          ├─   0.511980s   0ms DEBUG Paths for id
                          ├─   0.512003s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.512017s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.512045s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.512063s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.512071s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.512095s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.512129s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.512147s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.512177s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.512237s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.512261s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.512282s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.512292s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.512312s   2ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                        ├─   0.512330s   2ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.512338s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.512364s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.512386s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.512408s   3ms DEBUG Paths for id
                  ├─   0.512419s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.512429s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.512456s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.512479s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.512492s   3ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.512500s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.512523s  10ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.512554s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.512571s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.512595s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                  ├─   0.512648s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.512664s  10ms DEBUG No direct paths found
                ├─   0.512677s  10ms DEBUG going deeper
                ├─   0.512687s  10ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.512709s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.512748s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.512770s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.512791s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.512801s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.512837s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.512853s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a"})
                        ├─   0.512862s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.512885s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.512928s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.512953s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.512976s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.512987s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.513040s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.513050s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c"})
                                ├─   0.513059s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.513067s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c"})
                                ├─   0.513076s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.513103s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.513159s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.513186s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.513211s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.513224s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.513266s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.513276s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d", "b"})
                                        ├─   0.513286s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.513295s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d", "b"})
                                        ├─   0.513305s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.513314s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "c", "d", "b"})
                                        ├─   0.513324s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.513332s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d", "b"})
                                        ├─   0.513343s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.513353s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.513375s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.513399s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.513420s   0ms DEBUG Paths for id
                                  ├─   0.513431s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.513440s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.513454s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.513463s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.513483s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.513550s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.513573s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.513606s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.513672s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.513706s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.513730s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.513742s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.513764s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                                ├─   0.513777s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.513786s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c"})
                                ├─   0.513797s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.513806s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.513830s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.513852s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.513872s   1ms DEBUG Paths for id
                          ├─   0.513902s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.513916s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.513926s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.513939s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.513946s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.513970s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.514020s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.514040s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.514072s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.514133s   0ms DEBUG checking edge Product/c -(id)- ID/c
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.514157s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.514179s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                          ├─   0.514189s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.514209s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                        ├─   0.514220s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.514244s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.514288s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.514313s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.514336s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.514347s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.514386s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.514396s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "b"})
                                ├─   0.514405s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.514431s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.514478s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.514504s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.514528s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.514540s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.514582s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.514597s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d", "b"})
                                        ├─   0.514607s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.514639s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d", "b"})
                                        ├─   0.514651s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.514659s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "c", "d", "b"})
                                        ├─   0.514669s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.514678s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d", "b"})
                                        ├─   0.514689s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.514699s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.514739s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.514781s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.514810s   0ms DEBUG Paths for id
                                  ├─   0.514824s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.514833s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.514848s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.514857s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.514878s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.514915s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.514935s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.514980s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.515056s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.515083s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.515107s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.515118s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                ├─   0.515141s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                                ├─   0.515153s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.515162s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "a", "b"})
                                ├─   0.515172s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.515194s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "b"})
                                ├─   0.515209s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.515217s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                              ┌─┘
                              ├─   0.515247s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                            ┌─┘
                            ├─   0.515269s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                          ┌─┘
                          ├─   0.515289s   1ms DEBUG Paths for id
                          ├─   0.515302s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.515313s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.515322s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.515335s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.515343s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.515362s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.515395s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.515415s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.515443s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.515502s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.515527s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.515548s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.515558s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.515585s   2ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                        ├─   0.515597s   2ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        ├─   0.515604s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a"})
                        ├─   0.515615s   2ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.515622s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.515644s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.515664s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.515686s   2ms DEBUG Paths for id
                  ├─   0.515696s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.515706s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.515734s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.515746s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.515758s   3ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.515765s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.515797s  13ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.515827s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.515843s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.515868s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                  ├─   0.515920s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.515935s  13ms DEBUG No direct paths found
                ├─   0.515945s  13ms DEBUG going deeper
                ├─   0.515955s  13ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
                ├─   0.515964s  13ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a"})
                ├─   0.515971s  13ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                ├─   0.515980s  13ms DEBUG Ignoring. Already visited similar edge
                ├─   0.515987s  13ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                ├─   0.515994s  13ms DEBUG Ignoring. Already visited similar edge
                ├─   0.516001s  13ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                ├─   0.516007s  13ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a"})
                ├─   0.516016s  13ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                ├─   0.516022s  13ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "b"})
                ├─   0.516029s  13ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                ├─   0.516036s  13ms DEBUG Ignoring. Already visited similar edge
                ├─   0.516043s  13ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                ├─   0.516049s  13ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"d", "b"})
                ├─   0.516056s  13ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                ├─   0.516063s  13ms DEBUG Ignoring. Already visited similar edge
                ├─   0.516073s  13ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.516080s  13ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(14)" }])
              ┌─┘
              ├─   0.516102s  13ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(14)" }], [])))
            ┌─┘
            ├─   0.516119s  13ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.516134s  14ms DEBUG Paths for isExpensiveWithDiscount
          ├─   0.516145s  14ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(isExpensiveWithDiscount🧩{hasDiscount})- Boolean/c is valid
          ├─   0.516152s  14ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.516164s  14ms DEBUG path Product/d -(🔑🧩{id})- Product/c -(isExpensiveWithDiscount🧩{hasDiscount})- Boolean/c is valid
          ├─   0.516171s  14ms INFO return=Ok(Some([ { cost: 1005, egdes: "EdgeIndex(34) --> EdgeIndex(14)" }]))
        ┌─┘
        ├─   0.516191s  14ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(canAffordWithDiscount🧩{isExpensiveWithDiscount})- Boolean/d
        └─┐from_path{path= { cost: 1005, egdes: "EdgeIndex(34) --> EdgeIndex(14)" }, root_node="Product/d"}
          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=2}
            ├─   0.516217s   0ms DEBUG Building root query tree node: Product/d
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.516231s   0ms DEBUG Processing edge: Product/d -(🔑🧩{id})- Product/c
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.516246s   0ms DEBUG Processing edge: Product/c -(isExpensiveWithDiscount🧩{hasDiscount})- Boolean/c
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.516289s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.516304s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.516338s  14ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(18)" }])
      ┌─┘
      ├─   0.516359s  18ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
      ├─   0.516385s  18ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.516415s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.516449s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.516469s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.516489s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.516498s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.516537s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.516556s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.516591s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.516610s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.516629s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.516638s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.516671s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.516693s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                      ├─   0.516706s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.516713s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                      ├─   0.516720s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.516728s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.516735s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.516775s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.516851s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.516896s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.516937s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.516951s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.516992s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.517014s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "a"})
                              ├─   0.517027s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.517035s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "a"})
                              ├─   0.517044s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.517052s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.517060s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.517068s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "c", "a"})
                              ├─   0.517078s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.517086s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.517112s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.517133s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.517151s   0ms DEBUG Paths for id
                        ├─   0.517162s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.517170s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.517184s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.517191s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.517227s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.517274s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.517292s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.517319s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.517375s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.517400s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.517420s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.517431s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.517450s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.517463s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.517470s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.517490s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.517509s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.517526s   0ms DEBUG Paths for id
                ├─   0.517535s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.517544s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.517552s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.517563s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.517570s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.517587s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.517638s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.517657s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.517683s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.517740s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.517761s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.517779s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.517789s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.517806s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.517817s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              ├─   0.517824s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.517832s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.517838s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.517845s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.517864s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.517901s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.517920s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.517939s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.517948s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.517981s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.518001s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.518040s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.518064s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.518085s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.518095s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.518151s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.518162s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c", "a"})
                              ├─   0.518171s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.518179s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c", "a"})
                              ├─   0.518188s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.518196s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.518205s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.518213s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "c", "a"})
                              ├─   0.518223s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.518277s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.518357s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.518390s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.518409s   0ms DEBUG Paths for id
                        ├─   0.518424s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.518433s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.518447s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.518463s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.518482s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.518519s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.518537s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.518564s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.518623s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.518647s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.518693s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.518708s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.518729s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.518740s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.518759s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                      ├─   0.518767s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.518775s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.518782s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.518789s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                      ├─   0.518799s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.518806s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.518826s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.518845s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.518862s   1ms DEBUG Paths for id
                ├─   0.518871s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.518880s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.518888s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.518899s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.518906s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.518922s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.518952s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.518968s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.518992s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.519041s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.519061s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.519079s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.519089s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.519106s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.519119s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.519125s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.519144s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.519162s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.519180s   2ms DEBUG Paths for id
        ├─   0.519188s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.519196s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.519204s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.519211s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.519221s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.519227s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.519241s  21ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.519266s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.519279s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.519300s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAffordWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.519342s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.519354s  21ms DEBUG No direct paths found
      ├─   0.519363s  21ms DEBUG going deeper
      ├─   0.519370s  21ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.519377s  21ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.519382s  21ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.519400s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.519432s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.519449s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.519466s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.519475s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.519504s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.519523s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.519558s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.519576s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.519595s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.519604s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.519635s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.519643s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a"})
                      ├─   0.519651s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.519671s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.519710s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.519734s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.519755s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.519766s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.519801s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.519810s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c"})
                              ├─   0.519819s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.519826s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c"})
                              ├─   0.519835s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.519843s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.519852s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.519859s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c"})
                              ├─   0.519869s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.519877s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.519896s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.519915s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.519932s   0ms DEBUG Paths for id
                        ├─   0.519942s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.519950s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.519962s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.519969s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.519987s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.520017s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.520035s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.520061s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.520113s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.520136s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.520155s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.520165s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.520184s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.520194s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.520202s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.520230s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.520238s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a"})
                      ├─   0.520249s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.520256s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.520281s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.520302s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.520319s   0ms DEBUG Paths for id
                ├─   0.520329s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.520338s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.520346s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.520357s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.520364s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.520380s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.520409s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.520425s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.520449s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.520497s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.520535s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.520562s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.520574s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.520592s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.520602s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.520625s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.520662s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.520681s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.520700s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.520734s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.520780s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.520802s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.520927s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.520954s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.520979s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.520991s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.521053s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.521075s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "a", "c"})
                              ├─   0.521088s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.521096s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "a", "c"})
                              ├─   0.521105s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.521113s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.521122s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.521129s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"d", "a", "c"})
                              ├─   0.521140s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.521148s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.521172s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.521195s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.521213s   0ms DEBUG Paths for id
                        ├─   0.521224s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.521244s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.521262s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.521270s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.521292s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.521342s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.521362s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.521391s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.521448s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.521473s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.521493s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.521504s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.521523s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.521534s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.521542s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.521550s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.521558s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.521568s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.521575s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.521585s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.521593s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.521613s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.521631s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.521651s   1ms DEBUG Paths for id
                ├─   0.521660s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.521669s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.521677s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.521688s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.521698s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.521714s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.521743s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.521759s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.521783s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.521831s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.521852s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.521871s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.521880s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.521897s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.521909s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.521916s   2ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.521922s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              ├─   0.521929s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.521938s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.521944s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.521963s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.521981s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.522013s   2ms DEBUG Paths for id
        ├─   0.522021s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.522029s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.522037s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.522044s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.522053s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.522059s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.522074s  23ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.522098s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.522112s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.522132s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAffordWithDiscount", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
        ├─   0.522174s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.522186s  23ms DEBUG No direct paths found
      ├─   0.522195s  23ms DEBUG going deeper
      ├─   0.522203s  23ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
      ├─   0.522211s  23ms DEBUG Ignoring. Already visited similar edge
      ├─   0.522217s  23ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      ├─   0.522223s  23ms DEBUG Ignoring. Already visited similar edge
      ├─   0.522229s  24ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      ├─   0.522237s  24ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.522242s  24ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.522248s  24ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.522256s  24ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
      ├─   0.522262s  24ms DEBUG Ignoring. Already visited similar edge
      ├─   0.522268s  24ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
      ├─   0.522273s  24ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.522279s  24ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
      ├─   0.522285s  24ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.522290s  24ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
      ├─   0.522296s  24ms DEBUG Ignoring. Already visited similar edge
      ├─   0.522304s  24ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.522309s  24ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.522327s  24ms DEBUG Indirect paths found: 1
    ├─   0.522337s  24ms DEBUG advanced: root(Query) -(b)- Query/b -(product)- Product/b
  ┌─┘
┌─┘
└─┐process_field{field_name="canAfford", leaf=true}
  ├─   0.522407s   0ms DEBUG Trying to advance to: canAfford through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(product)- Product/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.522440s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.522455s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
      ├─   0.522474s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.522492s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.522526s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.522543s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.522560s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.522578s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.522608s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              ├─   0.522615s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
              ├─   0.522622s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.522640s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.522675s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.522694s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.522712s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.522721s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.522753s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.522761s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                      ├─   0.522769s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.522775s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                      ├─   0.522783s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.522790s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.522798s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.522818s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.522857s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.522880s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.522901s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.522929s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.523000s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.523013s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.523022s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.523030s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.523039s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.523047s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.523055s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.523063s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.523073s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.523091s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.523115s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.523152s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.523174s   0ms DEBUG Paths for id
                        ├─   0.523186s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.523194s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.523207s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.523215s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.523234s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.523267s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.523286s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.523312s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.523378s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.523401s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.523421s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.523432s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.523451s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.523463s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.523470s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.523490s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.523508s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.523525s   0ms DEBUG Paths for id
                ├─   0.523534s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.523543s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.523551s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.523561s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.523568s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.523584s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.523613s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.523629s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.523652s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.523699s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.523719s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.523737s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.523746s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.523763s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.523772s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.523779s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.523786s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.523805s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.523842s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.523886s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.523909s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.523920s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.523960s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.523969s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                      ├─   0.523977s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.523997s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.524037s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.524061s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.524085s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.524099s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.524151s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.524160s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.524170s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.524178s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.524186s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.524194s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.524203s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.524210s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.524221s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.524229s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.524249s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.524300s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.524324s   0ms DEBUG Paths for id
                        ├─   0.524336s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.524344s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.524357s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.524365s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.524386s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.524420s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.524438s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.524465s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.524520s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.524543s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.524583s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.524597s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.524636s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.524650s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.524658s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.524665s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.524673s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                      ├─   0.524683s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.524690s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.524712s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.524731s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.524758s   0ms DEBUG Paths for id
                ├─   0.524768s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.524777s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.524784s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.524796s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.524802s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.524819s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.524848s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.524864s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.524888s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.524937s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.524959s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.524978s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.524987s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.525005s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.525017s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.525024s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.525044s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.525062s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.525079s   2ms DEBUG Paths for id
        ├─   0.525087s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.525095s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.525103s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.525110s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.525119s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.525125s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.525139s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.525163s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.525177s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.525198s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
        ├─   0.525240s   0ms DEBUG checking edge Product/d -(canAfford🧩{isExpensive})- Boolean/d
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="canAfford"}
          ├─   0.525263s   0ms DEBUG checking requirements {isExpensive} for edge 'Product/d -(canAfford🧩{isExpensive})- Boolean/d'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.525297s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.525328s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                ├─   0.525335s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
                ├─   0.525343s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.525364s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.525403s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.525427s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.525448s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.525459s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.525494s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.525502s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                        ├─   0.525511s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        ├─   0.525518s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                        ├─   0.525526s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.525549s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.525594s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.525623s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.525645s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.525657s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.525718s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.525732s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "b", "d"})
                                ├─   0.525741s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.525749s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b", "d"})
                                ├─   0.525759s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.525767s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b", "d"})
                                ├─   0.525777s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.525857s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.526010s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.526056s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.526086s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.526104s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.526154s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.526166s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d", "a", "b"})
                                        ├─   0.526177s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.526187s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d", "a", "b"})
                                        ├─   0.526198s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.526207s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "d", "a", "b"})
                                        ├─   0.526217s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.526226s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "d", "a", "b"})
                                        ├─   0.526238s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.526247s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.526271s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.526333s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.526386s   0ms DEBUG Paths for id
                                  ├─   0.526446s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.526460s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.526477s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.526486s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.526518s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.526580s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.526620s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.526658s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.526735s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.526763s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.526808s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.526824s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.526848s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                                ├─   0.526863s   1ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.526872s   1ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.526895s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.526918s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.526938s   1ms DEBUG Paths for id
                          ├─   0.526949s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.526960s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.526969s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.526981s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.526989s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.527008s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.527061s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.527082s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.527122s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.527183s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.527209s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.527248s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.527259s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.527279s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                        ├─   0.527292s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.527317s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.527380s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.527427s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.527460s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.527473s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.527518s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.527527s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                                ├─   0.527537s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.527545s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                                ├─   0.527554s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.527580s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.527632s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.527666s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.527691s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.527703s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.527745s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.527755s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d", "a", "b"})
                                        ├─   0.527765s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.527774s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d", "a", "b"})
                                        ├─   0.527784s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.527793s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "d", "a", "b"})
                                        ├─   0.527802s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.527811s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "d", "a", "b"})
                                        ├─   0.527822s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.527831s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.527854s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.527887s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.527908s   0ms DEBUG Paths for id
                                  ├─   0.527920s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.527929s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.527946s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.527965s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.527987s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.528025s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.528045s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.528078s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.528177s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.528206s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.528230s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.528242s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.528265s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                                ├─   0.528302s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.528314s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                                ├─   0.528326s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.528334s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.528363s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.528403s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.528427s   1ms DEBUG Paths for id
                          ├─   0.528441s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.528452s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.528462s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.528475s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.528483s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.528502s   3ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.528544s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.528563s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.528592s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.528651s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.528676s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.528726s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.528740s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.528761s   3ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                        ├─   0.528776s   3ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.528784s   3ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                      ┌─┘
                      ├─   0.528806s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                    ┌─┘
                    ├─   0.528827s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                  ┌─┘
                  ├─   0.528848s   3ms DEBUG Paths for id
                  ├─   0.528858s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.528868s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.528878s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.528887s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.528899s   3ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.528906s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.528924s   3ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.528954s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.528971s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.528996s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                  ├─   0.529049s   0ms DEBUG checking edge Product/c -(isExpensive🧩{price})- Boolean/c
                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="isExpensive"}
                    ├─   0.529071s   0ms DEBUG checking requirements {price} for edge 'Product/c -(isExpensive🧩{price})- Boolean/c'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.529128s   0ms INFO return=Ok([])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.529177s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                          ├─   0.529186s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                          ├─   0.529195s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                          ├─   0.529203s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                          ├─   0.529211s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.529236s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.529284s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.529311s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.529335s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.529347s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.529391s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                  ├─   0.529400s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "b", "d"})
                                  ├─   0.529409s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                  ├─   0.529418s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b", "d"})
                                  ├─   0.529427s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                  ├─   0.529435s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b", "d"})
                                  ├─   0.529446s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.529473s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                                    └─┐validate_field_requirement{}
                                      └─┐validate_field_requirement{}
                                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.529543s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                            ├─   0.529593s   0ms INFO return=Ok(Some([]))
                                          ┌─┘
                                          ├─   0.529628s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                          ├─   0.529642s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                        ┌─┘
                                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.529722s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                          ├─   0.529736s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d", "a", "b"})
                                          ├─   0.529747s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                          ├─   0.529758s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d", "a", "b"})
                                          ├─   0.529768s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                          ├─   0.529777s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "d", "a", "b"})
                                          ├─   0.529787s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                          ├─   0.529806s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "d", "a", "b"})
                                          ├─   0.529821s   0ms DEBUG Finished finding indirect paths, found total of 0
                                          ├─   0.529830s   0ms INFO return=Ok([])
                                        ┌─┘
                                        ├─   0.529859s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                      ┌─┘
                                      ├─   0.529900s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.529925s   0ms DEBUG Paths for id
                                    ├─   0.529951s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                    ├─   0.529964s   0ms DEBUG Found 1 best paths for this leaf requirement
                                    ├─   0.529979s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                    ├─   0.529997s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                  ┌─┘
                                  ├─   0.530028s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                      ├─   0.530092s   0ms DEBUG Building root query tree node: Product/c
                                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                        ├─   0.530115s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                        ┌─┘
                                        ├─   0.530148s   0ms DEBUG No subsequent steps (leaf or end of path)
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=4007}
                                    ├─   0.530237s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                    └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                                      ├─   0.530269s   0ms INFO return=Ok(Some([]))
                                    ┌─┘
                                    ├─   0.530294s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                    ├─   0.530306s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                  ┌─┘
                                  ├─   0.530330s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                                  ├─   0.530345s   0ms DEBUG Finished finding indirect paths, found total of 1
                                  ├─   0.530354s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.530396s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                              ┌─┘
                              ├─   0.530423s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.530445s   1ms DEBUG Paths for id
                            ├─   0.530472s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                            ├─   0.530499s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                            ├─   0.530512s   1ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.530526s   1ms DEBUG path Product/c -(id)- ID/c is valid
                            ├─   0.530534s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                          ┌─┘
                          ├─   0.530560s   1ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                            └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                              ├─   0.530595s   0ms DEBUG Building root query tree node: Product/c
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.530628s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.530665s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=4007}
                            ├─   0.530728s   0ms INFO return=Ok([])
                          ┌─┘
                          ├─   0.530746s   1ms DEBUG No direct paths found
                          ├─   0.530759s   1ms DEBUG going deeper
                          ├─   0.530769s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.530795s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.530861s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.530899s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.530925s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.530941s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.530996s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                  ├─   0.531007s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                                  ├─   0.531017s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                  ├─   0.531026s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                                  ├─   0.531036s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.531101s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                                    └─┐validate_field_requirement{}
                                      └─┐validate_field_requirement{}
                                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.531162s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                            ├─   0.531204s   0ms INFO return=Ok(Some([]))
                                          ┌─┘
                                          ├─   0.531239s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                          ├─   0.531260s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                        ┌─┘
                                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                          ├─   0.531323s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
                                          ├─   0.531337s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d", "a", "b"})
                                          ├─   0.531348s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                          ├─   0.531357s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d", "a", "b"})
                                          ├─   0.531367s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                          ├─   0.531377s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "d", "a", "b"})
                                          ├─   0.531387s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                          ├─   0.531396s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "d", "a", "b"})
                                          ├─   0.531408s   0ms DEBUG Finished finding indirect paths, found total of 0
                                          ├─   0.531418s   0ms INFO return=Ok([])
                                        ┌─┘
                                        ├─   0.531444s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                      ┌─┘
                                      ├─   0.531486s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                                    ┌─┘
                                    ├─   0.531511s   0ms DEBUG Paths for id
                                    ├─   0.531527s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                                    ├─   0.531536s   0ms DEBUG Found 1 best paths for this leaf requirement
                                    ├─   0.531554s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                    ├─   0.531574s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                                  ┌─┘
                                  ├─   0.531605s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                                      ├─   0.531645s   0ms DEBUG Building root query tree node: Product/c
                                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                        ├─   0.531667s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                        ┌─┘
                                        ├─   0.531701s   0ms DEBUG No subsequent steps (leaf or end of path)
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=4007}
                                    ├─   0.531785s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                    └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                                      ├─   0.531823s   0ms INFO return=Ok(Some([]))
                                    ┌─┘
                                    ├─   0.531851s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                    ├─   0.531863s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                  ┌─┘
                                  ├─   0.531888s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                                  ├─   0.531901s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                  ├─   0.531910s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                                  ├─   0.531922s   0ms DEBUG Finished finding indirect paths, found total of 1
                                  ├─   0.531933s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.531958s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                              ┌─┘
                              ├─   0.531999s   1ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" },  { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(29) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.532027s   1ms DEBUG Paths for id
                            ├─   0.532041s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                            ├─   0.532053s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                            ├─   0.532063s   1ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.532077s   1ms DEBUG path Product/c -(id)- ID/c is valid
                            ├─   0.532085s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                          ┌─┘
                          ├─   0.532105s   2ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="Product/c"}
                            └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                              ├─   0.532140s   0ms DEBUG Building root query tree node: Product/c
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.532160s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.532189s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=4007}
                            ├─   0.532250s   0ms DEBUG checking edge Product/a -(price)- Float/a
                            └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="price"}
                              ├─   0.532278s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.532300s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(price)- Float/a
                            ├─   0.532311s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(8)" }])
                          ┌─┘
                          ├─   0.532332s   3ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                          ├─   0.532344s   3ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                          ├─   0.532352s   3ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "b", "d"})
                          ├─   0.532361s   3ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                          ├─   0.532368s   3ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b", "d"})
                          ├─   0.532377s   3ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                          ├─   0.532385s   3ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b", "d"})
                          ├─   0.532393s   3ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                          ├─   0.532406s   3ms DEBUG Ignoring. Already visited similar edge
                          ├─   0.532419s   3ms DEBUG Finished finding indirect paths, found total of 1
                          ├─   0.532428s   3ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(8)" }])
                        ┌─┘
                        ├─   0.532451s   3ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(8)" }], [])))
                      ┌─┘
                      ├─   0.532470s   3ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(28) --> EdgeIndex(8)" }], [])))
                    ┌─┘
                    ├─   0.532509s   3ms DEBUG Paths for price
                    ├─   0.532526s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.532545s   3ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.532565s   3ms DEBUG path Product/c -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.532573s   3ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(28) --> EdgeIndex(8)" }]))
                  ┌─┘
                  ├─   0.532602s   3ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(isExpensive🧩{price})- Boolean/c
                  └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(28) --> EdgeIndex(8)" }, root_node="Product/c"}
                    └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=2}
                      ├─   0.532667s   0ms DEBUG Building root query tree node: Product/c
                      └─┐from_path_segment_sequences{current_index=0, total_segments=2}
                        ├─   0.532689s   0ms DEBUG Processing edge: Product/c -(🔑🧩{id})- Product/a
                        └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                          ├─   0.532707s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
                          └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                          ┌─┘
                          ├─   0.532735s   0ms DEBUG No subsequent steps (leaf or end of path)
                        ┌─┘
                        ├─   0.532752s   0ms DEBUG Adding subsequent step as child
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.532793s   3ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(15)" }])
                ┌─┘
                ├─   0.532818s   7ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                ├─   0.532830s   7ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.532859s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.532923s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.532956s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.532990s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.533005s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.533051s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.533061s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d"})
                        ├─   0.533090s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.533126s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.533174s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.533214s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.533248s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.533272s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.533327s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.533337s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "c", "d"})
                                ├─   0.533346s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.533355s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c", "d"})
                                ├─   0.533364s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.533373s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c", "d"})
                                ├─   0.533381s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.533431s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.533502s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.533543s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.533577s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.533592s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.533639s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.533649s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d", "a", "b"})
                                        ├─   0.533660s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.533669s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d", "a", "b"})
                                        ├─   0.533678s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.533687s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "d", "a", "b"})
                                        ├─   0.533697s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.533706s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "d", "a", "b"})
                                        ├─   0.533717s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.533726s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.533749s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.533771s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.533792s   0ms DEBUG Paths for id
                                  ├─   0.533807s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.533829s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.533849s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.533858s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.533949s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.534019s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.534062s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.534099s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                                  ├─   0.534181s   0ms DEBUG checking edge Product/a -(id)- ID/a
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                                    ├─   0.534209s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.534234s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                                  ├─   0.534246s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                                ┌─┘
                                ├─   0.534270s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                                ├─   0.534301s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.534313s   1ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                              ┌─┘
                              ├─   0.534344s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                            ┌─┘
                            ├─   0.534367s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }], [])))
                          ┌─┘
                          ├─   0.534388s   1ms DEBUG Paths for id
                          ├─   0.534414s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.534428s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                          ├─   0.534438s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.534451s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.534459s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.534483s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.534517s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.534536s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.534565s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.534649s   0ms DEBUG checking edge Product/c -(id)- ID/c
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.534698s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.534724s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                          ├─   0.534736s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.534757s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                        ├─   0.534769s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        ├─   0.534778s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d"})
                        ├─   0.534786s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.534812s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.534884s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.534913s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.534938s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.534951s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.534992s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.535001s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "d"})
                                ├─   0.535011s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.535073s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.535132s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.535160s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.535188s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.535201s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.535245s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.535256s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d", "a", "b"})
                                        ├─   0.535266s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.535278s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d", "a", "b"})
                                        ├─   0.535287s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.535296s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "d", "a", "b"})
                                        ├─   0.535308s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.535317s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "d", "a", "b"})
                                        ├─   0.535328s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.535351s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.535381s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.535406s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.535429s   0ms DEBUG Paths for id
                                  ├─   0.535443s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.535463s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.535483s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.535492s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.535518s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.535556s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.535579s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.535610s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.535692s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.535728s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.535755s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.535767s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                ├─   0.535792s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                                ├─   0.535804s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.535813s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "d"})
                                ├─   0.535838s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.535849s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "d"})
                                ├─   0.535861s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.535869s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                              ┌─┘
                              ├─   0.535899s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                            ┌─┘
                            ├─   0.535921s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                          ┌─┘
                          ├─   0.535942s   1ms DEBUG Paths for id
                          ├─   0.535954s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.535965s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.535974s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.535987s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.535995s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.536014s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.536048s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.536066s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.536095s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.536154s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.536179s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.536200s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.536210s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" }])
                        ┌─┘
                        ├─   0.536262s   3ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
                        ├─   0.536285s   3ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.536304s   3ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.536338s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.536360s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(32) --> EdgeIndex(7)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.536391s   3ms DEBUG Paths for id
                  ├─   0.536404s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.536414s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.536423s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.536432s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.536445s   3ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.536453s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.536471s  11ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.536503s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.536520s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.536562s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                  ├─   0.536628s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.536644s  11ms DEBUG No direct paths found
                ├─   0.536657s  11ms DEBUG going deeper
                ├─   0.536666s  11ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.536706s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.536756s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.536779s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.536802s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.536814s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.536877s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                        ├─   0.536888s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                        ├─   0.536897s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.536921s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.536976s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.537001s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.537024s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.537037s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.537095s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.537108s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                                ├─   0.537117s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                ├─   0.537136s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                                ├─   0.537149s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.537185s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.537239s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.537280s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.537308s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.537322s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.537366s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.537376s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d", "a", "b"})
                                        ├─   0.537386s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.537395s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d", "a", "b"})
                                        ├─   0.537405s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.537414s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "d", "a", "b"})
                                        ├─   0.537424s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.537433s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "d", "a", "b"})
                                        ├─   0.537444s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.537454s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.537476s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.537519s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.537545s   0ms DEBUG Paths for id
                                  ├─   0.537560s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.537569s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.537584s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.537596s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.537621s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.537660s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.537698s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.537737s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.537805s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.537843s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.537868s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.537879s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                                ┌─┘
                                ├─   0.537902s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                                ├─   0.537915s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.537924s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                                ├─   0.537936s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.537959s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                              ┌─┘
                              ├─   0.538003s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                            ┌─┘
                            ├─   0.538033s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.538068s   1ms DEBUG Paths for id
                          ├─   0.538084s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.538107s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                          ├─   0.538120s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.538133s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.538141s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.538164s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.538198s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.538217s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.538246s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                          ├─   0.538309s   0ms DEBUG checking edge Product/c -(id)- ID/c
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                            ├─   0.538334s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.538354s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                          ├─   0.538380s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.538411s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                        ├─   0.538422s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.538452s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.538499s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.538558s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.538591s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                ├─   0.538605s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                ├─   0.538649s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                ├─   0.538674s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "b", "d"})
                                ├─   0.538688s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                  ├─   0.538723s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/c'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.538775s   0ms DEBUG checking edge Product/d -(id)- ID/d
                                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                                          ├─   0.538802s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.538829s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                                        ├─   0.538855s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                                      ┌─┘
                                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                                        ├─   0.538913s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                                        ├─   0.538923s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d", "a", "b"})
                                        ├─   0.538934s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/c
                                        ├─   0.538943s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d", "a", "b"})
                                        ├─   0.538953s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                        ├─   0.538962s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "d", "a", "b"})
                                        ├─   0.538972s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                        ├─   0.538980s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "d", "a", "b"})
                                        ├─   0.538992s   0ms DEBUG Finished finding indirect paths, found total of 0
                                        ├─   0.539014s   0ms INFO return=Ok([])
                                      ┌─┘
                                      ├─   0.539044s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                    ┌─┘
                                    ├─   0.539069s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                                  ┌─┘
                                  ├─   0.539090s   0ms DEBUG Paths for id
                                  ├─   0.539104s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                                  ├─   0.539113s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.539128s   0ms DEBUG path Product/d -(id)- ID/d is valid
                                  ├─   0.539137s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                                ┌─┘
                                ├─   0.539158s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/c
                                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                                    ├─   0.539196s   0ms DEBUG Building root query tree node: Product/d
                                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                      ├─   0.539217s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                      ┌─┘
                                      ├─   0.539249s   0ms DEBUG No subsequent steps (leaf or end of path)
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", current_cost=3005}
                                  ├─   0.539314s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c", edge="id"}
                                    ├─   0.539375s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.539403s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                  ├─   0.539416s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                                ┌─┘
                                ├─   0.539439s   0ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/c
                                ├─   0.539452s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                                ├─   0.539461s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "d"})
                                ├─   0.539471s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                                ├─   0.539479s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "d"})
                                ├─   0.539490s   0ms DEBUG Finished finding indirect paths, found total of 1
                                ├─   0.539498s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                              ┌─┘
                              ├─   0.539521s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                            ┌─┘
                            ├─   0.539544s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                          ┌─┘
                          ├─   0.539583s   1ms DEBUG Paths for id
                          ├─   0.539599s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                          ├─   0.539610s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.539620s   1ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.539633s   1ms DEBUG path Product/d -(id)- ID/d is valid
                          ├─   0.539651s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                        ┌─┘
                        ├─   0.539679s   2ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                            ├─   0.539728s   0ms DEBUG Building root query tree node: Product/d
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.539748s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.539780s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.539849s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.539889s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.539919s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.539931s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" }])
                        ┌─┘
                        ├─   0.539952s   3ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
                        ├─   0.539965s   3ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                        ├─   0.539974s   3ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                        ├─   0.539985s   3ms DEBUG Finished finding indirect paths, found total of 2
                        ├─   0.539993s   3ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.540016s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.540038s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(33) --> EdgeIndex(11)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.540058s   3ms DEBUG Paths for id
                  ├─   0.540069s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                  ├─   0.540097s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.540110s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.540119s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.540131s   3ms DEBUG path Product/d -(id)- ID/d is valid
                  ├─   0.540138s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                ┌─┘
                ├─   0.540160s  14ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Product/d"}
                  └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                    ├─   0.540213s   0ms DEBUG Building root query tree node: Product/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.540231s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.540257s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/a", current_cost=3005}
                  ├─   0.540326s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.540347s  15ms DEBUG No direct paths found
                ├─   0.540360s  15ms DEBUG going deeper
                ├─   0.540371s  15ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
                ├─   0.540379s  15ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                ├─   0.540387s  15ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                ├─   0.540396s  15ms DEBUG Ignoring. Already visited similar edge
                ├─   0.540403s  15ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                ├─   0.540410s  15ms DEBUG Ignoring. Already visited similar edge
                ├─   0.540417s  15ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                ├─   0.540424s  15ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                ├─   0.540434s  15ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                ├─   0.540440s  15ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"b", "d"})
                ├─   0.540447s  15ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                ├─   0.540454s  15ms DEBUG Ignoring. Already visited similar edge
                ├─   0.540461s  15ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                ├─   0.540467s  15ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "d"})
                ├─   0.540474s  15ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                ├─   0.540481s  15ms DEBUG Ignoring. Already visited similar edge
                ├─   0.540491s  15ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.540499s  15ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(15)" }])
              ┌─┘
              ├─   0.540523s  15ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(15)" }], [])))
            ┌─┘
            ├─   0.540540s  15ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(34) --> EdgeIndex(15)" }], [])))
          ┌─┘
          ├─   0.540555s  15ms DEBUG Paths for isExpensive
          ├─   0.540572s  15ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(🔑🧩{id})- Product/c -(isExpensive🧩{price})- Boolean/c is valid
          ├─   0.540592s  15ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.540612s  15ms DEBUG path Product/d -(🔑🧩{id})- Product/c -(isExpensive🧩{price})- Boolean/c is valid
          ├─   0.540619s  15ms INFO return=Ok(Some([ { cost: 1005, egdes: "EdgeIndex(34) --> EdgeIndex(15)" }]))
        ┌─┘
        ├─   0.540644s  15ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(canAfford🧩{isExpensive})- Boolean/d
        └─┐from_path{path= { cost: 1005, egdes: "EdgeIndex(34) --> EdgeIndex(15)" }, root_node="Product/d"}
          └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=2}
            ├─   0.540672s   0ms DEBUG Building root query tree node: Product/d
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.540690s   0ms DEBUG Processing edge: Product/d -(🔑🧩{id})- Product/c
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.540705s   0ms DEBUG Processing edge: Product/c -(isExpensive🧩{price})- Boolean/c
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.540740s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.540758s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.540791s  15ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(19)" }])
      ┌─┘
      ├─   0.540827s  18ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
      ├─   0.540840s  18ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.540864s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.540899s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.540922s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.540939s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.540949s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.540979s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.541005s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.541040s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.541059s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.541078s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.541087s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.541119s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.541127s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                      ├─   0.541135s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.541157s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                      ├─   0.541169s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.541177s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.541185s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.541217s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.541260s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.541305s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.541330s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.541343s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.541413s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.541425s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.541436s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.541444s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.541476s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.541488s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.541496s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.541504s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.541560s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.541573s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.541607s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.541660s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.541685s   0ms DEBUG Paths for id
                        ├─   0.541701s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.541710s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.541725s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.541747s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.541778s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.541816s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.541852s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.541889s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                        ├─   0.542087s   0ms DEBUG checking edge Product/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                          ├─   0.542149s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.542180s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                        ├─   0.542193s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                      ┌─┘
                      ├─   0.542215s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                      ├─   0.542241s   1ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.542252s   1ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
                    ┌─┘
                    ├─   0.542278s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.542298s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.542315s   1ms DEBUG Paths for id
                ├─   0.542326s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.542336s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                ├─   0.542344s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.542356s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.542363s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.542398s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.542448s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.542467s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.542493s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.542561s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.542591s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.542612s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.542635s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.542662s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.542673s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              ├─   0.542681s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.542689s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.542697s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.542704s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.542728s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.542824s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.542876s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.542901s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.542931s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.542993s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.543022s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.543069s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.543098s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.543120s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.543132s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.543187s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.543200s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.543209s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.543218s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.543226s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.543234s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.543243s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.543253s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.543263s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.543272s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.543296s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.543321s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.543339s   0ms DEBUG Paths for id
                        ├─   0.543351s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.543372s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.543385s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.543393s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.543414s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.543457s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.543476s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.543503s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.543579s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.543613s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.543636s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.543661s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.543691s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.543715s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.543726s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.543735s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.543742s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.543750s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.543757s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.543767s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.543774s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.543800s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.543819s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.543837s   1ms DEBUG Paths for id
                ├─   0.543847s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.543856s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.543865s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.543877s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.543884s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.543900s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.543945s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.543967s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.543994s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.544061s   0ms DEBUG checking edge Product/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", edge="id"}
                  ├─   0.544091s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.544112s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                ├─   0.544123s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" }])
              ┌─┘
              ├─   0.544160s   3ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
              ├─   0.544176s   3ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.544184s   3ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.544206s   3ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.544224s   3ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(24) --> EdgeIndex(7)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.544242s   3ms DEBUG Paths for id
        ├─   0.544251s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.544259s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a -(id)- ID/a is valid
        ├─   0.544267s   3ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.544275s   3ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.544285s   3ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.544292s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.544306s  21ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.544358s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.544375s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.544398s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.544458s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.544478s  22ms DEBUG No direct paths found
      ├─   0.544488s  22ms DEBUG going deeper
      ├─   0.544499s  22ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.544505s  22ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.544511s  22ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
        ├─   0.544546s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.544590s   0ms DEBUG checking edge Product/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.544609s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.544628s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
              ├─   0.544650s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
              ├─   0.544720s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.544748s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.544787s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.544806s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.544827s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.544850s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.544897s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      ├─   0.544906s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "d"})
                      ├─   0.544914s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.544941s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.544983s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.545023s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.545054s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.545067s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.545107s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.545117s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.545140s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.545151s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.545160s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.545169s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.545177s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.545195s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.545208s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.545217s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.545241s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.545272s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.545289s   0ms DEBUG Paths for id
                        ├─   0.545301s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.545309s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.545325s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.545333s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.545351s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.545384s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.545402s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.545432s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.545524s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.545558s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.545581s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.545592s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.545612s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
                      ├─   0.545624s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.545632s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.545639s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.545646s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "d"})
                      ├─   0.545657s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.545664s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.545684s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.545710s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.545728s   0ms DEBUG Paths for id
                ├─   0.545737s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.545746s   1ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                ├─   0.545754s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.545765s   1ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.545772s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.545788s   1ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.545816s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.545832s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.545858s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                ├─   0.545908s   0ms DEBUG checking edge Product/d -(id)- ID/d
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                  ├─   0.545929s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.545947s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                ├─   0.545956s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.545974s   1ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
              ├─   0.545983s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                ├─   0.546003s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.546040s   0ms DEBUG checking edge Product/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.546059s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.546078s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                      ├─   0.546088s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                      ├─   0.546130s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                        ├─   0.546176s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/d'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.546220s   0ms DEBUG checking edge Product/b -(id)- ID/b
                              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b", edge="id"}
                                ├─   0.546246s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.546285s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b with edge Product/b -(id)- ID/b
                              ├─   0.546301s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b", current_cost=1001}
                              ├─   0.546346s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
                              ├─   0.546356s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"a", "c", "d"})
                              ├─   0.546365s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                              ├─   0.546375s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "d"})
                              ├─   0.546384s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                              ├─   0.546392s   0ms DEBUG Ignoring. We would go back to the same graph
                              ├─   0.546400s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                              ├─   0.546409s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "d"})
                              ├─   0.546419s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.546427s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.546447s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                          ┌─┘
                          ├─   0.546467s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" }], [])))
                        ┌─┘
                        ├─   0.546485s   0ms DEBUG Paths for id
                        ├─   0.546496s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                        ├─   0.546504s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.546517s   0ms DEBUG path Product/b -(id)- ID/b is valid
                        ├─   0.546525s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
                      ┌─┘
                      ├─   0.546543s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/d
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                          ├─   0.546574s   0ms DEBUG Building root query tree node: Product/b
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.546592s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.546618s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", current_cost=2003}
                        ├─   0.546690s   0ms DEBUG checking edge Product/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d", edge="id"}
                          ├─   0.546732s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.546755s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d with edge Product/d -(id)- ID/d
                        ├─   0.546766s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                      ┌─┘
                      ├─   0.546786s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/d
                      ├─   0.546797s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                      ├─   0.546805s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.546813s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                      ├─   0.546820s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.546828s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                      ├─   0.546835s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.546845s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.546852s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
                    ┌─┘
                    ├─   0.546904s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                  ┌─┘
                  ├─   0.546927s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
                ┌─┘
                ├─   0.546945s   0ms DEBUG Paths for id
                ├─   0.546956s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
                ├─   0.546965s   0ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
                ├─   0.546973s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.546986s   0ms DEBUG path Product/b -(id)- ID/b is valid
                ├─   0.546993s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
              ┌─┘
              ├─   0.547009s   2ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
                └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                  ├─   0.547057s   0ms DEBUG Building root query tree node: Product/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.547075s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.547112s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.547173s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.547193s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.547212s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.547235s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.547262s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/c
              ├─   0.547274s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.547281s   2ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.547288s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              ├─   0.547294s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.547304s   2ms DEBUG Finished finding indirect paths, found total of 2
              ├─   0.547322s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }])
            ┌─┘
            ├─   0.547351s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.547369s   2ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(11)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(26) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.547386s   2ms DEBUG Paths for id
        ├─   0.547396s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(id)- ID/b is valid
        ├─   0.547405s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.547413s   2ms DEBUG   Path root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/d -(id)- ID/d is valid
        ├─   0.547421s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.547431s   2ms DEBUG path Product/b -(id)- ID/b is valid
        ├─   0.547438s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.547455s  24ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.547482s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.547497s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.547517s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "canAfford", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(product)- Product/b -(🔑🧩{id})- Product/a", current_cost=2003}
        ├─   0.547563s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.547577s  25ms DEBUG No direct paths found
      ├─   0.547588s  25ms DEBUG going deeper
      ├─   0.547596s  25ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
      ├─   0.547604s  25ms DEBUG Ignoring. Already visited similar edge
      ├─   0.547610s  25ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      ├─   0.547619s  25ms DEBUG Ignoring. Already visited similar edge
      ├─   0.547625s  25ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      ├─   0.547631s  25ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.547637s  25ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.547643s  25ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.547652s  25ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/d
      ├─   0.547658s  25ms DEBUG Ignoring. Already visited similar edge
      ├─   0.547664s  25ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
      ├─   0.547669s  25ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.547675s  25ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
      ├─   0.547681s  25ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.547686s  25ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
      ├─   0.547692s  25ms DEBUG Ignoring. Already visited similar edge
      ├─   0.547700s  25ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.547706s  25ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(19)" }])
    ┌─┘
    ├─   0.547726s  25ms DEBUG Indirect paths found: 1
    ├─   0.547739s  25ms DEBUG advanced: root(Query) -(b)- Query/b -(product)- Product/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(18)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.547796s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.547809s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.547821s   0ms DEBUG Processing edge: Query/b -(product)- Product/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.547835s   0ms DEBUG Processing edge: Product/b -(🔑🧩{id})- Product/d
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.547850s   0ms DEBUG Processing edge: Product/d -(canAffordWithDiscount🧩{isExpensiveWithDiscount})- Boolean/d
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.547870s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.547882s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.547893s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.547904s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(27) --> EdgeIndex(19)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.547938s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.547950s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.547961s   0ms DEBUG Processing edge: Query/b -(product)- Product/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.547974s   0ms DEBUG Processing edge: Product/b -(🔑🧩{id})- Product/d
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.547987s   0ms DEBUG Processing edge: Product/d -(canAfford🧩{isExpensive})- Boolean/d
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.548006s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.548017s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.548029s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.548040s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="product", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.548176s   0ms DEBUG adding output field 'product' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/b -(🔑🧩{id})- Product/d", parent_fetch_step_index=1}
              ├─   0.548222s   0ms DEBUG created a new fetch step [2] subgraph(d) type(Product) requirement() key({id}) in children of 1
              ├─   0.548230s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.548238s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.548248s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path="product"}
                      ├─   0.548323s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.548347s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/d"}
                    └─┐can_satisfy_edge{path="Product/d", edge="id"}
                      ├─   0.548508s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/d'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/d", current_cost=0}
                            ├─   0.548558s   0ms DEBUG checking edge Product/d -(id)- ID/d
                            └─┐can_satisfy_edge{path="Product/d", edge="id"}
                              ├─   0.548580s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.548602s   0ms DEBUG Advancing path Product/d with edge Product/d -(id)- ID/d
                            ├─   0.548616s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(17)" }])
                          ┌─┘
                          ├─   0.548640s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(17)" }], [])))
                        ┌─┘
                        ├─   0.548678s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(17)" }], [])))
                      ┌─┘
                      ├─   0.548699s   0ms DEBUG Paths for id
                      ├─   0.548710s   0ms DEBUG   Path Product/d -(id)- ID/d is valid
                      ├─   0.548718s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.548730s   0ms DEBUG path Product/d -(id)- ID/d is valid
                      ├─   0.548738s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.548765s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.548774s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.548787s   0ms DEBUG created a new fetch step [3] subgraph(d) type(Product) requirement({isExpensiveWithDiscount}) in children of 1
                  ├─   0.548798s   0ms DEBUG Adding {isExpensiveWithDiscount} to fetch([3]).input
                  ├─   0.548821s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.548843s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.548854s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.548892s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/d -(🔑🧩{id})- Product/c", parent_fetch_step_index=4}
                        ├─   0.548936s   0ms DEBUG created a new fetch step [5] subgraph(c) type(Product) requirement() key({id}) in children of 4
                        ├─   0.548953s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                        ├─   0.548961s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.548970s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                ├─   0.549060s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.549095s   0ms DEBUG adding output field 'id' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_requires_field_edge{parent_fetch_step_index=5}
                            └─┐find_satisfiable_key{node="Product/c"}
                              └─┐can_satisfy_edge{path="Product/c", edge="id"}
                                ├─   0.549274s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                                └─┐validate_field_requirement{}
                                  └─┐validate_field_requirement{}
                                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/c", current_cost=0}
                                      ├─   0.549339s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                      └─┐can_satisfy_edge{path="Product/c", edge="id"}
                                        ├─   0.549381s   0ms INFO return=Ok(Some([]))
                                      ┌─┘
                                      ├─   0.549418s   0ms DEBUG Advancing path Product/c with edge Product/c -(id)- ID/c
                                      ├─   0.549435s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(13)" }])
                                    ┌─┘
                                    ├─   0.549475s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.549502s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                                ┌─┘
                                ├─   0.549522s   0ms DEBUG Paths for id
                                ├─   0.549534s   0ms DEBUG   Path Product/c -(id)- ID/c is valid
                                ├─   0.549543s   0ms DEBUG Found 1 best paths for this leaf requirement
                                ├─   0.549557s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                ├─   0.549565s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                              ┌─┘
                            ┌─┘
                            ├─   0.549595s   0ms DEBUG Key to re-enter: {id}
                            ├─   0.549605s   0ms DEBUG Creating a fetch step for children of @requires
                            ├─   0.549617s   0ms DEBUG created a new fetch step [6] subgraph(c) type(Product) requirement({hasDiscount}) in children of 4
                            ├─   0.549641s   0ms DEBUG Adding {hasDiscount} to fetch([6]).input
                            ├─   0.549653s   0ms DEBUG Adding {id} to fetch([6]).input
                            ├─   0.549662s   0ms DEBUG Creating a fetch step for requirement of @requires
                            ├─   0.549671s   0ms DEBUG Adding {id} to fetch([7]).input
                            └─┐connect{parent=4, child=7}
                            ┌─┘
                            ├─   0.549722s   0ms DEBUG Processing requirements
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7}
                                └─┐process_entity_move_edge{edge="Product/c -(🔑🧩{id})- Product/b", parent_fetch_step_index=7}
                                  ├─   0.549779s   0ms DEBUG created a new fetch step [8] subgraph(b) type(Product) requirement() key({id}) in children of 7
                                  ├─   0.549789s   0ms DEBUG adding input requirement '{id}' to fetch step [8]
                                  ├─   0.549798s   0ms DEBUG adding __typename field to output for type 'Product'
                                  ├─   0.549809s   0ms DEBUG connecting fetch step to parent [7] -> [8]
                                  └─┐connect{parent=7, child=8}
                                  ┌─┘
                                  └─┐process_requirements_for_fetch_steps{count=1}
                                    └─┐process_noop_edge{}
                                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                        └─┐process_plain_field_edge{parent_fetch_step_index=7, requiring_fetch_step_index=8, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                          ├─   0.549915s   0ms DEBUG connecting parent fetch step [7] to requiring fetch step [8]
                                          └─┐connect{parent=7, child=8}
                                          ┌─┘
                                          ├─   0.549952s   0ms DEBUG adding output field 'id' to fetch step [7]
                                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                          ┌─┘
                                        ┌─┘
                                      ┌─┘
                                    ┌─┘
                                    └─┐connect{parent=7, child=8}
                                    ┌─┘
                                  ┌─┘
                                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=8}
                                    └─┐process_plain_field_edge{parent_fetch_step_index=8, type_name="Product", field="hasDiscount", leaf=true, list=false, response_path="product", fetch_path=""}
                                      ├─   0.550088s   0ms DEBUG adding output field 'hasDiscount' to fetch step [8]
                                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=8}
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            ├─   0.550179s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                            └─┐connect{parent=8, child=6}
                            ┌─┘
                            ├─   0.550207s   0ms DEBUG Processing children
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.550273s   1ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=6, child=3}
                  ┌─┘
                  ├─   0.550295s   1ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/d"}
                    └─┐can_satisfy_edge{path="Product/d", edge="id"}
                      ├─   0.550360s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/d'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/d", current_cost=0}
                            ├─   0.550400s   0ms DEBUG checking edge Product/d -(id)- ID/d
                            └─┐can_satisfy_edge{path="Product/d", edge="id"}
                              ├─   0.550435s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.550461s   0ms DEBUG Advancing path Product/d with edge Product/d -(id)- ID/d
                            ├─   0.550474s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(17)" }])
                          ┌─┘
                          ├─   0.550497s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(17)" }], [])))
                        ┌─┘
                        ├─   0.550515s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(17)" }], [])))
                      ┌─┘
                      ├─   0.550531s   0ms DEBUG Paths for id
                      ├─   0.550541s   0ms DEBUG   Path Product/d -(id)- ID/d is valid
                      ├─   0.550549s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.550561s   0ms DEBUG path Product/d -(id)- ID/d is valid
                      ├─   0.550568s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.550593s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.550602s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.550613s   0ms DEBUG created a new fetch step [9] subgraph(d) type(Product) requirement({isExpensive}) in children of 1
                  ├─   0.550623s   0ms DEBUG Adding {isExpensive} to fetch([9]).input
                  ├─   0.550631s   0ms DEBUG Adding {id} to fetch([9]).input
                  ├─   0.550638s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.550646s   0ms DEBUG Adding {id} to fetch([10]).input
                  └─┐connect{parent=1, child=10}
                  ┌─┘
                  ├─   0.550676s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=10}
                      └─┐process_entity_move_edge{edge="Product/d -(🔑🧩{id})- Product/c", parent_fetch_step_index=10}
                        ├─   0.550715s   0ms DEBUG created a new fetch step [11] subgraph(c) type(Product) requirement() key({id}) in children of 10
                        ├─   0.550724s   0ms DEBUG adding input requirement '{id}' to fetch step [11]
                        ├─   0.550733s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.550741s   0ms DEBUG connecting fetch step to parent [10] -> [11]
                        └─┐connect{parent=10, child=11}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=10, requiring_fetch_step_index=11}
                              └─┐process_plain_field_edge{parent_fetch_step_index=10, requiring_fetch_step_index=11, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                ├─   0.550812s   0ms DEBUG connecting parent fetch step [10] to requiring fetch step [11]
                                └─┐connect{parent=10, child=11}
                                ┌─┘
                                ├─   0.550841s   0ms DEBUG adding output field 'id' to fetch step [10]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=10, requiring_fetch_step_index=11}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=10, child=11}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=11}
                          └─┐process_requires_field_edge{parent_fetch_step_index=11}
                            └─┐find_satisfiable_key{node="Product/c"}
                              └─┐can_satisfy_edge{path="Product/c", edge="id"}
                                ├─   0.551005s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/d'
                                └─┐validate_field_requirement{}
                                  └─┐validate_field_requirement{}
                                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/c", current_cost=0}
                                      ├─   0.551052s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                      └─┐can_satisfy_edge{path="Product/c", edge="id"}
                                        ├─   0.551077s   0ms INFO return=Ok(Some([]))
                                      ┌─┘
                                      ├─   0.551099s   0ms DEBUG Advancing path Product/c with edge Product/c -(id)- ID/c
                                      ├─   0.551112s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(13)" }])
                                    ┌─┘
                                    ├─   0.551137s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                                  ┌─┘
                                  ├─   0.551157s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(13)" }], [])))
                                ┌─┘
                                ├─   0.551177s   0ms DEBUG Paths for id
                                ├─   0.551187s   0ms DEBUG   Path Product/c -(id)- ID/c is valid
                                ├─   0.551197s   0ms DEBUG Found 1 best paths for this leaf requirement
                                ├─   0.551228s   0ms DEBUG path Product/c -(id)- ID/c is valid
                                ├─   0.551237s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
                              ┌─┘
                            ┌─┘
                            ├─   0.551272s   0ms DEBUG Key to re-enter: {id}
                            ├─   0.551281s   0ms DEBUG Creating a fetch step for children of @requires
                            ├─   0.551293s   0ms DEBUG created a new fetch step [12] subgraph(c) type(Product) requirement({price}) in children of 10
                            ├─   0.551303s   0ms DEBUG Adding {price} to fetch([12]).input
                            ├─   0.551312s   0ms DEBUG Adding {id} to fetch([12]).input
                            ├─   0.551320s   0ms DEBUG Creating a fetch step for requirement of @requires
                            ├─   0.551329s   0ms DEBUG Adding {id} to fetch([13]).input
                            └─┐connect{parent=10, child=13}
                            ┌─┘
                            ├─   0.551394s   0ms DEBUG Processing requirements
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=13}
                                └─┐process_entity_move_edge{edge="Product/c -(🔑🧩{id})- Product/a", parent_fetch_step_index=13}
                                  ├─   0.551447s   0ms DEBUG created a new fetch step [14] subgraph(a) type(Product) requirement() key({id}) in children of 13
                                  ├─   0.551457s   0ms DEBUG adding input requirement '{id}' to fetch step [14]
                                  ├─   0.551466s   0ms DEBUG adding __typename field to output for type 'Product'
                                  ├─   0.551476s   0ms DEBUG connecting fetch step to parent [13] -> [14]
                                  └─┐connect{parent=13, child=14}
                                  ┌─┘
                                  └─┐process_requirements_for_fetch_steps{count=1}
                                    └─┐process_noop_edge{}
                                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=13, requiring_fetch_step_index=14}
                                        └─┐process_plain_field_edge{parent_fetch_step_index=13, requiring_fetch_step_index=14, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                          ├─   0.551573s   0ms DEBUG connecting parent fetch step [13] to requiring fetch step [14]
                                          └─┐connect{parent=13, child=14}
                                          ┌─┘
                                          ├─   0.551608s   0ms DEBUG adding output field 'id' to fetch step [13]
                                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=13, requiring_fetch_step_index=14}
                                          ┌─┘
                                        ┌─┘
                                      ┌─┘
                                    ┌─┘
                                    └─┐connect{parent=13, child=14}
                                    ┌─┘
                                  ┌─┘
                                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=14}
                                    └─┐process_plain_field_edge{parent_fetch_step_index=14, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path=""}
                                      ├─   0.551730s   0ms DEBUG adding output field 'price' to fetch step [14]
                                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=14}
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            ├─   0.551809s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                            └─┐connect{parent=14, child=12}
                            ┌─┘
                            ├─   0.551837s   0ms DEBUG Processing children
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=12}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.551902s   1ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=12, child=9}
                  ┌─┘
                  ├─   0.551925s   1ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=9}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.552009s   3ms DEBUG Done
├─   0.552017s   3ms DEBUG found roots
├─   0.552023s   3ms DEBUG print graph
├─   0.552027s   3ms DEBUG Nodes:
│ [1] Query/b {} → {product{__typename id}} at $.
│ [2] Product/d {__typename id} → {} at $.product
│ [3] Product/d {__typename isExpensiveWithDiscount id} → {canAffordWithDiscount} at $.product
│ [4] Product/d {__typename id} → {__typename id} at $.product
│ [5] Product/c {__typename id} → {} at $.product
│ [6] Product/c {__typename hasDiscount id} → {isExpensiveWithDiscount} at $.product
│ [7] Product/c {__typename id} → {__typename id} at $.product
│ [8] Product/b {__typename id} → {hasDiscount} at $.product
│ [9] Product/d {__typename isExpensive id} → {canAfford} at $.product
│ [10] Product/d {__typename id} → {__typename id} at $.product
│ [11] Product/c {__typename id} → {} at $.product
│ [12] Product/c {__typename price id} → {isExpensive} at $.product
│ [13] Product/c {__typename id} → {__typename id} at $.product
│ [14] Product/a {__typename id} → {price} at $.product
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│     [7]
│       [8]
│         [6]
│           [3]
│   [10]
│     [11]
│     [13]
│       [14]
│         [12]
│           [9]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.552089s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [10]
    ├─   0.552096s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.552111s   0ms DEBUG merging fetch steps [1] and [10]
      └─┐connect{parent=1, child=13}
      ┌─┘
      └─┐connect{parent=1, child=11}
      ┌─┘
    ┌─┘
    └─┐perform_passthrough_child_merge{}
      ├─   0.552163s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=7}
      ┌─┘
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
    ├─   0.552208s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [7]
    ├─   0.552215s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [13]
    └─┐perform_passthrough_child_merge{}
      ├─   0.552228s   0ms DEBUG merging fetch steps [1] and [7]
      └─┐connect{parent=1, child=8}
      ┌─┘
    ┌─┘
    └─┐perform_passthrough_child_merge{}
      ├─   0.552260s   0ms DEBUG merging fetch steps [1] and [13]
      └─┐connect{parent=1, child=14}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.552339s   0ms DEBUG optimization found: merge parent [1] with child [8]
    └─┐perform_fetch_step_merge{}
      ├─   0.552355s   0ms DEBUG merging fetch steps [1] and [8]
      └─┐connect{parent=1, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.552408s   0ms DEBUG Found optimization: 6 <- 5
    ├─   0.552416s   0ms DEBUG Found optimization: 5 <- 11
    └─┐perform_fetch_step_merge{}
      ├─   0.552428s   0ms DEBUG merging fetch steps [6] and [5]
      └─┐connect{parent=1, child=6}
      ┌─┘
    ┌─┘
    └─┐perform_fetch_step_merge{}
      ├─   0.552461s   0ms DEBUG merging fetch steps [6] and [11]
      └─┐connect{parent=1, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.552519s   0ms DEBUG optimization found: remove 'Product/d {__typename id} → {} at $.product'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="b"}
      └─┐execute{subgraph_name="b"}
        ├─   0.552956s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.555036s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐ParallelNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true)}}, representations=[]}
    └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true)}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true)}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "hasDiscount", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true)}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "hasDiscount", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true)}}
            └─┐project_requires{requires_selections=[], entity=String("Product")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=Bool(true)}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("p1")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="c"}
          └─┐execute{subgraph_name="c"}
            ├─   0.555489s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
    └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true)}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true)}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true)}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true)}}
            └─┐project_requires{requires_selections=[], entity=String("Product")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("p1")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="a"}
          └─┐execute{subgraph_name="a"}
            ├─   0.555787s   0ms DEBUG starting new connection: http://localhost:4200/
            ├─   0.556121s   0ms DEBUG connecting to 127.0.0.1:4200
            ├─   0.556678s   0ms DEBUG connected to 127.0.0.1:4200
            ├─   0.557141s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
            ├─   0.558146s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐ParallelNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false), "price": Number(699.99)}}, representations=[]}
    └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false), "price": Number(699.99)}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false), "price": Number(699.99)}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false), "price": Number(699.99)}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensiveWithDiscount", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false), "price": Number(699.99)}}
            └─┐project_requires{requires_selections=[], entity=String("Product")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=Bool(false)}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("p1")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="d"}
          └─┐execute{subgraph_name="d"}
            ├─   0.558565s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
    └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false), "price": Number(699.99)}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false), "price": Number(699.99)}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false), "price": Number(699.99)}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false), "price": Number(699.99)}}
            └─┐project_requires{requires_selections=[], entity=String("Product")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=Number(699.99)}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("p1")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="c"}
          └─┐execute{subgraph_name="c"}
            ├─   0.558847s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
            ├─   0.560598s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
            ├─   0.560722s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false), "price": Number(699.99), "canAffordWithDiscount": Bool(true), "isExpensive": Bool(true)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false), "price": Number(699.99), "canAffordWithDiscount": Bool(true), "isExpensive": Bool(true)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false), "price": Number(699.99), "canAffordWithDiscount": Bool(true), "isExpensive": Bool(true)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "hasDiscount": Bool(true), "isExpensiveWithDiscount": Bool(false), "price": Number(699.99), "canAffordWithDiscount": Bool(true), "isExpensive": Bool(true)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Bool(true)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="d"}
        └─┐execute{subgraph_name="d"}
          ├─   0.561040s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.562026s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.562317s DEBUG execution result: ExecutionResult { data: Some(Object {"product": Object {"canAfford": Bool(false), "canAffordWithDiscount": Bool(true)}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{product{__typename id hasDiscount}}")}, Object {"kind": String("Parallel"), "nodes": Array [Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{isExpensiveWithDiscount}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("hasDiscount")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{price}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}, Object {"kind": String("Parallel"), "nodes": Array [Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("d"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{canAffordWithDiscount}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("isExpensiveWithDiscount")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{isExpensive}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("d"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{canAfford}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("isExpensive")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
