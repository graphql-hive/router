generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.12s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_object_type{name="Category"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="CategoryDetails"}
    └─┐build_fields{fields_count=1}
    ┌─┘
  ┌─┘
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Product"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=1}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="C"}
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006877s   0ms DEBUG Building graph for supergraph with 16 definitions
  └─┐build_root_nodes{}
    ├─   0.006922s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006973s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006985s   0ms INFO [x] Creating field move edge 'Query.products/A' (type: Product)
    ├─   0.006995s   0ms INFO [x] Creating field move edge 'Query.products/A' (type: Product)
    ├─   0.007003s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.007011s   0ms INFO [ ] Field 'Query.products/B' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.007017s   0ms INFO [x] Creating owned field move edge 'Query.__typename/C' (type: String)
    ├─   0.007026s   0ms INFO [ ] Field 'Query.products/C' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.007032s   0ms INFO [x] Creating owned field move edge 'Product.__typename/A' (type: String)
    ├─   0.007039s   0ms INFO [x] Creating field move edge 'Product.pid/A' (type: ID)
    ├─   0.007045s   0ms INFO [x] Creating field move edge 'Product.pid/A' (type: ID)
    ├─   0.007051s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.007057s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.007063s   0ms INFO [x] Creating field move edge 'Product.category/A' (type: Category)
    ├─   0.007069s   0ms INFO [x] Creating field move edge 'Product.category/A' (type: Category)
    ├─   0.007075s   0ms INFO [x] Creating owned field move edge 'Product.__typename/A' (type: String)
    ├─   0.007082s   0ms INFO [x] Creating field move edge 'Product.pid/A' (type: ID)
    ├─   0.007088s   0ms INFO [x] Creating field move edge 'Product.pid/A' (type: ID)
    ├─   0.007094s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.007100s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.007105s   0ms INFO [x] Creating field move edge 'Product.category/A' (type: Category)
    ├─   0.007127s   0ms INFO [x] Creating field move edge 'Product.category/A' (type: Category)
    ├─   0.007143s   0ms INFO [x] Creating owned field move edge 'Product.__typename/B' (type: String)
    ├─   0.007151s   0ms INFO [x] Creating field move edge 'Product.pid/B' (type: ID)
    ├─   0.007157s   0ms INFO [x] Creating field move edge 'Product.pid/B' (type: ID)
    ├─   0.007163s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.007169s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.007174s   0ms INFO [x] Creating field move edge 'Product.category/B' (type: Category)
    ├─   0.007180s   0ms INFO [x] Creating field move edge 'Product.category/B' (type: Category)
    ├─   0.007186s   0ms INFO [x] Creating owned field move edge 'Product.__typename/C' (type: String)
    ├─   0.007193s   0ms INFO [x] Creating field move edge 'Product.pid/C' (type: ID)
    ├─   0.007202s   0ms INFO [x] Creating field move edge 'Product.pid/C' (type: ID)
    ├─   0.007208s   0ms INFO [x] Creating field move edge 'Product.id/C' (type: ID)
    ├─   0.007213s   0ms INFO [x] Creating field move edge 'Product.id/C' (type: ID)
    ├─   0.007219s   0ms INFO [x] Creating field move edge 'Product.category/C' (type: Category)
    ├─   0.007225s   0ms INFO [x] Creating field move edge 'Product.category/C' (type: Category)
    ├─   0.007231s   0ms INFO [x] Creating owned field move edge 'Category.__typename/A' (type: String)
    ├─   0.007237s   0ms INFO [x] Creating field move edge 'Category.name/A' (type: String)
    ├─   0.007243s   0ms INFO [x] Creating field move edge 'Category.name/A' (type: String)
    ├─   0.007249s   0ms INFO [x] Creating field move edge 'Category.id/A' (type: ID)
    ├─   0.007254s   0ms INFO [x] Creating field move edge 'Category.id/A' (type: ID)
    ├─   0.007260s   0ms INFO [ ] Field 'Category.details/A' does is not available in the subgraph, skipping edge creation (type: CategoryDetails)
    ├─   0.007265s   0ms INFO [x] Creating owned field move edge 'Category.__typename/B' (type: String)
    ├─   0.007271s   0ms INFO [x] Creating field move edge 'Category.name/B' (type: String)
    ├─   0.007277s   0ms INFO [x] Creating field move edge 'Category.name/B' (type: String)
    ├─   0.007282s   0ms INFO [x] Creating field move edge 'Category.id/B' (type: ID)
    ├─   0.007288s   0ms INFO [x] Creating field move edge 'Category.id/B' (type: ID)
    ├─   0.007293s   0ms INFO [ ] Field 'Category.details/B' does is not available in the subgraph, skipping edge creation (type: CategoryDetails)
    ├─   0.007298s   0ms INFO [x] Creating owned field move edge 'Category.__typename/C' (type: String)
    ├─   0.007304s   0ms INFO [ ] Field 'Category.name/C' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007309s   0ms INFO [ ] Field 'Category.id/C' does is not available in the subgraph, skipping edge creation (type: ID)
    ├─   0.007314s   0ms INFO [x] Creating field move edge 'Category.details/C' (type: CategoryDetails)
    ├─   0.007321s   0ms INFO [x] Creating field move edge 'Category.details/C' (type: CategoryDetails)
    ├─   0.007327s   0ms INFO [x] Creating owned field move edge 'CategoryDetails.__typename/C' (type: String)
    ├─   0.007334s   0ms INFO [x] Creating field move edge 'CategoryDetails.products/C' (type: Int)
    ├─   0.007340s   0ms INFO [x] Creating field move edge 'CategoryDetails.products/C' (type: Int)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.007468s   0ms INFO Creating self-referencing entity move edge in 'Product/A' via key 'id'
    ├─   0.007544s   0ms INFO Creating self-referencing entity move edge in 'Product/A' via key 'id'
    ├─   0.007592s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/B' via key 'id pid'
    ├─   0.007632s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/C' via key 'id pid'
    ├─   0.007669s   0ms INFO Creating self-referencing entity move edge in 'Product/A' via key 'id pid'
    ├─   0.007705s   0ms INFO Creating self-referencing entity move edge in 'Product/A' via key 'id pid'
    ├─   0.007741s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/B' via key 'id pid'
    ├─   0.007777s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/C' via key 'id pid'
    ├─   0.007810s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/A' via key 'id'
    ├─   0.007846s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/A' via key 'id pid'
    ├─   0.007883s   0ms INFO Creating self-referencing entity move edge in 'Product/B' via key 'id pid'
    ├─   0.007919s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/C' via key 'id pid'
    ├─   0.007951s   0ms INFO Creating entity move edge from 'Product/C' to 'Product/A' via key 'id'
    ├─   0.007988s   0ms INFO Creating entity move edge from 'Product/C' to 'Product/A' via key 'id pid'
    ├─   0.008024s   0ms INFO Creating entity move edge from 'Product/C' to 'Product/B' via key 'id pid'
    ├─   0.008096s   0ms INFO Creating self-referencing entity move edge in 'Product/C' via key 'id pid'
    ├─   0.008165s   0ms INFO Creating self-referencing entity move edge in 'Category/A' via key 'id'
    ├─   0.008204s   0ms INFO Creating entity move edge from 'Category/A' to 'Category/B' via key 'id'
    ├─   0.008238s   0ms INFO Creating entity move edge from 'Category/B' to 'Category/A' via key 'id'
    ├─   0.008276s   0ms INFO Creating self-referencing entity move edge in 'Category/B' via key 'id'
    ├─   0.008309s   0ms INFO Creating entity move edge from 'Category/C' to 'Category/A' via key 'id'
    ├─   0.008344s   0ms INFO Creating entity move edge from 'Category/C' to 'Category/B' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.067219s INFO Starting server on http://localhost:4000
   0.068511s INFO starting 16 workers
   0.068559s INFO Actix runtime found; starting in Actix runtime
   0.068568s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.232342s DEBUG original document: query ping {
  __typename
}

   0.232447s DEBUG normalized document: query ping {__typename}

   0.232476s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.232914s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.307914s DEBUG original document: query {
  products {
    id
    category {
      id
      details {
        products
      }
    }
  }
}

   0.308033s DEBUG normalized document: query{products{id category{id details{products}}}}

   0.308057s DEBUG executable operation: query{products{id category{id details{products}}}}
┐walk_operation{}
├─   0.308444s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="products", leaf=false}
  ├─   0.308503s   0ms DEBUG Trying to advance to: products{id category{id details{products}}} through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "category", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.308574s   0ms DEBUG checking edge Query/a -(products)- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="products"}
        ├─   0.308596s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.308622s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(products)- Product/a
      ├─   0.308633s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(2)" }])
    ┌─┘
    ├─   0.308650s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "category", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.308685s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.308692s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.308704s   0ms DEBUG Indirect paths found: 0
    ├─   0.308711s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  ├─   0.308726s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="category", leaf=false}
  ├─   0.308747s   0ms DEBUG Trying to advance to: category{id details{products}} through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(products)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "category", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
      ├─   0.308774s   0ms DEBUG checking edge Product/a -(category)- Category/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="category"}
        ├─   0.308790s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.308804s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(category)- Category/a
      ├─   0.308812s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.308825s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "category", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
      ├─   0.308862s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
      ├─   0.308871s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.308878s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id pid"}
        ├─   0.308899s   0ms DEBUG checking requirements {id pid} for edge 'Product/a -(🔑🧩{id pid})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.308937s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id"}
                ├─   0.308959s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.308978s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.308987s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.309017s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
              ├─   0.309024s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.309031s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
              ├─   0.309039s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.309047s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id pid"}
                ├─   0.309068s   0ms DEBUG checking requirements {id pid} for edge 'Product/a -(🔑🧩{id pid})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.309104s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id"}
                        ├─   0.309123s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.309142s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.309151s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.309182s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.309190s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.309198s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.309204s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.309212s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.309219s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.309227s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.309234s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.309242s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.309249s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.309268s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.309298s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.309331s   0ms DEBUG Paths for id
                ├─   0.309342s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(id)- ID/a is valid
                ├─   0.309350s   0ms DEBUG Found 1 best paths for this leaf requirement
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.309398s   0ms DEBUG checking edge Product/a -(pid)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="pid"}
                        ├─   0.309419s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.309437s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(pid)- ID/a
                      ├─   0.309447s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.309480s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.309488s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.309495s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.309502s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.309510s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.309517s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.309524s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.309531s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.309539s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.309546s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.309563s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                  ┌─┘
                  ├─   0.309579s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                ┌─┘
                ├─   0.309595s   0ms DEBUG Paths for pid
                ├─   0.309603s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(pid)- ID/a is valid
                ├─   0.309610s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.309621s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.309629s   0ms DEBUG path Product/a -(pid)- ID/a is valid
                ├─   0.309635s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" },  { cost: 1, egdes: "EdgeIndex(6)" }]))
              ┌─┘
              ├─   0.309653s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id pid})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.309683s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.309700s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.309724s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.309769s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.309784s   0ms DEBUG Processing edge: Product/a -(pid)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.309806s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐merge_trees{tree_count=2}
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b", current_cost=2004}
                ├─   0.309875s   0ms DEBUG checking edge Product/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b", edge="id"}
                  ├─   0.309895s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.309913s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b with edge Product/b -(id)- ID/b
                ├─   0.309923s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(11)" }])
              ┌─┘
              ├─   0.309941s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id pid})- Product/b
              ├─   0.309950s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.309957s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.309965s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.309971s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(11)" }])
            ┌─┘
            ├─   0.309988s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.310004s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.310018s   1ms DEBUG Paths for id
        ├─   0.310026s   1ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(id)- ID/a is valid
        ├─   0.310034s   1ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(id)- ID/b is valid
        ├─   0.310041s   1ms DEBUG Found 1 best paths for this leaf requirement
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.310076s   0ms DEBUG checking edge Product/a -(pid)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="pid"}
                ├─   0.310093s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.310109s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(pid)- ID/a
              ├─   0.310118s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.310146s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
              ├─   0.310154s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.310161s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
              ├─   0.310167s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.310174s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id pid"}
                ├─   0.310192s   0ms DEBUG checking requirements {id pid} for edge 'Product/a -(🔑🧩{id pid})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.310226s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id"}
                        ├─   0.310244s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.310262s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.310271s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.310302s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.310310s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.310317s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.310324s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.310331s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.310338s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.310345s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.310352s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.310360s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.310367s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.310383s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.310400s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.310414s   0ms DEBUG Paths for id
                ├─   0.310423s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(id)- ID/a is valid
                ├─   0.310429s   0ms DEBUG Found 1 best paths for this leaf requirement
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.310469s   0ms DEBUG checking edge Product/a -(pid)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="pid"}
                        ├─   0.310488s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.310506s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(pid)- ID/a
                      ├─   0.310515s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.310546s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.310554s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.310561s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.310568s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.310576s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.310583s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.310590s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.310597s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.310605s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.310611s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.310628s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                  ┌─┘
                  ├─   0.310644s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                ┌─┘
                ├─   0.310659s   0ms DEBUG Paths for pid
                ├─   0.310667s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(pid)- ID/a is valid
                ├─   0.310674s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.310684s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.310691s   0ms DEBUG path Product/a -(pid)- ID/a is valid
                ├─   0.310697s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" },  { cost: 1, egdes: "EdgeIndex(6)" }]))
              ┌─┘
              ├─   0.310714s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id pid})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.310740s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.310755s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.310778s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.310822s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.310837s   0ms DEBUG Processing edge: Product/a -(pid)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.310858s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐merge_trees{tree_count=2}
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b", current_cost=2004}
                ├─   0.310919s   0ms DEBUG checking edge Product/b -(pid)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b", edge="pid"}
                  ├─   0.310939s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.310958s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b with edge Product/b -(pid)- ID/b
                ├─   0.310967s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.310984s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id pid})- Product/b
              ├─   0.310992s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.310999s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.311007s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.311013s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.311030s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.311045s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.311059s   2ms DEBUG Paths for pid
        ├─   0.311067s   2ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(pid)- ID/a is valid
        ├─   0.311075s   2ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(pid)- ID/b is valid
        ├─   0.311084s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.311094s   2ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.311100s   2ms DEBUG path Product/a -(pid)- ID/a is valid
        ├─   0.311105s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" },  { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.311120s   2ms DEBUG Advancing path to Product/a -(🔑🧩{id pid})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.311143s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.311156s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.311249s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.311314s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.311330s   0ms DEBUG Processing edge: Product/a -(pid)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.311351s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐merge_trees{tree_count=2}
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "category", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c", current_cost=2004}
        ├─   0.311413s   0ms DEBUG checking edge Product/c -(category)- Category/c
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c", edge="category"}
          ├─   0.311434s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.311450s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c with edge Product/c -(category)- Category/c
        ├─   0.311469s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(16)" }])
      ┌─┘
      ├─   0.311494s   2ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id pid})- Product/c
      ├─   0.311504s   2ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id pid"}
        ├─   0.311525s   0ms DEBUG checking requirements {id pid} for edge 'Product/a -(🔑🧩{id pid})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.311557s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id"}
                ├─   0.311574s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.311591s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.311599s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.311628s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
              ├─   0.311635s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.311642s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id pid"}
                ├─   0.311659s   0ms DEBUG checking requirements {id pid} for edge 'Product/a -(🔑🧩{id pid})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.311694s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id"}
                        ├─   0.311712s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.311730s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.311739s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.311770s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.311777s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.311785s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.311792s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.311800s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.311806s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.311814s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.311821s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.311829s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.311836s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.311854s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.311871s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.311886s   0ms DEBUG Paths for id
                ├─   0.311896s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(id)- ID/a is valid
                ├─   0.311902s   0ms DEBUG Found 1 best paths for this leaf requirement
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.311941s   0ms DEBUG checking edge Product/a -(pid)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="pid"}
                        ├─   0.311960s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.311978s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(pid)- ID/a
                      ├─   0.311987s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.312024s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.312031s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.312039s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.312046s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.312054s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.312060s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.312068s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.312075s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.312082s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.312089s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.312105s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                  ┌─┘
                  ├─   0.312121s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                ┌─┘
                ├─   0.312136s   0ms DEBUG Paths for pid
                ├─   0.312145s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(pid)- ID/a is valid
                ├─   0.312151s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.312162s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.312169s   0ms DEBUG path Product/a -(pid)- ID/a is valid
                ├─   0.312175s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" },  { cost: 1, egdes: "EdgeIndex(6)" }]))
              ┌─┘
              ├─   0.312191s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id pid})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.312217s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.312232s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.312255s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.312299s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.312314s   0ms DEBUG Processing edge: Product/a -(pid)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.312336s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐merge_trees{tree_count=2}
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c", current_cost=2004}
                ├─   0.312396s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c", edge="id"}
                  ├─   0.312416s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.312433s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.312442s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(15)" }])
              ┌─┘
              ├─   0.312458s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id pid})- Product/c
              ├─   0.312471s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
              ├─   0.312478s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.312484s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.312491s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.312499s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.312505s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(15)" }])
            ┌─┘
            ├─   0.312522s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(15)" }], [])))
          ┌─┘
          ├─   0.312539s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(15)" }], [])))
        ┌─┘
        ├─   0.312553s   1ms DEBUG Paths for id
        ├─   0.312561s   1ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(id)- ID/a is valid
        ├─   0.312569s   1ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(id)- ID/c is valid
        ├─   0.312575s   1ms DEBUG Found 1 best paths for this leaf requirement
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.312610s   0ms DEBUG checking edge Product/a -(pid)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="pid"}
                ├─   0.312628s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.312644s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(pid)- ID/a
              ├─   0.312652s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.312681s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
              ├─   0.312688s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.312694s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id pid"}
                ├─   0.312711s   0ms DEBUG checking requirements {id pid} for edge 'Product/a -(🔑🧩{id pid})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.312746s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id"}
                        ├─   0.312764s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.312782s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.312791s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.312821s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.312831s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.312838s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.312845s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.312853s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.312859s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.312867s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.312873s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.312881s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.312888s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.312904s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.312921s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.312936s   0ms DEBUG Paths for id
                ├─   0.312945s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(id)- ID/a is valid
                ├─   0.312951s   0ms DEBUG Found 1 best paths for this leaf requirement
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.312989s   0ms DEBUG checking edge Product/a -(pid)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="pid"}
                        ├─   0.313008s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.313025s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(pid)- ID/a
                      ├─   0.313034s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.313095s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.313104s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.313112s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.313119s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.313127s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.313134s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.313141s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.313148s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.313156s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.313163s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.313181s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                  ┌─┘
                  ├─   0.313198s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                ┌─┘
                ├─   0.313213s   0ms DEBUG Paths for pid
                ├─   0.313222s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(pid)- ID/a is valid
                ├─   0.313228s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.313240s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.313247s   0ms DEBUG path Product/a -(pid)- ID/a is valid
                ├─   0.313253s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" },  { cost: 1, egdes: "EdgeIndex(6)" }]))
              ┌─┘
              ├─   0.313270s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id pid})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.313296s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.313311s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.313334s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.313383s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.313397s   0ms DEBUG Processing edge: Product/a -(pid)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.313419s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐merge_trees{tree_count=2}
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c", current_cost=2004}
                ├─   0.313483s   0ms DEBUG checking edge Product/c -(pid)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c", edge="pid"}
                  ├─   0.313503s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.313520s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c with edge Product/c -(pid)- ID/c
                ├─   0.313530s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(14)" }])
              ┌─┘
              ├─   0.313547s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id pid})- Product/c
              ├─   0.313556s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
              ├─   0.313563s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.313570s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.313576s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.313584s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.313590s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(14)" }])
            ┌─┘
            ├─   0.313607s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.313622s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.313652s   2ms DEBUG Paths for pid
        ├─   0.313665s   2ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(pid)- ID/a is valid
        ├─   0.313674s   2ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(pid)- ID/c is valid
        ├─   0.313681s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.313691s   2ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.313697s   2ms DEBUG path Product/a -(pid)- ID/a is valid
        ├─   0.313702s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" },  { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.313719s   4ms DEBUG Advancing path to Product/a -(🔑🧩{id pid})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.313744s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.313758s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.313778s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.313818s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.313831s   0ms DEBUG Processing edge: Product/a -(pid)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.313850s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐merge_trees{tree_count=2}
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "category", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b", current_cost=2004}
        ├─   0.313907s   0ms DEBUG checking edge Product/b -(category)- Category/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b", edge="category"}
          ├─   0.313925s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.313941s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b with edge Product/b -(category)- Category/b
        ├─   0.313949s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(12)" }])
      ┌─┘
      ├─   0.313964s   5ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id pid})- Product/b
      ├─   0.313974s   5ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.313980s   5ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.313987s   5ms DEBUG Finished finding indirect paths, found total of 2
      ├─   0.313993s   5ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(12)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(16)" }])
    ┌─┘
    ├─   0.314008s   5ms DEBUG Indirect paths found: 2
    ├─   0.314016s   5ms DEBUG advanced: root(Query) -(a)- Query/a -(products)- Product/a
  ┌─┘
  ├─   0.314027s   5ms DEBUG Found 3 paths
┌─┘
└─┐process_field{field_name="details", leaf=false}
  ├─   0.314047s   0ms DEBUG Trying to advance to: details{products} through 3 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a", current_cost=1002}
      ├─   0.314072s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.314084s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a", current_cost=1002}
      ├─   0.314102s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a", edge="id"}
        ├─   0.314119s   0ms DEBUG checking requirements {id} for edge 'Category/a -(🔑🧩{id})- Category/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a", current_cost=1002}
              ├─   0.314149s   0ms DEBUG checking edge Category/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a", edge="id"}
                ├─   0.314166s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.314183s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a with edge Category/a -(id)- ID/a
              ├─   0.314193s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a", current_cost=1002}
              ├─   0.314221s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/b
              ├─   0.314228s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.314235s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/a
              ├─   0.314242s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.314248s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.314254s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.314269s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(19)" }], [])))
          ┌─┘
          ├─   0.314284s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(19)" }], [])))
        ┌─┘
        ├─   0.314298s   0ms DEBUG Paths for id
        ├─   0.314306s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a -(id)- ID/a is valid
        ├─   0.314312s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.314322s   0ms DEBUG path Category/a -(id)- ID/a is valid
        ├─   0.314327s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.314341s   0ms DEBUG Advancing path to Category/a -(🔑🧩{id})- Category/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Category/a"}
        └─┐create_root_for_path_sequences{root_node="Category/a", segments_count=1}
          ├─   0.314364s   0ms DEBUG Building root query tree node: Category/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.314378s   0ms DEBUG Processing edge: Category/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.314397s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a -(🔑🧩{id})- Category/b", current_cost=2004}
        ├─   0.314440s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.314454s   0ms DEBUG No direct paths found
      ├─   0.314463s   0ms DEBUG going deeper
      ├─   0.314470s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/a
      ├─   0.314476s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.314483s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/b
      ├─   0.314488s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.314494s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/a
      ├─   0.314499s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.314507s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.314512s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.314524s   0ms DEBUG Indirect paths found: 0
    ├─   0.314532s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b", current_cost=2005}
      ├─   0.314571s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.314582s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b", current_cost=2005}
      ├─   0.314604s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/b
      ├─   0.314609s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.314615s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b", edge="id"}
        ├─   0.314633s   0ms DEBUG checking requirements {id} for edge 'Category/b -(🔑🧩{id})- Category/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b", current_cost=2005}
              ├─   0.314665s   0ms DEBUG checking edge Category/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b", edge="id"}
                ├─   0.314684s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.314702s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b with edge Category/b -(id)- ID/b
              ├─   0.314710s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(12) --> EdgeIndex(22)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b", current_cost=2005}
              ├─   0.314741s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/b
              ├─   0.314748s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.314755s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/a
              ├─   0.314761s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.314768s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.314774s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.314789s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(12) --> EdgeIndex(22)" }], [])))
          ┌─┘
          ├─   0.314804s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(12) --> EdgeIndex(22)" }], [])))
        ┌─┘
        ├─   0.314818s   0ms DEBUG Paths for id
        ├─   0.314827s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b -(id)- ID/b is valid
        ├─   0.314833s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.314843s   0ms DEBUG path Category/b -(id)- ID/b is valid
        ├─   0.314849s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(22)" }]))
      ┌─┘
      ├─   0.314862s   0ms DEBUG Advancing path to Category/b -(🔑🧩{id})- Category/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(22)" }, root_node="Category/b"}
        └─┐create_root_for_path_sequences{root_node="Category/b", segments_count=1}
          ├─   0.314885s   0ms DEBUG Building root query tree node: Category/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.314898s   0ms DEBUG Processing edge: Category/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.314918s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b -(🔑🧩{id})- Category/a", current_cost=3007}
        ├─   0.314960s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.314972s   0ms DEBUG No direct paths found
      ├─   0.314980s   0ms DEBUG going deeper
      ├─   0.314987s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/b
      ├─   0.314993s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.314998s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/a
      ├─   0.315003s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.315011s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.315016s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.315027s   0ms DEBUG Indirect paths found: 0
    ├─   0.315036s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
      ├─   0.315070s   0ms DEBUG checking edge Category/c -(details)- CategoryDetails/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", edge="details"}
        ├─   0.315087s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.315102s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c with edge Category/c -(details)- CategoryDetails/c
      ├─   0.315109s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(16) --> EdgeIndex(24)" }])
    ┌─┘
    ├─   0.315123s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "details", selections: SelectionSet { items: [SelectionItem::Field { name: "products", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
      ├─   0.315143s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", edge="id"}
        ├─   0.315161s   0ms DEBUG checking requirements {id} for edge 'Category/c -(🔑🧩{id})- Category/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
              ├─   0.315193s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
              ├─   0.315221s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/b
              ├─   0.315228s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.315234s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", edge="id"}
                ├─   0.315253s   0ms DEBUG checking requirements {id} for edge 'Category/c -(🔑🧩{id})- Category/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
                      ├─   0.315288s   0ms INFO return=Ok([])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
                      ├─   0.315319s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/b
                      ├─   0.315326s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
                      ├─   0.315334s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/a
                      ├─   0.315341s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
                      ├─   0.315349s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.315355s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.315372s   0ms INFO return=Ok(None)
                  ┌─┘
                  ├─   0.315387s   0ms INFO return=Ok(None)
                ┌─┘
                ├─   0.315401s   0ms INFO return=Ok(None)
              ┌─┘
              ├─   0.315416s   0ms DEBUG Requirements not satisfied, continue look up...
              ├─   0.315422s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.315428s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.315441s   0ms INFO return=Ok(None)
          ┌─┘
          ├─   0.315452s   0ms INFO return=Ok(None)
        ┌─┘
        ├─   0.315464s   0ms INFO return=Ok(None)
      ┌─┘
      ├─   0.315474s   0ms DEBUG Requirements not satisfied, continue look up...
      ├─   0.315480s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", edge="id"}
        ├─   0.315501s   0ms DEBUG checking requirements {id} for edge 'Category/c -(🔑🧩{id})- Category/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
              ├─   0.315587s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
              ├─   0.315640s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", edge="id"}
                ├─   0.315676s   0ms DEBUG checking requirements {id} for edge 'Category/c -(🔑🧩{id})- Category/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
                      ├─   0.315720s   0ms INFO return=Ok([])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
                      ├─   0.315754s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/b
                      ├─   0.315762s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
                      ├─   0.315770s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/a
                      ├─   0.315777s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
                      ├─   0.315786s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.315793s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.315825s   0ms INFO return=Ok(None)
                  ┌─┘
                  ├─   0.315843s   0ms INFO return=Ok(None)
                ┌─┘
                ├─   0.315858s   0ms INFO return=Ok(None)
              ┌─┘
              ├─   0.315871s   0ms DEBUG Requirements not satisfied, continue look up...
              ├─   0.315881s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/a
              ├─   0.315888s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.315895s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.315901s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.315915s   0ms INFO return=Ok(None)
          ┌─┘
          ├─   0.315927s   0ms INFO return=Ok(None)
        ┌─┘
        ├─   0.315949s   0ms INFO return=Ok(None)
      ┌─┘
      ├─   0.315962s   0ms DEBUG Requirements not satisfied, continue look up...
      ├─   0.315968s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.315973s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.315984s   0ms DEBUG Indirect paths found: 0
    ├─   0.315996s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c
  ┌─┘
  ├─   0.316007s   1ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="products", leaf=true}
  ├─   0.316030s   0ms DEBUG Trying to advance to: products through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c -(details)- CategoryDetails/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c -(details)- CategoryDetails/c", current_cost=2006}
      ├─   0.316061s   0ms DEBUG checking edge CategoryDetails/c -(products)- Int/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c -(details)- CategoryDetails/c", edge="products"}
        ├─   0.316080s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.316096s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c -(details)- CategoryDetails/c with edge CategoryDetails/c -(products)- Int/c
      ├─   0.316105s   0ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(16) --> EdgeIndex(24) --> EdgeIndex(26)" }])
    ┌─┘
    ├─   0.316120s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c -(details)- CategoryDetails/c", current_cost=2006}
      ├─   0.316142s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.316147s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.316159s   0ms DEBUG Indirect paths found: 0
    ├─   0.316167s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c -(details)- CategoryDetails/c
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.316192s   0ms DEBUG Trying to advance to: id through 3 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a", current_cost=1002}
      ├─   0.316217s   0ms DEBUG checking edge Category/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a", edge="id"}
        ├─   0.316233s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.316247s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a with edge Category/a -(id)- ID/a
      ├─   0.316256s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(19)" }])
    ┌─┘
    ├─   0.316269s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a", current_cost=1002}
      ├─   0.316287s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a", edge="id"}
        ├─   0.316304s   0ms DEBUG checking requirements {id} for edge 'Category/a -(🔑🧩{id})- Category/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a", current_cost=1002}
              ├─   0.316336s   0ms DEBUG checking edge Category/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a", edge="id"}
                ├─   0.316353s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.316370s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a with edge Category/a -(id)- ID/a
              ├─   0.316379s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a", current_cost=1002}
              ├─   0.316407s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/b
              ├─   0.316415s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.316422s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/a
              ├─   0.316428s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.316435s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.316441s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.316455s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(19)" }], [])))
          ┌─┘
          ├─   0.316471s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(19)" }], [])))
        ┌─┘
        ├─   0.316484s   0ms DEBUG Paths for id
        ├─   0.316493s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a -(id)- ID/a is valid
        ├─   0.316499s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.316509s   0ms DEBUG path Category/a -(id)- ID/a is valid
        ├─   0.316515s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.316529s   0ms DEBUG Advancing path to Category/a -(🔑🧩{id})- Category/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Category/a"}
        └─┐create_root_for_path_sequences{root_node="Category/a", segments_count=1}
          ├─   0.316553s   0ms DEBUG Building root query tree node: Category/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.316566s   0ms DEBUG Processing edge: Category/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.316586s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a -(🔑🧩{id})- Category/b", current_cost=2004}
        ├─   0.316640s   0ms DEBUG checking edge Category/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a -(🔑🧩{id})- Category/b", edge="id"}
          ├─   0.316658s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.316674s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a -(🔑🧩{id})- Category/b with edge Category/b -(id)- ID/b
        ├─   0.316682s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(40) --> EdgeIndex(22)" }])
      ┌─┘
      ├─   0.316741s   0ms DEBUG Found 1 direct paths to Category/a -(🔑🧩{id})- Category/b
      ├─   0.316753s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/a
      ├─   0.316759s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.316767s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.316772s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(40) --> EdgeIndex(22)" }])
    ┌─┘
    ├─   0.316788s   0ms DEBUG Indirect paths found: 1
    ├─   0.316798s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(products)- Product/a -(category)- Category/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b", current_cost=2005}
      ├─   0.316838s   0ms DEBUG checking edge Category/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b", edge="id"}
        ├─   0.316856s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.316871s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b with edge Category/b -(id)- ID/b
      ├─   0.316879s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(12) --> EdgeIndex(22)" }])
    ┌─┘
    ├─   0.316893s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b", current_cost=2005}
      ├─   0.316915s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/b
      ├─   0.316921s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.316926s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b", edge="id"}
        ├─   0.316944s   0ms DEBUG checking requirements {id} for edge 'Category/b -(🔑🧩{id})- Category/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b", current_cost=2005}
              ├─   0.316977s   0ms DEBUG checking edge Category/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b", edge="id"}
                ├─   0.316996s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.317013s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b with edge Category/b -(id)- ID/b
              ├─   0.317025s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(12) --> EdgeIndex(22)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b", current_cost=2005}
              ├─   0.317056s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/b
              ├─   0.317063s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.317070s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/a
              ├─   0.317076s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.317084s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.317090s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.317105s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(12) --> EdgeIndex(22)" }], [])))
          ┌─┘
          ├─   0.317121s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(12) --> EdgeIndex(22)" }], [])))
        ┌─┘
        ├─   0.317135s   0ms DEBUG Paths for id
        ├─   0.317144s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b -(id)- ID/b is valid
        ├─   0.317150s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.317161s   0ms DEBUG path Category/b -(id)- ID/b is valid
        ├─   0.317166s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(22)" }]))
      ┌─┘
      ├─   0.317180s   0ms DEBUG Advancing path to Category/b -(🔑🧩{id})- Category/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(22)" }, root_node="Category/b"}
        └─┐create_root_for_path_sequences{root_node="Category/b", segments_count=1}
          ├─   0.317204s   0ms DEBUG Building root query tree node: Category/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.317217s   0ms DEBUG Processing edge: Category/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.317237s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b -(🔑🧩{id})- Category/a", current_cost=3007}
        ├─   0.317281s   0ms DEBUG checking edge Category/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b -(🔑🧩{id})- Category/a", edge="id"}
          ├─   0.317300s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.317317s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b -(🔑🧩{id})- Category/a with edge Category/a -(id)- ID/a
        ├─   0.317324s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(12) --> EdgeIndex(41) --> EdgeIndex(19)" }])
      ┌─┘
      ├─   0.317339s   0ms DEBUG Found 1 direct paths to Category/b -(🔑🧩{id})- Category/a
      ├─   0.317349s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.317354s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(12) --> EdgeIndex(41) --> EdgeIndex(19)" }])
    ┌─┘
    ├─   0.317369s   0ms DEBUG Indirect paths found: 1
    ├─   0.317378s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(category)- Category/b
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
      ├─   0.317412s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.317424s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
      ├─   0.317443s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", edge="id"}
        ├─   0.317461s   0ms DEBUG checking requirements {id} for edge 'Category/c -(🔑🧩{id})- Category/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
              ├─   0.317494s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
              ├─   0.317522s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/b
              ├─   0.317529s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.317536s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", edge="id"}
                ├─   0.317556s   0ms DEBUG checking requirements {id} for edge 'Category/c -(🔑🧩{id})- Category/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
                      ├─   0.317591s   0ms INFO return=Ok([])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
                      ├─   0.317622s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/b
                      ├─   0.317630s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.317638s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/a
                      ├─   0.317644s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.317653s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.317659s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.317680s   0ms INFO return=Ok(None)
                  ┌─┘
                  ├─   0.317709s   0ms INFO return=Ok(None)
                ┌─┘
                ├─   0.317730s   0ms INFO return=Ok(None)
              ┌─┘
              ├─   0.317743s   0ms DEBUG Requirements not satisfied, continue look up...
              ├─   0.317768s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.317777s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.317795s   0ms INFO return=Ok(None)
          ┌─┘
          ├─   0.317807s   0ms INFO return=Ok(None)
        ┌─┘
        ├─   0.317820s   0ms INFO return=Ok(None)
      ┌─┘
      ├─   0.317831s   0ms DEBUG Requirements not satisfied, continue look up...
      ├─   0.317839s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", edge="id"}
        ├─   0.317868s   0ms DEBUG checking requirements {id} for edge 'Category/c -(🔑🧩{id})- Category/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
              ├─   0.317903s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
              ├─   0.317935s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", edge="id"}
                ├─   0.317955s   0ms DEBUG checking requirements {id} for edge 'Category/c -(🔑🧩{id})- Category/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
                      ├─   0.317991s   0ms INFO return=Ok([])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c", current_cost=2005}
                      ├─   0.318023s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/b
                      ├─   0.318031s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.318039s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/a
                      ├─   0.318046s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.318054s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.318061s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.318081s   0ms INFO return=Ok(None)
                  ┌─┘
                  ├─   0.318095s   0ms INFO return=Ok(None)
                ┌─┘
                ├─   0.318109s   0ms INFO return=Ok(None)
              ┌─┘
              ├─   0.318122s   0ms DEBUG Requirements not satisfied, continue look up...
              ├─   0.318130s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/a
              ├─   0.318136s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.318143s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.318149s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.318162s   0ms INFO return=Ok(None)
          ┌─┘
          ├─   0.318174s   0ms INFO return=Ok(None)
        ┌─┘
        ├─   0.318186s   0ms INFO return=Ok(None)
      ┌─┘
      ├─   0.318197s   0ms DEBUG Requirements not satisfied, continue look up...
      ├─   0.318202s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.318207s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.318218s   0ms DEBUG Indirect paths found: 0
    ├─   0.318227s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(category)- Category/c
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.318257s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(products)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
      ├─   0.318282s   0ms DEBUG checking edge Product/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id"}
        ├─   0.318298s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.318312s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(id)- ID/a
      ├─   0.318320s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.318334s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
      ├─   0.318353s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
      ├─   0.318359s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.318364s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id pid"}
        ├─   0.318381s   0ms DEBUG checking requirements {id pid} for edge 'Product/a -(🔑🧩{id pid})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.318414s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id"}
                ├─   0.318433s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.318450s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.318459s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.318488s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
              ├─   0.318495s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.318502s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
              ├─   0.318508s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.318515s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id pid"}
                ├─   0.318533s   0ms DEBUG checking requirements {id pid} for edge 'Product/a -(🔑🧩{id pid})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.318569s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id"}
                        ├─   0.318587s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.318606s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.318615s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.318646s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.318654s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.318661s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.318684s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.318697s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.318704s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.318712s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.318719s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.318728s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.318737s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.318758s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.318778s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.318794s   0ms DEBUG Paths for id
                ├─   0.318804s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(id)- ID/a is valid
                ├─   0.318811s   0ms DEBUG Found 1 best paths for this leaf requirement
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.318855s   0ms DEBUG checking edge Product/a -(pid)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="pid"}
                        ├─   0.318875s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.318895s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(pid)- ID/a
                      ├─   0.318906s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.318939s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.318947s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.318954s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.318962s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.318971s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.318978s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.318985s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.318992s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.319000s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.319007s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.319024s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                  ┌─┘
                  ├─   0.319042s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                ┌─┘
                ├─   0.319057s   0ms DEBUG Paths for pid
                ├─   0.319067s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(pid)- ID/a is valid
                ├─   0.319074s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.319084s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.319092s   0ms DEBUG path Product/a -(pid)- ID/a is valid
                ├─   0.319098s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" },  { cost: 1, egdes: "EdgeIndex(6)" }]))
              ┌─┘
              ├─   0.319116s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id pid})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.319143s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.319159s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.319182s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.319228s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.319246s   0ms DEBUG Processing edge: Product/a -(pid)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.319269s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐merge_trees{tree_count=2}
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b", current_cost=2004}
                ├─   0.319332s   0ms DEBUG checking edge Product/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b", edge="id"}
                  ├─   0.319352s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.319372s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b with edge Product/b -(id)- ID/b
                ├─   0.319381s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(11)" }])
              ┌─┘
              ├─   0.319399s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id pid})- Product/b
              ├─   0.319408s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.319415s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.319423s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.319430s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(11)" }])
            ┌─┘
            ├─   0.319447s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.319463s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.319478s   1ms DEBUG Paths for id
        ├─   0.319486s   1ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(id)- ID/a is valid
        ├─   0.319495s   1ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(id)- ID/b is valid
        ├─   0.319501s   1ms DEBUG Found 1 best paths for this leaf requirement
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.319537s   0ms DEBUG checking edge Product/a -(pid)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="pid"}
                ├─   0.319555s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.319572s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(pid)- ID/a
              ├─   0.319581s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.319610s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
              ├─   0.319619s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.319626s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
              ├─   0.319632s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.319639s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id pid"}
                ├─   0.319657s   0ms DEBUG checking requirements {id pid} for edge 'Product/a -(🔑🧩{id pid})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.319693s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id"}
                        ├─   0.319711s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.319730s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.319740s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.319771s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.319780s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.319787s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.319794s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.319802s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.319809s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.319817s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.319824s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.319832s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.319839s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.319857s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.319890s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.319911s   0ms DEBUG Paths for id
                ├─   0.319924s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(id)- ID/a is valid
                ├─   0.319931s   0ms DEBUG Found 1 best paths for this leaf requirement
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.319975s   0ms DEBUG checking edge Product/a -(pid)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="pid"}
                        ├─   0.319996s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.320015s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(pid)- ID/a
                      ├─   0.320025s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.320059s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.320067s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.320075s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.320082s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.320091s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.320097s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.320105s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.320112s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.320120s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.320128s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.320146s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                  ┌─┘
                  ├─   0.320164s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                ┌─┘
                ├─   0.320180s   0ms DEBUG Paths for pid
                ├─   0.320189s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(pid)- ID/a is valid
                ├─   0.320196s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.320207s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.320214s   0ms DEBUG path Product/a -(pid)- ID/a is valid
                ├─   0.320221s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" },  { cost: 1, egdes: "EdgeIndex(6)" }]))
              ┌─┘
              ├─   0.320238s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id pid})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.320265s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.320281s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.320304s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.320349s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.320365s   0ms DEBUG Processing edge: Product/a -(pid)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.320387s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐merge_trees{tree_count=2}
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b", current_cost=2004}
                ├─   0.320450s   0ms DEBUG checking edge Product/b -(pid)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b", edge="pid"}
                  ├─   0.320470s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.320492s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b with edge Product/b -(pid)- ID/b
                ├─   0.320501s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.320519s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id pid})- Product/b
              ├─   0.320528s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.320536s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.320544s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.320551s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.320567s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.320583s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.320619s   2ms DEBUG Paths for pid
        ├─   0.320632s   2ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(pid)- ID/a is valid
        ├─   0.320641s   2ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b -(pid)- ID/b is valid
        ├─   0.320648s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.320658s   2ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.320665s   2ms DEBUG path Product/a -(pid)- ID/a is valid
        ├─   0.320671s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" },  { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.320687s   2ms DEBUG Advancing path to Product/a -(🔑🧩{id pid})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.320713s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.320727s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.320747s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.320787s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.320800s   0ms DEBUG Processing edge: Product/a -(pid)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.320820s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐merge_trees{tree_count=2}
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c", current_cost=2004}
        ├─   0.320877s   0ms DEBUG checking edge Product/c -(id)- ID/c
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c", edge="id"}
          ├─   0.320896s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.320912s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c with edge Product/c -(id)- ID/c
        ├─   0.320921s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(15)" }])
      ┌─┘
      ├─   0.320937s   2ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id pid})- Product/c
      ├─   0.320945s   2ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id pid"}
        ├─   0.320963s   0ms DEBUG checking requirements {id pid} for edge 'Product/a -(🔑🧩{id pid})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.321012s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id"}
                ├─   0.321039s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.321058s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.321080s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.321124s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
              ├─   0.321143s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.321155s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id pid"}
                ├─   0.321180s   0ms DEBUG checking requirements {id pid} for edge 'Product/a -(🔑🧩{id pid})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.321271s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id"}
                        ├─   0.321294s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.321316s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.321327s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.321361s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.321370s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.321377s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.321385s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.321393s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.321400s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.321408s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.321415s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.321423s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.321431s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.321448s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.321466s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.321482s   0ms DEBUG Paths for id
                ├─   0.321492s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(id)- ID/a is valid
                ├─   0.321498s   0ms DEBUG Found 1 best paths for this leaf requirement
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.321539s   0ms DEBUG checking edge Product/a -(pid)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="pid"}
                        ├─   0.321559s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.321578s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(pid)- ID/a
                      ├─   0.321587s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.321620s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.321628s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.321636s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.321644s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.321653s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.321660s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.321667s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.321675s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.321683s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.321690s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.321708s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                  ┌─┘
                  ├─   0.321725s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                ┌─┘
                ├─   0.321746s   0ms DEBUG Paths for pid
                ├─   0.321755s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(pid)- ID/a is valid
                ├─   0.321762s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.321772s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.321780s   0ms DEBUG path Product/a -(pid)- ID/a is valid
                ├─   0.321786s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" },  { cost: 1, egdes: "EdgeIndex(6)" }]))
              ┌─┘
              ├─   0.321803s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id pid})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.321852s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.321871s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.321897s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.321989s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.322006s   0ms DEBUG Processing edge: Product/a -(pid)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.322029s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐merge_trees{tree_count=2}
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c", current_cost=2004}
                ├─   0.322115s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c", edge="id"}
                  ├─   0.322137s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.322156s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.322166s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(15)" }])
              ┌─┘
              ├─   0.322184s   1ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id pid})- Product/c
              ├─   0.322195s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
              ├─   0.322202s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.322209s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.322215s   1ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.322224s   1ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.322231s   1ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(15)" }])
            ┌─┘
            ├─   0.322248s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(15)" }], [])))
          ┌─┘
          ├─   0.322264s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(15)" }], [])))
        ┌─┘
        ├─   0.322279s   1ms DEBUG Paths for id
        ├─   0.322288s   1ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(id)- ID/a is valid
        ├─   0.322296s   1ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(id)- ID/c is valid
        ├─   0.322303s   1ms DEBUG Found 1 best paths for this leaf requirement
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.322339s   0ms DEBUG checking edge Product/a -(pid)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="pid"}
                ├─   0.322357s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.322374s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(pid)- ID/a
              ├─   0.322382s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
              ├─   0.322412s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
              ├─   0.322419s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.322426s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id pid"}
                ├─   0.322444s   0ms DEBUG checking requirements {id pid} for edge 'Product/a -(🔑🧩{id pid})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.322479s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="id"}
                        ├─   0.322498s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.322517s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.322526s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.322557s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.322565s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.322572s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.322580s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.322588s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.322594s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.322602s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.322609s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.322617s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.322624s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.322641s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                  ┌─┘
                  ├─   0.322658s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }], [])))
                ┌─┘
                ├─   0.322673s   0ms DEBUG Paths for id
                ├─   0.322682s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(id)- ID/a is valid
                ├─   0.322689s   0ms DEBUG Found 1 best paths for this leaf requirement
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.322727s   0ms DEBUG checking edge Product/a -(pid)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a", edge="pid"}
                        ├─   0.322747s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.322765s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a with edge Product/a -(pid)- ID/a
                      ├─   0.322775s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a", current_cost=1001}
                      ├─   0.322806s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/a
                      ├─   0.322814s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.322822s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/c
                      ├─   0.322829s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.322837s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
                      ├─   0.322844s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.322851s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.322858s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.322866s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.322873s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.322890s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                  ┌─┘
                  ├─   0.322907s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" }], [])))
                ┌─┘
                ├─   0.322922s   0ms DEBUG Paths for pid
                ├─   0.322931s   0ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(pid)- ID/a is valid
                ├─   0.322938s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.322948s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.322955s   0ms DEBUG path Product/a -(pid)- ID/a is valid
                ├─   0.322962s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" },  { cost: 1, egdes: "EdgeIndex(6)" }]))
              ┌─┘
              ├─   0.322979s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id pid})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.323005s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.323021s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.323044s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.323090s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.323105s   0ms DEBUG Processing edge: Product/a -(pid)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.323132s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐merge_trees{tree_count=2}
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c", current_cost=2004}
                ├─   0.323194s   0ms DEBUG checking edge Product/c -(pid)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c", edge="pid"}
                  ├─   0.323216s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.323233s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c with edge Product/c -(pid)- ID/c
                ├─   0.323243s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(14)" }])
              ┌─┘
              ├─   0.323260s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id pid})- Product/c
              ├─   0.323270s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id pid})- Product/b
              ├─   0.323276s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.323283s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.323290s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.323298s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.323304s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(14)" }])
            ┌─┘
            ├─   0.323321s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.323337s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(6)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.323352s   2ms DEBUG Paths for pid
        ├─   0.323360s   2ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(pid)- ID/a is valid
        ├─   0.323368s   2ms DEBUG   Path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/c -(pid)- ID/c is valid
        ├─   0.323374s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.323384s   2ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.323390s   2ms DEBUG path Product/a -(pid)- ID/a is valid
        ├─   0.323396s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" },  { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.323410s   5ms DEBUG Advancing path to Product/a -(🔑🧩{id pid})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.323435s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.323449s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.323469s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.323508s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.323521s   0ms DEBUG Processing edge: Product/a -(pid)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.323541s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐merge_trees{tree_count=2}
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b", current_cost=2004}
        ├─   0.323597s   0ms DEBUG checking edge Product/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b", edge="id"}
          ├─   0.323615s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.323630s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(products)- Product/a -(🔑🧩{id pid})- Product/b with edge Product/b -(id)- ID/b
        ├─   0.323639s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.323654s   5ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id pid})- Product/b
      ├─   0.323663s   5ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.323668s   5ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.323676s   5ms DEBUG Finished finding indirect paths, found total of 2
      ├─   0.323683s   5ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(28) --> EdgeIndex(11)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.323698s   5ms DEBUG Indirect paths found: 2
    ├─   0.323706s   5ms DEBUG advanced: root(Query) -(a)- Query/a -(products)- Product/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2007, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(29) --> EdgeIndex(16) --> EdgeIndex(24) --> EdgeIndex(26)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=6}
  ├─   0.323749s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=6}
    ├─   0.323761s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=6}
      ├─   0.323773s   0ms DEBUG Processing edge: Query/a -(products)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=6}
        ├─   0.323787s   0ms DEBUG Processing edge: Product/a -(🔑🧩{id pid})- Product/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=6}
          ├─   0.323800s   0ms DEBUG Processing edge: Product/c -(category)- Category/c
          └─┐from_path_segment_sequences{current_index=4, total_segments=6}
            ├─   0.323813s   0ms DEBUG Processing edge: Category/c -(details)- CategoryDetails/c
            └─┐from_path_segment_sequences{current_index=5, total_segments=6}
              ├─   0.323826s   0ms DEBUG Processing edge: CategoryDetails/c -(products)- Int/c
              └─┐from_path_segment_sequences{current_index=6, total_segments=6}
              ┌─┘
              ├─   0.323848s   0ms DEBUG No subsequent steps (leaf or end of path)
            ┌─┘
            ├─   0.323863s   0ms DEBUG Adding subsequent step as child
          ┌─┘
          ├─   0.323875s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.323886s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.323897s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.323907s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(19)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.323942s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.323953s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.323964s   0ms DEBUG Processing edge: Query/a -(products)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.323976s   0ms DEBUG Processing edge: Product/a -(category)- Category/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.323988s   0ms DEBUG Processing edge: Category/a -(id)- ID/a
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.324007s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.324018s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.324029s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.324039s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(7)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.324072s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.324083s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.324094s   0ms DEBUG Processing edge: Query/a -(products)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.324106s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.324124s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.324135s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.324146s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="products", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.324295s   0ms DEBUG adding output field 'products' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/a -(🔑🧩{id pid})- Product/c", parent_fetch_step_index=1}
              ├─   0.324339s   0ms DEBUG created a new fetch step [2] subgraph(c) type(Product) requirement() key({id pid}) in children of 1
              ├─   0.324348s   0ms DEBUG adding input requirement '{id pid}' to fetch step [2]
              ├─   0.324356s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.324364s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
                      ├─   0.324425s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.324450s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="pid", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
                      ├─   0.324512s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.324538s   0ms DEBUG adding output field 'pid' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Product", field="category", leaf=false, list=false, response_path="products.@", fetch_path=""}
                  ├─   0.324626s   0ms DEBUG adding output field 'category' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Category", field="details", leaf=false, list=false, response_path="products.@.category", fetch_path="category"}
                      ├─   0.324652s   0ms DEBUG adding output field 'details' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                        └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="CategoryDetails", field="products", leaf=true, list=false, response_path="products.@.category.details", fetch_path="category.details"}
                          ├─   0.324686s   0ms DEBUG adding output field 'products' to fetch step [2]
                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="category", leaf=false, list=false, response_path="products.@", fetch_path="products.@"}
              ├─   0.324774s   0ms DEBUG adding output field 'category' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
                └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Category", field="id", leaf=true, list=false, response_path="products.@.category", fetch_path="products.@.category"}
                  ├─   0.324799s   0ms DEBUG adding output field 'id' to fetch step [1]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="id", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
              ├─   0.324852s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.324916s   0ms DEBUG Done
├─   0.324923s   0ms DEBUG found roots
├─   0.324928s   0ms DEBUG print graph
├─   0.324933s   0ms DEBUG Nodes:
│ [1] Query/a {} → {products{__typename id pid category{id}}} at $.
│ [2] Product/c {__typename id pid} → {category{details{products}}} at $.products.@
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.325423s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.325879s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.326339s   1ms DEBUG connected to 127.0.0.1:4200
        ├─   0.330698s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"products": Array [Object {"__typename": String("Product"), "id": String("p1"), "pid": String("p1-pid"), "category": Object {"id": String("c1")}}, Object {"__typename": String("Product"), "id": String("p2"), "pid": String("p2-pid"), "category": Object {"id": String("c2")}}, Object {"__typename": String("Product"), "id": String("p3"), "pid": String("p3-pid"), "category": Object {"id": String("c1")}}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "pid": String("p1-pid"), "category": Object {"id": String("c1")}}, Object {"__typename": String("Product"), "id": String("p2"), "pid": String("p2-pid"), "category": Object {"id": String("c2")}}, Object {"__typename": String("Product"), "id": String("p3"), "pid": String("p3-pid"), "category": Object {"id": String("c1")}}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "pid", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "pid": String("p1-pid"), "category": Object {"id": String("c1")}}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "pid", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "pid": String("p1-pid"), "category": Object {"id": String("c1")}}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1-pid")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "pid", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p2"), "pid": String("p2-pid"), "category": Object {"id": String("c2")}}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "pid", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p2"), "pid": String("p2-pid"), "category": Object {"id": String("c2")}}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2-pid")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "pid", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p3"), "pid": String("p3-pid"), "category": Object {"id": String("c1")}}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "pid", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p3"), "pid": String("p3-pid"), "category": Object {"id": String("c1")}}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p3")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p3-pid")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.331617s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.334789s   3ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.335057s DEBUG execution result: ExecutionResult { data: Some(Object {"products": Array [Object {"id": String("p1"), "category": Object {"id": String("c1"), "details": Object {"products": Number(2)}}}, Object {"id": String("p2"), "category": Object {"id": String("c2"), "details": Object {"products": Number(1)}}}, Object {"id": String("p3"), "category": Object {"id": String("c1"), "details": Object {"products": Number(2)}}}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{products{__typename id pid category{id}}}")}, Object {"kind": String("Flatten"), "path": Array [String("products"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{category{details{products}}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}, Object {"kind": String("Field"), "name": String("pid")}]}]}}]}}}) }
