generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.11s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_object_type{name="Category"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_interface_type{name="Node"}
    └─┐build_fields{fields_count=1}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Product"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="NODE_TWO"}
┌─┘
└─┐decompose_from_supergraph{graph_id="NODE"}
┌─┘
└─┐decompose_from_supergraph{graph_id="TYPES"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.005896s   0ms DEBUG Building graph for supergraph with 16 definitions
  └─┐build_root_nodes{}
    ├─   0.005927s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.005976s   0ms INFO [x] Creating owned field move edge 'Query.__typename/NODE' (type: String)
    ├─   0.005988s   0ms INFO [x] Creating field move edge 'Query.productNode/NODE' (type: Node)
    ├─   0.005996s   0ms INFO [x] Creating field move edge 'Query.productNode/NODE' (type: Node)
    ├─   0.006003s   0ms INFO [x] Creating field move edge 'Query.categoryNode/NODE' (type: Node)
    ├─   0.006009s   0ms INFO [x] Creating field move edge 'Query.categoryNode/NODE' (type: Node)
    ├─   0.006015s   0ms INFO [x] Creating owned field move edge 'Query.__typename/NODE_TWO' (type: String)
    ├─   0.006023s   0ms INFO [ ] Field 'Query.productNode/NODE_TWO' does is not available in the subgraph, skipping edge creation (type: Node)
    ├─   0.006028s   0ms INFO [ ] Field 'Query.categoryNode/NODE_TWO' does is not available in the subgraph, skipping edge creation (type: Node)
    ├─   0.006033s   0ms INFO [x] Creating owned field move edge 'Query.__typename/TYPES' (type: String)
    ├─   0.006042s   0ms INFO [ ] Field 'Query.productNode/TYPES' does is not available in the subgraph, skipping edge creation (type: Node)
    ├─   0.006047s   0ms INFO [ ] Field 'Query.categoryNode/TYPES' does is not available in the subgraph, skipping edge creation (type: Node)
    ├─   0.006052s   0ms INFO [x] Creating owned field move edge 'Node.__typename/NODE' (type: String)
    ├─   0.006058s   0ms INFO [x] Creating field move edge 'Node.id/NODE' (type: ID)
    ├─   0.006064s   0ms INFO [x] Creating field move edge 'Node.id/NODE' (type: ID)
    ├─   0.006070s   0ms INFO [x] Creating owned field move edge 'Node.__typename/NODE_TWO' (type: String)
    ├─   0.006076s   0ms INFO [x] Creating field move edge 'Node.id/NODE_TWO' (type: ID)
    ├─   0.006082s   0ms INFO [x] Creating field move edge 'Node.id/NODE_TWO' (type: ID)
    ├─   0.006088s   0ms INFO [x] Creating owned field move edge 'Node.__typename/TYPES' (type: String)
    ├─   0.006094s   0ms INFO [x] Creating field move edge 'Node.id/TYPES' (type: ID)
    ├─   0.006100s   0ms INFO [x] Creating field move edge 'Node.id/TYPES' (type: ID)
    ├─   0.006106s   0ms INFO [x] Creating owned field move edge 'Category.__typename/NODE' (type: String)
    ├─   0.006113s   0ms INFO [x] Creating field move edge 'Category.id/NODE' (type: ID)
    ├─   0.006118s   0ms INFO [x] Creating field move edge 'Category.id/NODE' (type: ID)
    ├─   0.006124s   0ms INFO [ ] Field 'Category.name/NODE' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006129s   0ms INFO [x] Creating owned field move edge 'Category.__typename/NODE_TWO' (type: String)
    ├─   0.006138s   0ms INFO [x] Creating field move edge 'Category.id/NODE_TWO' (type: ID)
    ├─   0.006144s   0ms INFO [x] Creating field move edge 'Category.id/NODE_TWO' (type: ID)
    ├─   0.006149s   0ms INFO [ ] Field 'Category.name/NODE_TWO' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006154s   0ms INFO [x] Creating owned field move edge 'Category.__typename/TYPES' (type: String)
    ├─   0.006161s   0ms INFO [x] Creating field move edge 'Category.id/TYPES' (type: ID)
    ├─   0.006167s   0ms INFO [x] Creating field move edge 'Category.id/TYPES' (type: ID)
    ├─   0.006172s   0ms INFO [x] Creating field move edge 'Category.name/TYPES' (type: String)
    ├─   0.006178s   0ms INFO [x] Creating field move edge 'Category.name/TYPES' (type: String)
    ├─   0.006184s   0ms INFO [x] Creating owned field move edge 'Product.__typename/NODE' (type: String)
    ├─   0.006191s   0ms INFO [x] Creating field move edge 'Product.id/NODE' (type: ID)
    ├─   0.006196s   0ms INFO [x] Creating field move edge 'Product.id/NODE' (type: ID)
    ├─   0.006202s   0ms INFO [ ] Field 'Product.name/NODE' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006206s   0ms INFO [ ] Field 'Product.price/NODE' does is not available in the subgraph, skipping edge creation (type: Float)
    ├─   0.006211s   0ms INFO [x] Creating owned field move edge 'Product.__typename/NODE_TWO' (type: String)
    ├─   0.006218s   0ms INFO [x] Creating field move edge 'Product.id/NODE_TWO' (type: ID)
    ├─   0.006224s   0ms INFO [x] Creating field move edge 'Product.id/NODE_TWO' (type: ID)
    ├─   0.006242s   0ms INFO [ ] Field 'Product.name/NODE_TWO' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006247s   0ms INFO [ ] Field 'Product.price/NODE_TWO' does is not available in the subgraph, skipping edge creation (type: Float)
    ├─   0.006252s   0ms INFO [x] Creating owned field move edge 'Product.__typename/TYPES' (type: String)
    ├─   0.006260s   0ms INFO [x] Creating field move edge 'Product.id/TYPES' (type: ID)
    ├─   0.006288s   0ms INFO [x] Creating field move edge 'Product.id/TYPES' (type: ID)
    ├─   0.006295s   0ms INFO [x] Creating field move edge 'Product.name/TYPES' (type: String)
    ├─   0.006301s   0ms INFO [x] Creating field move edge 'Product.name/TYPES' (type: String)
    ├─   0.006307s   0ms INFO [x] Creating field move edge 'Product.price/TYPES' (type: Float)
    ├─   0.006313s   0ms INFO [x] Creating field move edge 'Product.price/TYPES' (type: Float)
  ┌─┘
  └─┐build_interface_implementation_edges{}
    ├─   0.006341s   0ms INFO Building interface implementation edge from 'Category/NODE' to 'Node/NODE'
    ├─   0.006349s   0ms INFO Building interface implementation edge from 'Category/NODE_TWO' to 'Node/NODE_TWO'
    ├─   0.006355s   0ms INFO Building interface implementation edge from 'Category/TYPES' to 'Node/TYPES'
    ├─   0.006361s   0ms INFO Building interface implementation edge from 'Product/NODE' to 'Node/NODE'
    ├─   0.006367s   0ms INFO Building interface implementation edge from 'Product/NODE_TWO' to 'Node/NODE_TWO'
    ├─   0.006373s   0ms INFO Building interface implementation edge from 'Product/TYPES' to 'Node/TYPES'
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006487s   0ms INFO Creating self-referencing entity move edge in 'Category/NODE' via key 'id'
    ├─   0.006558s   0ms INFO Creating entity move edge from 'Category/NODE' to 'Category/NODE_TWO' via key 'id'
    ├─   0.006624s   0ms INFO Creating entity move edge from 'Category/NODE' to 'Category/TYPES' via key 'id'
    ├─   0.006660s   0ms INFO Creating entity move edge from 'Category/NODE_TWO' to 'Category/NODE' via key 'id'
    ├─   0.006720s   0ms INFO Creating self-referencing entity move edge in 'Category/NODE_TWO' via key 'id'
    ├─   0.006763s   0ms INFO Creating entity move edge from 'Category/NODE_TWO' to 'Category/TYPES' via key 'id'
    ├─   0.006796s   0ms INFO Creating entity move edge from 'Category/TYPES' to 'Category/NODE' via key 'id'
    ├─   0.006848s   0ms INFO Creating entity move edge from 'Category/TYPES' to 'Category/NODE_TWO' via key 'id'
    ├─   0.006921s   0ms INFO Creating self-referencing entity move edge in 'Category/TYPES' via key 'id'
    ├─   0.006984s   0ms INFO Creating self-referencing entity move edge in 'Product/NODE' via key 'id'
    ├─   0.007022s   0ms INFO Creating entity move edge from 'Product/NODE' to 'Product/NODE_TWO' via key 'id'
    ├─   0.007053s   0ms INFO Creating entity move edge from 'Product/NODE' to 'Product/TYPES' via key 'id'
    ├─   0.007082s   0ms INFO Creating entity move edge from 'Product/NODE_TWO' to 'Product/NODE' via key 'id'
    ├─   0.007111s   0ms INFO Creating self-referencing entity move edge in 'Product/NODE_TWO' via key 'id'
    ├─   0.007140s   0ms INFO Creating entity move edge from 'Product/NODE_TWO' to 'Product/TYPES' via key 'id'
    ├─   0.007170s   0ms INFO Creating entity move edge from 'Product/TYPES' to 'Product/NODE' via key 'id'
    ├─   0.007199s   0ms INFO Creating entity move edge from 'Product/TYPES' to 'Product/NODE_TWO' via key 'id'
    ├─   0.007228s   0ms INFO Creating self-referencing entity move edge in 'Product/TYPES' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.062569s INFO Starting server on http://localhost:4000
   0.063653s INFO starting 16 workers
   0.063701s INFO Actix runtime found; starting in Actix runtime
   0.063716s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.304233s DEBUG original document: query ping {
  __typename
}

   0.304366s DEBUG normalized document: query ping {__typename}

   0.304386s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.304794s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.383178s DEBUG original document: {
  productNode {
    ... on Product {
      id
      name
      __typename
      price
    }
  }
}

   0.383320s DEBUG normalized document: query{productNode{...on Product{id name __typename price}}}

   0.383344s DEBUG executable operation: query{productNode{...on Product{id name __typename price}}}
┐walk_operation{}
├─   0.383802s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="productNode", leaf=false}
  ├─   0.383866s   0ms DEBUG Trying to advance to: productNode{...on Product{id name __typename price}} through 1 possible paths
  └─┐explore_path{path="root(Query) -(node)- Query/node"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "productNode", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node", current_cost=1000}
      ├─   0.383931s   0ms DEBUG checking edge Query/node -(productNode)- Node/node
      └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node", edge="productNode"}
        ├─   0.383951s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.383976s   0ms DEBUG Advancing path root(Query) -(node)- Query/node with edge Query/node -(productNode)- Node/node
      ├─   0.383987s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(2)" }])
    ┌─┘
    ├─   0.384003s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "productNode", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node", current_cost=1000}
      ├─   0.384057s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.384067s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.384083s   0ms DEBUG Indirect paths found: 0
    ├─   0.384093s   0ms DEBUG advanced: root(Query) -(node)- Query/node
  ┌─┘
  ├─   0.384108s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_inline_fragment{type_condition="Product"}
  ├─   0.384145s   0ms DEBUG Processing inline fragment '{id name __typename price}' on type 'Product' through 1 possible paths
  ├─   0.384156s   0ms DEBUG Trying to advance to: ... on Product, through 1 possible paths
  └─┐explore_path{path="root(Query) -(node)- Query/node -(productNode)- Node/node"}
    └─┐find_direct_paths{target=ConcreteType("Product"), path="root(Query) -(node)- Query/node -(productNode)- Node/node", current_cost=1001}
      ├─   0.384190s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node with edge Node/node -(🔮)- Product/node
      ├─   0.384199s   0ms INFO return=Ok([ { cost: 2001, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30)" }])
    ┌─┘
    ├─   0.384217s   0ms DEBUG Direct paths found: 1
    ├─   0.384224s   0ms DEBUG advanced: root(Query) -(node)- Query/node -(productNode)- Node/node
  ┌─┘
  └─┐process_selection_set{}
    └─┐process_field{field_name="id", leaf=true}
      ├─   0.384249s   0ms DEBUG Trying to advance to: id through 1 possible paths
      └─┐explore_path{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
          ├─   0.384281s   0ms DEBUG checking edge Product/node -(id)- ID/node
          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
            ├─   0.384302s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.384321s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
          ├─   0.384330s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
        ┌─┘
        ├─   0.384344s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
          ├─   0.384367s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
            ├─   0.384387s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/types'
            └─┐validate_field_requirement{}
              └─┐validate_field_requirement{}
                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.384438s   0ms DEBUG checking edge Product/node -(id)- ID/node
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.384459s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.384478s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                  ├─   0.384489s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                ┌─┘
                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.384522s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                  ├─   0.384532s   0ms DEBUG Ignoring, graph is excluded and already visited (current: types, visited: {"types"})
                  ├─   0.384540s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.384564s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/node-two'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.384631s   0ms DEBUG checking edge Product/node -(id)- ID/node
                          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                            ├─   0.384663s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.384685s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                          ├─   0.384697s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.384735s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                          ├─   0.384744s   0ms DEBUG Ignoring, graph is excluded and already visited (current: types, visited: {"types", "node-two"})
                          ├─   0.384752s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                          ├─   0.384760s   0ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"types", "node-two"})
                          ├─   0.384768s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                          ├─   0.384777s   0ms DEBUG Ignoring. We would go back to the same graph
                          ├─   0.384786s   0ms DEBUG Finished finding indirect paths, found total of 0
                          ├─   0.384793s   0ms INFO return=Ok([])
                        ┌─┘
                        ├─   0.384813s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                      ┌─┘
                      ├─   0.384833s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                    ┌─┘
                    ├─   0.384849s   0ms DEBUG Paths for id
                    ├─   0.384860s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
                    ├─   0.384868s   0ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.384885s   0ms DEBUG path Product/node -(id)- ID/node is valid
                    ├─   0.384892s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
                  ┌─┘
                  ├─   0.384910s   0ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/node-two
                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
                    └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
                      ├─   0.384942s   0ms DEBUG Building root query tree node: Product/node
                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                        ├─   0.384960s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                        ┌─┘
                        ├─   0.384984s   0ms DEBUG No subsequent steps (leaf or end of path)
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", current_cost=3003}
                    ├─   0.385054s   0ms DEBUG checking edge Product/node-two -(id)- ID/node-two
                    └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", edge="id"}
                      ├─   0.385085s   0ms INFO return=Ok(Some([]))
                    ┌─┘
                    ├─   0.385107s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two with edge Product/node-two -(id)- ID/node-two
                    ├─   0.385117s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }])
                  ┌─┘
                  ├─   0.385138s   0ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/node-two
                  ├─   0.385148s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                  ├─   0.385155s   0ms DEBUG Ignoring. We would go back to the same graph
                  ├─   0.385164s   0ms DEBUG Finished finding indirect paths, found total of 1
                  ├─   0.385171s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }])
                ┌─┘
                ├─   0.385189s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }], [])))
              ┌─┘
              ├─   0.385215s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }], [])))
            ┌─┘
            ├─   0.385231s   0ms DEBUG Paths for id
            ├─   0.385240s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
            ├─   0.385249s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two -(id)- ID/node-two is valid
            ├─   0.385256s   0ms DEBUG Found 1 best paths for this leaf requirement
            ├─   0.385267s   0ms DEBUG path Product/node -(id)- ID/node is valid
            ├─   0.385272s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
          ┌─┘
          ├─   0.385302s   0ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/types
          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
            └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
              ├─   0.385336s   0ms DEBUG Building root query tree node: Product/node
              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                ├─   0.385351s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                ┌─┘
                ├─   0.385372s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
            ┌─┘
          ┌─┘
          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", current_cost=3003}
            ├─   0.385419s   0ms DEBUG checking edge Product/types -(id)- ID/types
            └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", edge="id"}
              ├─   0.385439s   0ms INFO return=Ok(Some([]))
            ┌─┘
            ├─   0.385456s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types with edge Product/types -(id)- ID/types
            ├─   0.385464s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }])
          ┌─┘
          ├─   0.385480s   1ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/types
          ├─   0.385489s   1ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
            ├─   0.385524s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/node-two'
            └─┐validate_field_requirement{}
              └─┐validate_field_requirement{}
                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.385568s   0ms DEBUG checking edge Product/node -(id)- ID/node
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.385587s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.385607s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                  ├─   0.385618s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                ┌─┘
                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.385655s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.385675s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/types'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.385711s   0ms DEBUG checking edge Product/node -(id)- ID/node
                          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                            ├─   0.385731s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.385750s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                          ├─   0.385760s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.385793s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                          ├─   0.385801s   0ms DEBUG Ignoring, graph is excluded and already visited (current: types, visited: {"node-two", "types"})
                          ├─   0.385809s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                          ├─   0.385817s   0ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"node-two", "types"})
                          ├─   0.385824s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                          ├─   0.385851s   0ms DEBUG Ignoring. We would go back to the same graph
                          ├─   0.385864s   0ms DEBUG Finished finding indirect paths, found total of 0
                          ├─   0.385871s   0ms INFO return=Ok([])
                        ┌─┘
                        ├─   0.385904s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                      ┌─┘
                      ├─   0.385928s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                    ┌─┘
                    ├─   0.385945s   0ms DEBUG Paths for id
                    ├─   0.385959s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
                    ├─   0.385966s   0ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.385978s   0ms DEBUG path Product/node -(id)- ID/node is valid
                    ├─   0.385985s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
                  ┌─┘
                  ├─   0.386011s   0ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/types
                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
                    └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
                      ├─   0.386043s   0ms DEBUG Building root query tree node: Product/node
                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                        ├─   0.386092s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                        ┌─┘
                        ├─   0.386124s   0ms DEBUG No subsequent steps (leaf or end of path)
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", current_cost=3003}
                    ├─   0.386194s   0ms DEBUG checking edge Product/types -(id)- ID/types
                    └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", edge="id"}
                      ├─   0.386225s   0ms INFO return=Ok(Some([]))
                    ┌─┘
                    ├─   0.386246s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types with edge Product/types -(id)- ID/types
                    ├─   0.386273s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                  ┌─┘
                  ├─   0.386304s   0ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/types
                  ├─   0.386315s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                  ├─   0.386322s   0ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"node-two"})
                  ├─   0.386330s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                  ├─   0.386336s   0ms DEBUG Ignoring. We would go back to the same graph
                  ├─   0.386345s   0ms DEBUG Finished finding indirect paths, found total of 1
                  ├─   0.386352s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                ┌─┘
                ├─   0.386370s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
              ┌─┘
              ├─   0.386388s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
            ┌─┘
            ├─   0.386404s   0ms DEBUG Paths for id
            ├─   0.386413s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
            ├─   0.386422s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types -(id)- ID/types is valid
            ├─   0.386429s   0ms DEBUG Found 1 best paths for this leaf requirement
            ├─   0.386440s   0ms DEBUG path Product/node -(id)- ID/node is valid
            ├─   0.386446s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
          ┌─┘
          ├─   0.386461s   2ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/node-two
          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
            └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
              ├─   0.386488s   0ms DEBUG Building root query tree node: Product/node
              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                ├─   0.386502s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                ┌─┘
                ├─   0.386523s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
            ┌─┘
          ┌─┘
          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", current_cost=3003}
            ├─   0.386571s   0ms DEBUG checking edge Product/node-two -(id)- ID/node-two
            └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", edge="id"}
              ├─   0.386590s   0ms INFO return=Ok(Some([]))
            ┌─┘
            ├─   0.386607s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two with edge Product/node-two -(id)- ID/node-two
            ├─   0.386614s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }])
          ┌─┘
          ├─   0.386633s   2ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/node-two
          ├─   0.386644s   2ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
          ├─   0.386650s   2ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.386657s   2ms DEBUG Finished finding indirect paths, found total of 2
          ├─   0.386663s   2ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }])
        ┌─┘
        ├─   0.386679s   2ms DEBUG Indirect paths found: 2
        ├─   0.386692s   2ms DEBUG advanced: root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="name", leaf=true}
      ├─   0.386721s   0ms DEBUG Trying to advance to: name through 1 possible paths
      └─┐explore_path{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
          ├─   0.386789s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.386808s   0ms DEBUG Direct paths found: 0
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
          ├─   0.386835s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
            ├─   0.386855s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/types'
            └─┐validate_field_requirement{}
              └─┐validate_field_requirement{}
                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.386889s   0ms DEBUG checking edge Product/node -(id)- ID/node
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.386907s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.386926s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                  ├─   0.386936s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                ┌─┘
                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.386970s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                  ├─   0.386977s   0ms DEBUG Ignoring, graph is excluded and already visited (current: types, visited: {"types"})
                  ├─   0.386985s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.387004s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/node-two'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.387040s   0ms DEBUG checking edge Product/node -(id)- ID/node
                          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                            ├─   0.387060s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.387079s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                          ├─   0.387089s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.387122s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                          ├─   0.387130s   0ms DEBUG Ignoring, graph is excluded and already visited (current: types, visited: {"types", "node-two"})
                          ├─   0.387138s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                          ├─   0.387145s   0ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"types", "node-two"})
                          ├─   0.387168s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                          ├─   0.387179s   0ms DEBUG Ignoring. We would go back to the same graph
                          ├─   0.387189s   0ms DEBUG Finished finding indirect paths, found total of 0
                          ├─   0.387196s   0ms INFO return=Ok([])
                        ┌─┘
                        ├─   0.387218s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                      ┌─┘
                      ├─   0.387238s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                    ┌─┘
                    ├─   0.387255s   0ms DEBUG Paths for id
                    ├─   0.387265s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
                    ├─   0.387272s   0ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.387285s   0ms DEBUG path Product/node -(id)- ID/node is valid
                    ├─   0.387298s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
                  ┌─┘
                  ├─   0.387314s   0ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/node-two
                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
                    └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
                      ├─   0.387344s   0ms DEBUG Building root query tree node: Product/node
                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                        ├─   0.387360s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                        ┌─┘
                        ├─   0.387384s   0ms DEBUG No subsequent steps (leaf or end of path)
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", current_cost=3003}
                    ├─   0.387435s   0ms DEBUG checking edge Product/node-two -(id)- ID/node-two
                    └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", edge="id"}
                      ├─   0.387456s   0ms INFO return=Ok(Some([]))
                    ┌─┘
                    ├─   0.387498s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two with edge Product/node-two -(id)- ID/node-two
                    ├─   0.387510s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }])
                  ┌─┘
                  ├─   0.387530s   0ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/node-two
                  ├─   0.387540s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                  ├─   0.387547s   0ms DEBUG Ignoring. We would go back to the same graph
                  ├─   0.387556s   0ms DEBUG Finished finding indirect paths, found total of 1
                  ├─   0.387562s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }])
                ┌─┘
                ├─   0.387586s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }], [])))
              ┌─┘
              ├─   0.387603s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }], [])))
            ┌─┘
            ├─   0.387619s   0ms DEBUG Paths for id
            ├─   0.387628s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
            ├─   0.387636s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two -(id)- ID/node-two is valid
            ├─   0.387643s   0ms DEBUG Found 1 best paths for this leaf requirement
            ├─   0.387654s   0ms DEBUG path Product/node -(id)- ID/node is valid
            ├─   0.387660s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
          ┌─┘
          ├─   0.387674s   0ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/types
          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
            └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
              ├─   0.387701s   0ms DEBUG Building root query tree node: Product/node
              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                ├─   0.387735s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                ┌─┘
                ├─   0.387760s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
            ┌─┘
          ┌─┘
          └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", current_cost=3003}
            ├─   0.387823s   0ms DEBUG checking edge Product/types -(name)- String/types
            └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", edge="name"}
              ├─   0.387851s   0ms INFO return=Ok(Some([]))
            ┌─┘
            ├─   0.387870s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types with edge Product/types -(name)- String/types
            ├─   0.387880s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(25)" }])
          ┌─┘
          ├─   0.387896s   1ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/types
          ├─   0.387905s   1ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
            ├─   0.387924s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/node-two'
            └─┐validate_field_requirement{}
              └─┐validate_field_requirement{}
                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.387963s   0ms DEBUG checking edge Product/node -(id)- ID/node
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.387981s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.387999s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                  ├─   0.388008s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                ┌─┘
                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.388039s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.388128s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/types'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.388194s   0ms DEBUG checking edge Product/node -(id)- ID/node
                          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                            ├─   0.388235s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.388259s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                          ├─   0.388271s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.388308s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                          ├─   0.388316s   0ms DEBUG Ignoring, graph is excluded and already visited (current: types, visited: {"node-two", "types"})
                          ├─   0.388325s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                          ├─   0.388332s   0ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"node-two", "types"})
                          ├─   0.388340s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                          ├─   0.388347s   0ms DEBUG Ignoring. We would go back to the same graph
                          ├─   0.388356s   0ms DEBUG Finished finding indirect paths, found total of 0
                          ├─   0.388363s   0ms INFO return=Ok([])
                        ┌─┘
                        ├─   0.388381s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                      ┌─┘
                      ├─   0.388399s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                    ┌─┘
                    ├─   0.388415s   0ms DEBUG Paths for id
                    ├─   0.388441s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
                    ├─   0.388452s   0ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.388465s   0ms DEBUG path Product/node -(id)- ID/node is valid
                    ├─   0.388472s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
                  ┌─┘
                  ├─   0.388493s   0ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/types
                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
                    └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
                      ├─   0.388523s   0ms DEBUG Building root query tree node: Product/node
                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                        ├─   0.388540s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                        ┌─┘
                        ├─   0.388563s   0ms DEBUG No subsequent steps (leaf or end of path)
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", current_cost=3003}
                    ├─   0.388622s   0ms DEBUG checking edge Product/types -(id)- ID/types
                    └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", edge="id"}
                      ├─   0.388643s   0ms INFO return=Ok(Some([]))
                    ┌─┘
                    ├─   0.388662s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types with edge Product/types -(id)- ID/types
                    ├─   0.388671s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                  ┌─┘
                  ├─   0.388689s   0ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/types
                  ├─   0.388698s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                  ├─   0.388705s   0ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"node-two"})
                  ├─   0.388713s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                  ├─   0.388720s   0ms DEBUG Ignoring. We would go back to the same graph
                  ├─   0.388728s   0ms DEBUG Finished finding indirect paths, found total of 1
                  ├─   0.388735s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                ┌─┘
                ├─   0.388753s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
              ┌─┘
              ├─   0.388770s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
            ┌─┘
            ├─   0.388786s   0ms DEBUG Paths for id
            ├─   0.388795s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
            ├─   0.388804s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types -(id)- ID/types is valid
            ├─   0.388810s   0ms DEBUG Found 1 best paths for this leaf requirement
            ├─   0.388820s   0ms DEBUG path Product/node -(id)- ID/node is valid
            ├─   0.388826s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
          ┌─┘
          ├─   0.388840s   2ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/node-two
          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
            └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
              ├─   0.388865s   0ms DEBUG Building root query tree node: Product/node
              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                ├─   0.388879s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                ┌─┘
                ├─   0.388899s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
            ┌─┘
          ┌─┘
          └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", current_cost=3003}
            ├─   0.388943s   0ms INFO return=Ok([])
          ┌─┘
          ├─   0.388977s   2ms DEBUG No direct paths found
          ├─   0.388989s   2ms DEBUG going deeper
          ├─   0.388999s   2ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
          ├─   0.389005s   2ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.389012s   2ms DEBUG Exploring edge Product/node-two -(🔑🧩{id})- Product/types
          ├─   0.389033s   2ms DEBUG Ignoring. Already visited similar edge
          ├─   0.389044s   2ms DEBUG Exploring edge Product/node-two -(🔑🧩{id})- Product/node-two
          ├─   0.389049s   2ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"node-two"})
          ├─   0.389056s   2ms DEBUG Exploring edge Product/node-two -(🔑🧩{id})- Product/node
          ├─   0.389062s   2ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.389072s   2ms DEBUG Finished finding indirect paths, found total of 1
          ├─   0.389078s   2ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(25)" }])
        ┌─┘
        ├─   0.389100s   2ms DEBUG Indirect paths found: 1
        ├─   0.389110s   2ms DEBUG advanced: root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="__typename", leaf=true}
      ├─   0.389140s   0ms DEBUG Trying to advance to: __typename through 1 possible paths
      └─┐explore_path{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
          ├─   0.389168s   0ms DEBUG checking edge Product/node -(__typename)- String/node
          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="__typename"}
            ├─   0.389185s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.389201s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(__typename)- String/node
          ├─   0.389210s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(19)" }])
        ┌─┘
        ├─   0.389224s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
          ├─   0.389244s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
            ├─   0.389262s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/types'
            └─┐validate_field_requirement{}
              └─┐validate_field_requirement{}
                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.389296s   0ms DEBUG checking edge Product/node -(id)- ID/node
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.389314s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.389331s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                  ├─   0.389340s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                ┌─┘
                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.389371s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                  ├─   0.389378s   0ms DEBUG Ignoring, graph is excluded and already visited (current: types, visited: {"types"})
                  ├─   0.389385s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.389405s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/node-two'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.389441s   0ms DEBUG checking edge Product/node -(id)- ID/node
                          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                            ├─   0.389461s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.389480s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                          ├─   0.389490s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.389522s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                          ├─   0.389530s   0ms DEBUG Ignoring, graph is excluded and already visited (current: types, visited: {"types", "node-two"})
                          ├─   0.389539s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                          ├─   0.389546s   0ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"types", "node-two"})
                          ├─   0.389554s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                          ├─   0.389561s   0ms DEBUG Ignoring. We would go back to the same graph
                          ├─   0.389569s   0ms DEBUG Finished finding indirect paths, found total of 0
                          ├─   0.389577s   0ms INFO return=Ok([])
                        ┌─┘
                        ├─   0.389594s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                      ┌─┘
                      ├─   0.389612s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                    ┌─┘
                    ├─   0.389629s   0ms DEBUG Paths for id
                    ├─   0.389639s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
                    ├─   0.389646s   0ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.389658s   0ms DEBUG path Product/node -(id)- ID/node is valid
                    ├─   0.389665s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
                  ┌─┘
                  ├─   0.389681s   0ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/node-two
                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
                    └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
                      ├─   0.389713s   0ms DEBUG Building root query tree node: Product/node
                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                        ├─   0.389729s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                        ┌─┘
                        ├─   0.389752s   0ms DEBUG No subsequent steps (leaf or end of path)
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", current_cost=3003}
                    ├─   0.389819s   0ms DEBUG checking edge Product/node-two -(id)- ID/node-two
                    └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", edge="id"}
                      ├─   0.389850s   0ms INFO return=Ok(Some([]))
                    ┌─┘
                    ├─   0.389872s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two with edge Product/node-two -(id)- ID/node-two
                    ├─   0.389882s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }])
                  ┌─┘
                  ├─   0.389901s   0ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/node-two
                  ├─   0.389911s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                  ├─   0.389918s   0ms DEBUG Ignoring. We would go back to the same graph
                  ├─   0.389927s   0ms DEBUG Finished finding indirect paths, found total of 1
                  ├─   0.389933s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }])
                ┌─┘
                ├─   0.389952s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }], [])))
              ┌─┘
              ├─   0.389969s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }], [])))
            ┌─┘
            ├─   0.389992s   0ms DEBUG Paths for id
            ├─   0.390001s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
            ├─   0.390009s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two -(id)- ID/node-two is valid
            ├─   0.390016s   0ms DEBUG Found 1 best paths for this leaf requirement
            ├─   0.390027s   0ms DEBUG path Product/node -(id)- ID/node is valid
            ├─   0.390033s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
          ┌─┘
          ├─   0.390047s   0ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/types
          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
            └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
              ├─   0.390072s   0ms DEBUG Building root query tree node: Product/node
              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                ├─   0.390086s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                ┌─┘
                ├─   0.390107s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
            ┌─┘
          ┌─┘
          └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", current_cost=3003}
            ├─   0.390156s   0ms DEBUG checking edge Product/types -(__typename)- String/types
            └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", edge="__typename"}
              ├─   0.390175s   0ms INFO return=Ok(Some([]))
            ┌─┘
            ├─   0.390192s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types with edge Product/types -(__typename)- String/types
            ├─   0.390199s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(23)" }])
          ┌─┘
          ├─   0.390220s   0ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/types
          ├─   0.390228s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
            ├─   0.390246s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/node-two'
            └─┐validate_field_requirement{}
              └─┐validate_field_requirement{}
                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.390279s   0ms DEBUG checking edge Product/node -(id)- ID/node
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.390297s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.390315s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                  ├─   0.390324s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                ┌─┘
                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.390375s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.390421s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/types'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.390468s   0ms DEBUG checking edge Product/node -(id)- ID/node
                          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                            ├─   0.390490s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.390512s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                          ├─   0.390524s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.390560s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                          ├─   0.390568s   0ms DEBUG Ignoring, graph is excluded and already visited (current: types, visited: {"node-two", "types"})
                          ├─   0.390577s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                          ├─   0.390584s   0ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"node-two", "types"})
                          ├─   0.390592s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                          ├─   0.390599s   0ms DEBUG Ignoring. We would go back to the same graph
                          ├─   0.390608s   0ms DEBUG Finished finding indirect paths, found total of 0
                          ├─   0.390615s   0ms INFO return=Ok([])
                        ┌─┘
                        ├─   0.390633s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                      ┌─┘
                      ├─   0.390652s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                    ┌─┘
                    ├─   0.390668s   0ms DEBUG Paths for id
                    ├─   0.390678s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
                    ├─   0.390685s   0ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.390697s   0ms DEBUG path Product/node -(id)- ID/node is valid
                    ├─   0.390704s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
                  ┌─┘
                  ├─   0.390720s   0ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/types
                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
                    └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
                      ├─   0.390748s   0ms DEBUG Building root query tree node: Product/node
                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                        ├─   0.390764s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                        ┌─┘
                        ├─   0.390787s   0ms DEBUG No subsequent steps (leaf or end of path)
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", current_cost=3003}
                    ├─   0.390854s   0ms DEBUG checking edge Product/types -(id)- ID/types
                    └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", edge="id"}
                      ├─   0.390888s   0ms INFO return=Ok(Some([]))
                    ┌─┘
                    ├─   0.390910s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types with edge Product/types -(id)- ID/types
                    ├─   0.390920s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                  ┌─┘
                  ├─   0.390939s   0ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/types
                  ├─   0.390949s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                  ├─   0.390961s   0ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"node-two"})
                  ├─   0.390968s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                  ├─   0.390975s   0ms DEBUG Ignoring. We would go back to the same graph
                  ├─   0.390983s   0ms DEBUG Finished finding indirect paths, found total of 1
                  ├─   0.390990s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                ┌─┘
                ├─   0.391008s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
              ┌─┘
              ├─   0.391025s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
            ┌─┘
            ├─   0.391041s   0ms DEBUG Paths for id
            ├─   0.391066s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
            ├─   0.391079s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types -(id)- ID/types is valid
            ├─   0.391086s   0ms DEBUG Found 1 best paths for this leaf requirement
            ├─   0.391097s   0ms DEBUG path Product/node -(id)- ID/node is valid
            ├─   0.391103s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
          ┌─┘
          ├─   0.391133s   1ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/node-two
          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
            └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
              ├─   0.391167s   0ms DEBUG Building root query tree node: Product/node
              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                ├─   0.391181s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                ┌─┘
                ├─   0.391204s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
            ┌─┘
          ┌─┘
          └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", current_cost=3003}
            ├─   0.391267s   0ms DEBUG checking edge Product/node-two -(__typename)- String/node-two
            └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", edge="__typename"}
              ├─   0.391295s   0ms INFO return=Ok(Some([]))
            ┌─┘
            ├─   0.391315s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two with edge Product/node-two -(__typename)- String/node-two
            ├─   0.391324s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(21)" }])
          ┌─┘
          ├─   0.391341s   2ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/node-two
          ├─   0.391353s   2ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
          ├─   0.391359s   2ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.391367s   2ms DEBUG Finished finding indirect paths, found total of 2
          ├─   0.391372s   2ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(21)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(23)" }])
        ┌─┘
        ├─   0.391389s   2ms DEBUG Indirect paths found: 2
        ├─   0.391398s   2ms DEBUG advanced: root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="price", leaf=true}
      ├─   0.391427s   0ms DEBUG Trying to advance to: price through 1 possible paths
      └─┐explore_path{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
          ├─   0.391454s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.391466s   0ms DEBUG Direct paths found: 0
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
          ├─   0.391485s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
            ├─   0.391503s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/types'
            └─┐validate_field_requirement{}
              └─┐validate_field_requirement{}
                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.391536s   0ms DEBUG checking edge Product/node -(id)- ID/node
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.391554s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.391572s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                  ├─   0.391581s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                ┌─┘
                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.391612s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                  ├─   0.391619s   0ms DEBUG Ignoring, graph is excluded and already visited (current: types, visited: {"types"})
                  ├─   0.391627s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.391663s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/node-two'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.391725s   0ms DEBUG checking edge Product/node -(id)- ID/node
                          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                            ├─   0.391747s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.391770s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                          ├─   0.391781s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.391816s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                          ├─   0.391825s   0ms DEBUG Ignoring, graph is excluded and already visited (current: types, visited: {"node-two", "types"})
                          ├─   0.391833s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                          ├─   0.391840s   0ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"node-two", "types"})
                          ├─   0.391848s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                          ├─   0.391855s   0ms DEBUG Ignoring. We would go back to the same graph
                          ├─   0.391864s   0ms DEBUG Finished finding indirect paths, found total of 0
                          ├─   0.391871s   0ms INFO return=Ok([])
                        ┌─┘
                        ├─   0.391889s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                      ┌─┘
                      ├─   0.391907s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                    ┌─┘
                    ├─   0.391942s   0ms DEBUG Paths for id
                    ├─   0.391957s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
                    ├─   0.391964s   0ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.391977s   0ms DEBUG path Product/node -(id)- ID/node is valid
                    ├─   0.391984s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
                  ┌─┘
                  ├─   0.392002s   0ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/node-two
                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
                    └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
                      ├─   0.392031s   0ms DEBUG Building root query tree node: Product/node
                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                        ├─   0.392050s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                        ┌─┘
                        ├─   0.392074s   0ms DEBUG No subsequent steps (leaf or end of path)
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", current_cost=3003}
                    ├─   0.392140s   0ms DEBUG checking edge Product/node-two -(id)- ID/node-two
                    └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", edge="id"}
                      ├─   0.392170s   0ms INFO return=Ok(Some([]))
                    ┌─┘
                    ├─   0.392192s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two with edge Product/node-two -(id)- ID/node-two
                    ├─   0.392206s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }])
                  ┌─┘
                  ├─   0.392224s   0ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/node-two
                  ├─   0.392234s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                  ├─   0.392241s   0ms DEBUG Ignoring. We would go back to the same graph
                  ├─   0.392250s   0ms DEBUG Finished finding indirect paths, found total of 1
                  ├─   0.392257s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }])
                ┌─┘
                ├─   0.392275s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }], [])))
              ┌─┘
              ├─   0.392292s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(43) --> EdgeIndex(22)" }], [])))
            ┌─┘
            ├─   0.392308s   0ms DEBUG Paths for id
            ├─   0.392318s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
            ├─   0.392326s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two -(id)- ID/node-two is valid
            ├─   0.392333s   0ms DEBUG Found 1 best paths for this leaf requirement
            ├─   0.392344s   0ms DEBUG path Product/node -(id)- ID/node is valid
            ├─   0.392350s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
          ┌─┘
          ├─   0.392364s   0ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/types
          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
            └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
              ├─   0.392389s   0ms DEBUG Building root query tree node: Product/node
              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                ├─   0.392404s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                ┌─┘
                ├─   0.392424s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
            ┌─┘
          ┌─┘
          └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", current_cost=3003}
            ├─   0.392473s   0ms DEBUG checking edge Product/types -(price)- Float/types
            └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", edge="price"}
              ├─   0.392494s   0ms INFO return=Ok(Some([]))
            ┌─┘
            ├─   0.392513s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types with edge Product/types -(price)- Float/types
            ├─   0.392521s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(26)" }])
          ┌─┘
          ├─   0.392536s   1ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/types
          ├─   0.392545s   1ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
            ├─   0.392563s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/node-two'
            └─┐validate_field_requirement{}
              └─┐validate_field_requirement{}
                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.392596s   0ms DEBUG checking edge Product/node -(id)- ID/node
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.392614s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.392631s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                  ├─   0.392640s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                ┌─┘
                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                  ├─   0.392671s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                  └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                    ├─   0.392691s   0ms DEBUG checking requirements {id} for edge 'Product/node -(🔑🧩{id})- Product/types'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.392726s   0ms DEBUG checking edge Product/node -(id)- ID/node
                          └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", edge="id"}
                            ├─   0.392751s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.392771s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node with edge Product/node -(id)- ID/node
                          ├─   0.392781s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node", current_cost=2001}
                          ├─   0.392813s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/types
                          ├─   0.392846s   0ms DEBUG Ignoring, graph is excluded and already visited (current: types, visited: {"node-two", "types"})
                          ├─   0.392859s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                          ├─   0.392867s   0ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"node-two", "types"})
                          ├─   0.392874s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                          ├─   0.392882s   0ms DEBUG Ignoring. We would go back to the same graph
                          ├─   0.392891s   0ms DEBUG Finished finding indirect paths, found total of 0
                          ├─   0.392898s   0ms INFO return=Ok([])
                        ┌─┘
                        ├─   0.392920s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                      ┌─┘
                      ├─   0.392941s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }], [])))
                    ┌─┘
                    ├─   0.392958s   0ms DEBUG Paths for id
                    ├─   0.392968s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
                    ├─   0.392975s   0ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.392987s   0ms DEBUG path Product/node -(id)- ID/node is valid
                    ├─   0.392994s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
                  ┌─┘
                  ├─   0.393011s   0ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/types
                  └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
                    └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
                      ├─   0.393041s   0ms DEBUG Building root query tree node: Product/node
                      └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                        ├─   0.393057s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                        └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                        ┌─┘
                        ├─   0.393080s   0ms DEBUG No subsequent steps (leaf or end of path)
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", current_cost=3003}
                    ├─   0.393147s   0ms DEBUG checking edge Product/types -(id)- ID/types
                    └─┐can_satisfy_edge{path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types", edge="id"}
                      ├─   0.393178s   0ms INFO return=Ok(Some([]))
                    ┌─┘
                    ├─   0.393200s   0ms DEBUG Advancing path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types with edge Product/types -(id)- ID/types
                    ├─   0.393210s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                  ┌─┘
                  ├─   0.393228s   0ms DEBUG Found 1 direct paths to Product/node -(🔑🧩{id})- Product/types
                  ├─   0.393238s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node-two
                  ├─   0.393245s   0ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"node-two"})
                  ├─   0.393258s   0ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
                  ├─   0.393264s   0ms DEBUG Ignoring. We would go back to the same graph
                  ├─   0.393273s   0ms DEBUG Finished finding indirect paths, found total of 1
                  ├─   0.393280s   0ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                ┌─┘
                ├─   0.393313s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
              ┌─┘
              ├─   0.393335s   0ms INFO return=Ok(Some(([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" },  { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
            ┌─┘
            ├─   0.393351s   0ms DEBUG Paths for id
            ├─   0.393362s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(id)- ID/node is valid
            ├─   0.393371s   0ms DEBUG   Path root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/types -(id)- ID/types is valid
            ├─   0.393378s   0ms DEBUG Found 1 best paths for this leaf requirement
            ├─   0.393389s   0ms DEBUG path Product/node -(id)- ID/node is valid
            ├─   0.393395s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(20)" }]))
          ┌─┘
          ├─   0.393409s   1ms DEBUG Advancing path to Product/node -(🔑🧩{id})- Product/node-two
          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(20)" }, root_node="Product/node"}
            └─┐create_root_for_path_sequences{root_node="Product/node", segments_count=1}
              ├─   0.393436s   0ms DEBUG Building root query tree node: Product/node
              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                ├─   0.393450s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                ┌─┘
                ├─   0.393471s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
            ┌─┘
          ┌─┘
          └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node -(🔑🧩{id})- Product/node-two", current_cost=3003}
            ├─   0.393517s   0ms INFO return=Ok([])
          ┌─┘
          ├─   0.393535s   2ms DEBUG No direct paths found
          ├─   0.393543s   2ms DEBUG going deeper
          ├─   0.393551s   2ms DEBUG Exploring edge Product/node -(🔑🧩{id})- Product/node
          ├─   0.393557s   2ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.393563s   2ms DEBUG Exploring edge Product/node-two -(🔑🧩{id})- Product/types
          ├─   0.393570s   2ms DEBUG Ignoring. Already visited similar edge
          ├─   0.393576s   2ms DEBUG Exploring edge Product/node-two -(🔑🧩{id})- Product/node-two
          ├─   0.393582s   2ms DEBUG Ignoring, graph is excluded and already visited (current: node-two, visited: {"node-two"})
          ├─   0.393588s   2ms DEBUG Exploring edge Product/node-two -(🔑🧩{id})- Product/node
          ├─   0.393594s   2ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.393602s   2ms DEBUG Finished finding indirect paths, found total of 1
          ├─   0.393608s   2ms INFO return=Ok([ { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(26)" }])
        ┌─┘
        ├─   0.393624s   2ms DEBUG Indirect paths found: 1
        ├─   0.393633s   2ms DEBUG advanced: root(Query) -(node)- Query/node -(productNode)- Node/node -(🔮)- Product/node
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(20)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.393684s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.393696s   0ms DEBUG Processing edge: root(Query) -(node)- Query/node
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.393707s   0ms DEBUG Processing edge: Query/node -(productNode)- Node/node
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.393718s   0ms DEBUG Processing edge: Node/node -(🔮)- Product/node
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.393730s   0ms DEBUG Processing edge: Product/node -(id)- ID/node
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.393749s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.393762s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.393772s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.393782s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(25)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.393815s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.393826s   0ms DEBUG Processing edge: root(Query) -(node)- Query/node
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.393837s   0ms DEBUG Processing edge: Query/node -(productNode)- Node/node
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.393865s   0ms DEBUG Processing edge: Node/node -(🔮)- Product/node
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.393884s   0ms DEBUG Processing edge: Product/node -(🔑🧩{id})- Product/types
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.393912s   0ms DEBUG Processing edge: Product/types -(name)- String/types
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.393935s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.393947s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.393958s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.393968s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.393978s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(19)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.394015s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.394026s   0ms DEBUG Processing edge: root(Query) -(node)- Query/node
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.394037s   0ms DEBUG Processing edge: Query/node -(productNode)- Node/node
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.394048s   0ms DEBUG Processing edge: Node/node -(🔮)- Product/node
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.394060s   0ms DEBUG Processing edge: Product/node -(__typename)- String/node
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.394078s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.394089s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.394099s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.394109s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 3004, egdes: "EdgeIndex(0) --> EdgeIndex(2) --> EdgeIndex(30) --> EdgeIndex(44) --> EdgeIndex(26)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.394141s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.394152s   0ms DEBUG Processing edge: root(Query) -(node)- Query/node
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.394163s   0ms DEBUG Processing edge: Query/node -(productNode)- Node/node
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.394174s   0ms DEBUG Processing edge: Node/node -(🔮)- Product/node
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.394187s   0ms DEBUG Processing edge: Product/node -(🔑🧩{id})- Product/types
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.394199s   0ms DEBUG Processing edge: Product/types -(price)- Float/types
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.394218s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.394231s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.394242s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.394252s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.394262s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=4}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="node", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="productNode", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.394410s   0ms DEBUG adding output field 'productNode' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_abstract_edge{parent_fetch_step_index=1, type_name="Product", response_path="productNode", fetch_path="productNode"}
              ├─   0.394442s   0ms DEBUG adding output field '__typename' and starting an inline fragment for type '1' to fetch step [Product]
              └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
                └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="id", leaf=true, list=false, response_path="productNode", fetch_path="productNode"}
                  ├─   0.394471s   0ms DEBUG adding output field 'id' to fetch step [1]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
                  ┌─┘
                ┌─┘
                └─┐process_entity_move_edge{edge="Product/node -(🔑🧩{id})- Product/types", parent_fetch_step_index=1}
                  ├─   0.394521s   0ms DEBUG created a new fetch step [2] subgraph(types) type(Product) requirement() key({id}) in children of 1
                  ├─   0.394530s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
                  ├─   0.394538s   0ms DEBUG adding __typename field to output for type 'Product'
                  ├─   0.394546s   0ms DEBUG connecting fetch step to parent [1] -> [2]
                  └─┐connect{parent=1, child=2}
                  ┌─┘
                  └─┐process_requirements_for_fetch_steps{count=1}
                    └─┐process_noop_edge{}
                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                        └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="productNode", fetch_path="productNode"}
                          ├─   0.394606s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                          └─┐connect{parent=1, child=2}
                          ┌─┘
                          ├─   0.394630s   0ms DEBUG adding output field 'id' to fetch step [1]
                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                    └─┐connect{parent=1, child=2}
                    ┌─┘
                  ┌─┘
                  └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Product", field="name", leaf=true, list=false, response_path="productNode", fetch_path=""}
                      ├─   0.394725s   0ms DEBUG adding output field 'name' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Product", field="price", leaf=true, list=false, response_path="productNode", fetch_path=""}
                      ├─   0.394767s   0ms DEBUG adding output field 'price' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="__typename", leaf=true, list=false, response_path="productNode", fetch_path="productNode"}
                  ├─   0.394845s   0ms DEBUG adding output field '__typename' to fetch step [1]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.394926s   0ms DEBUG Done
├─   0.394934s   0ms DEBUG found roots
├─   0.394939s   0ms DEBUG print graph
├─   0.394944s   0ms DEBUG Nodes:
│ [1] Query/node {} → {productNode{__typename ...on Product{__typename id}}} at $.
│ [2] Product/types {__typename id} → {name price} at $.productNode
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="node"}
      └─┐execute{subgraph_name="node"}
        ├─   0.395366s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.395719s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.396083s   0ms DEBUG connected to 127.0.0.1:4200
        ├─   0.400401s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"productNode": Object {"__typename": String("Product"), "id": String("p-1")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p-1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p-1")}}
        └─┐entity_satisfies_type_condition{possible_types={"Node": ["Category", "Product"]}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p-1")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p-1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="types"}
        └─┐execute{subgraph_name="types"}
          ├─   0.400819s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.404059s   3ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
┐entity_satisfies_type_condition{possible_types={"Node": ["Category", "Product"]}, type_name="Product", type_condition="Product"}
┘
   0.404353s DEBUG execution result: ExecutionResult { data: Some(Object {"productNode": Object {"id": String("p-1"), "name": String("Product 1"), "__typename": String("Product"), "price": Number(10)}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("node"), "operationKind": String("query"), "operation": String("{productNode{__typename ...on Product{__typename id}}}")}, Object {"kind": String("Flatten"), "path": Array [String("productNode")], "node": Object {"kind": String("Fetch"), "serviceName": String("types"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{name price}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
