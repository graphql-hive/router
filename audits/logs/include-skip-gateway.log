generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.12s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Product"}
    └─┐build_fields{fields_count=7}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=1}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
└─┐decompose_from_supergraph{graph_id="C"}
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006456s   0ms DEBUG Building graph for supergraph with 14 definitions
  └─┐build_root_nodes{}
    ├─   0.006492s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006542s   0ms INFO [x] Creating owned field move edge 'Product.__typename/A' (type: String)
    ├─   0.006555s   0ms INFO [ ] Field 'Product.skip/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006561s   0ms INFO [ ] Field 'Product.neverCalledSkip/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006567s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.006576s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.006582s   0ms INFO [ ] Field 'Product.include/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006587s   0ms INFO [ ] Field 'Product.isExpensive/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006592s   0ms INFO [ ] Field 'Product.neverCalledInclude/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006597s   0ms INFO [x] Creating field move edge 'Product.price/A' (type: Float)
    ├─   0.006604s   0ms INFO [x] Creating field move edge 'Product.price/A' (type: Float)
    ├─   0.006610s   0ms INFO [x] Creating owned field move edge 'Product.__typename/B' (type: String)
    ├─   0.006620s   0ms INFO [ ] Field 'Product.skip/B' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006625s   0ms INFO [ ] Field 'Product.neverCalledSkip/B' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006630s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.006636s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.006656s   0ms INFO [ ] Field 'Product.include/B' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006736s   0ms INFO [x] Creating field move edge 'Product.isExpensive/B' (type: Boolean)
    ├─   0.006756s   0ms INFO [x] Creating field move edge 'Product.isExpensive/B' (type: Boolean)
    ├─   0.006765s   0ms INFO [ ] Field 'Product.neverCalledInclude/B' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006772s   0ms INFO [ ] Field 'Product.price/B' is external, skipping edge creation
    ├─   0.006778s   0ms INFO [x] Creating owned field move edge 'Product.__typename/C' (type: String)
    ├─   0.006816s   0ms INFO [x] Creating field move edge 'Product.skip/C' (type: Boolean)
    ├─   0.006827s   0ms INFO [x] Creating field move edge 'Product.skip/C' (type: Boolean)
    ├─   0.006861s   0ms INFO [x] Creating field move edge 'Product.neverCalledSkip/C' (type: Boolean)
    ├─   0.006871s   0ms INFO [x] Creating field move edge 'Product.neverCalledSkip/C' (type: Boolean)
    ├─   0.006879s   0ms INFO [x] Creating field move edge 'Product.id/C' (type: ID)
    ├─   0.006885s   0ms INFO [x] Creating field move edge 'Product.id/C' (type: ID)
    ├─   0.006917s   0ms INFO [x] Creating field move edge 'Product.include/C' (type: Boolean)
    ├─   0.006977s   0ms INFO [x] Creating field move edge 'Product.include/C' (type: Boolean)
    ├─   0.007012s   0ms INFO [ ] Field 'Product.isExpensive/C' is external, skipping edge creation
    ├─   0.007074s   0ms INFO [x] Creating field move edge 'Product.neverCalledInclude/C' (type: Boolean)
    ├─   0.007092s   0ms INFO [x] Creating field move edge 'Product.neverCalledInclude/C' (type: Boolean)
    ├─   0.007101s   0ms INFO [ ] Field 'Product.price/C' does is not available in the subgraph, skipping edge creation (type: Float)
    ├─   0.007109s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.007116s   0ms INFO [x] Creating field move edge 'Query.product/A' (type: Product)
    ├─   0.007122s   0ms INFO [x] Creating field move edge 'Query.product/A' (type: Product)
    ├─   0.007129s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.007140s   0ms INFO [ ] Field 'Query.product/B' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.007145s   0ms INFO [x] Creating owned field move edge 'Query.__typename/C' (type: String)
    ├─   0.007152s   0ms INFO [ ] Field 'Query.product/C' does is not available in the subgraph, skipping edge creation (type: Product)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.007294s   0ms INFO Creating self-referencing entity move edge in 'Product/A' via key 'id'
    ├─   0.007354s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/B' via key 'id'
    ├─   0.007390s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/C' via key 'id'
    ├─   0.007460s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/A' via key 'id'
    ├─   0.007555s   0ms INFO Creating self-referencing entity move edge in 'Product/B' via key 'id'
    ├─   0.007595s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/C' via key 'id'
    ├─   0.007667s   0ms INFO Creating entity move edge from 'Product/C' to 'Product/A' via key 'id'
    ├─   0.007710s   0ms INFO Creating entity move edge from 'Product/C' to 'Product/B' via key 'id'
    ├─   0.007744s   0ms INFO Creating self-referencing entity move edge in 'Product/C' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.065903s INFO Starting server on http://localhost:4000
   0.066909s INFO starting 16 workers
   0.066959s INFO Actix runtime found; starting in Actix runtime
   0.066968s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.236647s DEBUG original document: query ping {
  __typename
}

   0.236763s DEBUG normalized document: query ping {__typename}

   0.236793s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.237230s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.311829s DEBUG original document: query($bool: Boolean = false) {
  product {
    price
    neverCalledInclude @include(if: $bool)
  }
}

   0.311949s DEBUG normalized document: query($bool:Boolean){product{price neverCalledInclude}}

   0.311966s DEBUG executable operation: query($bool:Boolean){product{price neverCalledInclude}}
┐walk_operation{}
├─   0.312408s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="product", leaf=false}
  ├─   0.312458s   0ms DEBUG Trying to advance to: product{price neverCalledInclude} through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "neverCalledInclude", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.312526s   0ms DEBUG checking edge Query/a -(product)- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="product"}
        ├─   0.312555s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.312582s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(product)- Product/a
      ├─   0.312595s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.312612s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "neverCalledInclude", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.312647s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.312654s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.312666s   0ms DEBUG Indirect paths found: 0
    ├─   0.312673s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  ├─   0.312687s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="neverCalledInclude", leaf=true}
  ├─   0.312707s   0ms DEBUG Trying to advance to: neverCalledInclude through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "neverCalledInclude", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: Some("bool") }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.312732s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.312745s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "neverCalledInclude", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: Some("bool") }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.312764s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.312783s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.312818s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.312837s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.312853s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.312861s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.312912s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              ├─   0.312925s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.312933s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.312957s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.313008s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.313036s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.313057s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.313067s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.313100s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.313108s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.313116s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.313122s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.313130s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.313138s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.313147s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.313153s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.313188s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.313227s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.313246s   0ms DEBUG Paths for id
                ├─   0.313258s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.313266s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.313282s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.313289s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.313305s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.313337s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.313355s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.313378s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.313428s   0ms DEBUG checking edge Product/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
                  ├─   0.313448s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.313465s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                ├─   0.313477s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
              ┌─┘
              ├─   0.313495s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
              ├─   0.313505s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.313512s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.313520s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.313527s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
            ┌─┘
            ├─   0.313543s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
          ┌─┘
          ├─   0.313559s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
        ┌─┘
        ├─   0.313573s   0ms DEBUG Paths for id
        ├─   0.313581s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.313589s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b -(id)- ID/b is valid
        ├─   0.313596s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.313605s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.313611s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.313624s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.313647s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.313661s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.313680s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "neverCalledInclude", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: Some("bool") }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.313722s   0ms DEBUG checking edge Product/c -(neverCalledInclude🧩{isExpensive})- Boolean/c
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="neverCalledInclude"}
          ├─   0.313766s   0ms DEBUG checking requirements {isExpensive} for edge 'Product/c -(neverCalledInclude🧩{isExpensive})- Boolean/c'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.313801s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.313833s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                ├─   0.313841s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
                ├─   0.313849s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.313868s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.313904s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.313925s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.313944s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.313969s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.314017s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.314025s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                        ├─   0.314033s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        ├─   0.314040s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                        ├─   0.314048s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.314079s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.314148s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.314187s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.314211s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.314224s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.314262s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.314271s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "a", "c"})
                                ├─   0.314280s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.314287s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a", "c"})
                                ├─   0.314296s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.314304s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a", "c"})
                                ├─   0.314314s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.314321s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.314340s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                            ┌─┘
                            ├─   0.314360s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.314378s   0ms DEBUG Paths for id
                          ├─   0.314388s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.314396s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.314409s   0ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.314416s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                        ┌─┘
                        ├─   0.314434s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.314463s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.314481s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.314508s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.314562s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.314585s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.314605s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.314615s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }])
                        ┌─┘
                        ├─   0.314634s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                        ├─   0.314646s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.314653s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }])
                      ┌─┘
                      ├─   0.314673s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }], [])))
                    ┌─┘
                    ├─   0.314691s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.314708s   0ms DEBUG Paths for id
                  ├─   0.314717s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.314726s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.314734s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.314744s   0ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.314751s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
                ├─   0.314766s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.314792s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.314808s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.314831s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                  ├─   0.314886s   0ms DEBUG checking edge Product/b -(isExpensive🧩{price})- Boolean/b
                  └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="isExpensive"}
                    ├─   0.314909s   0ms DEBUG checking requirements {price} for edge 'Product/b -(isExpensive🧩{price})- Boolean/b'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.314949s   0ms INFO return=Ok([])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.314988s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                          ├─   0.314997s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                          ├─   0.315006s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                          ├─   0.315013s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                          ├─   0.315021s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.315046s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.315093s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.315146s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.315181s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.315194s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.315239s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                                  ├─   0.315249s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "a", "c"})
                                  ├─   0.315258s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                                  ├─   0.315266s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a", "c"})
                                  ├─   0.315275s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                                  ├─   0.315284s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a", "c"})
                                  ├─   0.315294s   0ms DEBUG Finished finding indirect paths, found total of 0
                                  ├─   0.315302s   0ms INFO return=Ok([])
                                ┌─┘
                                ├─   0.315323s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                              ┌─┘
                              ├─   0.315373s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                            ┌─┘
                            ├─   0.315400s   0ms DEBUG Paths for id
                            ├─   0.315415s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                            ├─   0.315423s   0ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.315437s   0ms DEBUG path Product/b -(id)- ID/b is valid
                            ├─   0.315445s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(5)" }]))
                          ┌─┘
                          ├─   0.315464s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(5)" }, root_node="Product/b"}
                            └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                              ├─   0.315501s   0ms DEBUG Building root query tree node: Product/b
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.315521s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.315550s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a", current_cost=4007}
                            ├─   0.315619s   0ms DEBUG checking edge Product/a -(price)- Float/a
                            └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a", edge="price"}
                              ├─   0.315646s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.315668s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(price)- Float/a
                            ├─   0.315679s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }])
                          ┌─┘
                          ├─   0.315700s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                          ├─   0.315713s   0ms DEBUG Finished finding indirect paths, found total of 1
                          ├─   0.315721s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }])
                        ┌─┘
                        ├─   0.315761s   0ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }], [])))
                      ┌─┘
                      ├─   0.315784s   0ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }], [])))
                    ┌─┘
                    ├─   0.315801s   0ms DEBUG Paths for price
                    ├─   0.315815s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.315822s   0ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.315836s   0ms DEBUG path Product/b -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.315843s   0ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(20) --> EdgeIndex(3)" }]))
                  ┌─┘
                  ├─   0.315864s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(isExpensive🧩{price})- Boolean/b
                  └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(20) --> EdgeIndex(3)" }, root_node="Product/b"}
                    └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=2}
                      ├─   0.315894s   0ms DEBUG Building root query tree node: Product/b
                      └─┐from_path_segment_sequences{current_index=0, total_segments=2}
                        ├─   0.315911s   0ms DEBUG Processing edge: Product/b -(🔑🧩{id})- Product/a
                        └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                          ├─   0.315931s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
                          └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                          ┌─┘
                          ├─   0.315957s   0ms DEBUG No subsequent steps (leaf or end of path)
                        ┌─┘
                        ├─   0.315975s   0ms DEBUG Adding subsequent step as child
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.316009s   1ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }])
                ┌─┘
                ├─   0.316028s   2ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                ├─   0.316038s   2ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.316061s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.316123s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.316156s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.316178s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.316190s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.316226s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.316235s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                        ├─   0.316243s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.316265s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.316311s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.316336s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.316359s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.316370s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.316408s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.316417s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "b", "c"})
                                ├─   0.316426s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.316434s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "c"})
                                ├─   0.316443s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.316451s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "c"})
                                ├─   0.316461s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.316472s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.316493s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                            ┌─┘
                            ├─   0.316519s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.316537s   0ms DEBUG Paths for id
                          ├─   0.316548s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.316556s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.316569s   0ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.316577s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                        ┌─┘
                        ├─   0.316595s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.316626s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.316644s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.316672s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.316728s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.316752s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.316773s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.316783s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }])
                        ┌─┘
                        ├─   0.316803s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                        ├─   0.316813s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        ├─   0.316821s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                        ├─   0.316832s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.316839s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }])
                      ┌─┘
                      ├─   0.316858s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                    ┌─┘
                    ├─   0.316877s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                  ┌─┘
                  ├─   0.316895s   0ms DEBUG Paths for id
                  ├─   0.316905s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.316914s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.316922s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.316933s   0ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.316941s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
                ├─   0.316957s   3ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.316984s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.317000s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.317024s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                  ├─   0.317073s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.317090s   3ms DEBUG No direct paths found
                ├─   0.317102s   3ms DEBUG going deeper
                ├─   0.317112s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                ├─   0.317119s   3ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                ├─   0.317129s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                ├─   0.317138s   3ms DEBUG Ignoring. Already visited similar edge
                ├─   0.317145s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                ├─   0.317151s   3ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                ├─   0.317162s   3ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.317184s   3ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }])
              ┌─┘
              ├─   0.317214s   3ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }], [])))
            ┌─┘
            ├─   0.317230s   3ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.317244s   3ms DEBUG Paths for isExpensive
          ├─   0.317257s   3ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(isExpensive🧩{price})- Boolean/b is valid
          ├─   0.317264s   3ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.317277s   3ms DEBUG path Product/c -(🔑🧩{id})- Product/b -(isExpensive🧩{price})- Boolean/b is valid
          ├─   0.317283s   3ms INFO return=Ok(Some([ { cost: 1005, egdes: "EdgeIndex(24) --> EdgeIndex(6)" }]))
        ┌─┘
        ├─   0.317301s   3ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(neverCalledInclude🧩{isExpensive})- Boolean/c
        └─┐from_path{path= { cost: 1005, egdes: "EdgeIndex(24) --> EdgeIndex(6)" }, root_node="Product/c"}
          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=2}
            ├─   0.317346s   0ms DEBUG Building root query tree node: Product/c
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.317363s   0ms DEBUG Processing edge: Product/c -(🔑🧩{id})- Product/b
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.317378s   0ms DEBUG Processing edge: Product/b -(isExpensive🧩{price})- Boolean/b
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.317402s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.317415s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.317448s   3ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(12)" }])
      ┌─┘
      ├─   0.317466s   4ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/c
      ├─   0.317475s   4ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.317495s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.317565s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.317586s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.317605s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.317615s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.317646s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.317665s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.317701s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.317719s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.317738s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.317747s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.317806s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.317816s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.317825s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.317832s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.317839s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.317847s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.317856s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.317863s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.317880s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.317898s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.317915s   0ms DEBUG Paths for id
                ├─   0.317924s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.317931s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.317943s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.317949s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.317965s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.317992s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.318008s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.318032s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.318096s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.318126s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.318146s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.318157s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.318176s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/c
              ├─   0.318186s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.318193s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.318200s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.318207s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.318216s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.318223s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.318241s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.318259s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.318274s   0ms DEBUG Paths for id
        ├─   0.318283s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.318292s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.318299s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.318309s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.318314s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.318330s   5ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.318356s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.318370s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.318392s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "neverCalledInclude", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: Some("bool") }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.318435s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.318447s   5ms DEBUG No direct paths found
      ├─   0.318455s   5ms DEBUG going deeper
      ├─   0.318463s   5ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.318468s   5ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.318475s   5ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      ├─   0.318482s   5ms DEBUG Ignoring. Already visited similar edge
      ├─   0.318487s   5ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.318493s   5ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.318499s   5ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.318504s   5ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.318512s   5ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.318518s   5ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.318555s   5ms DEBUG Indirect paths found: 1
    ├─   0.318569s   5ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="price", leaf=true}
  ├─   0.318603s   0ms DEBUG Trying to advance to: price through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.318630s   0ms DEBUG checking edge Product/a -(price)- Float/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="price"}
        ├─   0.318682s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.318707s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(price)- Float/a
      ├─   0.318717s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.318735s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.318758s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.318776s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.318807s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.318824s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.318843s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.318851s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.318880s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              ├─   0.318887s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.318894s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.318912s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.318947s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.318980s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.319008s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.319019s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.319055s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.319064s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.319072s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.319079s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.319087s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.319094s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.319102s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.319109s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.319126s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.319144s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.319160s   0ms DEBUG Paths for id
                ├─   0.319169s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.319176s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.319188s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.319209s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.319235s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.319265s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.319281s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.319305s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.319354s   0ms DEBUG checking edge Product/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
                  ├─   0.319377s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.319395s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                ├─   0.319405s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
              ┌─┘
              ├─   0.319428s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
              ├─   0.319438s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.319445s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.319453s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.319460s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
            ┌─┘
            ├─   0.319477s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
          ┌─┘
          ├─   0.319493s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
        ┌─┘
        ├─   0.319508s   0ms DEBUG Paths for id
        ├─   0.319517s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.319525s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b -(id)- ID/b is valid
        ├─   0.319532s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.319542s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.319547s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.319561s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.319585s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.319599s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.319619s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.319662s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.319675s   0ms DEBUG No direct paths found
      ├─   0.319695s   0ms DEBUG going deeper
      ├─   0.319708s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.319731s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.319764s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.319783s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.319802s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.319812s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.319841s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.319860s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.319894s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.319913s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.319931s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.319940s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.319973s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.319981s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.319990s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.319996s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.320004s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.320011s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.320020s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.320027s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.320044s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.320061s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.320077s   0ms DEBUG Paths for id
                ├─   0.320085s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.320092s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.320104s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.320111s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.320126s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.320153s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.320169s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.320192s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.320239s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.320259s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.320276s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.320286s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.320305s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/c
              ├─   0.320315s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.320322s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.320329s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.320335s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.320343s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.320350s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.320367s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.320383s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.320397s   0ms DEBUG Paths for id
        ├─   0.320405s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.320413s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.320420s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.320429s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.320435s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.320448s   1ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.320496s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.320512s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.320534s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.320580s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.320593s   1ms DEBUG No direct paths found
      ├─   0.320601s   1ms DEBUG going deeper
      ├─   0.320609s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.320615s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.320621s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      ├─   0.320628s   1ms DEBUG Ignoring. Already visited similar edge
      ├─   0.320634s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.320640s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.320646s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.320652s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.320659s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
      ├─   0.320664s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.320670s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
      ├─   0.320676s   1ms DEBUG Ignoring. Already visited similar edge
      ├─   0.320682s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
      ├─   0.320687s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.320694s   1ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.320700s   1ms INFO return=Ok([])
    ┌─┘
    ├─   0.320712s   2ms DEBUG Indirect paths found: 0
    ├─   0.320721s   2ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(12)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.320790s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.320805s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.320817s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.320829s   0ms DEBUG Processing edge: Product/a -(🔑🧩{id})- Product/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.320843s   0ms DEBUG Processing edge: Product/c -(neverCalledInclude🧩{isExpensive})- Boolean/c
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.320865s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.320877s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.320888s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.320899s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.320953s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.320968s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.320980s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.320991s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.321012s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.321023s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.321033s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="product", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.321202s   0ms DEBUG adding output field 'product' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/a -(🔑🧩{id})- Product/c", parent_fetch_step_index=1}
              ├─   0.321249s   0ms DEBUG created a new fetch step [2] subgraph(c) type(Product) requirement() key({id}) in children of 1
              ├─   0.321258s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.321267s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.321275s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path="product"}
                      ├─   0.321341s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.321367s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/c"}
                    └─┐can_satisfy_edge{path="Product/c", edge="id"}
                      ├─   0.321496s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/c'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/c", current_cost=0}
                            ├─   0.321552s   0ms DEBUG checking edge Product/c -(id)- ID/c
                            └─┐can_satisfy_edge{path="Product/c", edge="id"}
                              ├─   0.321579s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.321602s   0ms DEBUG Advancing path Product/c with edge Product/c -(id)- ID/c
                            ├─   0.321613s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(10)" }])
                          ┌─┘
                          ├─   0.321639s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                        ┌─┘
                        ├─   0.321657s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                      ┌─┘
                      ├─   0.321673s   0ms DEBUG Paths for id
                      ├─   0.321683s   0ms DEBUG   Path Product/c -(id)- ID/c is valid
                      ├─   0.321690s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.321702s   0ms DEBUG path Product/c -(id)- ID/c is valid
                      ├─   0.321710s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.321736s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.321745s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.321756s   0ms DEBUG created a new fetch step [3] subgraph(c) type(Product) requirement({isExpensive}) in children of 1
                  ├─   0.321766s   0ms DEBUG Adding {isExpensive} to fetch([3]).input
                  ├─   0.321775s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.321782s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.321791s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.321825s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/c -(🔑🧩{id})- Product/b", parent_fetch_step_index=4}
                        ├─   0.321896s   0ms DEBUG created a new fetch step [5] subgraph(b) type(Product) requirement() key({id}) in children of 4
                        ├─   0.321907s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                        ├─   0.321916s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.321924s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                ├─   0.322008s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.322037s   0ms DEBUG adding output field 'id' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_requires_field_edge{parent_fetch_step_index=5}
                            └─┐find_satisfiable_key{node="Product/b"}
                              └─┐can_satisfy_edge{path="Product/b", edge="id"}
                                ├─   0.322174s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                                └─┐validate_field_requirement{}
                                  └─┐validate_field_requirement{}
                                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/b", current_cost=0}
                                      ├─   0.322221s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                      └─┐can_satisfy_edge{path="Product/b", edge="id"}
                                        ├─   0.322246s   0ms INFO return=Ok(Some([]))
                                      ┌─┘
                                      ├─   0.322268s   0ms DEBUG Advancing path Product/b with edge Product/b -(id)- ID/b
                                      ├─   0.322281s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(5)" }])
                                    ┌─┘
                                    ├─   0.322305s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(5)" }], [])))
                                  ┌─┘
                                  ├─   0.322326s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(5)" }], [])))
                                ┌─┘
                                ├─   0.322345s   0ms DEBUG Paths for id
                                ├─   0.322355s   0ms DEBUG   Path Product/b -(id)- ID/b is valid
                                ├─   0.322364s   0ms DEBUG Found 1 best paths for this leaf requirement
                                ├─   0.322377s   0ms DEBUG path Product/b -(id)- ID/b is valid
                                ├─   0.322385s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(5)" }]))
                              ┌─┘
                            ┌─┘
                            ├─   0.322414s   0ms DEBUG Key to re-enter: {id}
                            ├─   0.322423s   0ms DEBUG Creating a fetch step for children of @requires
                            ├─   0.322433s   0ms DEBUG created a new fetch step [6] subgraph(b) type(Product) requirement({price}) in children of 4
                            ├─   0.322443s   0ms DEBUG Adding {price} to fetch([6]).input
                            ├─   0.322451s   0ms DEBUG Adding {id} to fetch([6]).input
                            ├─   0.322460s   0ms DEBUG Creating a fetch step for requirement of @requires
                            ├─   0.322468s   0ms DEBUG Adding {id} to fetch([7]).input
                            └─┐connect{parent=4, child=7}
                            ┌─┘
                            ├─   0.322529s   0ms DEBUG Processing requirements
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7}
                                └─┐process_entity_move_edge{edge="Product/b -(🔑🧩{id})- Product/a", parent_fetch_step_index=7}
                                  ├─   0.322582s   0ms DEBUG created a new fetch step [8] subgraph(a) type(Product) requirement() key({id}) in children of 7
                                  ├─   0.322591s   0ms DEBUG adding input requirement '{id}' to fetch step [8]
                                  ├─   0.322600s   0ms DEBUG adding __typename field to output for type 'Product'
                                  ├─   0.322610s   0ms DEBUG connecting fetch step to parent [7] -> [8]
                                  └─┐connect{parent=7, child=8}
                                  ┌─┘
                                  └─┐process_requirements_for_fetch_steps{count=1}
                                    └─┐process_noop_edge{}
                                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                        └─┐process_plain_field_edge{parent_fetch_step_index=7, requiring_fetch_step_index=8, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                          ├─   0.322697s   0ms DEBUG connecting parent fetch step [7] to requiring fetch step [8]
                                          └─┐connect{parent=7, child=8}
                                          ┌─┘
                                          ├─   0.322729s   0ms DEBUG adding output field 'id' to fetch step [7]
                                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                          ┌─┘
                                        ┌─┘
                                      ┌─┘
                                    ┌─┘
                                    └─┐connect{parent=7, child=8}
                                    ┌─┘
                                  ┌─┘
                                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=8}
                                    └─┐process_plain_field_edge{parent_fetch_step_index=8, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path=""}
                                      ├─   0.322846s   0ms DEBUG adding output field 'price' to fetch step [8]
                                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=8}
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            ├─   0.322945s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                            └─┐connect{parent=8, child=6}
                            ┌─┘
                            ├─   0.322978s   0ms DEBUG Processing children
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.323046s   1ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=6, child=3}
                  ┌─┘
                  ├─   0.323068s   1ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path="product"}
              ├─   0.323121s   0ms DEBUG adding output field 'price' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.323187s   2ms DEBUG Done
├─   0.323196s   2ms DEBUG found roots
├─   0.323201s   2ms DEBUG print graph
├─   0.323206s   2ms DEBUG Nodes:
│ [1] Query/a {} → {product{__typename id price}} at $.
│ [2] Product/c {__typename id} → {} at $.product
│ [3] Product/c {__typename isExpensive id} → {neverCalledInclude} at $.product
│ [4] Product/c {__typename id} → {__typename id} at $.product
│ [5] Product/b {__typename id} → {} at $.product
│ [6] Product/b {__typename price id} → {isExpensive} at $.product
│ [7] Product/b {__typename id} → {__typename id} at $.product
│ [8] Product/a {__typename id} → {price} at $.product
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│     [7]
│       [8]
│         [6]
│           [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.323255s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.323271s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=7}
      ┌─┘
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
    ├─   0.323317s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [7]
    └─┐perform_passthrough_child_merge{}
      ├─   0.323350s   0ms DEBUG merging fetch steps [1] and [7]
      └─┐connect{parent=1, child=8}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.323414s   0ms DEBUG optimization found: merge parent [1] with child [8]
    └─┐perform_fetch_step_merge{}
      ├─   0.323429s   0ms DEBUG merging fetch steps [1] and [8]
      └─┐connect{parent=1, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.323498s   0ms DEBUG Found optimization: 6 <- 5
    └─┐perform_fetch_step_merge{}
      ├─   0.323516s   0ms DEBUG merging fetch steps [6] and [5]
      └─┐connect{parent=1, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.323584s   0ms DEBUG optimization found: remove 'Product/c {__typename id} → {} at $.product'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.324073s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.324643s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.325020s   1ms DEBUG connected to 127.0.0.1:4200
        ├─   0.329746s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(699.99)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.330364s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.335237s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Bool(true)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.335791s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.341004s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.341427s DEBUG execution result: ExecutionResult { data: Some(Object {"product": Object {"price": Number(699.99)}}), errors: Some([GraphQLError { message: "Unexpected error.", locations: Some([GraphQLErrorLocation { line: 1, column: 93 }]), path: Some([String("_entities"), Number(0), String("neverCalledInclude")]), extensions: Some({"code": String("INTERNAL_SERVER_ERROR")}) }]), extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{product{__typename id price}}")}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{isExpensive}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{neverCalledInclude}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("isExpensive")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.348632s DEBUG original document: query($bool: Boolean = true) {
  product {
    price
    neverCalledSkip @skip(if: $bool)
  }
}

   0.348766s DEBUG normalized document: query($bool:Boolean){product{price neverCalledSkip}}

   0.348792s DEBUG executable operation: query($bool:Boolean){product{price neverCalledSkip}}
┐walk_operation{}
├─   0.349268s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="product", leaf=false}
  ├─   0.349319s   0ms DEBUG Trying to advance to: product{price neverCalledSkip} through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "neverCalledSkip", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.349375s   0ms DEBUG checking edge Query/a -(product)- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="product"}
        ├─   0.349395s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.349439s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(product)- Product/a
      ├─   0.349455s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.349473s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "neverCalledSkip", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.349509s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.349516s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.349528s   0ms DEBUG Indirect paths found: 0
    ├─   0.349535s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  ├─   0.349550s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="neverCalledSkip", leaf=true}
  ├─   0.349592s   0ms DEBUG Trying to advance to: neverCalledSkip through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "neverCalledSkip", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: Some("bool"), include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.349629s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.349641s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "neverCalledSkip", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: Some("bool"), include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.349660s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.349696s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.349754s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.349783s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.349804s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.349814s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.349884s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              ├─   0.349895s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.349904s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.349930s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.349972s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.349993s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.350012s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.350023s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.350055s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.350063s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.350071s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.350078s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.350086s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.350093s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.350104s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.350111s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.350130s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.350153s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.350169s   0ms DEBUG Paths for id
                ├─   0.350178s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.350202s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.350223s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.350230s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.350251s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.350286s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.350303s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.350327s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.350378s   0ms DEBUG checking edge Product/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
                  ├─   0.350399s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.350416s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                ├─   0.350427s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
              ┌─┘
              ├─   0.350444s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
              ├─   0.350454s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.350461s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.350469s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.350476s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
            ┌─┘
            ├─   0.350492s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
          ┌─┘
          ├─   0.350509s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
        ┌─┘
        ├─   0.350523s   0ms DEBUG Paths for id
        ├─   0.350532s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.350540s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b -(id)- ID/b is valid
        ├─   0.350546s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.350556s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.350562s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.350577s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.350601s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.350614s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.350639s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "neverCalledSkip", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: Some("bool"), include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.350682s   0ms DEBUG checking edge Product/c -(neverCalledSkip🧩{isExpensive})- Boolean/c
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="neverCalledSkip"}
          ├─   0.350700s   0ms DEBUG checking requirements {isExpensive} for edge 'Product/c -(neverCalledSkip🧩{isExpensive})- Boolean/c'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.350733s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.350763s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                ├─   0.350771s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
                ├─   0.350778s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.350805s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.350843s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.350866s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.350886s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.350897s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.350936s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.350944s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                        ├─   0.350952s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        ├─   0.350959s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                        ├─   0.350967s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.350995s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.351051s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.351079s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.351102s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.351114s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.351153s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.351162s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b", "a"})
                                ├─   0.351171s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.351179s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b", "a"})
                                ├─   0.351188s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.351196s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "b", "a"})
                                ├─   0.351206s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.351214s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.351233s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                            ┌─┘
                            ├─   0.351254s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.351271s   0ms DEBUG Paths for id
                          ├─   0.351282s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.351290s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.351303s   0ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.351327s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                        ┌─┘
                        ├─   0.351356s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.351390s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.351409s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.351437s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.351512s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.351546s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.351569s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.351581s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }])
                        ┌─┘
                        ├─   0.351601s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                        ├─   0.351614s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.351622s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }])
                      ┌─┘
                      ├─   0.351641s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }], [])))
                    ┌─┘
                    ├─   0.351660s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.351678s   0ms DEBUG Paths for id
                  ├─   0.351688s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.351697s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.351705s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.351717s   0ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.351724s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
                ├─   0.351740s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.351768s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.351784s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.351807s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                  ├─   0.351859s   0ms DEBUG checking edge Product/b -(isExpensive🧩{price})- Boolean/b
                  └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="isExpensive"}
                    ├─   0.351908s   0ms DEBUG checking requirements {price} for edge 'Product/b -(isExpensive🧩{price})- Boolean/b'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.351950s   0ms INFO return=Ok([])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.351988s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                          ├─   0.351997s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                          ├─   0.352023s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                          ├─   0.352032s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                          ├─   0.352040s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.352072s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.352143s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.352210s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.352244s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.352258s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.352335s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                                  ├─   0.352348s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b", "a"})
                                  ├─   0.352358s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                                  ├─   0.352366s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b", "a"})
                                  ├─   0.352375s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                                  ├─   0.352384s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "b", "a"})
                                  ├─   0.352394s   0ms DEBUG Finished finding indirect paths, found total of 0
                                  ├─   0.352403s   0ms INFO return=Ok([])
                                ┌─┘
                                ├─   0.352427s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                              ┌─┘
                              ├─   0.352450s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                            ┌─┘
                            ├─   0.352469s   0ms DEBUG Paths for id
                            ├─   0.352482s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                            ├─   0.352490s   0ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.352503s   0ms DEBUG path Product/b -(id)- ID/b is valid
                            ├─   0.352511s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(5)" }]))
                          ┌─┘
                          ├─   0.352530s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(5)" }, root_node="Product/b"}
                            └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                              ├─   0.352563s   0ms DEBUG Building root query tree node: Product/b
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.352582s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.352611s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a", current_cost=4007}
                            ├─   0.352669s   0ms DEBUG checking edge Product/a -(price)- Float/a
                            └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a", edge="price"}
                              ├─   0.352695s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.352717s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(price)- Float/a
                            ├─   0.352727s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }])
                          ┌─┘
                          ├─   0.352749s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                          ├─   0.352761s   0ms DEBUG Finished finding indirect paths, found total of 1
                          ├─   0.352769s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }])
                        ┌─┘
                        ├─   0.352788s   0ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }], [])))
                      ┌─┘
                      ├─   0.352827s   0ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }], [])))
                    ┌─┘
                    ├─   0.352849s   0ms DEBUG Paths for price
                    ├─   0.352863s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.352871s   0ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.352884s   0ms DEBUG path Product/b -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.352896s   1ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(20) --> EdgeIndex(3)" }]))
                  ┌─┘
                  ├─   0.352916s   1ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(isExpensive🧩{price})- Boolean/b
                  └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(20) --> EdgeIndex(3)" }, root_node="Product/b"}
                    └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=2}
                      ├─   0.352947s   0ms DEBUG Building root query tree node: Product/b
                      └─┐from_path_segment_sequences{current_index=0, total_segments=2}
                        ├─   0.352963s   0ms DEBUG Processing edge: Product/b -(🔑🧩{id})- Product/a
                        └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                          ├─   0.352980s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
                          └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                          ┌─┘
                          ├─   0.353005s   0ms DEBUG No subsequent steps (leaf or end of path)
                        ┌─┘
                        ├─   0.353023s   0ms DEBUG Adding subsequent step as child
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.353071s   1ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }])
                ┌─┘
                ├─   0.353090s   2ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                ├─   0.353100s   2ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.353123s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.353162s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.353199s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.353228s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.353241s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.353279s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.353288s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                        ├─   0.353296s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.353319s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.353362s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.353402s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.353434s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.353454s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.353496s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.353506s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "b"})
                                ├─   0.353517s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.353525s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "a", "b"})
                                ├─   0.353534s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.353542s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "b"})
                                ├─   0.353553s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.353561s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.353581s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                            ┌─┘
                            ├─   0.353602s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.353637s   0ms DEBUG Paths for id
                          ├─   0.353653s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.353671s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.353690s   0ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.353697s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                        ┌─┘
                        ├─   0.353721s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.353754s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.353772s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.353800s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.353874s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.353908s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.353932s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.353956s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }])
                        ┌─┘
                        ├─   0.353998s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                        ├─   0.354012s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        ├─   0.354021s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                        ├─   0.354042s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.354052s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }])
                      ┌─┘
                      ├─   0.354078s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                    ┌─┘
                    ├─   0.354098s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                  ┌─┘
                  ├─   0.354116s   1ms DEBUG Paths for id
                  ├─   0.354127s   1ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.354152s   1ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.354163s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.354186s   1ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.354206s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
                ├─   0.354232s   3ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.354263s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.354279s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.354303s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                  ├─   0.354357s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.354372s   3ms DEBUG No direct paths found
                ├─   0.354385s   3ms DEBUG going deeper
                ├─   0.354413s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                ├─   0.354423s   3ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                ├─   0.354431s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                ├─   0.354440s   3ms DEBUG Ignoring. Already visited similar edge
                ├─   0.354446s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                ├─   0.354453s   3ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                ├─   0.354464s   3ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.354471s   3ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }])
              ┌─┘
              ├─   0.354496s   3ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }], [])))
            ┌─┘
            ├─   0.354516s   3ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.354531s   3ms DEBUG Paths for isExpensive
          ├─   0.354542s   3ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(isExpensive🧩{price})- Boolean/b is valid
          ├─   0.354549s   3ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.354561s   3ms DEBUG path Product/c -(🔑🧩{id})- Product/b -(isExpensive🧩{price})- Boolean/b is valid
          ├─   0.354567s   3ms INFO return=Ok(Some([ { cost: 1005, egdes: "EdgeIndex(24) --> EdgeIndex(6)" }]))
        ┌─┘
        ├─   0.354586s   3ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(neverCalledSkip🧩{isExpensive})- Boolean/c
        └─┐from_path{path= { cost: 1005, egdes: "EdgeIndex(24) --> EdgeIndex(6)" }, root_node="Product/c"}
          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=2}
            ├─   0.354613s   0ms DEBUG Building root query tree node: Product/c
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.354627s   0ms DEBUG Processing edge: Product/c -(🔑🧩{id})- Product/b
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.354641s   0ms DEBUG Processing edge: Product/b -(isExpensive🧩{price})- Boolean/b
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.354662s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.354676s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.354706s   4ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(9)" }])
      ┌─┘
      ├─   0.354723s   5ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/c
      ├─   0.354732s   5ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.354751s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.354785s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.354819s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.354845s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.354866s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.354909s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.354932s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.354967s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.355000s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.355028s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.355039s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.355075s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.355083s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.355091s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.355098s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.355105s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.355113s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.355121s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.355128s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.355145s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.355162s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.355197s   0ms DEBUG Paths for id
                ├─   0.355211s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.355218s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.355230s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.355237s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.355254s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.355283s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.355299s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.355322s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.355371s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.355391s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.355409s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.355419s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.355436s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/c
              ├─   0.355446s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.355453s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.355460s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.355467s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.355475s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.355482s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.355499s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.355515s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.355531s   0ms DEBUG Paths for id
        ├─   0.355539s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.355547s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.355554s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.355563s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.355569s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.355583s   5ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.355607s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.355620s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.355641s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "neverCalledSkip", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: Some("bool"), include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.355682s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.355695s   6ms DEBUG No direct paths found
      ├─   0.355703s   6ms DEBUG going deeper
      ├─   0.355710s   6ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.355717s   6ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.355723s   6ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      ├─   0.355730s   6ms DEBUG Ignoring. Already visited similar edge
      ├─   0.355736s   6ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.355741s   6ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.355747s   6ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.355752s   6ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.355761s   6ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.355767s   6ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.355784s   6ms DEBUG Indirect paths found: 1
    ├─   0.355794s   6ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="price", leaf=true}
  ├─   0.355825s   0ms DEBUG Trying to advance to: price through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.355851s   0ms DEBUG checking edge Product/a -(price)- Float/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="price"}
        ├─   0.355866s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.355881s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(price)- Float/a
      ├─   0.355889s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.355902s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.355925s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.355941s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.355973s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.355990s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.356006s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.356018s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.356050s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              ├─   0.356057s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.356064s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.356082s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.356118s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.356137s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.356155s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.356165s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.356197s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.356205s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.356213s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.356220s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.356228s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.356235s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.356243s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.356251s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.356268s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.356285s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.356301s   0ms DEBUG Paths for id
                ├─   0.356310s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.356316s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.356328s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.356358s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.356385s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.356415s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.356431s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.356454s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.356506s   0ms DEBUG checking edge Product/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
                  ├─   0.356526s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.356543s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                ├─   0.356553s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
              ┌─┘
              ├─   0.356571s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
              ├─   0.356580s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.356587s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.356596s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.356602s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
            ┌─┘
            ├─   0.356619s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
          ┌─┘
          ├─   0.356635s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
        ┌─┘
        ├─   0.356650s   0ms DEBUG Paths for id
        ├─   0.356658s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.356666s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b -(id)- ID/b is valid
        ├─   0.356673s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.356682s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.356688s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.356701s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.356725s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.356738s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.356758s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.356806s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.356818s   0ms DEBUG No direct paths found
      ├─   0.356826s   0ms DEBUG going deeper
      ├─   0.356833s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.356850s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.356881s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.356897s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.356914s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.356923s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.356963s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.356995s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.357051s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.357080s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.357102s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.357113s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.357147s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.357155s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.357164s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.357171s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.357179s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.357186s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.357195s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.357202s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.357219s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.357237s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.357253s   0ms DEBUG Paths for id
                ├─   0.357262s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.357269s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.357280s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.357287s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.357304s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.357331s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.357347s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.357371s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.357419s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.357442s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.357460s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.357470s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.357487s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/c
              ├─   0.357497s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.357504s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.357511s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.357517s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.357526s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.357532s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.357549s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.357565s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.357581s   0ms DEBUG Paths for id
        ├─   0.357589s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.357597s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.357603s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.357613s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.357619s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.357633s   1ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.357657s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.357671s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.357691s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.357732s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.357744s   1ms DEBUG No direct paths found
      ├─   0.357757s   1ms DEBUG going deeper
      ├─   0.357768s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.357774s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.357780s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      ├─   0.357787s   1ms DEBUG Ignoring. Already visited similar edge
      ├─   0.357792s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.357798s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.357804s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.357809s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.357817s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
      ├─   0.357823s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.357829s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
      ├─   0.357835s   1ms DEBUG Ignoring. Already visited similar edge
      ├─   0.357840s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
      ├─   0.357845s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.357853s   1ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.357858s   1ms INFO return=Ok([])
    ┌─┘
    ├─   0.357872s   2ms DEBUG Indirect paths found: 0
    ├─   0.357881s   2ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(9)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.357927s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.357940s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.357952s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.357964s   0ms DEBUG Processing edge: Product/a -(🔑🧩{id})- Product/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.357977s   0ms DEBUG Processing edge: Product/c -(neverCalledSkip🧩{isExpensive})- Boolean/c
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.357997s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.358009s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.358020s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.358030s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.358064s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.358076s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.358087s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.358099s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.358117s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.358129s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.358146s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="product", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.358268s   0ms DEBUG adding output field 'product' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/a -(🔑🧩{id})- Product/c", parent_fetch_step_index=1}
              ├─   0.358334s   0ms DEBUG created a new fetch step [2] subgraph(c) type(Product) requirement() key({id}) in children of 1
              ├─   0.358344s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.358351s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.358360s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path="product"}
                      ├─   0.358421s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.358447s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/c"}
                    └─┐can_satisfy_edge{path="Product/c", edge="id"}
                      ├─   0.358608s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/c'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/c", current_cost=0}
                            ├─   0.358649s   0ms DEBUG checking edge Product/c -(id)- ID/c
                            └─┐can_satisfy_edge{path="Product/c", edge="id"}
                              ├─   0.358671s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.358691s   0ms DEBUG Advancing path Product/c with edge Product/c -(id)- ID/c
                            ├─   0.358711s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(10)" }])
                          ┌─┘
                          ├─   0.358752s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                        ┌─┘
                        ├─   0.358773s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                      ┌─┘
                      ├─   0.358790s   0ms DEBUG Paths for id
                      ├─   0.358800s   0ms DEBUG   Path Product/c -(id)- ID/c is valid
                      ├─   0.358808s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.358822s   0ms DEBUG path Product/c -(id)- ID/c is valid
                      ├─   0.358830s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.358855s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.358864s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.358875s   0ms DEBUG created a new fetch step [3] subgraph(c) type(Product) requirement({isExpensive}) in children of 1
                  ├─   0.358893s   0ms DEBUG Adding {isExpensive} to fetch([3]).input
                  ├─   0.358901s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.358908s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.358917s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.358948s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/c -(🔑🧩{id})- Product/b", parent_fetch_step_index=4}
                        ├─   0.359008s   0ms DEBUG created a new fetch step [5] subgraph(b) type(Product) requirement() key({id}) in children of 4
                        ├─   0.359020s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                        ├─   0.359028s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.359036s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                ├─   0.359128s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.359158s   0ms DEBUG adding output field 'id' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_requires_field_edge{parent_fetch_step_index=5}
                            └─┐find_satisfiable_key{node="Product/b"}
                              └─┐can_satisfy_edge{path="Product/b", edge="id"}
                                ├─   0.359291s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                                └─┐validate_field_requirement{}
                                  └─┐validate_field_requirement{}
                                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/b", current_cost=0}
                                      ├─   0.359340s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                      └─┐can_satisfy_edge{path="Product/b", edge="id"}
                                        ├─   0.359364s   0ms INFO return=Ok(Some([]))
                                      ┌─┘
                                      ├─   0.359386s   0ms DEBUG Advancing path Product/b with edge Product/b -(id)- ID/b
                                      ├─   0.359399s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(5)" }])
                                    ┌─┘
                                    ├─   0.359423s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(5)" }], [])))
                                  ┌─┘
                                  ├─   0.359443s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(5)" }], [])))
                                ┌─┘
                                ├─   0.359462s   0ms DEBUG Paths for id
                                ├─   0.359473s   0ms DEBUG   Path Product/b -(id)- ID/b is valid
                                ├─   0.359481s   0ms DEBUG Found 1 best paths for this leaf requirement
                                ├─   0.359511s   0ms DEBUG path Product/b -(id)- ID/b is valid
                                ├─   0.359536s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(5)" }]))
                              ┌─┘
                            ┌─┘
                            ├─   0.359575s   0ms DEBUG Key to re-enter: {id}
                            ├─   0.359585s   0ms DEBUG Creating a fetch step for children of @requires
                            ├─   0.359596s   0ms DEBUG created a new fetch step [6] subgraph(b) type(Product) requirement({price}) in children of 4
                            ├─   0.359606s   0ms DEBUG Adding {price} to fetch([6]).input
                            ├─   0.359614s   0ms DEBUG Adding {id} to fetch([6]).input
                            ├─   0.359623s   0ms DEBUG Creating a fetch step for requirement of @requires
                            ├─   0.359631s   0ms DEBUG Adding {id} to fetch([7]).input
                            └─┐connect{parent=4, child=7}
                            ┌─┘
                            ├─   0.359665s   0ms DEBUG Processing requirements
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7}
                                └─┐process_entity_move_edge{edge="Product/b -(🔑🧩{id})- Product/a", parent_fetch_step_index=7}
                                  ├─   0.359713s   0ms DEBUG created a new fetch step [8] subgraph(a) type(Product) requirement() key({id}) in children of 7
                                  ├─   0.359722s   0ms DEBUG adding input requirement '{id}' to fetch step [8]
                                  ├─   0.359731s   0ms DEBUG adding __typename field to output for type 'Product'
                                  ├─   0.359740s   0ms DEBUG connecting fetch step to parent [7] -> [8]
                                  └─┐connect{parent=7, child=8}
                                  ┌─┘
                                  └─┐process_requirements_for_fetch_steps{count=1}
                                    └─┐process_noop_edge{}
                                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                        └─┐process_plain_field_edge{parent_fetch_step_index=7, requiring_fetch_step_index=8, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                          ├─   0.359817s   0ms DEBUG connecting parent fetch step [7] to requiring fetch step [8]
                                          └─┐connect{parent=7, child=8}
                                          ┌─┘
                                          ├─   0.359849s   0ms DEBUG adding output field 'id' to fetch step [7]
                                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                          ┌─┘
                                        ┌─┘
                                      ┌─┘
                                    ┌─┘
                                    └─┐connect{parent=7, child=8}
                                    ┌─┘
                                  ┌─┘
                                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=8}
                                    └─┐process_plain_field_edge{parent_fetch_step_index=8, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path=""}
                                      ├─   0.359971s   0ms DEBUG adding output field 'price' to fetch step [8]
                                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=8}
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            ├─   0.360049s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                            └─┐connect{parent=8, child=6}
                            ┌─┘
                            ├─   0.360076s   0ms DEBUG Processing children
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.360140s   1ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=6, child=3}
                  ┌─┘
                  ├─   0.360162s   1ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path="product"}
              ├─   0.360212s   0ms DEBUG adding output field 'price' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.360278s   2ms DEBUG Done
├─   0.360286s   2ms DEBUG found roots
├─   0.360290s   2ms DEBUG print graph
├─   0.360295s   2ms DEBUG Nodes:
│ [1] Query/a {} → {product{__typename id price}} at $.
│ [2] Product/c {__typename id} → {} at $.product
│ [3] Product/c {__typename isExpensive id} → {neverCalledSkip} at $.product
│ [4] Product/c {__typename id} → {__typename id} at $.product
│ [5] Product/b {__typename id} → {} at $.product
│ [6] Product/b {__typename price id} → {isExpensive} at $.product
│ [7] Product/b {__typename id} → {__typename id} at $.product
│ [8] Product/a {__typename id} → {price} at $.product
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│     [7]
│       [8]
│         [6]
│           [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.360343s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.360358s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=7}
      ┌─┘
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
    ├─   0.360404s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [7]
    └─┐perform_passthrough_child_merge{}
      ├─   0.360416s   0ms DEBUG merging fetch steps [1] and [7]
      └─┐connect{parent=1, child=8}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.360469s   0ms DEBUG optimization found: merge parent [1] with child [8]
    └─┐perform_fetch_step_merge{}
      ├─   0.360482s   0ms DEBUG merging fetch steps [1] and [8]
      └─┐connect{parent=1, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.360531s   0ms DEBUG Found optimization: 6 <- 5
    └─┐perform_fetch_step_merge{}
      ├─   0.360544s   0ms DEBUG merging fetch steps [6] and [5]
      └─┐connect{parent=1, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.360586s   0ms DEBUG optimization found: remove 'Product/c {__typename id} → {} at $.product'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.361064s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.362932s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(699.99)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.363454s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Bool(true)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.365142s   0ms DEBUG starting new connection: http://localhost:4200/
          ├─   0.365337s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
   0.365442s DEBUG connecting to 127.0.0.1:4200
   0.365732s DEBUG connected to 127.0.0.1:4200
   0.365800s DEBUG pooling idle connection for ("http", localhost:4200)
          ├─   0.367186s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.367480s DEBUG execution result: ExecutionResult { data: Some(Object {"product": Object {"price": Number(699.99)}}), errors: Some([GraphQLError { message: "Unexpected error.", locations: Some([GraphQLErrorLocation { line: 1, column: 93 }]), path: Some([String("_entities"), Number(0), String("neverCalledSkip")]), extensions: Some({"code": String("INTERNAL_SERVER_ERROR")}) }]), extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{product{__typename id price}}")}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{isExpensive}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{neverCalledSkip}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("isExpensive")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.370606s DEBUG original document: query($bool: Boolean = true) {
  product {
    price
    include @include(if: $bool)
  }
}

   0.370693s DEBUG normalized document: query($bool:Boolean){product{price include}}

   0.370721s DEBUG executable operation: query($bool:Boolean){product{price include}}
┐walk_operation{}
├─   0.371150s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="product", leaf=false}
  ├─   0.371197s   0ms DEBUG Trying to advance to: product{price include} through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "include", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.371247s   0ms DEBUG checking edge Query/a -(product)- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="product"}
        ├─   0.371267s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.371290s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(product)- Product/a
      ├─   0.371301s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.371318s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "include", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.371363s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.371373s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.371389s   0ms DEBUG Indirect paths found: 0
    ├─   0.371399s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  ├─   0.371413s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="include", leaf=true}
  ├─   0.371435s   0ms DEBUG Trying to advance to: include through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "include", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: Some("bool") }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.371462s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.371474s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "include", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: Some("bool") }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.371492s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.371512s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.371548s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.371566s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.371583s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.371600s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.371631s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              ├─   0.371639s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.371647s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.371666s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.371728s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.371751s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.371773s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.371797s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.371849s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.371858s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.371866s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.371873s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.371881s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.371889s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.371897s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.371904s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.371924s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.371942s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.371958s   0ms DEBUG Paths for id
                ├─   0.371968s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.371976s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.371992s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.371999s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.372015s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.372045s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.372097s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.372124s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.372195s   0ms DEBUG checking edge Product/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
                  ├─   0.372225s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.372245s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                ├─   0.372257s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
              ┌─┘
              ├─   0.372280s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
              ├─   0.372290s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.372297s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.372306s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.372312s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
            ┌─┘
            ├─   0.372329s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
          ┌─┘
          ├─   0.372345s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
        ┌─┘
        ├─   0.372361s   0ms DEBUG Paths for id
        ├─   0.372369s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.372377s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b -(id)- ID/b is valid
        ├─   0.372384s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.372395s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.372400s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.372414s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.372440s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.372453s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.372474s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "include", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: Some("bool") }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.372519s   0ms DEBUG checking edge Product/c -(include🧩{isExpensive})- Boolean/c
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="include"}
          ├─   0.372538s   0ms DEBUG checking requirements {isExpensive} for edge 'Product/c -(include🧩{isExpensive})- Boolean/c'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.372572s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.372602s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                ├─   0.372610s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
                ├─   0.372618s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.372638s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.372676s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.372699s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.372718s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.372729s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.372772s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.372797s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                        ├─   0.372810s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        ├─   0.372817s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                        ├─   0.372825s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.372856s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.372910s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.372937s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.372961s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.372974s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.373015s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.373024s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "b"})
                                ├─   0.373033s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.373041s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "c", "b"})
                                ├─   0.373050s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.373058s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "b"})
                                ├─   0.373068s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.373076s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.373096s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                            ┌─┘
                            ├─   0.373117s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.373135s   0ms DEBUG Paths for id
                          ├─   0.373146s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.373153s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.373167s   0ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.373174s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                        ┌─┘
                        ├─   0.373192s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.373223s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.373241s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.373269s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.373354s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.373381s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.373405s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.373415s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }])
                        ┌─┘
                        ├─   0.373436s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                        ├─   0.373449s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.373456s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }])
                      ┌─┘
                      ├─   0.373476s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }], [])))
                    ┌─┘
                    ├─   0.373504s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.373522s   0ms DEBUG Paths for id
                  ├─   0.373532s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.373542s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.373550s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.373561s   0ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.373568s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
                ├─   0.373584s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.373614s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.373631s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.373655s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                  ├─   0.373734s   0ms DEBUG checking edge Product/b -(isExpensive🧩{price})- Boolean/b
                  └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="isExpensive"}
                    ├─   0.373758s   0ms DEBUG checking requirements {price} for edge 'Product/b -(isExpensive🧩{price})- Boolean/b'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.373799s   0ms INFO return=Ok([])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.373834s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                          ├─   0.373848s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                          ├─   0.373857s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                          ├─   0.373865s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                          ├─   0.373877s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.373923s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.373998s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.374042s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.374071s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.374084s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.374128s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                                  ├─   0.374138s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "b"})
                                  ├─   0.374147s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                                  ├─   0.374156s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "c", "b"})
                                  ├─   0.374165s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                                  ├─   0.374173s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "b"})
                                  ├─   0.374183s   0ms DEBUG Finished finding indirect paths, found total of 0
                                  ├─   0.374192s   0ms INFO return=Ok([])
                                ┌─┘
                                ├─   0.374212s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                              ┌─┘
                              ├─   0.374255s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                            ┌─┘
                            ├─   0.374289s   0ms DEBUG Paths for id
                            ├─   0.374303s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                            ├─   0.374312s   0ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.374326s   0ms DEBUG path Product/b -(id)- ID/b is valid
                            ├─   0.374334s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(5)" }]))
                          ┌─┘
                          ├─   0.374353s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(5)" }, root_node="Product/b"}
                            └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                              ├─   0.374387s   0ms DEBUG Building root query tree node: Product/b
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.374407s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.374435s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a", current_cost=4007}
                            ├─   0.374501s   0ms DEBUG checking edge Product/a -(price)- Float/a
                            └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a", edge="price"}
                              ├─   0.374528s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.374550s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(price)- Float/a
                            ├─   0.374561s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }])
                          ┌─┘
                          ├─   0.374582s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                          ├─   0.374595s   0ms DEBUG Finished finding indirect paths, found total of 1
                          ├─   0.374621s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }])
                        ┌─┘
                        ├─   0.374652s   0ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }], [])))
                      ┌─┘
                      ├─   0.374687s   0ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }], [])))
                    ┌─┘
                    ├─   0.374710s   0ms DEBUG Paths for price
                    ├─   0.374725s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.374732s   0ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.374747s   1ms DEBUG path Product/b -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.374754s   1ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(20) --> EdgeIndex(3)" }]))
                  ┌─┘
                  ├─   0.374775s   1ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(isExpensive🧩{price})- Boolean/b
                  └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(20) --> EdgeIndex(3)" }, root_node="Product/b"}
                    └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=2}
                      ├─   0.374808s   0ms DEBUG Building root query tree node: Product/b
                      └─┐from_path_segment_sequences{current_index=0, total_segments=2}
                        ├─   0.374828s   0ms DEBUG Processing edge: Product/b -(🔑🧩{id})- Product/a
                        └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                          ├─   0.374845s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
                          └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                          ┌─┘
                          ├─   0.374872s   0ms DEBUG No subsequent steps (leaf or end of path)
                        ┌─┘
                        ├─   0.374888s   0ms DEBUG Adding subsequent step as child
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.374938s   1ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }])
                ┌─┘
                ├─   0.374969s   2ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                ├─   0.374979s   2ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.375007s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.375048s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.375070s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.375091s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.375102s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.375138s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.375147s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                        ├─   0.375156s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.375179s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.375223s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.375268s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.375301s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.375315s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.375359s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.375369s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "b"})
                                ├─   0.375379s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.375387s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "c", "b"})
                                ├─   0.375396s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.375405s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "b"})
                                ├─   0.375415s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.375423s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.375446s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                            ┌─┘
                            ├─   0.375467s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.375485s   0ms DEBUG Paths for id
                          ├─   0.375497s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.375505s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.375518s   0ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.375541s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                        ┌─┘
                        ├─   0.375570s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.375605s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.375623s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.375653s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.375714s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.375741s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.375764s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.375775s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }])
                        ┌─┘
                        ├─   0.375797s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                        ├─   0.375809s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        ├─   0.375819s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                        ├─   0.375830s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.375838s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }])
                      ┌─┘
                      ├─   0.375858s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                    ┌─┘
                    ├─   0.375878s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                  ┌─┘
                  ├─   0.375897s   0ms DEBUG Paths for id
                  ├─   0.375908s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.375918s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.375927s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.375938s   0ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.375945s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
                ├─   0.375962s   3ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.375991s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.376007s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.376031s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                  ├─   0.376082s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.376098s   3ms DEBUG No direct paths found
                ├─   0.376109s   3ms DEBUG going deeper
                ├─   0.376118s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                ├─   0.376125s   3ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                ├─   0.376133s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                ├─   0.376142s   3ms DEBUG Ignoring. Already visited similar edge
                ├─   0.376149s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                ├─   0.376156s   3ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                ├─   0.376166s   3ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.376173s   3ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }])
              ┌─┘
              ├─   0.376201s   3ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }], [])))
            ┌─┘
            ├─   0.376217s   3ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.376232s   3ms DEBUG Paths for isExpensive
          ├─   0.376243s   3ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(isExpensive🧩{price})- Boolean/b is valid
          ├─   0.376250s   3ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.376261s   3ms DEBUG path Product/c -(🔑🧩{id})- Product/b -(isExpensive🧩{price})- Boolean/b is valid
          ├─   0.376268s   3ms INFO return=Ok(Some([ { cost: 1005, egdes: "EdgeIndex(24) --> EdgeIndex(6)" }]))
        ┌─┘
        ├─   0.376288s   3ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(include🧩{isExpensive})- Boolean/c
        └─┐from_path{path= { cost: 1005, egdes: "EdgeIndex(24) --> EdgeIndex(6)" }, root_node="Product/c"}
          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=2}
            ├─   0.376355s   0ms DEBUG Building root query tree node: Product/c
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.376373s   0ms DEBUG Processing edge: Product/c -(🔑🧩{id})- Product/b
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.376389s   0ms DEBUG Processing edge: Product/b -(isExpensive🧩{price})- Boolean/b
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.376429s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.376451s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.376484s   3ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.376506s   5ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/c
      ├─   0.376517s   5ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.376538s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.376572s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.376594s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.376612s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.376621s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.376683s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.376713s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.376749s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.376769s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.376789s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.376799s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.376854s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.376866s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.376874s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.376881s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.376889s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.376896s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.376906s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.376913s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.376934s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.376971s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.376991s   0ms DEBUG Paths for id
                ├─   0.377002s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.377009s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.377022s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.377029s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.377047s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.377076s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.377093s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.377116s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.377167s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.377213s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.377238s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.377262s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.377290s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/c
              ├─   0.377300s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.377308s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.377315s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.377321s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.377330s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.377337s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.377355s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.377372s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.377387s   0ms DEBUG Paths for id
        ├─   0.377396s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.377404s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.377411s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.377422s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.377428s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.377442s   5ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.377472s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.377486s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.377507s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "include", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: Some("bool") }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.377552s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.377566s   6ms DEBUG No direct paths found
      ├─   0.377575s   6ms DEBUG going deeper
      ├─   0.377582s   6ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.377589s   6ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.377596s   6ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      ├─   0.377604s   6ms DEBUG Ignoring. Already visited similar edge
      ├─   0.377610s   6ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.377615s   6ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.377622s   6ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.377628s   6ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.377637s   6ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.377643s   6ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.377662s   6ms DEBUG Indirect paths found: 1
    ├─   0.377672s   6ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="price", leaf=true}
  ├─   0.377707s   0ms DEBUG Trying to advance to: price through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.377734s   0ms DEBUG checking edge Product/a -(price)- Float/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="price"}
        ├─   0.377750s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.377765s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(price)- Float/a
      ├─   0.377773s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.377787s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.377806s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.377823s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.377855s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.377873s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.377889s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.377898s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.377927s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              ├─   0.377935s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.377944s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.377963s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.378001s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.378020s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.378042s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.378051s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.378083s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.378091s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.378099s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.378106s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.378114s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.378121s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.378130s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.378137s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.378154s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.378172s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.378189s   0ms DEBUG Paths for id
                ├─   0.378199s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.378206s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.378218s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.378225s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.378242s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.378269s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.378285s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.378308s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.378357s   0ms DEBUG checking edge Product/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
                  ├─   0.378378s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.378397s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                ├─   0.378407s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
              ┌─┘
              ├─   0.378424s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
              ├─   0.378434s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.378441s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.378449s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.378456s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
            ┌─┘
            ├─   0.378473s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
          ┌─┘
          ├─   0.378489s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
        ┌─┘
        ├─   0.378508s   0ms DEBUG Paths for id
        ├─   0.378516s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.378524s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b -(id)- ID/b is valid
        ├─   0.378531s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.378540s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.378546s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.378560s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.378606s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.378622s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.378670s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.378729s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.378742s   0ms DEBUG No direct paths found
      ├─   0.378750s   0ms DEBUG going deeper
      ├─   0.378758s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.378776s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.378808s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.378825s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.378842s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.378850s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.378880s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.378918s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.378964s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.378986s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.379008s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.379019s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.379054s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.379063s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.379071s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.379079s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.379086s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.379095s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.379104s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.379112s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.379130s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.379148s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.379165s   0ms DEBUG Paths for id
                ├─   0.379174s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.379181s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.379193s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.379200s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.379216s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.379264s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.379282s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.379309s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.379376s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.379406s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.379427s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.379438s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.379457s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/c
              ├─   0.379467s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.379474s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.379481s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.379488s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.379496s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.379503s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.379520s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.379537s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.379552s   0ms DEBUG Paths for id
        ├─   0.379560s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.379568s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.379575s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.379585s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.379591s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.379605s   1ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.379630s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.379644s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.379664s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.379708s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.379721s   1ms DEBUG No direct paths found
      ├─   0.379729s   1ms DEBUG going deeper
      ├─   0.379736s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.379742s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.379748s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      ├─   0.379755s   1ms DEBUG Ignoring. Already visited similar edge
      ├─   0.379761s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.379767s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.379773s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.379778s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.379785s   1ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
      ├─   0.379791s   1ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.379797s   2ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
      ├─   0.379803s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.379808s   2ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
      ├─   0.379814s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.379820s   2ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.379826s   2ms INFO return=Ok([])
    ┌─┘
    ├─   0.379838s   2ms DEBUG Indirect paths found: 0
    ├─   0.379846s   2ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.379905s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.379917s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.379929s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.379941s   0ms DEBUG Processing edge: Product/a -(🔑🧩{id})- Product/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.379956s   0ms DEBUG Processing edge: Product/c -(include🧩{isExpensive})- Boolean/c
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.379975s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.379988s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.379999s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.380009s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.380042s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.380054s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.380065s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.380077s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.380095s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.380106s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.380117s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="product", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.380238s   0ms DEBUG adding output field 'product' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/a -(🔑🧩{id})- Product/c", parent_fetch_step_index=1}
              ├─   0.380278s   0ms DEBUG created a new fetch step [2] subgraph(c) type(Product) requirement() key({id}) in children of 1
              ├─   0.380286s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.380293s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.380301s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path="product"}
                      ├─   0.380359s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.380406s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/c"}
                    └─┐can_satisfy_edge{path="Product/c", edge="id"}
                      ├─   0.380568s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/c'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/c", current_cost=0}
                            ├─   0.380611s   0ms DEBUG checking edge Product/c -(id)- ID/c
                            └─┐can_satisfy_edge{path="Product/c", edge="id"}
                              ├─   0.380632s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.380652s   0ms DEBUG Advancing path Product/c with edge Product/c -(id)- ID/c
                            ├─   0.380663s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(10)" }])
                          ┌─┘
                          ├─   0.380686s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                        ┌─┘
                        ├─   0.380705s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                      ┌─┘
                      ├─   0.380721s   0ms DEBUG Paths for id
                      ├─   0.380731s   0ms DEBUG   Path Product/c -(id)- ID/c is valid
                      ├─   0.380738s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.380769s   0ms DEBUG path Product/c -(id)- ID/c is valid
                      ├─   0.380778s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.380810s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.380819s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.380831s   0ms DEBUG created a new fetch step [3] subgraph(c) type(Product) requirement({isExpensive}) in children of 1
                  ├─   0.380842s   0ms DEBUG Adding {isExpensive} to fetch([3]).input
                  ├─   0.380850s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.380860s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.380868s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.380900s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/c -(🔑🧩{id})- Product/b", parent_fetch_step_index=4}
                        ├─   0.380942s   0ms DEBUG created a new fetch step [5] subgraph(b) type(Product) requirement() key({id}) in children of 4
                        ├─   0.380951s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                        ├─   0.380960s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.380969s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                ├─   0.381069s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.381109s   0ms DEBUG adding output field 'id' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_requires_field_edge{parent_fetch_step_index=5}
                            └─┐find_satisfiable_key{node="Product/b"}
                              └─┐can_satisfy_edge{path="Product/b", edge="id"}
                                ├─   0.381248s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                                └─┐validate_field_requirement{}
                                  └─┐validate_field_requirement{}
                                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/b", current_cost=0}
                                      ├─   0.381301s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                      └─┐can_satisfy_edge{path="Product/b", edge="id"}
                                        ├─   0.381326s   0ms INFO return=Ok(Some([]))
                                      ┌─┘
                                      ├─   0.381348s   0ms DEBUG Advancing path Product/b with edge Product/b -(id)- ID/b
                                      ├─   0.381361s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(5)" }])
                                    ┌─┘
                                    ├─   0.381386s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(5)" }], [])))
                                  ┌─┘
                                  ├─   0.381407s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(5)" }], [])))
                                ┌─┘
                                ├─   0.381426s   0ms DEBUG Paths for id
                                ├─   0.381437s   0ms DEBUG   Path Product/b -(id)- ID/b is valid
                                ├─   0.381445s   0ms DEBUG Found 1 best paths for this leaf requirement
                                ├─   0.381458s   0ms DEBUG path Product/b -(id)- ID/b is valid
                                ├─   0.381467s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(5)" }]))
                              ┌─┘
                            ┌─┘
                            ├─   0.381496s   0ms DEBUG Key to re-enter: {id}
                            ├─   0.381505s   0ms DEBUG Creating a fetch step for children of @requires
                            ├─   0.381516s   0ms DEBUG created a new fetch step [6] subgraph(b) type(Product) requirement({price}) in children of 4
                            ├─   0.381545s   0ms DEBUG Adding {price} to fetch([6]).input
                            ├─   0.381557s   0ms DEBUG Adding {id} to fetch([6]).input
                            ├─   0.381566s   0ms DEBUG Creating a fetch step for requirement of @requires
                            ├─   0.381575s   0ms DEBUG Adding {id} to fetch([7]).input
                            └─┐connect{parent=4, child=7}
                            ┌─┘
                            ├─   0.381613s   0ms DEBUG Processing requirements
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7}
                                └─┐process_entity_move_edge{edge="Product/b -(🔑🧩{id})- Product/a", parent_fetch_step_index=7}
                                  ├─   0.381666s   0ms DEBUG created a new fetch step [8] subgraph(a) type(Product) requirement() key({id}) in children of 7
                                  ├─   0.381676s   0ms DEBUG adding input requirement '{id}' to fetch step [8]
                                  ├─   0.381685s   0ms DEBUG adding __typename field to output for type 'Product'
                                  ├─   0.381695s   0ms DEBUG connecting fetch step to parent [7] -> [8]
                                  └─┐connect{parent=7, child=8}
                                  ┌─┘
                                  └─┐process_requirements_for_fetch_steps{count=1}
                                    └─┐process_noop_edge{}
                                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                        └─┐process_plain_field_edge{parent_fetch_step_index=7, requiring_fetch_step_index=8, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                          ├─   0.381772s   0ms DEBUG connecting parent fetch step [7] to requiring fetch step [8]
                                          └─┐connect{parent=7, child=8}
                                          ┌─┘
                                          ├─   0.381805s   0ms DEBUG adding output field 'id' to fetch step [7]
                                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                          ┌─┘
                                        ┌─┘
                                      ┌─┘
                                    ┌─┘
                                    └─┐connect{parent=7, child=8}
                                    ┌─┘
                                  ┌─┘
                                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=8}
                                    └─┐process_plain_field_edge{parent_fetch_step_index=8, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path=""}
                                      ├─   0.381924s   0ms DEBUG adding output field 'price' to fetch step [8]
                                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=8}
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            ├─   0.382003s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                            └─┐connect{parent=8, child=6}
                            ┌─┘
                            ├─   0.382033s   0ms DEBUG Processing children
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.382099s   1ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=6, child=3}
                  ┌─┘
                  ├─   0.382122s   1ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path="product"}
              ├─   0.382176s   0ms DEBUG adding output field 'price' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.382264s   2ms DEBUG Done
├─   0.382274s   2ms DEBUG found roots
├─   0.382279s   2ms DEBUG print graph
├─   0.382284s   2ms DEBUG Nodes:
│ [1] Query/a {} → {product{__typename id price}} at $.
│ [2] Product/c {__typename id} → {} at $.product
│ [3] Product/c {__typename isExpensive id} → {include} at $.product
│ [4] Product/c {__typename id} → {__typename id} at $.product
│ [5] Product/b {__typename id} → {} at $.product
│ [6] Product/b {__typename price id} → {isExpensive} at $.product
│ [7] Product/b {__typename id} → {__typename id} at $.product
│ [8] Product/a {__typename id} → {price} at $.product
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│     [7]
│       [8]
│         [6]
│           [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.382335s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.382351s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=7}
      ┌─┘
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
    ├─   0.382399s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [7]
    └─┐perform_passthrough_child_merge{}
      ├─   0.382412s   0ms DEBUG merging fetch steps [1] and [7]
      └─┐connect{parent=1, child=8}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.382468s   0ms DEBUG optimization found: merge parent [1] with child [8]
    └─┐perform_fetch_step_merge{}
      ├─   0.382481s   0ms DEBUG merging fetch steps [1] and [8]
      └─┐connect{parent=1, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.382539s   0ms DEBUG Found optimization: 6 <- 5
    └─┐perform_fetch_step_merge{}
      ├─   0.382553s   0ms DEBUG merging fetch steps [6] and [5]
      └─┐connect{parent=1, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.382594s   0ms DEBUG optimization found: remove 'Product/c {__typename id} → {} at $.product'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.383071s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.384999s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(699.99)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.385559s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.386857s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Bool(true)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.387337s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.389117s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.389404s DEBUG execution result: ExecutionResult { data: Some(Object {"product": Object {"price": Number(699.99), "include": Bool(true)}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{product{__typename id price}}")}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{isExpensive}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{include}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("isExpensive")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.392270s DEBUG original document: query($bool: Boolean = false) {
  product {
    price
    skip @skip(if: $bool)
  }
}

   0.392373s DEBUG normalized document: query($bool:Boolean){product{price skip}}

   0.392384s DEBUG executable operation: query($bool:Boolean){product{price skip}}
┐walk_operation{}
├─   0.392741s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="product", leaf=false}
  ├─   0.392786s   0ms DEBUG Trying to advance to: product{price skip} through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "skip", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.392834s   0ms DEBUG checking edge Query/a -(product)- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="product"}
        ├─   0.392854s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.392876s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(product)- Product/a
      ├─   0.392887s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.392904s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "skip", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.392934s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.392955s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.392974s   0ms DEBUG Indirect paths found: 0
    ├─   0.392984s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  ├─   0.393015s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="skip", leaf=true}
  ├─   0.393041s   0ms DEBUG Trying to advance to: skip through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "skip", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: Some("bool"), include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.393072s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.393086s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "skip", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: Some("bool"), include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.393107s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.393126s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.393162s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.393181s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.393198s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.393208s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.393239s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              ├─   0.393247s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.393272s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.393302s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.393341s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.393362s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.393383s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.393394s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.393428s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.393437s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.393445s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.393452s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.393460s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.393467s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.393476s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.393483s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.393502s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.393520s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.393536s   0ms DEBUG Paths for id
                ├─   0.393546s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.393553s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.393570s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.393577s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.393594s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.393626s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.393643s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.393667s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.393762s   0ms DEBUG checking edge Product/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
                  ├─   0.393787s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.393806s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                ├─   0.393817s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
              ┌─┘
              ├─   0.393836s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
              ├─   0.393846s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.393853s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.393862s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.393869s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
            ┌─┘
            ├─   0.393886s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
          ┌─┘
          ├─   0.393911s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
        ┌─┘
        ├─   0.393926s   0ms DEBUG Paths for id
        ├─   0.393935s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.393943s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b -(id)- ID/b is valid
        ├─   0.393950s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.393961s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.393966s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.393980s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.394006s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.394021s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.394041s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "skip", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: Some("bool"), include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.394105s   0ms DEBUG checking edge Product/c -(skip🧩{isExpensive})- Boolean/c
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="skip"}
          ├─   0.394133s   0ms DEBUG checking requirements {isExpensive} for edge 'Product/c -(skip🧩{isExpensive})- Boolean/c'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.394183s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.394227s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                ├─   0.394236s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
                ├─   0.394244s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.394265s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.394309s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.394350s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.394380s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.394393s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.394450s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.394465s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                        ├─   0.394473s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        ├─   0.394481s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                        ├─   0.394489s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.394518s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.394575s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.394603s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.394629s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.394642s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.394683s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.394692s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "b"})
                                ├─   0.394702s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.394710s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "c", "b"})
                                ├─   0.394719s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.394727s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "b"})
                                ├─   0.394737s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.394746s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.394766s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                            ┌─┘
                            ├─   0.394787s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.394806s   0ms DEBUG Paths for id
                          ├─   0.394817s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.394825s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.394839s   0ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.394847s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                        ┌─┘
                        ├─   0.394866s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.394897s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.394916s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.394947s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                          ├─   0.395006s   0ms DEBUG checking edge Product/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", edge="id"}
                            ├─   0.395032s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.395053s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a with edge Product/a -(id)- ID/a
                          ├─   0.395064s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }])
                        ┌─┘
                        ├─   0.395110s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/a
                        ├─   0.395126s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.395134s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }])
                      ┌─┘
                      ├─   0.395156s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }], [])))
                    ┌─┘
                    ├─   0.395178s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(23) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.395196s   0ms DEBUG Paths for id
                  ├─   0.395209s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.395219s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a -(id)- ID/a is valid
                  ├─   0.395227s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.395239s   0ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.395246s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
                ├─   0.395262s   1ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.395312s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.395330s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.395357s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                  ├─   0.395414s   0ms DEBUG checking edge Product/b -(isExpensive🧩{price})- Boolean/b
                  └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="isExpensive"}
                    ├─   0.395438s   0ms DEBUG checking requirements {price} for edge 'Product/b -(isExpensive🧩{price})- Boolean/b'
                    └─┐validate_field_requirement{}
                      └─┐validate_field_requirement{}
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.395486s   0ms INFO return=Ok([])
                        ┌─┘
                        └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.395529s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                          ├─   0.395538s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                          ├─   0.395547s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                          ├─   0.395555s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                          ├─   0.395563s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.395587s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                            └─┐validate_field_requirement{}
                              └─┐validate_field_requirement{}
                                └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.395662s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                  └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                                    ├─   0.395706s   0ms INFO return=Ok(Some([]))
                                  ┌─┘
                                  ├─   0.395740s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                                  ├─   0.395754s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }])
                                ┌─┘
                                └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                                  ├─   0.395802s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
                                  ├─   0.395824s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "b"})
                                  ├─   0.395838s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                                  ├─   0.395847s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "c", "b"})
                                  ├─   0.395856s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                                  ├─   0.395878s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "b"})
                                  ├─   0.395890s   0ms DEBUG Finished finding indirect paths, found total of 0
                                  ├─   0.395898s   0ms INFO return=Ok([])
                                ┌─┘
                                ├─   0.395924s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                              ┌─┘
                              ├─   0.395954s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                            ┌─┘
                            ├─   0.395974s   0ms DEBUG Paths for id
                            ├─   0.395988s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                            ├─   0.395996s   0ms DEBUG Found 1 best paths for this leaf requirement
                            ├─   0.396010s   0ms DEBUG path Product/b -(id)- ID/b is valid
                            ├─   0.396019s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(5)" }]))
                          ┌─┘
                          ├─   0.396038s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                          └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(5)" }, root_node="Product/b"}
                            └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                              ├─   0.396071s   0ms DEBUG Building root query tree node: Product/b
                              └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                                ├─   0.396091s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                                └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                                ┌─┘
                                ├─   0.396119s   0ms DEBUG No subsequent steps (leaf or end of path)
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a", current_cost=4007}
                            ├─   0.396191s   0ms DEBUG checking edge Product/a -(price)- Float/a
                            └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a", edge="price"}
                              ├─   0.396219s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.396240s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(price)- Float/a
                            ├─   0.396251s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }])
                          ┌─┘
                          ├─   0.396272s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                          ├─   0.396285s   0ms DEBUG Finished finding indirect paths, found total of 1
                          ├─   0.396309s   0ms INFO return=Ok([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }])
                        ┌─┘
                        ├─   0.396339s   0ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }], [])))
                      ┌─┘
                      ├─   0.396374s   0ms INFO return=Ok(Some(([ { cost: 4008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(3)" }], [])))
                    ┌─┘
                    ├─   0.396395s   0ms DEBUG Paths for price
                    ├─   0.396410s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.396417s   0ms DEBUG Found 1 best paths for this leaf requirement
                    ├─   0.396431s   1ms DEBUG path Product/b -(🔑🧩{id})- Product/a -(price)- Float/a is valid
                    ├─   0.396439s   1ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(20) --> EdgeIndex(3)" }]))
                  ┌─┘
                  ├─   0.396460s   1ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(isExpensive🧩{price})- Boolean/b
                  └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(20) --> EdgeIndex(3)" }, root_node="Product/b"}
                    └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=2}
                      ├─   0.396494s   0ms DEBUG Building root query tree node: Product/b
                      └─┐from_path_segment_sequences{current_index=0, total_segments=2}
                        ├─   0.396511s   0ms DEBUG Processing edge: Product/b -(🔑🧩{id})- Product/a
                        └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                          ├─   0.396528s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
                          └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                          ┌─┘
                          ├─   0.396556s   0ms DEBUG No subsequent steps (leaf or end of path)
                        ┌─┘
                        ├─   0.396571s   0ms DEBUG Adding subsequent step as child
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.396607s   1ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }])
                ┌─┘
                ├─   0.396626s   2ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                ├─   0.396651s   2ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.396698s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.396763s   0ms DEBUG checking edge Product/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.396788s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.396811s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                        ├─   0.396823s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                        ├─   0.396859s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                        ├─   0.396869s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                        ├─   0.396877s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                          ├─   0.396917s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.396971s   0ms DEBUG checking edge Product/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                                  ├─   0.396997s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.397023s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                                ├─   0.397035s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                                ├─   0.397076s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
                                ├─   0.397085s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c", "a"})
                                ├─   0.397095s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
                                ├─   0.397103s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c", "a"})
                                ├─   0.397112s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                                ├─   0.397120s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "c", "a"})
                                ├─   0.397132s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.397140s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.397160s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                            ┌─┘
                            ├─   0.397181s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.397199s   0ms DEBUG Paths for id
                          ├─   0.397210s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                          ├─   0.397219s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.397232s   0ms DEBUG path Product/c -(id)- ID/c is valid
                          ├─   0.397240s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                        ┌─┘
                        ├─   0.397259s   0ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                            ├─   0.397291s   0ms DEBUG Building root query tree node: Product/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.397309s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.397339s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", current_cost=3005}
                          ├─   0.397396s   0ms DEBUG checking edge Product/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b", edge="id"}
                            ├─   0.397420s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.397441s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                          ├─   0.397451s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }])
                        ┌─┘
                        ├─   0.397471s   0ms DEBUG Found 1 direct paths to Product/c -(🔑🧩{id})- Product/b
                        ├─   0.397482s   0ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
                        ├─   0.397490s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                        ├─   0.397500s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.397508s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }])
                      ┌─┘
                      ├─   0.397529s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                    ┌─┘
                    ├─   0.397548s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(5)" }], [])))
                  ┌─┘
                  ├─   0.397566s   0ms DEBUG Paths for id
                  ├─   0.397576s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
                  ├─   0.397586s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.397594s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.397605s   0ms DEBUG path Product/c -(id)- ID/c is valid
                  ├─   0.397612s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
                ├─   0.397628s   3ms DEBUG Advancing path to Product/c -(🔑🧩{id})- Product/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/c"}
                  └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=1}
                    ├─   0.397655s   0ms DEBUG Building root query tree node: Product/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.397671s   0ms DEBUG Processing edge: Product/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.397695s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/a", current_cost=3005}
                  ├─   0.397745s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.397760s   3ms DEBUG No direct paths found
                ├─   0.397771s   3ms DEBUG going deeper
                ├─   0.397781s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                ├─   0.397788s   3ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                ├─   0.397796s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                ├─   0.397804s   3ms DEBUG Ignoring. Already visited similar edge
                ├─   0.397811s   3ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                ├─   0.397817s   3ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                ├─   0.397828s   3ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.397834s   3ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }])
              ┌─┘
              ├─   0.397853s   3ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }], [])))
            ┌─┘
            ├─   0.397869s   3ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(24) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.397883s   3ms DEBUG Paths for isExpensive
          ├─   0.397894s   3ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(🔑🧩{id})- Product/b -(isExpensive🧩{price})- Boolean/b is valid
          ├─   0.397900s   3ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.397911s   3ms DEBUG path Product/c -(🔑🧩{id})- Product/b -(isExpensive🧩{price})- Boolean/b is valid
          ├─   0.397918s   3ms INFO return=Ok(Some([ { cost: 1005, egdes: "EdgeIndex(24) --> EdgeIndex(6)" }]))
        ┌─┘
        ├─   0.397935s   3ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(skip🧩{isExpensive})- Boolean/c
        └─┐from_path{path= { cost: 1005, egdes: "EdgeIndex(24) --> EdgeIndex(6)" }, root_node="Product/c"}
          └─┐create_root_for_path_sequences{root_node="Product/c", segments_count=2}
            ├─   0.397960s   0ms DEBUG Building root query tree node: Product/c
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.397975s   0ms DEBUG Processing edge: Product/c -(🔑🧩{id})- Product/b
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.397990s   0ms DEBUG Processing edge: Product/b -(isExpensive🧩{price})- Boolean/b
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.398011s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.398024s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.398087s   4ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(8)" }])
      ┌─┘
      ├─   0.398109s   5ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/c
      ├─   0.398121s   5ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.398144s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.398177s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.398195s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.398212s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.398221s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.398250s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.398269s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.398304s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.398323s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.398343s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.398352s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.398402s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.398416s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.398424s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.398431s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.398439s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.398446s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.398455s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.398462s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.398480s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.398504s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.398520s   0ms DEBUG Paths for id
                ├─   0.398529s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.398536s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.398548s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.398554s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.398571s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.398599s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.398615s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.398638s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.398701s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.398721s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.398739s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.398749s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.398766s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/c
              ├─   0.398775s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.398782s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.398789s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.398796s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.398805s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.398811s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.398828s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.398844s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.398859s   0ms DEBUG Paths for id
        ├─   0.398868s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.398876s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.398883s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.398894s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.398899s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.398913s   5ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.398937s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.398950s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.398970s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "skip", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: Some("bool"), include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.399012s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.399025s   5ms DEBUG No direct paths found
      ├─   0.399032s   5ms DEBUG going deeper
      ├─   0.399040s   5ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.399046s   5ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.399052s   5ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      ├─   0.399059s   5ms DEBUG Ignoring. Already visited similar edge
      ├─   0.399064s   5ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.399070s   5ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.399076s   5ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.399081s   5ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.399089s   5ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.399096s   6ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.399112s   6ms DEBUG Indirect paths found: 1
    ├─   0.399122s   6ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="price", leaf=true}
  ├─   0.399152s   0ms DEBUG Trying to advance to: price through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.399178s   0ms DEBUG checking edge Product/a -(price)- Float/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="price"}
        ├─   0.399194s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.399208s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(price)- Float/a
      ├─   0.399216s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.399230s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.399248s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.399264s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.399295s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.399312s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.399329s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.399337s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.399397s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              ├─   0.399406s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.399413s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.399434s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.399484s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.399513s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.399549s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.399563s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.399620s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.399630s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.399638s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.399645s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.399653s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.399660s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.399669s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.399677s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.399695s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.399713s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.399729s   0ms DEBUG Paths for id
                ├─   0.399738s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.399745s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.399757s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.399763s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.399779s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.399806s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.399822s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.399845s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.399893s   0ms DEBUG checking edge Product/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
                  ├─   0.399913s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.399931s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                ├─   0.399941s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
              ┌─┘
              ├─   0.399958s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
              ├─   0.399967s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.399974s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.399982s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.399989s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }])
            ┌─┘
            ├─   0.400005s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
          ┌─┘
          ├─   0.400021s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(18) --> EdgeIndex(5)" }], [])))
        ┌─┘
        ├─   0.400036s   0ms DEBUG Paths for id
        ├─   0.400046s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.400054s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b -(id)- ID/b is valid
        ├─   0.400060s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.400070s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.400075s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.400089s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.400113s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.400127s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.400147s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
        ├─   0.400190s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.400202s   0ms DEBUG No direct paths found
      ├─   0.400232s   0ms DEBUG going deeper
      ├─   0.400243s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.400266s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.400298s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.400317s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.400336s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.400345s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.400403s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.400425s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.400477s   0ms DEBUG checking edge Product/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                        ├─   0.400505s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.400528s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
                      ├─   0.400550s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
                      ├─   0.400598s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/c
                      ├─   0.400607s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.400616s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
                      ├─   0.400624s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.400633s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
                      ├─   0.400641s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.400650s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.400657s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.400675s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                  ┌─┘
                  ├─   0.400710s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" }], [])))
                ┌─┘
                ├─   0.400731s   0ms DEBUG Paths for id
                ├─   0.400742s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
                ├─   0.400749s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.400761s   0ms DEBUG path Product/a -(id)- ID/a is valid
                ├─   0.400779s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
              ┌─┘
              ├─   0.400805s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
                └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                  ├─   0.400835s   0ms DEBUG Building root query tree node: Product/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.400851s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.400876s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", current_cost=2003}
                ├─   0.400929s   0ms DEBUG checking edge Product/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c", edge="id"}
                  ├─   0.400949s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.400967s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c with edge Product/c -(id)- ID/c
                ├─   0.400978s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.400995s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/c
              ├─   0.401005s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.401012s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.401019s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.401026s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.401034s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.401041s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.401059s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.401075s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(2)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.401090s   0ms DEBUG Paths for id
        ├─   0.401098s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.401106s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/c -(id)- ID/c is valid
        ├─   0.401113s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.401123s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.401144s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.401168s   1ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.401195s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.401211s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.401233s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.401291s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.401311s   2ms DEBUG No direct paths found
      ├─   0.401320s   2ms DEBUG going deeper
      ├─   0.401329s   2ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.401335s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.401341s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/c
      ├─   0.401348s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.401354s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.401360s   2ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.401366s   2ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.401371s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.401379s   2ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/c
      ├─   0.401384s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.401390s   2ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/b
      ├─   0.401396s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.401402s   2ms DEBUG Exploring edge Product/c -(🔑🧩{id})- Product/a
      ├─   0.401407s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.401414s   2ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.401420s   2ms INFO return=Ok([])
    ┌─┘
    ├─   0.401432s   2ms DEBUG Indirect paths found: 0
    ├─   0.401445s   2ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(19) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.401495s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.401508s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.401520s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.401532s   0ms DEBUG Processing edge: Product/a -(🔑🧩{id})- Product/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.401545s   0ms DEBUG Processing edge: Product/c -(skip🧩{isExpensive})- Boolean/c
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.401565s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.401576s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.401587s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.401598s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(14) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.401631s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.401643s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.401654s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.401666s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.401686s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.401697s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.401709s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="product", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.401828s   0ms DEBUG adding output field 'product' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/a -(🔑🧩{id})- Product/c", parent_fetch_step_index=1}
              ├─   0.401867s   0ms DEBUG created a new fetch step [2] subgraph(c) type(Product) requirement() key({id}) in children of 1
              ├─   0.401875s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.401883s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.401893s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path="product"}
                      ├─   0.401951s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.401975s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/c"}
                    └─┐can_satisfy_edge{path="Product/c", edge="id"}
                      ├─   0.402094s   0ms DEBUG checking requirements {id} for edge 'Product/c -(🔑🧩{id})- Product/c'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/c", current_cost=0}
                            ├─   0.402133s   0ms DEBUG checking edge Product/c -(id)- ID/c
                            └─┐can_satisfy_edge{path="Product/c", edge="id"}
                              ├─   0.402177s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.402200s   0ms DEBUG Advancing path Product/c with edge Product/c -(id)- ID/c
                            ├─   0.402213s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(10)" }])
                          ┌─┘
                          ├─   0.402235s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                        ┌─┘
                        ├─   0.402253s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                      ┌─┘
                      ├─   0.402269s   0ms DEBUG Paths for id
                      ├─   0.402279s   0ms DEBUG   Path Product/c -(id)- ID/c is valid
                      ├─   0.402286s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.402298s   0ms DEBUG path Product/c -(id)- ID/c is valid
                      ├─   0.402306s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.402351s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.402362s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.402373s   0ms DEBUG created a new fetch step [3] subgraph(c) type(Product) requirement({isExpensive}) in children of 1
                  ├─   0.402394s   0ms DEBUG Adding {isExpensive} to fetch([3]).input
                  ├─   0.402405s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.402413s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.402429s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.402465s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/c -(🔑🧩{id})- Product/b", parent_fetch_step_index=4}
                        ├─   0.402506s   0ms DEBUG created a new fetch step [5] subgraph(b) type(Product) requirement() key({id}) in children of 4
                        ├─   0.402514s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                        ├─   0.402522s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.402530s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                ├─   0.402608s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.402641s   0ms DEBUG adding output field 'id' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_requires_field_edge{parent_fetch_step_index=5}
                            └─┐find_satisfiable_key{node="Product/b"}
                              └─┐can_satisfy_edge{path="Product/b", edge="id"}
                                ├─   0.402830s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/c'
                                └─┐validate_field_requirement{}
                                  └─┐validate_field_requirement{}
                                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/b", current_cost=0}
                                      ├─   0.402885s   0ms DEBUG checking edge Product/b -(id)- ID/b
                                      └─┐can_satisfy_edge{path="Product/b", edge="id"}
                                        ├─   0.402919s   0ms INFO return=Ok(Some([]))
                                      ┌─┘
                                      ├─   0.402943s   0ms DEBUG Advancing path Product/b with edge Product/b -(id)- ID/b
                                      ├─   0.402956s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(5)" }])
                                    ┌─┘
                                    ├─   0.402981s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(5)" }], [])))
                                  ┌─┘
                                  ├─   0.403001s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(5)" }], [])))
                                ┌─┘
                                ├─   0.403036s   0ms DEBUG Paths for id
                                ├─   0.403053s   0ms DEBUG   Path Product/b -(id)- ID/b is valid
                                ├─   0.403062s   0ms DEBUG Found 1 best paths for this leaf requirement
                                ├─   0.403075s   0ms DEBUG path Product/b -(id)- ID/b is valid
                                ├─   0.403084s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(5)" }]))
                              ┌─┘
                            ┌─┘
                            ├─   0.403131s   0ms DEBUG Key to re-enter: {id}
                            ├─   0.403143s   0ms DEBUG Creating a fetch step for children of @requires
                            ├─   0.403154s   0ms DEBUG created a new fetch step [6] subgraph(b) type(Product) requirement({price}) in children of 4
                            ├─   0.403164s   0ms DEBUG Adding {price} to fetch([6]).input
                            ├─   0.403173s   0ms DEBUG Adding {id} to fetch([6]).input
                            ├─   0.403183s   0ms DEBUG Creating a fetch step for requirement of @requires
                            ├─   0.403191s   0ms DEBUG Adding {id} to fetch([7]).input
                            └─┐connect{parent=4, child=7}
                            ┌─┘
                            ├─   0.403239s   0ms DEBUG Processing requirements
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7}
                                └─┐process_entity_move_edge{edge="Product/b -(🔑🧩{id})- Product/a", parent_fetch_step_index=7}
                                  ├─   0.403294s   0ms DEBUG created a new fetch step [8] subgraph(a) type(Product) requirement() key({id}) in children of 7
                                  ├─   0.403303s   0ms DEBUG adding input requirement '{id}' to fetch step [8]
                                  ├─   0.403313s   0ms DEBUG adding __typename field to output for type 'Product'
                                  ├─   0.403322s   0ms DEBUG connecting fetch step to parent [7] -> [8]
                                  └─┐connect{parent=7, child=8}
                                  ┌─┘
                                  └─┐process_requirements_for_fetch_steps{count=1}
                                    └─┐process_noop_edge{}
                                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                        └─┐process_plain_field_edge{parent_fetch_step_index=7, requiring_fetch_step_index=8, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                          ├─   0.403405s   0ms DEBUG connecting parent fetch step [7] to requiring fetch step [8]
                                          └─┐connect{parent=7, child=8}
                                          ┌─┘
                                          ├─   0.403438s   0ms DEBUG adding output field 'id' to fetch step [7]
                                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                          ┌─┘
                                        ┌─┘
                                      ┌─┘
                                    ┌─┘
                                    └─┐connect{parent=7, child=8}
                                    ┌─┘
                                  ┌─┘
                                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=8}
                                    └─┐process_plain_field_edge{parent_fetch_step_index=8, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path=""}
                                      ├─   0.403556s   0ms DEBUG adding output field 'price' to fetch step [8]
                                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=8}
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            ├─   0.403636s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                            └─┐connect{parent=8, child=6}
                            ┌─┘
                            ├─   0.403663s   0ms DEBUG Processing children
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.403726s   1ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=6, child=3}
                  ┌─┘
                  ├─   0.403750s   1ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path="product"}
              ├─   0.403804s   0ms DEBUG adding output field 'price' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.403888s   2ms DEBUG Done
├─   0.403899s   2ms DEBUG found roots
├─   0.403904s   2ms DEBUG print graph
├─   0.403909s   2ms DEBUG Nodes:
│ [1] Query/a {} → {product{__typename id price}} at $.
│ [2] Product/c {__typename id} → {} at $.product
│ [3] Product/c {__typename isExpensive id} → {skip} at $.product
│ [4] Product/c {__typename id} → {__typename id} at $.product
│ [5] Product/b {__typename id} → {} at $.product
│ [6] Product/b {__typename price id} → {isExpensive} at $.product
│ [7] Product/b {__typename id} → {__typename id} at $.product
│ [8] Product/a {__typename id} → {price} at $.product
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│     [7]
│       [8]
│         [6]
│           [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.403971s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.403988s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=7}
      ┌─┘
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
    ├─   0.404038s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [7]
    └─┐perform_passthrough_child_merge{}
      ├─   0.404050s   0ms DEBUG merging fetch steps [1] and [7]
      └─┐connect{parent=1, child=8}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.404104s   0ms DEBUG optimization found: merge parent [1] with child [8]
    └─┐perform_fetch_step_merge{}
      ├─   0.404123s   0ms DEBUG merging fetch steps [1] and [8]
      └─┐connect{parent=1, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.404170s   0ms DEBUG Found optimization: 6 <- 5
    └─┐perform_fetch_step_merge{}
      ├─   0.404184s   0ms DEBUG merging fetch steps [6] and [5]
      └─┐connect{parent=1, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.404223s   0ms DEBUG optimization found: remove 'Product/c {__typename id} → {} at $.product'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.404644s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.406442s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(699.99)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.406874s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.408143s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(699.99), "isExpensive": Bool(true)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Bool(true)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.408527s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.410211s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.410507s DEBUG execution result: ExecutionResult { data: Some(Object {"product": Object {"price": Number(699.99), "skip": Bool(true)}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{product{__typename id price}}")}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{isExpensive}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{skip}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("isExpensive")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
