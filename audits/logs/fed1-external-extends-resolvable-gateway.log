generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.11s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Product"}
    └─┐build_fields{fields_count=5}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006398s   0ms DEBUG Building graph for supergraph with 14 definitions
  └─┐build_root_nodes{}
    ├─   0.006439s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006492s   0ms INFO [x] Creating owned field move edge 'Product.__typename/A' (type: String)
    ├─   0.006506s   0ms INFO [ ] Field 'Product.upc/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006529s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.006542s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.006550s   0ms INFO [x] Creating field move edge 'Product.name/A' (type: String)
    ├─   0.006556s   0ms INFO [x] Creating field move edge 'Product.name/A' (type: String)
    ├─   0.006563s   0ms INFO [ ] Field 'Product.price/A' does is not available in the subgraph, skipping edge creation (type: Float)
    ├─   0.006568s   0ms INFO [x] Creating field move edge 'Product.pid/A' (type: ID)
    ├─   0.006576s   0ms INFO [x] Creating field move edge 'Product.pid/A' (type: ID)
    ├─   0.006582s   0ms INFO [x] Creating owned field move edge 'Product.__typename/B' (type: String)
    ├─   0.006592s   0ms INFO [x] Creating field move edge 'Product.upc/B' (type: String)
    ├─   0.006609s   0ms INFO [x] Creating field move edge 'Product.upc/B' (type: String)
    ├─   0.006619s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.006626s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.006643s   0ms INFO [x] Creating field move edge 'Product.name/B' (type: String)
    ├─   0.006653s   0ms INFO [x] Creating field move edge 'Product.name/B' (type: String)
    ├─   0.006659s   0ms INFO [x] Creating field move edge 'Product.price/B' (type: Float)
    ├─   0.006665s   0ms INFO [x] Creating field move edge 'Product.price/B' (type: Float)
    ├─   0.006671s   0ms INFO [ ] Field 'Product.pid/B' does is not available in the subgraph, skipping edge creation (type: ID)
    ├─   0.006677s   0ms INFO [x] Creating owned field move edge 'Product.__typename/B' (type: String)
    ├─   0.006684s   0ms INFO [x] Creating field move edge 'Product.upc/B' (type: String)
    ├─   0.006690s   0ms INFO [x] Creating field move edge 'Product.upc/B' (type: String)
    ├─   0.006696s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.006702s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.006707s   0ms INFO [x] Creating field move edge 'Product.name/B' (type: String)
    ├─   0.006713s   0ms INFO [x] Creating field move edge 'Product.name/B' (type: String)
    ├─   0.006719s   0ms INFO [x] Creating field move edge 'Product.price/B' (type: Float)
    ├─   0.006724s   0ms INFO [x] Creating field move edge 'Product.price/B' (type: Float)
    ├─   0.006730s   0ms INFO [ ] Field 'Product.pid/B' does is not available in the subgraph, skipping edge creation (type: ID)
    ├─   0.006735s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006742s   0ms INFO [ ] Field 'Query.productInB/A' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006747s   0ms INFO [x] Creating field move edge 'Query.productInA/A' (type: Product)
    ├─   0.006753s   0ms INFO [x] Creating field move edge 'Query.productInA/A' (type: Product)
    ├─   0.006759s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006766s   0ms INFO [x] Creating field move edge 'Query.productInB/B' (type: Product)
    ├─   0.006772s   0ms INFO [x] Creating field move edge 'Query.productInB/B' (type: Product)
    ├─   0.006788s   0ms INFO [ ] Field 'Query.productInA/B' does is not available in the subgraph, skipping edge creation (type: Product)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006931s   0ms INFO Creating self-referencing entity move edge in 'Product/A' via key 'id'
    ├─   0.007011s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/B' via key 'id name'
    ├─   0.007053s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/B' via key 'upc'
    ├─   0.007121s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/A' via key 'id'
    ├─   0.007195s   0ms INFO Creating self-referencing entity move edge in 'Product/B' via key 'id name'
    ├─   0.007238s   0ms INFO Creating self-referencing entity move edge in 'Product/B' via key 'id name'
    ├─   0.007306s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/A' via key 'id'
    ├─   0.007375s   0ms INFO Creating self-referencing entity move edge in 'Product/B' via key 'upc'
    ├─   0.007415s   0ms INFO Creating self-referencing entity move edge in 'Product/B' via key 'upc'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.066076s INFO Starting server on http://localhost:4000
   0.067135s INFO starting 16 workers
   0.067175s INFO Actix runtime found; starting in Actix runtime
   0.067183s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.275950s DEBUG original document: query ping {
  __typename
}

   0.276077s DEBUG normalized document: query ping {__typename}

   0.276101s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.276534s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.354958s DEBUG original document: query {
  productInA {
    id
    pid
    price
    upc
    name
  }
}

   0.355080s DEBUG normalized document: query{productInA{id pid price upc name}}

   0.355095s DEBUG executable operation: query{productInA{id pid price upc name}}
┐walk_operation{}
├─   0.355499s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="productInA", leaf=false}
  ├─   0.355556s   0ms DEBUG Trying to advance to: productInA{id pid price upc name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "productInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "pid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.355618s   0ms DEBUG checking edge Query/a -(productInA)- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="productInA"}
        ├─   0.355643s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.355670s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(productInA)- Product/a
      ├─   0.355687s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.355703s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "productInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "pid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.355734s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.355757s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.355776s   0ms DEBUG Indirect paths found: 0
    ├─   0.355786s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "productInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "pid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.355839s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.355854s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "productInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "pid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.355876s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.355882s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.355893s   0ms DEBUG Indirect paths found: 0
    ├─   0.355902s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.355922s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.355944s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(productInA)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
      ├─   0.355970s   0ms DEBUG checking edge Product/a -(name)- String/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="name"}
        ├─   0.355986s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.356001s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a with edge Product/a -(name)- String/a
      ├─   0.356009s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.356024s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
      ├─   0.356045s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="upc"}
        ├─   0.356065s   0ms DEBUG checking requirements {upc} for edge 'Product/a -(🔑🧩{upc})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.356102s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.356133s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.356142s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.356151s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.356157s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.356165s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.356172s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.356179s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.356185s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.356202s   0ms INFO return=Ok(None)
          ┌─┘
          ├─   0.356214s   0ms INFO return=Ok(None)
        ┌─┘
        ├─   0.356228s   0ms INFO return=Ok(None)
      ┌─┘
      ├─   0.356239s   0ms DEBUG Requirements not satisfied, continue look up...
      ├─   0.356246s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="id name"}
        ├─   0.356265s   0ms DEBUG checking requirements {id name} for edge 'Product/a -(🔑🧩{id name})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.356296s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="id"}
                ├─   0.356313s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.356329s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.356360s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.356402s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.356409s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.356416s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.356422s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.356429s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.356435s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.356442s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.356448s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.356464s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.356479s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.356495s   0ms DEBUG Paths for id
        ├─   0.356503s   0ms DEBUG   Path root(Query) -(a)- Query/a -(productInA)- Product/a -(id)- ID/a is valid
        ├─   0.356510s   0ms DEBUG Found 1 best paths for this leaf requirement
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.356551s   0ms DEBUG checking edge Product/a -(name)- String/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="name"}
                ├─   0.356569s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.356586s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a with edge Product/a -(name)- String/a
              ├─   0.356594s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.356622s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.356629s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.356639s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.356645s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.356652s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.356658s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.356666s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.356672s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.356687s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.356702s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.356715s   0ms DEBUG Paths for name
        ├─   0.356723s   0ms DEBUG   Path root(Query) -(a)- Query/a -(productInA)- Product/a -(name)- String/a is valid
        ├─   0.356729s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.356740s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.356746s   0ms DEBUG path Product/a -(name)- String/a is valid
        ├─   0.356752s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" },  { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.356767s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id name})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.356796s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.356811s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.356833s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.356873s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.356885s   0ms DEBUG Processing edge: Product/a -(name)- String/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.356907s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐merge_trees{tree_count=2}
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a -(🔑🧩{id name})- Product/b", current_cost=2004}
        ├─   0.356966s   0ms DEBUG checking edge Product/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a -(🔑🧩{id name})- Product/b", edge="name"}
          ├─   0.356986s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.357002s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a -(🔑🧩{id name})- Product/b with edge Product/b -(name)- String/b
        ├─   0.357011s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(16) --> EdgeIndex(9)" }])
      ┌─┘
      ├─   0.357027s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id name})- Product/b
      ├─   0.357036s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.357041s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.357049s   1ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.357054s   1ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(16) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.357068s   1ms DEBUG Indirect paths found: 1
    ├─   0.357077s   1ms DEBUG advanced: root(Query) -(a)- Query/a -(productInA)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="upc", leaf=true}
  ├─   0.357104s   0ms DEBUG Trying to advance to: upc through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(productInA)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
      ├─   0.357128s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.357139s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
      ├─   0.357156s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="upc"}
        ├─   0.357172s   0ms DEBUG checking requirements {upc} for edge 'Product/a -(🔑🧩{upc})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.357203s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.357229s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.357238s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.357245s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.357251s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.357257s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.357263s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.357270s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.357276s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.357291s   0ms INFO return=Ok(None)
          ┌─┘
          ├─   0.357303s   0ms INFO return=Ok(None)
        ┌─┘
        ├─   0.357315s   0ms INFO return=Ok(None)
      ┌─┘
      ├─   0.357326s   0ms DEBUG Requirements not satisfied, continue look up...
      ├─   0.357332s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="id name"}
        ├─   0.357350s   0ms DEBUG checking requirements {id name} for edge 'Product/a -(🔑🧩{id name})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.357380s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="id"}
                ├─   0.357397s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.357413s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.357422s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.357450s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.357457s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.357465s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.357471s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.357477s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.357483s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.357490s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.357496s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.357512s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.357527s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.357541s   0ms DEBUG Paths for id
        ├─   0.357549s   0ms DEBUG   Path root(Query) -(a)- Query/a -(productInA)- Product/a -(id)- ID/a is valid
        ├─   0.357555s   0ms DEBUG Found 1 best paths for this leaf requirement
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.357590s   0ms DEBUG checking edge Product/a -(name)- String/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="name"}
                ├─   0.357607s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.357623s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a with edge Product/a -(name)- String/a
              ├─   0.357632s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.357660s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.357667s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.357674s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.357680s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.357687s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.357693s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.357699s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.357705s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.357719s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.357734s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.357747s   0ms DEBUG Paths for name
        ├─   0.357755s   0ms DEBUG   Path root(Query) -(a)- Query/a -(productInA)- Product/a -(name)- String/a is valid
        ├─   0.357761s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.357770s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.357777s   0ms DEBUG path Product/a -(name)- String/a is valid
        ├─   0.357782s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" },  { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.357796s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id name})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.357820s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.357833s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.357855s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.357894s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.357907s   0ms DEBUG Processing edge: Product/a -(name)- String/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.357927s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐merge_trees{tree_count=2}
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a -(🔑🧩{id name})- Product/b", current_cost=2004}
        ├─   0.357984s   0ms DEBUG checking edge Product/b -(upc)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a -(🔑🧩{id name})- Product/b", edge="upc"}
          ├─   0.358001s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.358017s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a -(🔑🧩{id name})- Product/b with edge Product/b -(upc)- String/b
        ├─   0.358025s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(16) --> EdgeIndex(7)" }])
      ┌─┘
      ├─   0.358040s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id name})- Product/b
      ├─   0.358048s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.358053s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.358060s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.358065s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(16) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.358079s   0ms DEBUG Indirect paths found: 1
    ├─   0.358086s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(productInA)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="price", leaf=true}
  ├─   0.358111s   0ms DEBUG Trying to advance to: price through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(productInA)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
      ├─   0.358135s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.358146s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
      ├─   0.358162s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="upc"}
        ├─   0.358179s   0ms DEBUG checking requirements {upc} for edge 'Product/a -(🔑🧩{upc})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.358208s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.358234s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.358241s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.358248s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.358254s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.358260s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.358266s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.358273s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.358279s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.358293s   0ms INFO return=Ok(None)
          ┌─┘
          ├─   0.358305s   0ms INFO return=Ok(None)
        ┌─┘
        ├─   0.358317s   0ms INFO return=Ok(None)
      ┌─┘
      ├─   0.358328s   0ms DEBUG Requirements not satisfied, continue look up...
      ├─   0.358334s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="id name"}
        ├─   0.358352s   0ms DEBUG checking requirements {id name} for edge 'Product/a -(🔑🧩{id name})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.358382s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="id"}
                ├─   0.358402s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.358443s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.358455s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.358490s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.358497s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.358504s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.358524s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.358532s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.358538s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.358546s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.358552s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.358571s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.358587s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.358601s   0ms DEBUG Paths for id
        ├─   0.358609s   0ms DEBUG   Path root(Query) -(a)- Query/a -(productInA)- Product/a -(id)- ID/a is valid
        ├─   0.358615s   0ms DEBUG Found 1 best paths for this leaf requirement
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.358655s   0ms DEBUG checking edge Product/a -(name)- String/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="name"}
                ├─   0.358673s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.358690s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a with edge Product/a -(name)- String/a
              ├─   0.358699s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.358728s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.358735s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.358741s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.358747s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.358754s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.358760s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.358767s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.358773s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.358787s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.358802s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.358815s   0ms DEBUG Paths for name
        ├─   0.358823s   0ms DEBUG   Path root(Query) -(a)- Query/a -(productInA)- Product/a -(name)- String/a is valid
        ├─   0.358829s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.358838s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.358844s   0ms DEBUG path Product/a -(name)- String/a is valid
        ├─   0.358850s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" },  { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.358864s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id name})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.358887s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.358901s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.358921s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.358983s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.358999s   0ms DEBUG Processing edge: Product/a -(name)- String/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.359021s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐merge_trees{tree_count=2}
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a -(🔑🧩{id name})- Product/b", current_cost=2004}
        ├─   0.359079s   0ms DEBUG checking edge Product/b -(price)- Float/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a -(🔑🧩{id name})- Product/b", edge="price"}
          ├─   0.359097s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.359114s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a -(🔑🧩{id name})- Product/b with edge Product/b -(price)- Float/b
        ├─   0.359122s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(16) --> EdgeIndex(10)" }])
      ┌─┘
      ├─   0.359138s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id name})- Product/b
      ├─   0.359147s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.359152s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.359160s   1ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.359165s   1ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(16) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.359178s   1ms DEBUG Indirect paths found: 1
    ├─   0.359185s   1ms DEBUG advanced: root(Query) -(a)- Query/a -(productInA)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="pid", leaf=true}
  ├─   0.359210s   0ms DEBUG Trying to advance to: pid through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(productInA)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
      ├─   0.359234s   0ms DEBUG checking edge Product/a -(pid)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="pid"}
        ├─   0.359249s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.359263s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a with edge Product/a -(pid)- ID/a
      ├─   0.359270s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(5)" }])
    ┌─┘
    ├─   0.359283s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
      ├─   0.359301s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="upc"}
        ├─   0.359317s   0ms DEBUG checking requirements {upc} for edge 'Product/a -(🔑🧩{upc})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.359347s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.359373s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.359380s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.359387s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.359393s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.359399s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.359405s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.359412s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.359418s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.359433s   0ms INFO return=Ok(None)
          ┌─┘
          ├─   0.359445s   0ms INFO return=Ok(None)
        ┌─┘
        ├─   0.359457s   0ms INFO return=Ok(None)
      ┌─┘
      ├─   0.359468s   0ms DEBUG Requirements not satisfied, continue look up...
      ├─   0.359474s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="id name"}
        ├─   0.359491s   0ms DEBUG checking requirements {id name} for edge 'Product/a -(🔑🧩{id name})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.359522s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="id"}
                ├─   0.359538s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.359554s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.359563s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.359590s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.359597s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.359604s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.359610s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.359616s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.359622s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.359629s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.359635s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.359649s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.359664s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.359677s   0ms DEBUG Paths for id
        ├─   0.359685s   0ms DEBUG   Path root(Query) -(a)- Query/a -(productInA)- Product/a -(id)- ID/a is valid
        ├─   0.359691s   0ms DEBUG Found 1 best paths for this leaf requirement
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.359725s   0ms DEBUG checking edge Product/a -(name)- String/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="name"}
                ├─   0.359743s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.359759s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a with edge Product/a -(name)- String/a
              ├─   0.359767s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.359800s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.359807s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.359814s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.359820s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.359827s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.359833s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.359839s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.359845s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.359860s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.359874s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.359887s   0ms DEBUG Paths for name
        ├─   0.359895s   0ms DEBUG   Path root(Query) -(a)- Query/a -(productInA)- Product/a -(name)- String/a is valid
        ├─   0.359901s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.359910s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.359917s   0ms DEBUG path Product/a -(name)- String/a is valid
        ├─   0.359922s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" },  { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.359937s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id name})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.359987s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.360003s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.360025s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.360083s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.360098s   0ms DEBUG Processing edge: Product/a -(name)- String/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.360136s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐merge_trees{tree_count=2}
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "pid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a -(🔑🧩{id name})- Product/b", current_cost=2004}
        ├─   0.360197s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.360212s   0ms DEBUG No direct paths found
      ├─   0.360223s   0ms DEBUG going deeper
      ├─   0.360231s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.360237s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.360243s   0ms DEBUG Exploring edge Product/b -(🔑🧩{upc})- Product/b
      ├─   0.360249s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.360256s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id name})- Product/b
      ├─   0.360261s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.360267s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.360272s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.360280s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.360286s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.360297s   1ms DEBUG Indirect paths found: 0
    ├─   0.360306s   1ms DEBUG advanced: root(Query) -(a)- Query/a -(productInA)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.360333s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(productInA)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
      ├─   0.360357s   0ms DEBUG checking edge Product/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="id"}
        ├─   0.360372s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.360387s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a with edge Product/a -(id)- ID/a
      ├─   0.360395s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.360408s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
      ├─   0.360428s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="upc"}
        ├─   0.360444s   0ms DEBUG checking requirements {upc} for edge 'Product/a -(🔑🧩{upc})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.360474s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.360501s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.360508s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.360515s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.360521s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.360528s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.360534s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.360564s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.360585s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.360604s   0ms INFO return=Ok(None)
          ┌─┘
          ├─   0.360616s   0ms INFO return=Ok(None)
        ┌─┘
        ├─   0.360628s   0ms INFO return=Ok(None)
      ┌─┘
      ├─   0.360639s   0ms DEBUG Requirements not satisfied, continue look up...
      ├─   0.360648s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="id name"}
        ├─   0.360673s   0ms DEBUG checking requirements {id name} for edge 'Product/a -(🔑🧩{id name})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.360730s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="id"}
                ├─   0.360750s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.360768s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.360785s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.360815s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.360822s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.360829s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.360835s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.360841s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.360848s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.360855s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.360861s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.360876s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.360892s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.360905s   0ms DEBUG Paths for id
        ├─   0.360923s   0ms DEBUG   Path root(Query) -(a)- Query/a -(productInA)- Product/a -(id)- ID/a is valid
        ├─   0.360938s   0ms DEBUG Found 1 best paths for this leaf requirement
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.360977s   0ms DEBUG checking edge Product/a -(name)- String/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a", edge="name"}
                ├─   0.360995s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.361014s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a with edge Product/a -(name)- String/a
              ├─   0.361023s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a", current_cost=1001}
              ├─   0.361054s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
              ├─   0.361061s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.361068s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id name})- Product/b
              ├─   0.361075s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.361082s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.361089s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.361098s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.361104s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.361119s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.361134s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.361152s   0ms DEBUG Paths for name
        ├─   0.361160s   0ms DEBUG   Path root(Query) -(a)- Query/a -(productInA)- Product/a -(name)- String/a is valid
        ├─   0.361166s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.361175s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.361181s   0ms DEBUG path Product/a -(name)- String/a is valid
        ├─   0.361187s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" },  { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.361201s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id name})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.361246s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.361273s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.361300s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.361344s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.361358s   0ms DEBUG Processing edge: Product/a -(name)- String/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.361377s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐merge_trees{tree_count=2}
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(productInA)- Product/a -(🔑🧩{id name})- Product/b", current_cost=2004}
        ├─   0.361448s   0ms DEBUG checking edge Product/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(productInA)- Product/a -(🔑🧩{id name})- Product/b", edge="id"}
          ├─   0.361475s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.361494s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(productInA)- Product/a -(🔑🧩{id name})- Product/b with edge Product/b -(id)- ID/b
        ├─   0.361503s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(16) --> EdgeIndex(8)" }])
      ┌─┘
      ├─   0.361525s   1ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id name})- Product/b
      ├─   0.361534s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.361539s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.361547s   1ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.361552s   1ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(16) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.361565s   1ms DEBUG Indirect paths found: 1
    ├─   0.361574s   1ms DEBUG advanced: root(Query) -(a)- Query/a -(productInA)- Product/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(4)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.361616s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.361628s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.361639s   0ms DEBUG Processing edge: Query/a -(productInA)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.361651s   0ms DEBUG Processing edge: Product/a -(name)- String/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.361669s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.361681s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.361691s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(16) --> EdgeIndex(7)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.361725s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.361738s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.361751s   0ms DEBUG Processing edge: Query/a -(productInA)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.361763s   0ms DEBUG Processing edge: Product/a -(🔑🧩{id name})- Product/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.361775s   0ms DEBUG Processing edge: Product/b -(upc)- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.361801s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.361813s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.361823s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.361833s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(16) --> EdgeIndex(10)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.361865s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.361876s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.361888s   0ms DEBUG Processing edge: Query/a -(productInA)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.361899s   0ms DEBUG Processing edge: Product/a -(🔑🧩{id name})- Product/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.361911s   0ms DEBUG Processing edge: Product/b -(price)- Float/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.361933s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.361944s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.361954s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.361965s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(5)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.361997s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.362008s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.362020s   0ms DEBUG Processing edge: Query/a -(productInA)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.362032s   0ms DEBUG Processing edge: Product/a -(pid)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.362050s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.362061s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.362071s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(12) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.362107s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.362118s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.362129s   0ms DEBUG Processing edge: Query/a -(productInA)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.362141s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.362158s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.362170s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.362180s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=5}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="productInA", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.362376s   0ms DEBUG adding output field 'productInA' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=4, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="name", leaf=true, list=false, response_path="productInA", fetch_path="productInA"}
              ├─   0.362428s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_entity_move_edge{edge="Product/a -(🔑🧩{id name})- Product/b", parent_fetch_step_index=1}
              ├─   0.362489s   0ms DEBUG created a new fetch step [2] subgraph(b) type(Product) requirement() key({id name}) in children of 1
              ├─   0.362497s   0ms DEBUG adding input requirement '{id name}' to fetch step [2]
              ├─   0.362506s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.362514s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="productInA", fetch_path="productInA"}
                      ├─   0.362572s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.362615s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="name", leaf=true, list=false, response_path="productInA", fetch_path="productInA"}
                      ├─   0.362670s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.362695s   0ms DEBUG adding output field 'name' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Product", field="upc", leaf=true, list=false, response_path="productInA", fetch_path=""}
                  ├─   0.362801s   0ms DEBUG adding output field 'upc' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Product", field="price", leaf=true, list=false, response_path="productInA", fetch_path=""}
                  ├─   0.362845s   0ms DEBUG adding output field 'price' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="pid", leaf=true, list=false, response_path="productInA", fetch_path="productInA"}
              ├─   0.362934s   0ms DEBUG adding output field 'pid' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="id", leaf=true, list=false, response_path="productInA", fetch_path="productInA"}
              ├─   0.362987s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.363060s   0ms DEBUG Done
├─   0.363068s   0ms DEBUG found roots
├─   0.363073s   0ms DEBUG print graph
├─   0.363078s   0ms DEBUG Nodes:
│ [1] Query/a {} → {productInA{__typename name id pid}} at $.
│ [2] Product/b {__typename id name} → {upc price} at $.productInA
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.363608s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.363988s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.364361s   1ms DEBUG connected to 127.0.0.1:4200
        ├─   0.368050s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"productInA": Object {"__typename": String("Product"), "name": String("p1-name"), "id": String("p1"), "pid": String("p1-pid")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "name": String("p1-name"), "id": String("p1"), "pid": String("p1-pid")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "name": String("p1-name"), "id": String("p1"), "pid": String("p1-pid")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "name": String("p1-name"), "id": String("p1"), "pid": String("p1-pid")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1-name")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.368544s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.371758s   3ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.371993s DEBUG execution result: ExecutionResult { data: Some(Object {"productInA": Object {"id": String("p1"), "pid": String("p1-pid"), "price": Number(12.3), "upc": String("upc1"), "name": String("p1-name")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{productInA{__typename name id pid}}")}, Object {"kind": String("Flatten"), "path": Array [String("productInA")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{upc price}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}, Object {"kind": String("Field"), "name": String("name")}]}]}}]}}}) }
