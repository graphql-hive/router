generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.12s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="User"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006413s   0ms DEBUG Building graph for supergraph with 14 definitions
  └─┐build_root_nodes{}
    ├─   0.006456s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006509s   0ms INFO [x] Creating owned field move edge 'User.__typename/A' (type: String)
    ├─   0.006523s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006531s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006537s   0ms INFO [x] Creating field move edge 'User.rid/A' (type: ID)
    ├─   0.006543s   0ms INFO [x] Creating field move edge 'User.rid/A' (type: ID)
    ├─   0.006551s   0ms INFO [ ] Field 'User.name/A' is external, skipping edge creation
    ├─   0.006557s   0ms INFO [ ] Field 'User.nickname/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006562s   0ms INFO [x] Creating owned field move edge 'User.__typename/B' (type: String)
    ├─   0.006571s   0ms INFO [x] Creating field move edge 'User.id/B' (type: ID)
    ├─   0.006577s   0ms INFO [x] Creating field move edge 'User.id/B' (type: ID)
    ├─   0.006583s   0ms INFO [ ] Field 'User.rid/B' does is not available in the subgraph, skipping edge creation (type: ID)
    ├─   0.006588s   0ms INFO [x] Creating field move edge 'User.name/B' (type: String)
    ├─   0.006593s   0ms INFO [x] Creating field move edge 'User.name/B' (type: String)
    ├─   0.006599s   0ms INFO [x] Creating field move edge 'User.nickname/B' (type: String)
    ├─   0.006605s   0ms INFO [x] Creating field move edge 'User.nickname/B' (type: String)
    ├─   0.006611s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006618s   0ms INFO [x] Creating field move edge 'Query.providedRandomUser/A' (type: User)
    ├─   0.006624s   0ms INFO [x] Creating field move edge 'Query.providedRandomUser/A' (type: User)
    ├─   0.006630s   0ms INFO [x] Creating field move edge 'Query.randomUser/A' (type: User)
    ├─   0.006636s   0ms INFO [x] Creating field move edge 'Query.randomUser/A' (type: User)
    ├─   0.006642s   0ms INFO [ ] Field 'Query.userById/A' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006646s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006653s   0ms INFO [ ] Field 'Query.providedRandomUser/B' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006658s   0ms INFO [ ] Field 'Query.randomUser/B' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006663s   0ms INFO [x] Creating field move edge 'Query.userById/B' (type: User)
    ├─   0.006669s   0ms INFO [x] Creating field move edge 'Query.userById/B' (type: User)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006775s   0ms INFO Creating self-referencing entity move edge in 'User/A' via key 'id'
    ├─   0.006818s   0ms INFO Creating entity move edge from 'User/A' to 'User/B' via key 'id'
    ├─   0.006854s   0ms INFO Creating entity move edge from 'User/B' to 'User/A' via key 'id'
    ├─   0.006889s   0ms INFO Creating self-referencing entity move edge in 'User/B' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
    ├─   0.006959s   0ms INFO Creating viewed (#1) link for provided field 'Query.providedRandomUser/"A"' (type: User)
    └─┐handle_viewed_selection_set{graph_id="A", view_id=1, parent_type_name="User"}
      ├─   0.006988s   0ms INFO Upserting graph viewed node for 'String.A'
      ├─   0.006995s   0ms INFO Creating viewed (#1) field edge for 'User.name' (type: String)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.064872s INFO Starting server on http://localhost:4000
   0.065890s INFO starting 16 workers
   0.065929s INFO Actix runtime found; starting in Actix runtime
   0.065937s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.273585s DEBUG original document: query ping {
  __typename
}

   0.273693s DEBUG normalized document: query ping {__typename}

   0.273721s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.274129s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.354086s DEBUG original document: query {
  randomUser {
    id
    name
  }
  userById(id: "u2") {
    id
    name
    nickname
  }
}

   0.354227s DEBUG normalized document: query{randomUser{id name} userById(id: "u2"){id name nickname}}

   0.354250s DEBUG executable operation: query{randomUser{id name} userById(id: "u2"){id name nickname}}
┐walk_operation{}
├─   0.354686s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="userById", leaf=false}
  ├─   0.354746s   0ms DEBUG Trying to advance to: userById(id: "u2"){id name nickname} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.354809s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.354833s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.354862s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.354868s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.354880s   0ms DEBUG Indirect paths found: 0
    ├─   0.354887s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.354921s   0ms DEBUG checking edge Query/b -(userById)- User/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="userById"}
        ├─   0.354940s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.354955s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(userById)- User/b
      ├─   0.354965s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.354979s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.355001s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.355007s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.355017s   0ms DEBUG Indirect paths found: 0
    ├─   0.355024s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.355038s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="nickname", leaf=true}
  ├─   0.355058s   0ms DEBUG Trying to advance to: nickname through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userById)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.355082s   0ms DEBUG checking edge User/b -(nickname)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="nickname"}
        ├─   0.355097s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.355110s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(nickname)- String/b
      ├─   0.355118s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.355131s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.355149s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.355156s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.355162s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.355178s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.355212s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
                ├─   0.355229s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.355245s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
              ├─   0.355253s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.355283s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.355290s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.355296s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.355304s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.355312s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.355318s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.355334s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.355349s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(6)" }], [])))
        ┌─┘
        ├─   0.355363s   0ms DEBUG Paths for id
        ├─   0.355371s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userById)- User/b -(id)- ID/b is valid
        ├─   0.355378s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.355393s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.355399s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.355413s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.355439s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.355474s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.355498s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.355558s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.355578s   0ms DEBUG No direct paths found
      ├─   0.355588s   0ms DEBUG going deeper
      ├─   0.355598s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      ├─   0.355603s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.355609s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.355614s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.355623s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.355628s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.355639s   0ms DEBUG Indirect paths found: 0
    ├─   0.355649s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(userById)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.355676s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userById)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.355700s   0ms DEBUG checking edge User/b -(name)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="name"}
        ├─   0.355715s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.355729s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(name)- String/b
      ├─   0.355736s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.355750s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.355768s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.355773s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.355778s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.355793s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.355823s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
                ├─   0.355839s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.355855s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
              ├─   0.355863s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.355890s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.355896s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.355902s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.355908s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.355916s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.355921s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.355936s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.355950s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(6)" }], [])))
        ┌─┘
        ├─   0.355963s   0ms DEBUG Paths for id
        ├─   0.355971s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userById)- User/b -(id)- ID/b is valid
        ├─   0.355976s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.355986s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.355992s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.356005s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.356027s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.356040s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.356059s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.356101s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.356113s   0ms DEBUG No direct paths found
      ├─   0.356120s   0ms DEBUG going deeper
      ├─   0.356127s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      ├─   0.356133s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.356138s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.356143s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.356150s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.356155s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.356166s   0ms DEBUG Indirect paths found: 0
    ├─   0.356173s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(userById)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.356198s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userById)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.356221s   0ms DEBUG checking edge User/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.356236s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.356250s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
      ├─   0.356257s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.356269s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.356287s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.356292s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.356297s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.356312s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.356341s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
                ├─   0.356357s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.356373s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
              ├─   0.356380s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.356411s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.356417s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.356424s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.356429s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.356436s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.356442s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.356456s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.356490s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(6)" }], [])))
        ┌─┘
        ├─   0.356507s   0ms DEBUG Paths for id
        ├─   0.356517s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userById)- User/b -(id)- ID/b is valid
        ├─   0.356523s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.356533s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.356539s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.356552s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.356577s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.356592s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.356611s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.356652s   0ms DEBUG checking edge User/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", edge="id"}
          ├─   0.356670s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.356684s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
        ├─   0.356692s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(16) --> EdgeIndex(3)" }])
      ┌─┘
      ├─   0.356722s   0ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/a
      ├─   0.356732s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.356737s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(16) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.356750s   0ms DEBUG Indirect paths found: 1
    ├─   0.356773s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(userById)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="randomUser", leaf=false}
  ├─   0.356799s   0ms DEBUG Trying to advance to: randomUser{id name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.356843s   0ms DEBUG checking edge Query/a -(randomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="randomUser"}
        ├─   0.356866s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.356882s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(randomUser)- User/a
      ├─   0.356891s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.356904s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.356934s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.356940s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.356950s   0ms DEBUG Indirect paths found: 0
    ├─   0.356957s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.356983s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.356993s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.357008s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.357013s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.357023s   0ms DEBUG Indirect paths found: 0
    ├─   0.357029s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.357040s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.357058s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.357102s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.357117s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.357152s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.357169s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.357199s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.357229s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.357253s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.357272s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.357327s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.357346s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.357357s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.357371s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.357382s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.357388s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.357406s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.357437s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.357458s   0ms DEBUG Paths for id
        ├─   0.357468s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.357474s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.357485s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.357491s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.357505s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.357546s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.357561s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.357583s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.357651s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.357678s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.357697s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.357717s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(7)" }])
      ┌─┘
      ├─   0.357741s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.357750s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.357766s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.357777s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.357782s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.357801s   0ms DEBUG Indirect paths found: 1
    ├─   0.357809s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.357838s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.357862s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.357891s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.357914s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.357923s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.357937s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.357958s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.357975s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.358005s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.358021s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.358037s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.358044s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.358071s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.358078s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.358085s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.358091s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.358098s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.358104s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.358118s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.358133s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.358146s   0ms DEBUG Paths for id
        ├─   0.358154s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.358159s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.358170s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.358176s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.358189s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.358212s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.358225s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.358245s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.358305s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.358324s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.358339s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.358348s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(6)" }])
      ┌─┘
      ├─   0.358362s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.358370s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.358376s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.358383s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.358388s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.358401s   0ms DEBUG Indirect paths found: 1
    ├─   0.358409s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.358450s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.358461s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.358472s   0ms DEBUG Processing edge: Query/b -(userById)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.358484s   0ms DEBUG Processing edge: User/b -(nickname)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.358502s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.358515s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.358525s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(7)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.358562s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.358573s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.358584s   0ms DEBUG Processing edge: Query/b -(userById)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.358596s   0ms DEBUG Processing edge: User/b -(name)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.358613s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.358623s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.358633s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(13) --> EdgeIndex(6)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.358666s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.358677s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.358688s   0ms DEBUG Processing edge: Query/b -(userById)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.358700s   0ms DEBUG Processing edge: User/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.358717s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.358727s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.358741s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(7)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.358780s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.358791s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.358802s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.358813s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.358825s   0ms DEBUG Processing edge: User/b -(name)- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.358844s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.358855s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.358865s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.358877s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.358907s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.358919s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.358930s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.358941s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.358958s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.358968s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.358979s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=5}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=2}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="userById", arguments="id: \"u2\"", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.359106s   0ms DEBUG adding output field 'userById' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="nickname", leaf=true, list=false, response_path="userById", fetch_path="userById"}
              ├─   0.359141s   0ms DEBUG adding output field 'nickname' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="name", leaf=true, list=false, response_path="userById", fetch_path="userById"}
              ├─   0.359189s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="userById", fetch_path="userById"}
              ├─   0.359226s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=2}
      ┌─┘
      └─┐connect{parent=0, child=2}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
        └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Query", field="randomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.359321s   0ms DEBUG adding output field 'randomUser' to fetch step [2]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=2}
            └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/b", parent_fetch_step_index=2}
              ├─   0.359351s   0ms DEBUG created a new fetch step [3] subgraph(b) type(User) requirement() key({id}) in children of 2
              ├─   0.359358s   0ms DEBUG adding input requirement '{id}' to fetch step [3]
              ├─   0.359366s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.359373s   0ms DEBUG connecting fetch step to parent [2] -> [3]
              └─┐connect{parent=2, child=3}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, requiring_fetch_step_index=3, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
                      ├─   0.359432s   0ms DEBUG connecting parent fetch step [2] to requiring fetch step [3]
                      └─┐connect{parent=2, child=3}
                      ┌─┘
                      ├─   0.359455s   0ms DEBUG adding output field 'id' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=2, child=3}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                └─┐process_plain_field_edge{parent_fetch_step_index=3, type_name="User", field="name", leaf=true, list=false, response_path="randomUser", fetch_path=""}
                  ├─   0.359538s   0ms DEBUG adding output field 'name' to fetch step [3]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.359589s   0ms DEBUG adding output field 'id' to fetch step [2]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.359648s   0ms DEBUG Done
├─   0.359655s   0ms DEBUG found roots
├─   0.359660s   0ms DEBUG print graph
├─   0.359665s   0ms DEBUG Nodes:
│ [1] Query/b {} → {userById(id: "u2"){nickname name id}} at $.
│ [2] Query/a {} → {randomUser{__typename id}} at $.
│ [3] User/b {__typename id} → {name} at $.randomUser
│ 
│ Tree:
│ [2]
│   [3]
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐ParallelNode::execute{data=Null, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[]}
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.360174s   0ms DEBUG starting new connection: http://localhost:4200/
    └─┐FetchNode::execute{data=Null, representations=[]}
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.360442s   0ms DEBUG starting new connection: http://localhost:4200/
          ├─   0.360551s   0ms DEBUG connecting to 127.0.0.1:4200
          ├─   0.360646s   0ms DEBUG connecting to 127.0.0.1:4200
          ├─   0.360970s   1ms DEBUG connected to 127.0.0.1:4200
          ├─   0.361146s   0ms DEBUG connected to 127.0.0.1:4200
          ├─   0.365596s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
          ├─   0.368385s   8ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"randomUser": Object {"__typename": String("User"), "id": String("u1")}, "userById": Object {"nickname": String("u2-nickname"), "name": String("u2-name"), "id": String("u2")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.368725s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.370224s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.370480s DEBUG execution result: ExecutionResult { data: Some(Object {"randomUser": Object {"id": String("u1"), "name": String("u1-name")}, "userById": Object {"id": String("u2"), "name": String("u2-name"), "nickname": String("u2-nickname")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Parallel"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{randomUser{__typename id}}")}, Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{userById(id: \"u2\"){nickname name id}}")}]}, Object {"kind": String("Flatten"), "path": Array [String("randomUser")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.376976s DEBUG original document: query {
  randomUser {
    id
    rid
  }
}

   0.377082s DEBUG normalized document: query{randomUser{id rid}}

   0.377104s DEBUG executable operation: query{randomUser{id rid}}
┐walk_operation{}
├─   0.377508s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="randomUser", leaf=false}
  ├─   0.377557s   0ms DEBUG Trying to advance to: randomUser{id rid} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.377614s   0ms DEBUG checking edge Query/a -(randomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="randomUser"}
        ├─   0.377634s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.377658s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(randomUser)- User/a
      ├─   0.377681s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.377696s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.377734s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.377745s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.377759s   0ms DEBUG Indirect paths found: 0
    ├─   0.377768s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.377799s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.377810s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.377825s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.377830s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.377841s   0ms DEBUG Indirect paths found: 0
    ├─   0.377847s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.377860s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="rid", leaf=true}
  ├─   0.377880s   0ms DEBUG Trying to advance to: rid through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.377904s   0ms DEBUG checking edge User/a -(rid)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="rid"}
        ├─   0.377919s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.377933s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(rid)- ID/a
      ├─   0.377941s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.377954s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.377972s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.377989s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.378025s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.378053s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.378069s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.378077s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.378105s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.378112s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.378121s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.378127s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.378134s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.378140s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.378155s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.378170s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.378183s   0ms DEBUG Paths for id
        ├─   0.378192s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.378198s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.378212s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.378218s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.378232s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.378257s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.378271s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.378291s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.378332s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.378344s   0ms DEBUG No direct paths found
      ├─   0.378353s   0ms DEBUG going deeper
      ├─   0.378360s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.378365s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.378371s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.378376s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.378382s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.378387s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.378403s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.378408s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.378418s   0ms DEBUG Indirect paths found: 0
    ├─   0.378442s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.378476s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.378502s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.378524s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.378539s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.378548s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.378561s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.378580s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.378596s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.378625s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.378657s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.378682s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.378691s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.378722s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.378730s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.378736s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.378744s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.378752s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.378758s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.378772s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.378787s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.378800s   0ms DEBUG Paths for id
        ├─   0.378808s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.378813s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.378824s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.378829s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.378843s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.378866s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.378879s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.378898s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.378944s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.378962s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.378976s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.378984s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(6)" }])
      ┌─┘
      ├─   0.378999s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.379009s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.379014s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.379021s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.379027s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.379040s   0ms DEBUG Indirect paths found: 1
    ├─   0.379050s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.379089s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.379101s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.379111s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.379127s   0ms DEBUG Processing edge: User/a -(rid)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.379170s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.379197s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.379209s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.379248s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.379260s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.379272s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.379283s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.379300s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.379311s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.379320s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="randomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.379428s   0ms DEBUG adding output field 'randomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="rid", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.379456s   0ms DEBUG adding output field 'rid' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.379498s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.379557s   0ms DEBUG Done
├─   0.379564s   0ms DEBUG found roots
├─   0.379568s   0ms DEBUG print graph
├─   0.379572s   0ms DEBUG Nodes:
│ [1] Query/a {} → {randomUser{rid id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.379944s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.381730s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.381922s DEBUG execution result: ExecutionResult { data: Some(Object {"randomUser": Object {"id": String("u1"), "rid": String("u1-rid")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{randomUser{rid id}}")}}}) }
   0.384976s DEBUG original document: query {
  randomUser {
    id
    rid
    name
  }
}

   0.385066s DEBUG normalized document: query{randomUser{id rid name}}

   0.385076s DEBUG executable operation: query{randomUser{id rid name}}
┐walk_operation{}
├─   0.385395s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="randomUser", leaf=false}
  ├─   0.385446s   0ms DEBUG Trying to advance to: randomUser{id rid name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.385512s   0ms DEBUG checking edge Query/a -(randomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="randomUser"}
        ├─   0.385540s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.385567s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(randomUser)- User/a
      ├─   0.385580s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.385596s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.385628s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.385634s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.385646s   0ms DEBUG Indirect paths found: 0
    ├─   0.385653s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.385683s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.385694s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.385710s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.385715s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.385726s   0ms DEBUG Indirect paths found: 0
    ├─   0.385733s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.385747s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.385769s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.385793s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.385804s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.385821s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.385840s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.385875s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.385894s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.385910s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.385919s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.385949s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.385957s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.385965s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.385972s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.385979s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.385986s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.386002s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.386018s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.386032s   0ms DEBUG Paths for id
        ├─   0.386040s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.386047s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.386063s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.386069s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.386083s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.386110s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.386125s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.386147s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.386211s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.386240s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.386259s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.386269s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(7)" }])
      ┌─┘
      ├─   0.386286s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.386295s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.386300s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.386308s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.386313s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.386327s   0ms DEBUG Indirect paths found: 1
    ├─   0.386334s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="rid", leaf=true}
  ├─   0.386360s   0ms DEBUG Trying to advance to: rid through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.386385s   0ms DEBUG checking edge User/a -(rid)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="rid"}
        ├─   0.386401s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.386430s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(rid)- ID/a
      ├─   0.386455s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.386477s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.386503s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.386521s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.386554s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.386571s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.386588s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.386597s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.386643s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.386654s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.386661s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.386668s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.386675s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.386682s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.386701s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.386718s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.386731s   0ms DEBUG Paths for id
        ├─   0.386740s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.386747s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.386758s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.386764s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.386777s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.386823s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.386839s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.386861s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.386907s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.386920s   0ms DEBUG No direct paths found
      ├─   0.386929s   0ms DEBUG going deeper
      ├─   0.386937s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.386942s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.386949s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.386954s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.386960s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.386965s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.386974s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.386980s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.386991s   0ms DEBUG Indirect paths found: 0
    ├─   0.386999s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.387029s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.387053s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.387069s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.387083s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.387091s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.387104s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.387123s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.387147s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.387178s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.387195s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.387211s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.387219s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.387247s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.387254s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.387261s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.387267s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.387275s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.387281s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.387295s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.387311s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.387324s   0ms DEBUG Paths for id
        ├─   0.387332s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.387338s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.387348s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.387354s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.387367s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.387391s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.387404s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.387424s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.387465s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.387483s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.387498s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.387507s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(6)" }])
      ┌─┘
      ├─   0.387522s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.387530s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.387535s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.387542s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.387547s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.387560s   0ms DEBUG Indirect paths found: 1
    ├─   0.387570s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(15) --> EdgeIndex(7)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.387642s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.387656s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.387668s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.387681s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.387693s   0ms DEBUG Processing edge: User/b -(name)- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.387712s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.387724s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.387735s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.387746s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(4)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.387780s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.387796s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.387808s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.387820s   0ms DEBUG Processing edge: User/a -(rid)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.387838s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.387848s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.387859s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.387891s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.387902s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.387913s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.387925s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.387943s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.387954s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.387964s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="randomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.388079s   0ms DEBUG adding output field 'randomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/b", parent_fetch_step_index=1}
              ├─   0.388119s   0ms DEBUG created a new fetch step [2] subgraph(b) type(User) requirement() key({id}) in children of 1
              ├─   0.388127s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.388134s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.388142s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
                      ├─   0.388201s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.388228s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="name", leaf=true, list=false, response_path="randomUser", fetch_path=""}
                  ├─   0.388316s   0ms DEBUG adding output field 'name' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="rid", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.388372s   0ms DEBUG adding output field 'rid' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.388410s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.388474s   0ms DEBUG Done
├─   0.388481s   0ms DEBUG found roots
├─   0.388486s   0ms DEBUG print graph
├─   0.388491s   0ms DEBUG Nodes:
│ [1] Query/a {} → {randomUser{__typename id rid}} at $.
│ [2] User/b {__typename id} → {name} at $.randomUser
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.389028s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.391256s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"randomUser": Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.391806s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.393546s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.393907s DEBUG execution result: ExecutionResult { data: Some(Object {"randomUser": Object {"id": String("u1"), "rid": String("u1-rid"), "name": String("u1-name")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{randomUser{__typename id rid}}")}, Object {"kind": String("Flatten"), "path": Array [String("randomUser")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.396793s DEBUG original document: query {
  providedRandomUser {
    id
    rid
    name
  }
}

   0.396889s DEBUG normalized document: query{providedRandomUser{id rid name}}

   0.396910s DEBUG executable operation: query{providedRandomUser{id rid name}}
┐walk_operation{}
├─   0.397226s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="providedRandomUser", leaf=false}
  ├─   0.397276s   0ms DEBUG Trying to advance to: providedRandomUser{id rid name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.397331s   0ms DEBUG checking edge Query/a -(providedRandomUser)- User/a/1
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="providedRandomUser"}
        ├─   0.397352s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.397378s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(providedRandomUser)- User/a/1
      ├─   0.397390s   0ms DEBUG checking edge Query/a -(providedRandomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="providedRandomUser"}
        ├─   0.397404s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.397418s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(providedRandomUser)- User/a
      ├─   0.397425s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(18)" },  { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.397443s   0ms DEBUG Direct paths found: 2
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.397475s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.397481s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.397493s   0ms DEBUG Indirect paths found: 0
    ├─   0.397500s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.397533s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.397544s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.397560s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.397566s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.397576s   0ms DEBUG Indirect paths found: 0
    ├─   0.397583s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.397597s   0ms DEBUG Found 2 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.397618s   0ms DEBUG Trying to advance to: name through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.397661s   0ms DEBUG checking edge User/a/1 -(name)- String/a/1
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", edge="name"}
        ├─   0.397687s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.397704s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1 with edge User/a/1 -(name)- String/a/1
      ├─   0.397713s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(18) --> EdgeIndex(19)" }])
    ┌─┘
    ├─   0.397727s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.397748s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.397753s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.397765s   0ms DEBUG Indirect paths found: 0
    ├─   0.397772s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.397801s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.397813s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.397831s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.397849s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.397903s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
                ├─   0.397932s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.397951s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.397960s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.397992s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.398000s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.398009s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.398016s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.398024s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.398030s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.398047s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.398063s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.398077s   0ms DEBUG Paths for id
        ├─   0.398085s   0ms DEBUG   Path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(id)- ID/a is valid
        ├─   0.398092s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.398108s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.398114s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.398129s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.398156s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.398172s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.398193s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.398237s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.398256s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.398309s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.398321s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(15) --> EdgeIndex(7)" }])
      ┌─┘
      ├─   0.398338s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.398347s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.398353s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.398360s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.398366s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(15) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.398386s   0ms DEBUG Indirect paths found: 1
    ├─   0.398395s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="rid", leaf=true}
  ├─   0.398426s   0ms DEBUG Trying to advance to: rid through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.398451s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.398462s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.398480s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.398485s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.398496s   0ms DEBUG Indirect paths found: 0
    ├─   0.398503s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.398531s   0ms DEBUG checking edge User/a -(rid)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="rid"}
        ├─   0.398547s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.398561s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(rid)- ID/a
      ├─   0.398569s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.398582s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.398600s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.398616s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.398646s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
                ├─   0.398663s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.398680s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.398688s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.398716s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.398724s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.398731s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.398737s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.398744s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.398750s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.398765s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.398780s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.398793s   0ms DEBUG Paths for id
        ├─   0.398801s   0ms DEBUG   Path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(id)- ID/a is valid
        ├─   0.398807s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.398818s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.398823s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.398837s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.398860s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.398874s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.398894s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.398953s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.398972s   0ms DEBUG No direct paths found
      ├─   0.398982s   0ms DEBUG going deeper
      ├─   0.398991s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.398997s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.399003s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.399009s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.399015s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.399020s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.399028s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.399033s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.399045s   0ms DEBUG Indirect paths found: 0
    ├─   0.399054s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.399082s   0ms DEBUG Trying to advance to: id through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.399107s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.399119s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.399162s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.399178s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.399193s   0ms DEBUG Indirect paths found: 0
    ├─   0.399203s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.399263s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.399282s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.399297s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.399305s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.399319s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.399338s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.399354s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.399385s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
                ├─   0.399402s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.399419s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.399427s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.399454s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.399461s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.399468s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.399474s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.399482s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.399488s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.399503s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.399518s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.399531s   0ms DEBUG Paths for id
        ├─   0.399539s   0ms DEBUG   Path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(id)- ID/a is valid
        ├─   0.399545s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.399556s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.399562s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.399576s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.399599s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.399613s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.399633s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.399693s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.399721s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.399739s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.399749s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(15) --> EdgeIndex(6)" }])
      ┌─┘
      ├─   0.399765s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.399773s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.399779s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.399786s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.399806s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(15) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.399828s   0ms DEBUG Indirect paths found: 1
    ├─   0.399839s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(18) --> EdgeIndex(19)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.399884s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.399897s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.399908s   0ms DEBUG Processing edge: Query/a -(providedRandomUser)- User/a/1
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.399920s   0ms DEBUG Processing edge: User/a/1 -(name)- String/a/1
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.399939s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.399950s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.399960s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(4)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.399993s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.400004s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.400015s   0ms DEBUG Processing edge: Query/a -(providedRandomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.400027s   0ms DEBUG Processing edge: User/a -(rid)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.400047s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.400058s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.400068s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.400100s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.400111s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.400122s   0ms DEBUG Processing edge: Query/a -(providedRandomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.400133s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.400151s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.400162s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.400172s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="providedRandomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.400322s   0ms DEBUG adding output field 'providedRandomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="name", leaf=false, list=false, response_path="providedRandomUser", fetch_path="providedRandomUser"}
              ├─   0.400370s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="providedRandomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.400429s   0ms DEBUG adding output field 'providedRandomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="rid", leaf=true, list=false, response_path="providedRandomUser", fetch_path="providedRandomUser"}
              ├─   0.400474s   0ms DEBUG adding output field 'rid' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="providedRandomUser", fetch_path="providedRandomUser"}
              ├─   0.400514s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.400578s   0ms DEBUG Done
├─   0.400585s   0ms DEBUG found roots
├─   0.400590s   0ms DEBUG print graph
├─   0.400595s   0ms DEBUG Nodes:
│ [1] Query/a {} → {providedRandomUser{name rid id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.401008s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.403215s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.403471s DEBUG execution result: ExecutionResult { data: Some(Object {"providedRandomUser": Object {"id": String("u1"), "rid": String("u1-rid"), "name": String("u1-name")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{providedRandomUser{name rid id}}")}}}) }
