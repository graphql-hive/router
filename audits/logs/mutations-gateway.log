generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.10s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_input_object_type{name="AddProductInput"}
  ┌─┘
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Mutation"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Product"}
    └─┐build_fields{fields_count=5}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
└─┐decompose_from_supergraph{graph_id="C"}
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006136s   0ms DEBUG Building graph for supergraph with 16 definitions
  └─┐build_root_nodes{}
    ├─   0.006174s   0ms DEBUG added root type for queries: Query
    ├─   0.006179s   0ms DEBUG added root type for mutations: Mutation
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006235s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006247s   0ms INFO [x] Creating field move edge 'Query.product/A' (type: Product)
    ├─   0.006255s   0ms INFO [x] Creating field move edge 'Query.product/A' (type: Product)
    ├─   0.006262s   0ms INFO [x] Creating field move edge 'Query.products/A' (type: Product)
    ├─   0.006268s   0ms INFO [x] Creating field move edge 'Query.products/A' (type: Product)
    ├─   0.006274s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006281s   0ms INFO [ ] Field 'Query.product/B' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006286s   0ms INFO [ ] Field 'Query.products/B' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006290s   0ms INFO [x] Creating owned field move edge 'Query.__typename/C' (type: String)
    ├─   0.006297s   0ms INFO [ ] Field 'Query.product/C' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006302s   0ms INFO [ ] Field 'Query.products/C' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006307s   0ms INFO [x] Creating owned field move edge 'Product.__typename/A' (type: String)
    ├─   0.006313s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.006319s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.006324s   0ms INFO [ ] Field 'Product.isAvailable/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006329s   0ms INFO [x] Creating field move edge 'Product.name/A' (type: String)
    ├─   0.006334s   0ms INFO [x] Creating field move edge 'Product.name/A' (type: String)
    ├─   0.006339s   0ms INFO [ ] Field 'Product.isExpensive/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.006343s   0ms INFO [x] Creating field move edge 'Product.price/A' (type: Float)
    ├─   0.006349s   0ms INFO [x] Creating field move edge 'Product.price/A' (type: Float)
    ├─   0.006354s   0ms INFO [x] Creating owned field move edge 'Product.__typename/B' (type: String)
    ├─   0.006363s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.006369s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.006374s   0ms INFO [x] Creating field move edge 'Product.isAvailable/B' (type: Boolean)
    ├─   0.006379s   0ms INFO [x] Creating field move edge 'Product.isAvailable/B' (type: Boolean)
    ├─   0.006384s   0ms INFO [ ] Field 'Product.name/B' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006454s   0ms INFO [x] Creating field move edge 'Product.isExpensive/B' (type: Boolean)
    ├─   0.006465s   0ms INFO [x] Creating field move edge 'Product.isExpensive/B' (type: Boolean)
    ├─   0.006475s   0ms INFO [ ] Field 'Product.price/B' is external, skipping edge creation
    ├─   0.006481s   0ms INFO [x] Creating owned field move edge 'Mutation.__typename/A' (type: String)
    ├─   0.006488s   0ms INFO [x] Creating field move edge 'Mutation.addProduct/A' (type: Product)
    ├─   0.006494s   0ms INFO [x] Creating field move edge 'Mutation.addProduct/A' (type: Product)
    ├─   0.006499s   0ms INFO [ ] Field 'Mutation.delete/A' does is not available in the subgraph, skipping edge creation (type: Int)
    ├─   0.006504s   0ms INFO [ ] Field 'Mutation.add/A' does is not available in the subgraph, skipping edge creation (type: Int)
    ├─   0.006509s   0ms INFO [x] Creating field move edge 'Mutation.multiply/A' (type: Int)
    ├─   0.006516s   0ms INFO [x] Creating field move edge 'Mutation.multiply/A' (type: Int)
    ├─   0.006522s   0ms INFO [x] Creating owned field move edge 'Mutation.__typename/B' (type: String)
    ├─   0.006527s   0ms INFO [ ] Field 'Mutation.addProduct/B' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006532s   0ms INFO [x] Creating field move edge 'Mutation.delete/B' (type: Int)
    ├─   0.006538s   0ms INFO [x] Creating field move edge 'Mutation.delete/B' (type: Int)
    ├─   0.006543s   0ms INFO [ ] Field 'Mutation.add/B' does is not available in the subgraph, skipping edge creation (type: Int)
    ├─   0.006547s   0ms INFO [ ] Field 'Mutation.multiply/B' does is not available in the subgraph, skipping edge creation (type: Int)
    ├─   0.006552s   0ms INFO [x] Creating owned field move edge 'Mutation.__typename/C' (type: String)
    ├─   0.006558s   0ms INFO [ ] Field 'Mutation.addProduct/C' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006562s   0ms INFO [ ] Field 'Mutation.delete/C' does is not available in the subgraph, skipping edge creation (type: Int)
    ├─   0.006567s   0ms INFO [x] Creating field move edge 'Mutation.add/C' (type: Int)
    ├─   0.006572s   0ms INFO [x] Creating field move edge 'Mutation.add/C' (type: Int)
    ├─   0.006577s   0ms INFO [ ] Field 'Mutation.multiply/C' does is not available in the subgraph, skipping edge creation (type: Int)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006656s   0ms INFO Creating self-referencing entity move edge in 'Product/A' via key 'id'
    ├─   0.006693s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/B' via key 'id'
    ├─   0.006726s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/A' via key 'id'
    ├─   0.006802s   0ms INFO Creating self-referencing entity move edge in 'Product/B' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.061609s INFO Starting server on http://localhost:4000
   0.062676s INFO starting 16 workers
   0.062722s INFO Actix runtime found; starting in Actix runtime
   0.062732s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.299397s DEBUG original document: query ping {
  __typename
}

   0.299497s DEBUG normalized document: query ping {__typename}

   0.299524s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.299905s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.371516s DEBUG original document: mutation {
  addProduct(input: {name: "new", price: 599.99}) {
    name
    price
    isExpensive
    isAvailable
  }
}

   0.371668s DEBUG normalized document: mutation{addProduct(input: {"name": "new", "price": 599.99}){name price isExpensive isAvailable}}

   0.371710s DEBUG executable operation: mutation{addProduct(input: {"name": "new", "price": 599.99}){name price isExpensive isAvailable}}
┐walk_operation{}
├─   0.372301s   0ms DEBUG operation is of type Mutation
└─┐process_field{field_name="addProduct", leaf=false}
  ├─   0.372354s   0ms DEBUG Trying to advance to: addProduct(input: {"name": "new", "price": 599.99}){name price isExpensive isAvailable} through 3 possible paths
  └─┐explore_path{path="root(Mutation) -(a)- Mutation/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "addProduct", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isAvailable", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"input": Object({"name": String("new"), "price": Float(599.99)})} }), skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a", current_cost=1000}
      ├─   0.372448s   0ms DEBUG checking edge Mutation/a -(addProduct)- Product/a
      └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a", edge="addProduct"}
        ├─   0.372476s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.372504s   0ms DEBUG Advancing path root(Mutation) -(a)- Mutation/a with edge Mutation/a -(addProduct)- Product/a
      ├─   0.372519s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.372537s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "addProduct", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isAvailable", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"input": Object({"name": String("new"), "price": Float(599.99)})} }), skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a", current_cost=1000}
      ├─   0.372570s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.372578s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.372592s   0ms DEBUG Indirect paths found: 0
    ├─   0.372604s   0ms DEBUG advanced: root(Mutation) -(a)- Mutation/a
  ┌─┘
  └─┐explore_path{path="root(Mutation) -(b)- Mutation/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "addProduct", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isAvailable", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"input": Object({"name": String("new"), "price": Float(599.99)})} }), skip_if: None, include_if: None }), path="root(Mutation) -(b)- Mutation/b", current_cost=1000}
      ├─   0.372639s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.372652s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "addProduct", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isAvailable", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"input": Object({"name": String("new"), "price": Float(599.99)})} }), skip_if: None, include_if: None }), path="root(Mutation) -(b)- Mutation/b", current_cost=1000}
      ├─   0.372672s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.372678s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.372691s   0ms DEBUG Indirect paths found: 0
    ├─   0.372699s   0ms WARN failed to advance: root(Mutation) -(b)- Mutation/b
  ┌─┘
  └─┐explore_path{path="root(Mutation) -(c)- Mutation/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "addProduct", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isAvailable", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"input": Object({"name": String("new"), "price": Float(599.99)})} }), skip_if: None, include_if: None }), path="root(Mutation) -(c)- Mutation/c", current_cost=1000}
      ├─   0.372768s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.372784s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "addProduct", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isAvailable", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"input": Object({"name": String("new"), "price": Float(599.99)})} }), skip_if: None, include_if: None }), path="root(Mutation) -(c)- Mutation/c", current_cost=1000}
      ├─   0.372807s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.372813s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.372826s   0ms DEBUG Indirect paths found: 0
    ├─   0.372834s   0ms WARN failed to advance: root(Mutation) -(c)- Mutation/c
  ┌─┘
  ├─   0.372851s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="isAvailable", leaf=true}
  ├─   0.372876s   0ms DEBUG Trying to advance to: isAvailable through 1 possible paths
  └─┐explore_path{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "isAvailable", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
      ├─   0.372905s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.372918s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "isAvailable", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
      ├─   0.372943s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", edge="id"}
        ├─   0.372967s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
              ├─   0.373035s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", edge="id"}
                ├─   0.373068s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.373091s   0ms DEBUG Advancing path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.373103s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
              ├─   0.373158s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.373174s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.373183s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.373192s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.373201s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.373209s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.373233s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.373251s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.373265s   0ms DEBUG Paths for id
        ├─   0.373275s   0ms DEBUG   Path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(id)- ID/a is valid
        ├─   0.373281s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.373296s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.373316s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.373340s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.373369s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.373384s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.373405s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "isAvailable", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.373450s   0ms DEBUG checking edge Product/b -(isAvailable)- Boolean/b
        └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b", edge="isAvailable"}
          ├─   0.373467s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.373482s   0ms DEBUG Advancing path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(isAvailable)- Boolean/b
        ├─   0.373493s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(25) --> EdgeIndex(15)" }])
      ┌─┘
      ├─   0.373509s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
      ├─   0.373518s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.373523s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.373530s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.373535s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(25) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.373548s   0ms DEBUG Indirect paths found: 1
    ├─   0.373556s   0ms DEBUG advanced: root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="isExpensive", leaf=true}
  ├─   0.373581s   0ms DEBUG Trying to advance to: isExpensive through 1 possible paths
  └─┐explore_path{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
      ├─   0.373604s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.373614s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
      ├─   0.373630s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", edge="id"}
        ├─   0.373646s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
              ├─   0.373675s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", edge="id"}
                ├─   0.373692s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.373707s   0ms DEBUG Advancing path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.373715s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
              ├─   0.373742s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.373749s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.373755s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.373761s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.373768s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.373773s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.373787s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.373802s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.373815s   0ms DEBUG Paths for id
        ├─   0.373822s   0ms DEBUG   Path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(id)- ID/a is valid
        ├─   0.373828s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.373838s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.373843s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.373856s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.373878s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.373890s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.373909s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.373949s   0ms DEBUG checking edge Product/b -(isExpensive🧩{price})- Boolean/b
        └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b", edge="isExpensive"}
          ├─   0.373966s   0ms DEBUG checking requirements {price} for edge 'Product/b -(isExpensive🧩{price})- Boolean/b'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.373997s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.374025s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                ├─   0.374032s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
                ├─   0.374039s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
                  ├─   0.374059s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                        ├─   0.374100s   0ms DEBUG checking edge Product/b -(id)- ID/b
                        └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
                          ├─   0.374126s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.374145s   0ms DEBUG Advancing path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                        ├─   0.374155s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(25) --> EdgeIndex(14)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                        ├─   0.374188s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                        ├─   0.374195s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
                        ├─   0.374202s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                        ├─   0.374209s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
                        ├─   0.374217s   0ms DEBUG Finished finding indirect paths, found total of 0
                        ├─   0.374224s   0ms INFO return=Ok([])
                      ┌─┘
                      ├─   0.374240s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
                    ┌─┘
                    ├─   0.374257s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
                  ┌─┘
                  ├─   0.374272s   0ms DEBUG Paths for id
                  ├─   0.374281s   0ms DEBUG   Path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.374288s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.374299s   0ms DEBUG path Product/b -(id)- ID/b is valid
                  ├─   0.374313s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
                ┌─┘
                ├─   0.374333s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/b"}
                  └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                    ├─   0.374359s   0ms DEBUG Building root query tree node: Product/b
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.374374s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.374397s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a", current_cost=3005}
                  ├─   0.374444s   0ms DEBUG checking edge Product/a -(price)- Float/a
                  └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a", edge="price"}
                    ├─   0.374464s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.374482s   0ms DEBUG Advancing path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(price)- Float/a
                  ├─   0.374491s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(25) --> EdgeIndex(26) --> EdgeIndex(12)" }])
                ┌─┘
                ├─   0.374507s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                ├─   0.374518s   0ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.374524s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(25) --> EdgeIndex(26) --> EdgeIndex(12)" }])
              ┌─┘
              ├─   0.374540s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(25) --> EdgeIndex(26) --> EdgeIndex(12)" }], [])))
            ┌─┘
            ├─   0.374555s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(25) --> EdgeIndex(26) --> EdgeIndex(12)" }], [])))
          ┌─┘
          ├─   0.374569s   0ms DEBUG Paths for price
          ├─   0.374578s   0ms DEBUG   Path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a -(price)- Float/a is valid
          ├─   0.374583s   0ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.374594s   0ms DEBUG path Product/b -(🔑🧩{id})- Product/a -(price)- Float/a is valid
          ├─   0.374600s   0ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(26) --> EdgeIndex(12)" }]))
        ┌─┘
        ├─   0.374615s   0ms DEBUG Advancing path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(isExpensive🧩{price})- Boolean/b
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(26) --> EdgeIndex(12)" }, root_node="Product/b"}
          └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=2}
            ├─   0.374638s   0ms DEBUG Building root query tree node: Product/b
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.374652s   0ms DEBUG Processing edge: Product/b -(🔑🧩{id})- Product/a
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.374665s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.374685s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.374698s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.374726s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(25) --> EdgeIndex(16)" }])
      ┌─┘
      ├─   0.374741s   1ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
      ├─   0.374748s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.374754s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.374760s   1ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.374765s   1ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(25) --> EdgeIndex(16)" }])
    ┌─┘
    ├─   0.374778s   1ms DEBUG Indirect paths found: 1
    ├─   0.374785s   1ms DEBUG advanced: root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="price", leaf=true}
  ├─   0.374809s   0ms DEBUG Trying to advance to: price through 1 possible paths
  └─┐explore_path{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
      ├─   0.374832s   0ms DEBUG checking edge Product/a -(price)- Float/a
      └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", edge="price"}
        ├─   0.374847s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.374860s   0ms DEBUG Advancing path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a with edge Product/a -(price)- Float/a
      ├─   0.374867s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.374880s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
      ├─   0.374917s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", edge="id"}
        ├─   0.374938s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
              ├─   0.374969s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", edge="id"}
                ├─   0.374985s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.375002s   0ms DEBUG Advancing path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.375011s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
              ├─   0.375038s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.375045s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.375052s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.375058s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.375065s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.375070s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.375085s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.375099s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.375112s   0ms DEBUG Paths for id
        ├─   0.375120s   0ms DEBUG   Path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(id)- ID/a is valid
        ├─   0.375126s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.375136s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.375141s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.375154s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.375176s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.375189s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.375208s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.375246s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.375259s   0ms DEBUG No direct paths found
      ├─   0.375269s   0ms DEBUG going deeper
      ├─   0.375276s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.375281s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.375286s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.375291s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.375297s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.375302s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.375309s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.375314s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.375325s   0ms DEBUG Indirect paths found: 0
    ├─   0.375332s   0ms DEBUG advanced: root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.375357s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
      ├─   0.375380s   0ms DEBUG checking edge Product/a -(name)- String/a
      └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", edge="name"}
        ├─   0.375394s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.375408s   0ms DEBUG Advancing path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a with edge Product/a -(name)- String/a
      ├─   0.375415s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.375428s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
      ├─   0.375445s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", edge="id"}
        ├─   0.375460s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
              ├─   0.375489s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", edge="id"}
                ├─   0.375505s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.375520s   0ms DEBUG Advancing path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.375528s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a", current_cost=1001}
              ├─   0.375555s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.375561s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.375568s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.375574s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.375580s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.375586s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.375600s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.375614s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.375627s   0ms DEBUG Paths for id
        ├─   0.375635s   0ms DEBUG   Path root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(id)- ID/a is valid
        ├─   0.375640s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.375649s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.375655s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.375667s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.375689s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.375702s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.375721s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.375762s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.375774s   0ms DEBUG No direct paths found
      ├─   0.375782s   0ms DEBUG going deeper
      ├─   0.375789s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.375794s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.375800s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.375805s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.375810s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.375815s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.375822s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.375827s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.375837s   0ms DEBUG Indirect paths found: 0
    ├─   0.375844s   0ms DEBUG advanced: root(Mutation) -(a)- Mutation/a -(addProduct)- Product/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(25) --> EdgeIndex(15)" }, root_node="root(Mutation)"}
└─┐create_root_for_path_sequences{root_node="root(Mutation)", segments_count=4}
  ├─   0.375884s   0ms DEBUG Building root query tree node: root(Mutation)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.375895s   0ms DEBUG Processing edge: root(Mutation) -(a)- Mutation/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.375906s   0ms DEBUG Processing edge: Mutation/a -(addProduct)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.375918s   0ms DEBUG Processing edge: Product/a -(🔑🧩{id})- Product/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.375930s   0ms DEBUG Processing edge: Product/b -(isAvailable)- Boolean/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.375947s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.375958s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.375968s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.375978s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(25) --> EdgeIndex(16)" }, root_node="root(Mutation)"}
└─┐create_root_for_path_sequences{root_node="root(Mutation)", segments_count=4}
  ├─   0.376009s   0ms DEBUG Building root query tree node: root(Mutation)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.376020s   0ms DEBUG Processing edge: root(Mutation) -(a)- Mutation/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.376031s   0ms DEBUG Processing edge: Mutation/a -(addProduct)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.376045s   0ms DEBUG Processing edge: Product/a -(🔑🧩{id})- Product/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.376057s   0ms DEBUG Processing edge: Product/b -(isExpensive🧩{price})- Boolean/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.376074s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.376085s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.376095s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.376105s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(12)" }, root_node="root(Mutation)"}
└─┐create_root_for_path_sequences{root_node="root(Mutation)", segments_count=3}
  ├─   0.376135s   0ms DEBUG Building root query tree node: root(Mutation)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.376146s   0ms DEBUG Processing edge: root(Mutation) -(a)- Mutation/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.376156s   0ms DEBUG Processing edge: Mutation/a -(addProduct)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.376167s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.376184s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.376208s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.376218s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(11)" }, root_node="root(Mutation)"}
└─┐create_root_for_path_sequences{root_node="root(Mutation)", segments_count=3}
  ├─   0.376254s   0ms DEBUG Building root query tree node: root(Mutation)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.376266s   0ms DEBUG Processing edge: root(Mutation) -(a)- Mutation/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.376276s   0ms DEBUG Processing edge: Mutation/a -(addProduct)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.376291s   0ms DEBUG Processing edge: Product/a -(name)- String/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.376307s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.376318s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.376327s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=4}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Mutation", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Mutation", field="addProduct", arguments="input: {\"name\": \"new\", \"price\": 599.99}", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.376463s   0ms DEBUG adding output field 'addProduct' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/a -(🔑🧩{id})- Product/b", parent_fetch_step_index=1}
              ├─   0.376500s   0ms DEBUG created a new fetch step [2] subgraph(b) type(Product) requirement() key({id}) in children of 1
              ├─   0.376507s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.376515s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.376522s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="addProduct", fetch_path="addProduct"}
                      ├─   0.376580s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.376603s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Product", field="isAvailable", leaf=true, list=false, response_path="addProduct", fetch_path=""}
                  ├─   0.376686s   0ms DEBUG adding output field 'isAvailable' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/b"}
                    └─┐can_satisfy_edge{path="Product/b", edge="id"}
                      ├─   0.376748s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/b'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/b", current_cost=0}
                            ├─   0.376785s   0ms DEBUG checking edge Product/b -(id)- ID/b
                            └─┐can_satisfy_edge{path="Product/b", edge="id"}
                              ├─   0.376807s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.376825s   0ms DEBUG Advancing path Product/b with edge Product/b -(id)- ID/b
                            ├─   0.376835s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(14)" }])
                          ┌─┘
                          ├─   0.376857s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(14)" }], [])))
                        ┌─┘
                        ├─   0.376873s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(14)" }], [])))
                      ┌─┘
                      ├─   0.376889s   0ms DEBUG Paths for id
                      ├─   0.376898s   0ms DEBUG   Path Product/b -(id)- ID/b is valid
                      ├─   0.376904s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.376916s   0ms DEBUG path Product/b -(id)- ID/b is valid
                      ├─   0.376922s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.376947s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.376955s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.376965s   0ms DEBUG created a new fetch step [3] subgraph(b) type(Product) requirement({price}) in children of 1
                  ├─   0.376973s   0ms DEBUG Adding {price} to fetch([3]).input
                  ├─   0.376981s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.376988s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.376996s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.377023s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/b -(🔑🧩{id})- Product/a", parent_fetch_step_index=4}
                        ├─   0.377075s   0ms DEBUG created a new fetch step [5] subgraph(a) type(Product) requirement() key({id}) in children of 4
                        ├─   0.377096s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                        ├─   0.377103s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.377111s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="id", leaf=true, list=false, response_path="addProduct", fetch_path=""}
                                ├─   0.377181s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.377208s   0ms DEBUG adding output field 'id' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="Product", field="price", leaf=true, list=false, response_path="addProduct", fetch_path=""}
                            ├─   0.377306s   0ms DEBUG adding output field 'price' to fetch step [5]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.377369s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  ├─   0.377391s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="price", leaf=true, list=false, response_path="addProduct", fetch_path="addProduct"}
              ├─   0.377439s   0ms DEBUG adding output field 'price' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="name", leaf=true, list=false, response_path="addProduct", fetch_path="addProduct"}
              ├─   0.377475s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.377533s   1ms DEBUG Done
├─   0.377540s   1ms DEBUG found roots
├─   0.377545s   1ms DEBUG print graph
├─   0.377549s   1ms DEBUG Nodes:
│ [1] Mutation/a {} → {addProduct(input: {"name": "new", "price": 599.99}){__typename id price name}} at $.
│ [2] Product/b {__typename id} → {isAvailable} at $.addProduct
│ [3] Product/b {__typename price id} → {isExpensive} at $.addProduct
│ [4] Product/b {__typename id} → {__typename id} at $.addProduct
│ [5] Product/a {__typename id} → {price} at $.addProduct
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│       [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.377595s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.377609s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.377659s   0ms DEBUG optimization found: merge parent [1] with child [5]
    └─┐perform_fetch_step_merge{}
      ├─   0.377673s   0ms DEBUG merging fetch steps [1] and [5]
      └─┐connect{parent=1, child=3}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.377714s   0ms DEBUG Found optimization: 3 <- 2
    └─┐perform_fetch_step_merge{}
      ├─   0.377726s   0ms DEBUG merging fetch steps [3] and [2]
      └─┐connect{parent=1, child=3}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.378157s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.378526s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.379012s   1ms DEBUG connected to 127.0.0.1:4200
        ├─   0.383581s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Null, representations=[]}
    ├─   0.383756s   0ms WARN Flatten node produced no representations for path ["addProduct"]. Skipping child node execution.
  ┌─┘
┌─┘
┘
   0.383842s DEBUG execution result: ExecutionResult { data: Some(Null), errors: Some([GraphQLError { message: "Syntax Error: Expected Name, found String \"name\".", locations: Some([GraphQLErrorLocation { line: 1, column: 21 }]), path: None, extensions: Some({"code": String("GRAPHQL_PARSE_FAILED")}) }]), extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{addProduct(input: {\"name\": \"new\", \"price\": 599.99}){__typename id price name}}")}, Object {"kind": String("Flatten"), "path": Array [String("addProduct")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{isExpensive isAvailable}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.393060s DEBUG original document: query {
  product(id: "p1") {
    id
    name
    price
    isExpensive
    isAvailable
  }
}

   0.393154s DEBUG normalized document: query{product(id: "p1"){id name price isExpensive isAvailable}}

   0.393175s DEBUG executable operation: query{product(id: "p1"){id name price isExpensive isAvailable}}
┐walk_operation{}
├─   0.393523s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="product", leaf=false}
  ├─   0.393560s   0ms DEBUG Trying to advance to: product(id: "p1"){id name price isExpensive isAvailable} through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isAvailable", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("p1")} }), skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.393605s   0ms DEBUG checking edge Query/a -(product)- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="product"}
        ├─   0.393623s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.393643s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(product)- Product/a
      ├─   0.393653s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(5)" }])
    ┌─┘
    ├─   0.393668s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isExpensive", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isAvailable", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("p1")} }), skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.393697s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.393702s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.393713s   0ms DEBUG Indirect paths found: 0
    ├─   0.393720s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  ├─   0.393733s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="isAvailable", leaf=true}
  ├─   0.393751s   0ms DEBUG Trying to advance to: isAvailable through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "isAvailable", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.393774s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.393785s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "isAvailable", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.393802s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.393818s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.393856s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.393873s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.393889s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.393897s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.393925s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.393937s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.393947s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.393953s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.393960s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.393966s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.393980s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.393995s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.394008s   0ms DEBUG Paths for id
        ├─   0.394016s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.394022s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.394035s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.394040s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.394053s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.394077s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.394091s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.394110s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "isAvailable", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.394152s   0ms DEBUG checking edge Product/b -(isAvailable)- Boolean/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="isAvailable"}
          ├─   0.394169s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.394184s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(isAvailable)- Boolean/b
        ├─   0.394192s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(15)" }])
      ┌─┘
      ├─   0.394206s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
      ├─   0.394214s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.394219s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.394226s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.394231s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.394244s   0ms DEBUG Indirect paths found: 1
    ├─   0.394251s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="isExpensive", leaf=true}
  ├─   0.394275s   0ms DEBUG Trying to advance to: isExpensive through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.394297s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.394308s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.394324s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.394339s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.394368s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.394384s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.394399s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.394407s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.394434s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.394440s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.394447s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.394453s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.394459s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.394465s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.394479s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.394493s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.394506s   0ms DEBUG Paths for id
        ├─   0.394513s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.394518s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.394528s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.394533s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.394546s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.394568s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.394592s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.394620s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "isExpensive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.394665s   0ms DEBUG checking edge Product/b -(isExpensive🧩{price})- Boolean/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="isExpensive"}
          ├─   0.394683s   0ms DEBUG checking requirements {price} for edge 'Product/b -(isExpensive🧩{price})- Boolean/b'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.394717s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.394746s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                ├─   0.394753s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
                ├─   0.394760s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
                  ├─   0.394782s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                        ├─   0.394854s   0ms DEBUG checking edge Product/b -(id)- ID/b
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
                          ├─   0.394884s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.394905s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
                        ├─   0.394916s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(14)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
                        ├─   0.394966s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
                        ├─   0.394974s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
                        ├─   0.394981s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
                        ├─   0.394988s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
                        ├─   0.394996s   0ms DEBUG Finished finding indirect paths, found total of 0
                        ├─   0.395003s   0ms INFO return=Ok([])
                      ┌─┘
                      ├─   0.395020s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
                    ┌─┘
                    ├─   0.395037s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
                  ┌─┘
                  ├─   0.395052s   0ms DEBUG Paths for id
                  ├─   0.395062s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b -(id)- ID/b is valid
                  ├─   0.395068s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.395080s   0ms DEBUG path Product/b -(id)- ID/b is valid
                  ├─   0.395086s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
                ┌─┘
                ├─   0.395101s   0ms DEBUG Advancing path to Product/b -(🔑🧩{id})- Product/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/b"}
                  └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
                    ├─   0.395126s   0ms DEBUG Building root query tree node: Product/b
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.395141s   0ms DEBUG Processing edge: Product/b -(id)- ID/b
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.395164s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a", current_cost=3005}
                  ├─   0.395230s   0ms DEBUG checking edge Product/a -(price)- Float/a
                  └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a", edge="price"}
                    ├─   0.395260s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.395281s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a with edge Product/a -(price)- Float/a
                  ├─   0.395290s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(26) --> EdgeIndex(12)" }])
                ┌─┘
                ├─   0.395308s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{id})- Product/a
                ├─   0.395319s   0ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.395325s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(26) --> EdgeIndex(12)" }])
              ┌─┘
              ├─   0.395342s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(26) --> EdgeIndex(12)" }], [])))
            ┌─┘
            ├─   0.395357s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(26) --> EdgeIndex(12)" }], [])))
          ┌─┘
          ├─   0.395371s   0ms DEBUG Paths for price
          ├─   0.395380s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b -(🔑🧩{id})- Product/a -(price)- Float/a is valid
          ├─   0.395386s   0ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.395397s   0ms DEBUG path Product/b -(🔑🧩{id})- Product/a -(price)- Float/a is valid
          ├─   0.395402s   0ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(26) --> EdgeIndex(12)" }]))
        ┌─┘
        ├─   0.395418s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(isExpensive🧩{price})- Boolean/b
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(26) --> EdgeIndex(12)" }, root_node="Product/b"}
          └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=2}
            ├─   0.395441s   0ms DEBUG Building root query tree node: Product/b
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.395457s   0ms DEBUG Processing edge: Product/b -(🔑🧩{id})- Product/a
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.395470s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.395490s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.395502s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.395530s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(16)" }])
      ┌─┘
      ├─   0.395545s   1ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
      ├─   0.395552s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.395558s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.395564s   1ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.395569s   1ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(16)" }])
    ┌─┘
    ├─   0.395581s   1ms DEBUG Indirect paths found: 1
    ├─   0.395589s   1ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="price", leaf=true}
  ├─   0.395613s   0ms DEBUG Trying to advance to: price through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.395636s   0ms DEBUG checking edge Product/a -(price)- Float/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="price"}
        ├─   0.395651s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.395664s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(price)- Float/a
      ├─   0.395671s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.395684s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.395701s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.395716s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.395745s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.395761s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.395776s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.395785s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.395811s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.395818s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.395825s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.395830s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.395837s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.395842s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.395856s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.395871s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.395883s   0ms DEBUG Paths for id
        ├─   0.395891s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.395896s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.395905s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.395911s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.395923s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.395945s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.395958s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.395976s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.396019s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.396030s   0ms DEBUG No direct paths found
      ├─   0.396039s   0ms DEBUG going deeper
      ├─   0.396045s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.396050s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.396056s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.396061s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.396067s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.396071s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.396078s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.396083s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.396094s   0ms DEBUG Indirect paths found: 0
    ├─   0.396101s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.396125s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.396147s   0ms DEBUG checking edge Product/a -(name)- String/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="name"}
        ├─   0.396162s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.396175s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(name)- String/a
      ├─   0.396182s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.396195s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.396212s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.396227s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.396256s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.396271s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.396287s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.396294s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.396320s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.396327s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.396333s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.396339s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.396346s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.396351s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.396365s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.396379s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.396392s   0ms DEBUG Paths for id
        ├─   0.396399s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.396405s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.396414s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.396419s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.396432s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.396454s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.396467s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.396486s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.396524s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.396535s   0ms DEBUG No direct paths found
      ├─   0.396542s   0ms DEBUG going deeper
      ├─   0.396549s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.396554s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.396559s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.396564s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.396570s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.396575s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.396581s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.396586s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.396596s   0ms DEBUG Indirect paths found: 0
    ├─   0.396603s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.396627s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.396649s   0ms DEBUG checking edge Product/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.396663s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.396677s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
      ├─   0.396684s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.396696s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.396713s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.396728s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.396770s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.396794s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.396812s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.396820s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.396849s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.396856s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.396862s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.396868s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.396875s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.396881s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.396895s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.396910s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.396923s   0ms DEBUG Paths for id
        ├─   0.396930s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.396936s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.396946s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.396951s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.396964s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.396986s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.396998s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.397017s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.397056s   0ms DEBUG checking edge Product/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
          ├─   0.397072s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.397087s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
        ├─   0.397094s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(14)" }])
      ┌─┘
      ├─   0.397112s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
      ├─   0.397121s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.397126s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.397133s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.397137s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.397150s   0ms DEBUG Indirect paths found: 1
    ├─   0.397159s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(15)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.397198s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.397209s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.397220s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.397232s   0ms DEBUG Processing edge: Product/a -(🔑🧩{id})- Product/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.397243s   0ms DEBUG Processing edge: Product/b -(isAvailable)- Boolean/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.397261s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.397272s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.397282s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.397292s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(25) --> EdgeIndex(16)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.397322s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.397333s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.397343s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.397355s   0ms DEBUG Processing edge: Product/a -(🔑🧩{id})- Product/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.397367s   0ms DEBUG Processing edge: Product/b -(isExpensive🧩{price})- Boolean/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.397384s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.397395s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.397430s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.397442s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(12)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.397480s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.397492s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.397502s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.397517s   0ms DEBUG Processing edge: Product/a -(price)- Float/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.397534s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.397544s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.397554s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.397585s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.397596s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.397606s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.397617s   0ms DEBUG Processing edge: Product/a -(name)- String/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.397636s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.397646s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.397656s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(5) --> EdgeIndex(10)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.397686s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.397697s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.397707s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.397718s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.397735s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.397745s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.397755s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=5}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="product", arguments="id: \"p1\"", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.397870s   0ms DEBUG adding output field 'product' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=4, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/a -(🔑🧩{id})- Product/b", parent_fetch_step_index=1}
              ├─   0.397903s   0ms DEBUG created a new fetch step [2] subgraph(b) type(Product) requirement() key({id}) in children of 1
              ├─   0.397910s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.397917s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.397924s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path="product"}
                      ├─   0.397977s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.397999s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Product", field="isAvailable", leaf=true, list=false, response_path="product", fetch_path=""}
                  ├─   0.398083s   0ms DEBUG adding output field 'isAvailable' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/b"}
                    └─┐can_satisfy_edge{path="Product/b", edge="id"}
                      ├─   0.398159s   0ms DEBUG checking requirements {id} for edge 'Product/b -(🔑🧩{id})- Product/b'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/b", current_cost=0}
                            ├─   0.398202s   0ms DEBUG checking edge Product/b -(id)- ID/b
                            └─┐can_satisfy_edge{path="Product/b", edge="id"}
                              ├─   0.398221s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.398241s   0ms DEBUG Advancing path Product/b with edge Product/b -(id)- ID/b
                            ├─   0.398252s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(14)" }])
                          ┌─┘
                          ├─   0.398273s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(14)" }], [])))
                        ┌─┘
                        ├─   0.398290s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(14)" }], [])))
                      ┌─┘
                      ├─   0.398305s   0ms DEBUG Paths for id
                      ├─   0.398314s   0ms DEBUG   Path Product/b -(id)- ID/b is valid
                      ├─   0.398321s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.398332s   0ms DEBUG path Product/b -(id)- ID/b is valid
                      ├─   0.398339s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.398362s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.398370s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.398379s   0ms DEBUG created a new fetch step [3] subgraph(b) type(Product) requirement({price}) in children of 1
                  ├─   0.398388s   0ms DEBUG Adding {price} to fetch([3]).input
                  ├─   0.398395s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.398402s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.398412s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.398439s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/b -(🔑🧩{id})- Product/a", parent_fetch_step_index=4}
                        ├─   0.398476s   0ms DEBUG created a new fetch step [5] subgraph(a) type(Product) requirement() key({id}) in children of 4
                        ├─   0.398483s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                        ├─   0.398490s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.398498s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path=""}
                                ├─   0.398561s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.398591s   0ms DEBUG adding output field 'id' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path=""}
                            ├─   0.398690s   0ms DEBUG adding output field 'price' to fetch step [5]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.398753s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  ├─   0.398775s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="price", leaf=true, list=false, response_path="product", fetch_path="product"}
              ├─   0.398823s   0ms DEBUG adding output field 'price' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="name", leaf=true, list=false, response_path="product", fetch_path="product"}
              ├─   0.398859s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path="product"}
              ├─   0.398895s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.398969s   1ms DEBUG Done
├─   0.398978s   1ms DEBUG found roots
├─   0.398982s   1ms DEBUG print graph
├─   0.398987s   1ms DEBUG Nodes:
│ [1] Query/a {} → {product(id: "p1"){__typename id price name}} at $.
│ [2] Product/b {__typename id} → {isAvailable} at $.product
│ [3] Product/b {__typename price id} → {isExpensive} at $.product
│ [4] Product/b {__typename id} → {__typename id} at $.product
│ [5] Product/a {__typename id} → {price} at $.product
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│       [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.399029s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.399043s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.399109s   0ms DEBUG optimization found: merge parent [1] with child [5]
    └─┐perform_fetch_step_merge{}
      ├─   0.399129s   0ms DEBUG merging fetch steps [1] and [5]
      └─┐connect{parent=1, child=3}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.399193s   0ms DEBUG Found optimization: 3 <- 2
    └─┐perform_fetch_step_merge{}
      ├─   0.399207s   0ms DEBUG merging fetch steps [3] and [2]
      └─┐connect{parent=1, child=3}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.399534s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.402072s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"product": Object {"__typename": String("Product"), "id": String("p1"), "price": Number(9.99), "name": String("p1-name")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("p1"), "price": Number(9.99), "name": String("p1-name")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(9.99), "name": String("p1-name")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("p1"), "price": Number(9.99), "name": String("p1-name")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(9.99)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.402438s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.406614s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.406875s DEBUG execution result: ExecutionResult { data: Some(Object {"product": Object {"id": String("p1"), "name": String("p1-name"), "price": Number(9.99), "isExpensive": Bool(false), "isAvailable": Bool(true)}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{product(id: \"p1\"){__typename id price name}}")}, Object {"kind": String("Flatten"), "path": Array [String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{isExpensive isAvailable}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.410046s DEBUG original document: mutation {
  five: add(num: 5, requestId: "9a2edafe091be8")
  ten: multiply(by: 2, requestId: "9a2edafe091be8")
  twelve: add(num: 2, requestId: "9a2edafe091be8")
  final: delete(requestId: "9a2edafe091be8")
}

   0.410160s DEBUG normalized document: mutation{five: add(num: 5, requestId: "9a2edafe091be8") ten: multiply(by: 2, requestId: "9a2edafe091be8") twelve: add(num: 2, requestId: "9a2edafe091be8") final: delete(requestId: "9a2edafe091be8")}

   0.410178s DEBUG executable operation: mutation{five: add(num: 5, requestId: "9a2edafe091be8") ten: multiply(by: 2, requestId: "9a2edafe091be8") twelve: add(num: 2, requestId: "9a2edafe091be8") final: delete(requestId: "9a2edafe091be8")}
┐walk_operation{}
├─   0.410595s   0ms DEBUG operation is of type Mutation
└─┐process_field{field_name="delete", leaf=true}
  ├─   0.410657s   0ms DEBUG Trying to advance to: final: delete(requestId: "9a2edafe091be8") through 3 possible paths
  └─┐explore_path{path="root(Mutation) -(a)- Mutation/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "delete", selections: SelectionSet { items: [] }, alias: Some("final"), arguments: Some(ArgumentsMap { arguments_map: {"requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a", current_cost=1000}
      ├─   0.410714s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.410737s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "delete", selections: SelectionSet { items: [] }, alias: Some("final"), arguments: Some(ArgumentsMap { arguments_map: {"requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a", current_cost=1000}
      ├─   0.410765s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.410772s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.410786s   0ms DEBUG Indirect paths found: 0
    ├─   0.410795s   0ms WARN failed to advance: root(Mutation) -(a)- Mutation/a
  ┌─┘
  └─┐explore_path{path="root(Mutation) -(b)- Mutation/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "delete", selections: SelectionSet { items: [] }, alias: Some("final"), arguments: Some(ArgumentsMap { arguments_map: {"requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(b)- Mutation/b", current_cost=1000}
      ├─   0.410834s   0ms DEBUG checking edge Mutation/b -(delete)- Int/b
      └─┐can_satisfy_edge{path="root(Mutation) -(b)- Mutation/b", edge="delete"}
        ├─   0.410858s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.410875s   0ms DEBUG Advancing path root(Mutation) -(b)- Mutation/b with edge Mutation/b -(delete)- Int/b
      ├─   0.410887s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(2) --> EdgeIndex(21)" }])
    ┌─┘
    ├─   0.410904s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "delete", selections: SelectionSet { items: [] }, alias: Some("final"), arguments: Some(ArgumentsMap { arguments_map: {"requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(b)- Mutation/b", current_cost=1000}
      ├─   0.410928s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.410935s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.410948s   0ms DEBUG Indirect paths found: 0
    ├─   0.410956s   0ms DEBUG advanced: root(Mutation) -(b)- Mutation/b
  ┌─┘
  └─┐explore_path{path="root(Mutation) -(c)- Mutation/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "delete", selections: SelectionSet { items: [] }, alias: Some("final"), arguments: Some(ArgumentsMap { arguments_map: {"requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(c)- Mutation/c", current_cost=1000}
      ├─   0.410988s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411002s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "delete", selections: SelectionSet { items: [] }, alias: Some("final"), arguments: Some(ArgumentsMap { arguments_map: {"requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(c)- Mutation/c", current_cost=1000}
      ├─   0.411020s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.411026s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411039s   0ms DEBUG Indirect paths found: 0
    ├─   0.411046s   0ms WARN failed to advance: root(Mutation) -(c)- Mutation/c
  ┌─┘
┌─┘
└─┐process_field{field_name="add", leaf=true}
  ├─   0.411079s   0ms DEBUG Trying to advance to: twelve: add(num: 2, requestId: "9a2edafe091be8") through 3 possible paths
  └─┐explore_path{path="root(Mutation) -(a)- Mutation/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "add", selections: SelectionSet { items: [] }, alias: Some("twelve"), arguments: Some(ArgumentsMap { arguments_map: {"num": Int(2), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a", current_cost=1000}
      ├─   0.411108s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411121s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "add", selections: SelectionSet { items: [] }, alias: Some("twelve"), arguments: Some(ArgumentsMap { arguments_map: {"num": Int(2), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a", current_cost=1000}
      ├─   0.411140s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.411146s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411159s   0ms DEBUG Indirect paths found: 0
    ├─   0.411166s   0ms WARN failed to advance: root(Mutation) -(a)- Mutation/a
  ┌─┘
  └─┐explore_path{path="root(Mutation) -(b)- Mutation/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "add", selections: SelectionSet { items: [] }, alias: Some("twelve"), arguments: Some(ArgumentsMap { arguments_map: {"num": Int(2), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(b)- Mutation/b", current_cost=1000}
      ├─   0.411199s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411212s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "add", selections: SelectionSet { items: [] }, alias: Some("twelve"), arguments: Some(ArgumentsMap { arguments_map: {"num": Int(2), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(b)- Mutation/b", current_cost=1000}
      ├─   0.411229s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.411235s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411248s   0ms DEBUG Indirect paths found: 0
    ├─   0.411255s   0ms WARN failed to advance: root(Mutation) -(b)- Mutation/b
  ┌─┘
  └─┐explore_path{path="root(Mutation) -(c)- Mutation/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "add", selections: SelectionSet { items: [] }, alias: Some("twelve"), arguments: Some(ArgumentsMap { arguments_map: {"num": Int(2), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(c)- Mutation/c", current_cost=1000}
      ├─   0.411288s   0ms DEBUG checking edge Mutation/c -(add)- Int/c
      └─┐can_satisfy_edge{path="root(Mutation) -(c)- Mutation/c", edge="add"}
        ├─   0.411306s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.411322s   0ms DEBUG Advancing path root(Mutation) -(c)- Mutation/c with edge Mutation/c -(add)- Int/c
      ├─   0.411332s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(3) --> EdgeIndex(23)" }])
    ┌─┘
    ├─   0.411347s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "add", selections: SelectionSet { items: [] }, alias: Some("twelve"), arguments: Some(ArgumentsMap { arguments_map: {"num": Int(2), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(c)- Mutation/c", current_cost=1000}
      ├─   0.411368s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.411375s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411387s   0ms DEBUG Indirect paths found: 0
    ├─   0.411398s   0ms DEBUG advanced: root(Mutation) -(c)- Mutation/c
  ┌─┘
┌─┘
└─┐process_field{field_name="multiply", leaf=true}
  ├─   0.411471s   0ms DEBUG Trying to advance to: ten: multiply(by: 2, requestId: "9a2edafe091be8") through 3 possible paths
  └─┐explore_path{path="root(Mutation) -(a)- Mutation/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "multiply", selections: SelectionSet { items: [] }, alias: Some("ten"), arguments: Some(ArgumentsMap { arguments_map: {"by": Int(2), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a", current_cost=1000}
      ├─   0.411510s   0ms DEBUG checking edge Mutation/a -(multiply)- Int/a
      └─┐can_satisfy_edge{path="root(Mutation) -(a)- Mutation/a", edge="multiply"}
        ├─   0.411529s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.411547s   0ms DEBUG Advancing path root(Mutation) -(a)- Mutation/a with edge Mutation/a -(multiply)- Int/a
      ├─   0.411558s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(19)" }])
    ┌─┘
    ├─   0.411574s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "multiply", selections: SelectionSet { items: [] }, alias: Some("ten"), arguments: Some(ArgumentsMap { arguments_map: {"by": Int(2), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a", current_cost=1000}
      ├─   0.411597s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.411606s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411619s   0ms DEBUG Indirect paths found: 0
    ├─   0.411627s   0ms DEBUG advanced: root(Mutation) -(a)- Mutation/a
  ┌─┘
  └─┐explore_path{path="root(Mutation) -(b)- Mutation/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "multiply", selections: SelectionSet { items: [] }, alias: Some("ten"), arguments: Some(ArgumentsMap { arguments_map: {"by": Int(2), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(b)- Mutation/b", current_cost=1000}
      ├─   0.411659s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411672s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "multiply", selections: SelectionSet { items: [] }, alias: Some("ten"), arguments: Some(ArgumentsMap { arguments_map: {"by": Int(2), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(b)- Mutation/b", current_cost=1000}
      ├─   0.411695s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.411701s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411714s   0ms DEBUG Indirect paths found: 0
    ├─   0.411721s   0ms WARN failed to advance: root(Mutation) -(b)- Mutation/b
  ┌─┘
  └─┐explore_path{path="root(Mutation) -(c)- Mutation/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "multiply", selections: SelectionSet { items: [] }, alias: Some("ten"), arguments: Some(ArgumentsMap { arguments_map: {"by": Int(2), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(c)- Mutation/c", current_cost=1000}
      ├─   0.411753s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411766s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "multiply", selections: SelectionSet { items: [] }, alias: Some("ten"), arguments: Some(ArgumentsMap { arguments_map: {"by": Int(2), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(c)- Mutation/c", current_cost=1000}
      ├─   0.411784s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.411790s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411803s   0ms DEBUG Indirect paths found: 0
    ├─   0.411810s   0ms WARN failed to advance: root(Mutation) -(c)- Mutation/c
  ┌─┘
┌─┘
└─┐process_field{field_name="add", leaf=true}
  ├─   0.411838s   0ms DEBUG Trying to advance to: five: add(num: 5, requestId: "9a2edafe091be8") through 3 possible paths
  └─┐explore_path{path="root(Mutation) -(a)- Mutation/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "add", selections: SelectionSet { items: [] }, alias: Some("five"), arguments: Some(ArgumentsMap { arguments_map: {"num": Int(5), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a", current_cost=1000}
      ├─   0.411867s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411881s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "add", selections: SelectionSet { items: [] }, alias: Some("five"), arguments: Some(ArgumentsMap { arguments_map: {"num": Int(5), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(a)- Mutation/a", current_cost=1000}
      ├─   0.411899s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.411905s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411918s   0ms DEBUG Indirect paths found: 0
    ├─   0.411926s   0ms WARN failed to advance: root(Mutation) -(a)- Mutation/a
  ┌─┘
  └─┐explore_path{path="root(Mutation) -(b)- Mutation/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "add", selections: SelectionSet { items: [] }, alias: Some("five"), arguments: Some(ArgumentsMap { arguments_map: {"num": Int(5), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(b)- Mutation/b", current_cost=1000}
      ├─   0.411957s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411970s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "add", selections: SelectionSet { items: [] }, alias: Some("five"), arguments: Some(ArgumentsMap { arguments_map: {"num": Int(5), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(b)- Mutation/b", current_cost=1000}
      ├─   0.411988s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.411994s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.412006s   0ms DEBUG Indirect paths found: 0
    ├─   0.412014s   0ms WARN failed to advance: root(Mutation) -(b)- Mutation/b
  ┌─┘
  └─┐explore_path{path="root(Mutation) -(c)- Mutation/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "add", selections: SelectionSet { items: [] }, alias: Some("five"), arguments: Some(ArgumentsMap { arguments_map: {"num": Int(5), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(c)- Mutation/c", current_cost=1000}
      ├─   0.412045s   0ms DEBUG checking edge Mutation/c -(add)- Int/c
      └─┐can_satisfy_edge{path="root(Mutation) -(c)- Mutation/c", edge="add"}
        ├─   0.412063s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.412079s   0ms DEBUG Advancing path root(Mutation) -(c)- Mutation/c with edge Mutation/c -(add)- Int/c
      ├─   0.412088s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(3) --> EdgeIndex(23)" }])
    ┌─┘
    ├─   0.412103s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "add", selections: SelectionSet { items: [] }, alias: Some("five"), arguments: Some(ArgumentsMap { arguments_map: {"num": Int(5), "requestId": String("9a2edafe091be8")} }), skip_if: None, include_if: None }), path="root(Mutation) -(c)- Mutation/c", current_cost=1000}
      ├─   0.412125s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.412131s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.412144s   0ms DEBUG Indirect paths found: 0
    ├─   0.412152s   0ms DEBUG advanced: root(Mutation) -(c)- Mutation/c
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1001, egdes: "EdgeIndex(2) --> EdgeIndex(21)" }, root_node="root(Mutation)"}
└─┐create_root_for_path_sequences{root_node="root(Mutation)", segments_count=2}
  ├─   0.412201s   0ms DEBUG Building root query tree node: root(Mutation)
  └─┐from_path_segment_sequences{current_index=0, total_segments=2}
    ├─   0.412217s   0ms DEBUG Processing edge: root(Mutation) -(b)- Mutation/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=2}
      ├─   0.412231s   0ms DEBUG Processing edge: Mutation/b -(delete)- Int/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=2}
      ┌─┘
      ├─   0.412254s   0ms DEBUG No subsequent steps (leaf or end of path)
    ┌─┘
    ├─   0.412269s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1001, egdes: "EdgeIndex(3) --> EdgeIndex(23)" }, root_node="root(Mutation)"}
└─┐create_root_for_path_sequences{root_node="root(Mutation)", segments_count=2}
  ├─   0.412301s   0ms DEBUG Building root query tree node: root(Mutation)
  └─┐from_path_segment_sequences{current_index=0, total_segments=2}
    ├─   0.412312s   0ms DEBUG Processing edge: root(Mutation) -(c)- Mutation/c
    └─┐from_path_segment_sequences{current_index=1, total_segments=2}
      ├─   0.412323s   0ms DEBUG Processing edge: Mutation/c -(add)- Int/c
      └─┐from_path_segment_sequences{current_index=2, total_segments=2}
      ┌─┘
      ├─   0.412340s   0ms DEBUG No subsequent steps (leaf or end of path)
    ┌─┘
    ├─   0.412350s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(19)" }, root_node="root(Mutation)"}
└─┐create_root_for_path_sequences{root_node="root(Mutation)", segments_count=2}
  ├─   0.412384s   0ms DEBUG Building root query tree node: root(Mutation)
  └─┐from_path_segment_sequences{current_index=0, total_segments=2}
    ├─   0.412394s   0ms DEBUG Processing edge: root(Mutation) -(a)- Mutation/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=2}
      ├─   0.412405s   0ms DEBUG Processing edge: Mutation/a -(multiply)- Int/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=2}
      ┌─┘
      ├─   0.412422s   0ms DEBUG No subsequent steps (leaf or end of path)
    ┌─┘
    ├─   0.412432s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1001, egdes: "EdgeIndex(3) --> EdgeIndex(23)" }, root_node="root(Mutation)"}
└─┐create_root_for_path_sequences{root_node="root(Mutation)", segments_count=2}
  ├─   0.412462s   0ms DEBUG Building root query tree node: root(Mutation)
  └─┐from_path_segment_sequences{current_index=0, total_segments=2}
    ├─   0.412472s   0ms DEBUG Processing edge: root(Mutation) -(c)- Mutation/c
    └─┐from_path_segment_sequences{current_index=1, total_segments=2}
      ├─   0.412483s   0ms DEBUG Processing edge: Mutation/c -(add)- Int/c
      └─┐from_path_segment_sequences{current_index=2, total_segments=2}
      ┌─┘
      ├─   0.412499s   0ms DEBUG No subsequent steps (leaf or end of path)
    ┌─┘
    ├─   0.412509s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=4}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=3}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Mutation", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Mutation", field="delete", alias="final", arguments="requestId: \"9a2edafe091be8\"", leaf=true, list=false, response_path="", fetch_path=""}
          ├─   0.412617s   0ms DEBUG adding output field 'delete' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
    └─┐process_subgraph_entrypoint_edge{subgraph="c", type_name="Mutation", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=2}
      ┌─┘
      └─┐connect{parent=0, child=2}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=2}
        └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Mutation", field="add", alias="twelve", arguments="num: 2, requestId: \"9a2edafe091be8\"", leaf=true, list=false, response_path="", fetch_path=""}
          ├─   0.412717s   0ms DEBUG adding output field 'add' to fetch step [2]
          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
          ┌─┘
        ┌─┘
        └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Mutation", field="add", alias="five", arguments="num: 5, requestId: \"9a2edafe091be8\"", leaf=true, list=false, response_path="", fetch_path=""}
          ├─   0.412755s   0ms DEBUG adding output field 'add' to fetch step [2]
          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Mutation", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=3}
      ┌─┘
      └─┐connect{parent=0, child=3}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
        └─┐process_plain_field_edge{parent_fetch_step_index=3, type_name="Mutation", field="multiply", alias="ten", arguments="by: 2, requestId: \"9a2edafe091be8\"", leaf=true, list=false, response_path="", fetch_path=""}
          ├─   0.412838s   0ms DEBUG adding output field 'multiply' to fetch step [3]
          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.412885s   0ms DEBUG Done
├─   0.412892s   0ms DEBUG found roots
├─   0.412896s   0ms DEBUG print graph
├─   0.412901s   0ms DEBUG Nodes:
│ [1] Mutation/b {} → {final: delete(requestId: "9a2edafe091be8")} at $.
│ [2] Mutation/c {} → {twelve: add(num: 2, requestId: "9a2edafe091be8") five: add(num: 5, requestId: "9a2edafe091be8")} at $.
│ [3] Mutation/a {} → {ten: multiply(by: 2, requestId: "9a2edafe091be8")} at $.
│ 
│ Tree:
│ [3]
│ [2]
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
    └─┐connect{parent=3, child=2}
    ┌─┘
    └─┐connect{parent=2, child=1}
    ┌─┘
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.413289s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.415921s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="c"}
      └─┐execute{subgraph_name="c"}
        ├─   0.416212s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.420311s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="b"}
      └─┐execute{subgraph_name="b"}
        ├─   0.420618s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.422161s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.422340s DEBUG execution result: ExecutionResult { data: Some(Null), errors: Some([GraphQLError { message: "Cannot query field \"multiply\" on type \"Query\".", locations: Some([GraphQLErrorLocation { line: 1, column: 2 }]), path: None, extensions: Some({"code": String("GRAPHQL_VALIDATION_FAILED")}) }, GraphQLError { message: "Cannot query field \"add\" on type \"Query\".", locations: Some([GraphQLErrorLocation { line: 1, column: 2 }]), path: None, extensions: Some({"code": String("GRAPHQL_VALIDATION_FAILED")}) }, GraphQLError { message: "Cannot query field \"add\" on type \"Query\".", locations: Some([GraphQLErrorLocation { line: 1, column: 51 }]), path: None, extensions: Some({"code": String("GRAPHQL_VALIDATION_FAILED")}) }, GraphQLError { message: "Cannot query field \"delete\" on type \"Query\".", locations: Some([GraphQLErrorLocation { line: 1, column: 2 }]), path: None, extensions: Some({"code": String("GRAPHQL_VALIDATION_FAILED")}) }]), extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{ten: multiply(by: 2, requestId: \"9a2edafe091be8\")}")}, Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("{twelve: add(num: 2, requestId: \"9a2edafe091be8\") five: add(num: 5, requestId: \"9a2edafe091be8\")}")}, Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{final: delete(requestId: \"9a2edafe091be8\")}")}]}}}) }
