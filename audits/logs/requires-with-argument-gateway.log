generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.12s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_object_type{name="Author"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Comment"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Post"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Product"}
    └─┐build_fields{fields_count=5}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="C"}
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
└─┐decompose_from_supergraph{graph_id="D"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006620s   0ms DEBUG Building graph for supergraph with 17 definitions
  └─┐build_root_nodes{}
    ├─   0.006659s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006710s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006723s   0ms INFO [ ] Field 'Query.feed/A' does is not available in the subgraph, skipping edge creation (type: Post)
    ├─   0.006728s   0ms INFO [ ] Field 'Query.products/A' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006734s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006741s   0ms INFO [ ] Field 'Query.feed/B' does is not available in the subgraph, skipping edge creation (type: Post)
    ├─   0.006747s   0ms INFO [x] Creating field move edge 'Query.products/B' (type: Product)
    ├─   0.006754s   0ms INFO [x] Creating field move edge 'Query.products/B' (type: Product)
    ├─   0.006761s   0ms INFO [x] Creating owned field move edge 'Query.__typename/C' (type: String)
    ├─   0.006770s   0ms INFO [x] Creating field move edge 'Query.feed/C' (type: Post)
    ├─   0.006776s   0ms INFO [x] Creating field move edge 'Query.feed/C' (type: Post)
    ├─   0.006782s   0ms INFO [ ] Field 'Query.products/C' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006787s   0ms INFO [x] Creating owned field move edge 'Query.__typename/D' (type: String)
    ├─   0.006794s   0ms INFO [ ] Field 'Query.feed/D' does is not available in the subgraph, skipping edge creation (type: Post)
    ├─   0.006799s   0ms INFO [ ] Field 'Query.products/D' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006805s   0ms INFO [x] Creating owned field move edge 'Product.__typename/A' (type: String)
    ├─   0.006813s   0ms INFO [ ] Field 'Product.weight/A' is external, skipping edge creation
    ├─   0.006818s   0ms INFO [ ] Field 'Product.price/A' is external, skipping edge creation
    ├─   0.006823s   0ms INFO [ ] Field 'Product.name/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006828s   0ms INFO [x] Creating field move edge 'Product.upc/A' (type: String)
    ├─   0.006834s   0ms INFO [x] Creating field move edge 'Product.upc/A' (type: String)
    ├─   0.006957s   0ms INFO [x] Creating field move edge 'Product.shippingEstimate/A' (type: Int)
    ├─   0.006993s   0ms INFO [x] Creating field move edge 'Product.shippingEstimate/A' (type: Int)
    ├─   0.007005s   0ms INFO [x] Creating owned field move edge 'Product.__typename/B' (type: String)
    ├─   0.007014s   0ms INFO [x] Creating field move edge 'Product.weight/B' (type: Int)
    ├─   0.007021s   0ms INFO [x] Creating field move edge 'Product.weight/B' (type: Int)
    ├─   0.007026s   0ms INFO [x] Creating field move edge 'Product.price/B' (type: Int)
    ├─   0.007032s   0ms INFO [x] Creating field move edge 'Product.price/B' (type: Int)
    ├─   0.007038s   0ms INFO [x] Creating field move edge 'Product.name/B' (type: String)
    ├─   0.007043s   0ms INFO [x] Creating field move edge 'Product.name/B' (type: String)
    ├─   0.007049s   0ms INFO [x] Creating field move edge 'Product.upc/B' (type: String)
    ├─   0.007055s   0ms INFO [x] Creating field move edge 'Product.upc/B' (type: String)
    ├─   0.007061s   0ms INFO [ ] Field 'Product.shippingEstimate/B' does is not available in the subgraph, skipping edge creation (type: Int)
    ├─   0.007066s   0ms INFO [x] Creating owned field move edge 'Comment.__typename/C' (type: String)
    ├─   0.007077s   0ms INFO [ ] Field 'Comment.date/C' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007082s   0ms INFO [x] Creating field move edge 'Comment.authorId/C' (type: ID)
    ├─   0.007088s   0ms INFO [x] Creating field move edge 'Comment.authorId/C' (type: ID)
    ├─   0.007093s   0ms INFO [x] Creating field move edge 'Comment.id/C' (type: ID)
    ├─   0.007099s   0ms INFO [x] Creating field move edge 'Comment.id/C' (type: ID)
    ├─   0.007104s   0ms INFO [x] Creating field move edge 'Comment.body/C' (type: String)
    ├─   0.007110s   0ms INFO [x] Creating field move edge 'Comment.body/C' (type: String)
    ├─   0.007116s   0ms INFO [x] Creating owned field move edge 'Comment.__typename/D' (type: String)
    ├─   0.007122s   0ms INFO [x] Creating field move edge 'Comment.date/D' (type: String)
    ├─   0.007128s   0ms INFO [x] Creating field move edge 'Comment.date/D' (type: String)
    ├─   0.007134s   0ms INFO [ ] Field 'Comment.authorId/D' is external, skipping edge creation
    ├─   0.007139s   0ms INFO [x] Creating field move edge 'Comment.id/D' (type: ID)
    ├─   0.007145s   0ms INFO [x] Creating field move edge 'Comment.id/D' (type: ID)
    ├─   0.007150s   0ms INFO [ ] Field 'Comment.body/D' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007156s   0ms INFO [x] Creating owned field move edge 'Post.__typename/C' (type: String)
    ├─   0.007162s   0ms INFO [x] Creating field move edge 'Post.id/C' (type: ID)
    ├─   0.007168s   0ms INFO [x] Creating field move edge 'Post.id/C' (type: ID)
    ├─   0.007173s   0ms INFO [ ] Field 'Post.comments/C' does is not available in the subgraph, skipping edge creation (type: Comment)
    ├─   0.007178s   0ms INFO [ ] Field 'Post.author/C' does is not available in the subgraph, skipping edge creation (type: Author)
    ├─   0.007183s   0ms INFO [x] Creating owned field move edge 'Post.__typename/D' (type: String)
    ├─   0.007190s   0ms INFO [x] Creating field move edge 'Post.id/D' (type: ID)
    ├─   0.007195s   0ms INFO [x] Creating field move edge 'Post.id/D' (type: ID)
    ├─   0.007201s   0ms INFO [x] Creating field move edge 'Post.comments/D' (type: Comment)
    ├─   0.007207s   0ms INFO [x] Creating field move edge 'Post.comments/D' (type: Comment)
    ├─   0.007283s   0ms INFO [x] Creating field move edge 'Post.author/D' (type: Author)
    ├─   0.007315s   0ms INFO [x] Creating field move edge 'Post.author/D' (type: Author)
    ├─   0.007328s   0ms INFO [x] Creating owned field move edge 'Author.__typename/D' (type: String)
    ├─   0.007336s   0ms INFO [x] Creating field move edge 'Author.id/D' (type: ID)
    ├─   0.007342s   0ms INFO [x] Creating field move edge 'Author.id/D' (type: ID)
    ├─   0.007347s   0ms INFO [x] Creating field move edge 'Author.name/D' (type: String)
    ├─   0.007353s   0ms INFO [x] Creating field move edge 'Author.name/D' (type: String)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.007455s   0ms INFO Creating self-referencing entity move edge in 'Product/A' via key 'upc'
    ├─   0.007542s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/B' via key 'upc'
    ├─   0.007597s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/A' via key 'upc'
    ├─   0.007630s   0ms INFO Creating self-referencing entity move edge in 'Product/B' via key 'upc'
    ├─   0.007662s   0ms INFO Creating self-referencing entity move edge in 'Comment/C' via key 'id'
    ├─   0.007698s   0ms INFO Creating entity move edge from 'Comment/C' to 'Comment/D' via key 'id'
    ├─   0.007734s   0ms INFO Creating entity move edge from 'Comment/D' to 'Comment/C' via key 'id'
    ├─   0.007766s   0ms INFO Creating self-referencing entity move edge in 'Comment/D' via key 'id'
    ├─   0.007797s   0ms INFO Creating self-referencing entity move edge in 'Post/C' via key 'id'
    ├─   0.007833s   0ms INFO Creating entity move edge from 'Post/C' to 'Post/D' via key 'id'
    ├─   0.007865s   0ms INFO Creating entity move edge from 'Post/D' to 'Post/C' via key 'id'
    ├─   0.007913s   0ms INFO Creating self-referencing entity move edge in 'Post/D' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.066953s INFO Starting server on http://localhost:4000
   0.068031s INFO starting 16 workers
   0.068079s INFO Actix runtime found; starting in Actix runtime
   0.068087s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.199215s DEBUG original document: query ping {
  __typename
}

   0.199372s DEBUG normalized document: query ping {__typename}

   0.199401s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.200057s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.287280s DEBUG original document: query {
  products {
    upc
    name
    shippingEstimate
  }
}

   0.287408s DEBUG normalized document: query{products{upc name shippingEstimate}}

   0.287423s DEBUG executable operation: query{products{upc name shippingEstimate}}
┐walk_operation{}
├─   0.287817s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="products", leaf=false}
  ├─   0.287869s   0ms DEBUG Trying to advance to: products{upc name shippingEstimate} through 2 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.287928s   0ms DEBUG checking edge Query/b -(products)- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="products"}
        ├─   0.287966s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.287998s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(products)- Product/b
      ├─   0.288010s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.288028s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.288079s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.288089s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.288104s   0ms DEBUG Indirect paths found: 0
    ├─   0.288114s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  └─┐explore_path{path="root(Query) -(c)- Query/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.288146s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.288157s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.288173s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.288178s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.288189s   0ms DEBUG Indirect paths found: 0
    ├─   0.288196s   0ms WARN failed to advance: root(Query) -(c)- Query/c
  ┌─┘
  ├─   0.288214s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="shippingEstimate", leaf=true}
  ├─   0.288236s   0ms DEBUG Trying to advance to: shippingEstimate through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(products)- Product/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b", current_cost=1001}
      ├─   0.288260s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.288271s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b", current_cost=1001}
      ├─   0.288289s   0ms DEBUG Exploring edge Product/b -(🔑🧩{upc})- Product/b
      ├─   0.288296s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.288304s   0ms DEBUG Exploring edge Product/b -(🔑🧩{upc})- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b", edge="upc"}
        ├─   0.288323s   0ms DEBUG checking requirements {upc} for edge 'Product/b -(🔑🧩{upc})- Product/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b", current_cost=1001}
              ├─   0.288386s   0ms DEBUG checking edge Product/b -(upc)- String/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b", edge="upc"}
                ├─   0.288421s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.288440s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(products)- Product/b with edge Product/b -(upc)- String/b
              ├─   0.288450s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b", current_cost=1001}
              ├─   0.288481s   0ms DEBUG Exploring edge Product/b -(🔑🧩{upc})- Product/b
              ├─   0.288488s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.288495s   0ms DEBUG Exploring edge Product/b -(🔑🧩{upc})- Product/a
              ├─   0.288504s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.288528s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.288537s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.288559s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15)" }], [])))
          ┌─┘
          ├─   0.288578s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15)" }], [])))
        ┌─┘
        ├─   0.288592s   0ms DEBUG Paths for upc
        ├─   0.288603s   0ms DEBUG   Path root(Query) -(b)- Query/b -(products)- Product/b -(upc)- String/b is valid
        ├─   0.288610s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.288627s   0ms DEBUG path Product/b -(upc)- String/b is valid
        ├─   0.288633s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(15)" }]))
      ┌─┘
      ├─   0.288669s   0ms DEBUG Advancing path to Product/b -(🔑🧩{upc})- Product/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(15)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.288700s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.288716s   0ms DEBUG Processing edge: Product/b -(upc)- String/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.288737s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", current_cost=2003}
        ├─   0.288788s   0ms DEBUG checking edge Product/a -(shippingEstimate🧩{price(currency: "USD") weight})- Int/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", edge="shippingEstimate"}
          ├─   0.288809s   0ms DEBUG checking requirements {price(currency: "USD") weight} for edge 'Product/a -(shippingEstimate🧩{price(currency: "USD") weight})- Int/a'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"currency": String("USD")} }), skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", current_cost=2003}
                ├─   0.288846s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"currency": String("USD")} }), skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", current_cost=2003}
                ├─   0.288880s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", edge="upc"}
                  ├─   0.288925s   0ms DEBUG checking requirements {upc} for edge 'Product/a -(🔑🧩{upc})- Product/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", current_cost=2003}
                        ├─   0.288981s   0ms DEBUG checking edge Product/a -(upc)- String/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", edge="upc"}
                          ├─   0.289015s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.289037s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a with edge Product/a -(upc)- String/a
                        ├─   0.289050s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(9)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", current_cost=2003}
                        ├─   0.289085s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
                        ├─   0.289094s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                        ├─   0.289102s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/a
                        ├─   0.289109s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                        ├─   0.289118s   0ms DEBUG Finished finding indirect paths, found total of 0
                        ├─   0.289125s   0ms INFO return=Ok([])
                      ┌─┘
                      ├─   0.289143s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(9)" }], [])))
                    ┌─┘
                    ├─   0.289160s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(9)" }], [])))
                  ┌─┘
                  ├─   0.289176s   0ms DEBUG Paths for upc
                  ├─   0.289186s   0ms DEBUG   Path root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a -(upc)- String/a is valid
                  ├─   0.289209s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.289227s   0ms DEBUG path Product/a -(upc)- String/a is valid
                  ├─   0.289234s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(9)" }]))
                ┌─┘
                ├─   0.289256s   0ms DEBUG Advancing path to Product/a -(🔑🧩{upc})- Product/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(9)" }, root_node="Product/a"}
                  └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                    ├─   0.289285s   0ms DEBUG Building root query tree node: Product/a
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.289301s   0ms DEBUG Processing edge: Product/a -(upc)- String/a
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.289325s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"currency": String("USD")} }), skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a -(🔑🧩{upc})- Product/b", current_cost=3005}
                  ├─   0.289382s   0ms DEBUG checking edge Product/b -(price)- Int/b
                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a -(🔑🧩{upc})- Product/b", edge="price"}
                    ├─   0.289404s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.289423s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a -(🔑🧩{upc})- Product/b with edge Product/b -(price)- Int/b
                  ├─   0.289448s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(33) --> EdgeIndex(13)" }])
                ┌─┘
                ├─   0.289478s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{upc})- Product/b
                ├─   0.289489s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/a
                ├─   0.289496s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
                ├─   0.289506s   0ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.289512s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(33) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.289531s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(33) --> EdgeIndex(13)" }], [])))
            ┌─┘
            ├─   0.289563s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(33) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.289582s   0ms DEBUG Paths for price(currency: "USD")
          ├─   0.289595s   0ms DEBUG   Path root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a -(🔑🧩{upc})- Product/b -(price)- Int/b is valid
          ├─   0.289611s   0ms DEBUG Found 1 best paths for this leaf requirement
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", current_cost=2003}
                ├─   0.289677s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", current_cost=2003}
                ├─   0.289720s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", edge="upc"}
                  ├─   0.289742s   0ms DEBUG checking requirements {upc} for edge 'Product/a -(🔑🧩{upc})- Product/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", current_cost=2003}
                        ├─   0.289779s   0ms DEBUG checking edge Product/a -(upc)- String/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", edge="upc"}
                          ├─   0.289800s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.289819s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a with edge Product/a -(upc)- String/a
                        ├─   0.289830s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(9)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", current_cost=2003}
                        ├─   0.289865s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
                        ├─   0.289873s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                        ├─   0.289881s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/a
                        ├─   0.289889s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                        ├─   0.289897s   0ms DEBUG Finished finding indirect paths, found total of 0
                        ├─   0.289905s   0ms INFO return=Ok([])
                      ┌─┘
                      ├─   0.289922s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(9)" }], [])))
                    ┌─┘
                    ├─   0.289940s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(9)" }], [])))
                  ┌─┘
                  ├─   0.289956s   0ms DEBUG Paths for upc
                  ├─   0.289966s   0ms DEBUG   Path root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a -(upc)- String/a is valid
                  ├─   0.289973s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.289985s   0ms DEBUG path Product/a -(upc)- String/a is valid
                  ├─   0.290009s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(9)" }]))
                ┌─┘
                ├─   0.290035s   0ms DEBUG Advancing path to Product/a -(🔑🧩{upc})- Product/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(9)" }, root_node="Product/a"}
                  └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
                    ├─   0.290066s   0ms DEBUG Building root query tree node: Product/a
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.290082s   0ms DEBUG Processing edge: Product/a -(upc)- String/a
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.290105s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a -(🔑🧩{upc})- Product/b", current_cost=3005}
                  ├─   0.290197s   0ms DEBUG checking edge Product/b -(weight)- Int/b
                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a -(🔑🧩{upc})- Product/b", edge="weight"}
                    ├─   0.290254s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.290290s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a -(🔑🧩{upc})- Product/b with edge Product/b -(weight)- Int/b
                  ├─   0.290301s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(33) --> EdgeIndex(12)" }])
                ┌─┘
                ├─   0.290336s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{upc})- Product/b
                ├─   0.290349s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/a
                ├─   0.290356s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
                ├─   0.290366s   0ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.290372s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(33) --> EdgeIndex(12)" }])
              ┌─┘
              ├─   0.290392s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(33) --> EdgeIndex(12)" }], [])))
            ┌─┘
            ├─   0.290407s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(33) --> EdgeIndex(12)" }], [])))
          ┌─┘
          ├─   0.290422s   1ms DEBUG Paths for weight
          ├─   0.290433s   1ms DEBUG   Path root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a -(🔑🧩{upc})- Product/b -(weight)- Int/b is valid
          ├─   0.290439s   1ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.290450s   1ms DEBUG path Product/a -(🔑🧩{upc})- Product/b -(price)- Int/b is valid
          ├─   0.290468s   1ms DEBUG path Product/a -(🔑🧩{upc})- Product/b -(weight)- Int/b is valid
          ├─   0.290473s   1ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(33) --> EdgeIndex(13)" },  { cost: 1003, egdes: "EdgeIndex(33) --> EdgeIndex(12)" }]))
        ┌─┘
        ├─   0.290493s   1ms DEBUG Advancing path root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a with edge Product/a -(shippingEstimate🧩{price(currency: "USD") weight})- Int/a
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(33) --> EdgeIndex(13)" }, root_node="Product/a"}
          └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=2}
            ├─   0.290521s   0ms DEBUG Building root query tree node: Product/a
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.290535s   0ms DEBUG Processing edge: Product/a -(🔑🧩{upc})- Product/b
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.290550s   0ms DEBUG Processing edge: Product/b -(price)- Int/b
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.290571s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.290586s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(33) --> EdgeIndex(12)" }, root_node="Product/a"}
          └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=2}
            ├─   0.290626s   0ms DEBUG Building root query tree node: Product/a
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.290640s   0ms DEBUG Processing edge: Product/a -(🔑🧩{upc})- Product/b
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.290653s   0ms DEBUG Processing edge: Product/b -(weight)- Int/b
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.290674s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.290687s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐merge_trees{tree_count=2}
        ┌─┘
        ├─   0.290735s   1ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(10)" }])
      ┌─┘
      ├─   0.290752s   2ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{upc})- Product/a
      ├─   0.290762s   2ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.290767s   2ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.290781s   2ms DEBUG Indirect paths found: 1
    ├─   0.290789s   2ms DEBUG advanced: root(Query) -(b)- Query/b -(products)- Product/b
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.290846s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(products)- Product/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b", current_cost=1001}
      ├─   0.290875s   0ms DEBUG checking edge Product/b -(name)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b", edge="name"}
        ├─   0.290906s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.290922s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(products)- Product/b with edge Product/b -(name)- String/b
      ├─   0.290931s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.290945s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b", current_cost=1001}
      ├─   0.290964s   0ms DEBUG Exploring edge Product/b -(🔑🧩{upc})- Product/b
      ├─   0.290970s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.290976s   0ms DEBUG Exploring edge Product/b -(🔑🧩{upc})- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b", edge="upc"}
        ├─   0.290992s   0ms DEBUG checking requirements {upc} for edge 'Product/b -(🔑🧩{upc})- Product/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b", current_cost=1001}
              ├─   0.291023s   0ms DEBUG checking edge Product/b -(upc)- String/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b", edge="upc"}
                ├─   0.291041s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.291058s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(products)- Product/b with edge Product/b -(upc)- String/b
              ├─   0.291067s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b", current_cost=1001}
              ├─   0.291095s   0ms DEBUG Exploring edge Product/b -(🔑🧩{upc})- Product/b
              ├─   0.291103s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.291110s   0ms DEBUG Exploring edge Product/b -(🔑🧩{upc})- Product/a
              ├─   0.291117s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.291125s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.291132s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.291147s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15)" }], [])))
          ┌─┘
          ├─   0.291162s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15)" }], [])))
        ┌─┘
        ├─   0.291176s   0ms DEBUG Paths for upc
        ├─   0.291184s   0ms DEBUG   Path root(Query) -(b)- Query/b -(products)- Product/b -(upc)- String/b is valid
        ├─   0.291190s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.291201s   0ms DEBUG path Product/b -(upc)- String/b is valid
        ├─   0.291208s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(15)" }]))
      ┌─┘
      ├─   0.291221s   0ms DEBUG Advancing path to Product/b -(🔑🧩{upc})- Product/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(15)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.291261s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.291275s   0ms DEBUG Processing edge: Product/b -(upc)- String/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.291295s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", current_cost=2003}
        ├─   0.291335s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.291349s   0ms DEBUG No direct paths found
      ├─   0.291361s   0ms DEBUG going deeper
      ├─   0.291368s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/b
      ├─   0.291374s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.291380s   0ms DEBUG Exploring edge Product/a -(🔑🧩{upc})- Product/a
      ├─   0.291389s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.291399s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.291404s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.291416s   0ms DEBUG Indirect paths found: 0
    ├─   0.291423s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(products)- Product/b
  ┌─┘
┌─┘
└─┐process_field{field_name="upc", leaf=true}
  ├─   0.291449s   0ms DEBUG Trying to advance to: upc through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(products)- Product/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b", current_cost=1001}
      ├─   0.291473s   0ms DEBUG checking edge Product/b -(upc)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b", edge="upc"}
        ├─   0.291487s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.291501s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(products)- Product/b with edge Product/b -(upc)- String/b
      ├─   0.291509s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.291522s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b", current_cost=1001}
      ├─   0.291540s   0ms DEBUG Exploring edge Product/b -(🔑🧩{upc})- Product/b
      ├─   0.291546s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.291551s   0ms DEBUG Exploring edge Product/b -(🔑🧩{upc})- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b", edge="upc"}
        ├─   0.291566s   0ms DEBUG checking requirements {upc} for edge 'Product/b -(🔑🧩{upc})- Product/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b", current_cost=1001}
              ├─   0.291597s   0ms DEBUG checking edge Product/b -(upc)- String/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b", edge="upc"}
                ├─   0.291616s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.291632s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(products)- Product/b with edge Product/b -(upc)- String/b
              ├─   0.291640s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b", current_cost=1001}
              ├─   0.291669s   0ms DEBUG Exploring edge Product/b -(🔑🧩{upc})- Product/b
              ├─   0.291676s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.291682s   0ms DEBUG Exploring edge Product/b -(🔑🧩{upc})- Product/a
              ├─   0.291688s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.291696s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.291701s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.291716s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15)" }], [])))
          ┌─┘
          ├─   0.291731s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15)" }], [])))
        ┌─┘
        ├─   0.291744s   0ms DEBUG Paths for upc
        ├─   0.291752s   0ms DEBUG   Path root(Query) -(b)- Query/b -(products)- Product/b -(upc)- String/b is valid
        ├─   0.291758s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.291768s   0ms DEBUG path Product/b -(upc)- String/b is valid
        ├─   0.291773s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(15)" }]))
      ┌─┘
      ├─   0.291787s   0ms DEBUG Advancing path to Product/b -(🔑🧩{upc})- Product/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(15)" }, root_node="Product/b"}
        └─┐create_root_for_path_sequences{root_node="Product/b", segments_count=1}
          ├─   0.291810s   0ms DEBUG Building root query tree node: Product/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.291823s   0ms DEBUG Processing edge: Product/b -(upc)- String/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.291842s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", current_cost=2003}
        ├─   0.291885s   0ms DEBUG checking edge Product/a -(upc)- String/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a", edge="upc"}
          ├─   0.291903s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.291918s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(products)- Product/b -(🔑🧩{upc})- Product/a with edge Product/a -(upc)- String/a
        ├─   0.291927s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(9)" }])
      ┌─┘
      ├─   0.291942s   0ms DEBUG Found 1 direct paths to Product/b -(🔑🧩{upc})- Product/a
      ├─   0.291951s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.291956s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.291970s   0ms DEBUG Indirect paths found: 1
    ├─   0.291981s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(products)- Product/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2007, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(34) --> EdgeIndex(10)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.292025s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.292039s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.292050s   0ms DEBUG Processing edge: Query/b -(products)- Product/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.292062s   0ms DEBUG Processing edge: Product/b -(🔑🧩{upc})- Product/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.292078s   0ms DEBUG Processing edge: Product/a -(shippingEstimate🧩{price(currency: "USD") weight})- Int/a
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.292097s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.292109s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.292119s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.292129s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(14)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.292162s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.292173s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.292185s   0ms DEBUG Processing edge: Query/b -(products)- Product/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.292196s   0ms DEBUG Processing edge: Product/b -(name)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.292214s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.292224s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.292234s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.292266s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.292277s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.292288s   0ms DEBUG Processing edge: Query/b -(products)- Product/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.292300s   0ms DEBUG Processing edge: Product/b -(upc)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.292360s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.292373s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.292383s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="products", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.292544s   0ms DEBUG adding output field 'products' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/b -(🔑🧩{upc})- Product/a", parent_fetch_step_index=1}
              ├─   0.292589s   0ms DEBUG created a new fetch step [2] subgraph(a) type(Product) requirement() key({upc}) in children of 1
              ├─   0.292598s   0ms DEBUG adding input requirement '{upc}' to fetch step [2]
              ├─   0.292605s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.292613s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="upc", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
                      ├─   0.292671s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.292695s   0ms DEBUG adding output field 'upc' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/a"}
                    └─┐can_satisfy_edge{path="Product/a", edge="upc"}
                      ├─   0.292815s   0ms DEBUG checking requirements {upc} for edge 'Product/a -(🔑🧩{upc})- Product/b'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/a", current_cost=0}
                            ├─   0.292858s   0ms DEBUG checking edge Product/a -(upc)- String/a
                            └─┐can_satisfy_edge{path="Product/a", edge="upc"}
                              ├─   0.292878s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.292899s   0ms DEBUG Advancing path Product/a with edge Product/a -(upc)- String/a
                            ├─   0.292910s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(9)" }])
                          ┌─┘
                          ├─   0.292932s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(9)" }], [])))
                        ┌─┘
                        ├─   0.292949s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(9)" }], [])))
                      ┌─┘
                      ├─   0.292965s   0ms DEBUG Paths for upc
                      ├─   0.292975s   0ms DEBUG   Path Product/a -(upc)- String/a is valid
                      ├─   0.292997s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.293014s   0ms DEBUG path Product/a -(upc)- String/a is valid
                      ├─   0.293021s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(9)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.293067s   0ms DEBUG Key to re-enter: {upc}
                  ├─   0.293078s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.293093s   0ms DEBUG created a new fetch step [3] subgraph(a) type(Product) requirement({price(currency: "USD") weight}) in children of 1
                  ├─   0.293105s   0ms DEBUG Adding {price(currency: "USD") weight} to fetch([3]).input
                  ├─   0.293126s   0ms DEBUG Adding {upc} to fetch([3]).input
                  ├─   0.293133s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.293142s   0ms DEBUG Adding {upc} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.293174s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/a -(🔑🧩{upc})- Product/b", parent_fetch_step_index=4}
                        ├─   0.293216s   0ms DEBUG created a new fetch step [5] subgraph(b) type(Product) requirement() key({upc}) in children of 4
                        ├─   0.293224s   0ms DEBUG adding input requirement '{upc}' to fetch step [5]
                        ├─   0.293232s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.293239s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="upc", leaf=true, list=false, response_path="products.@", fetch_path=""}
                                ├─   0.293325s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.293363s   0ms DEBUG adding output field 'upc' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="Product", field="price", arguments="currency: \"USD\"", leaf=true, list=false, response_path="products.@", fetch_path=""}
                            ├─   0.293475s   0ms DEBUG adding output field 'price' to fetch step [5]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐process_entity_move_edge{edge="Product/a -(🔑🧩{upc})- Product/b", parent_fetch_step_index=4}
                        ├─   0.293548s   0ms DEBUG found existing fetch step [5] for entity move requirement() key({upc}) in children of 4
                        ├─   0.293570s   0ms DEBUG adding input requirement '{upc}' to fetch step [5]
                        ├─   0.293581s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.293589s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="upc", leaf=true, list=false, response_path="products.@", fetch_path=""}
                                ├─   0.293661s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.293689s   0ms DEBUG adding output field 'upc' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="Product", field="weight", leaf=true, list=false, response_path="products.@", fetch_path=""}
                            ├─   0.293790s   0ms DEBUG adding output field 'weight' to fetch step [5]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.293859s   1ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  ├─   0.293918s   1ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="name", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
              ├─   0.293974s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="upc", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
              ├─   0.294014s   0ms DEBUG adding output field 'upc' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.294076s   1ms DEBUG Done
├─   0.294083s   1ms DEBUG found roots
├─   0.294088s   1ms DEBUG print graph
├─   0.294093s   1ms DEBUG Nodes:
│ [1] Query/b {} → {products{__typename upc name}} at $.
│ [2] Product/a {__typename upc} → {} at $.products.@
│ [3] Product/a {__typename price(currency: "USD") weight upc} → {shippingEstimate} at $.products.@
│ [4] Product/a {__typename upc} → {__typename upc} at $.products.@
│ [5] Product/b {__typename upc} → {price(currency: "USD") weight} at $.products.@
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│       [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.294141s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.294157s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.294212s   0ms DEBUG optimization found: merge parent [1] with child [5]
    └─┐perform_fetch_step_merge{}
      ├─   0.294226s   0ms DEBUG merging fetch steps [1] and [5]
      └─┐connect{parent=1, child=3}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.294275s   0ms DEBUG Found optimization: 3 <- 2
    └─┐perform_fetch_step_merge{}
      ├─   0.294288s   0ms DEBUG merging fetch steps [3] and [2]
      └─┐connect{parent=1, child=3}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="b"}
      └─┐execute{subgraph_name="b"}
        ├─   0.294787s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.295257s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.295732s   1ms DEBUG connected to 127.0.0.1:4200
        ├─   0.300951s   6ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"products": Array [Object {"__typename": String("Product"), "upc": String("p1"), "name": String("p-name-1"), "price": Number(11), "weight": Number(1)}, Object {"__typename": String("Product"), "upc": String("p2"), "name": String("p-name-2"), "price": Number(22), "weight": Number(2)}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "upc": String("p1"), "name": String("p-name-1"), "price": Number(11), "weight": Number(1)}, Object {"__typename": String("Product"), "upc": String("p2"), "name": String("p-name-2"), "price": Number(22), "weight": Number(2)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p1"), "name": String("p-name-1"), "price": Number(11), "weight": Number(1)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p1"), "name": String("p-name-1"), "price": Number(11), "weight": Number(1)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(11)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(1)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p2"), "name": String("p-name-2"), "price": Number(22), "weight": Number(2)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p2"), "name": String("p-name-2"), "price": Number(22), "weight": Number(2)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(22)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(2)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.301592s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.307742s   6ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.308269s DEBUG execution result: ExecutionResult { data: Some(Object {"products": Array [Object {"upc": String("p1"), "name": String("p-name-1"), "shippingEstimate": Number(110)}, Object {"upc": String("p2"), "name": String("p-name-2"), "shippingEstimate": Number(440)}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{products{__typename upc name price(currency: \"USD\") weight}}")}, Object {"kind": String("Flatten"), "path": Array [String("products"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{shippingEstimate}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("weight")}, Object {"kind": String("Field"), "name": String("upc")}]}]}}]}}}) }
   0.318949s DEBUG original document: {
  feed {
    author {
      id
    }
  }
}

   0.319055s DEBUG normalized document: query{feed{author{id}}}

   0.319077s DEBUG executable operation: query{feed{author{id}}}
┐walk_operation{}
├─   0.319430s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="feed", leaf=false}
  ├─   0.319481s   0ms DEBUG Trying to advance to: feed{author{id}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.319534s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.319557s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.319588s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.319594s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.319606s   0ms DEBUG Indirect paths found: 0
    ├─   0.319613s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  └─┐explore_path{path="root(Query) -(c)- Query/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.319642s   0ms DEBUG checking edge Query/c -(feed)- Post/c
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c", edge="feed"}
        ├─   0.319661s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.319678s   0ms DEBUG Advancing path root(Query) -(c)- Query/c with edge Query/c -(feed)- Post/c
      ├─   0.319688s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.319703s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.319723s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.319728s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.319739s   0ms DEBUG Indirect paths found: 0
    ├─   0.319746s   0ms DEBUG advanced: root(Query) -(c)- Query/c
  ┌─┘
  ├─   0.319759s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="author", leaf=false}
  ├─   0.319780s   0ms DEBUG Trying to advance to: author{id} through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(feed)- Post/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
      ├─   0.319803s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.319814s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
      ├─   0.319832s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/d
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c", edge="id"}
        ├─   0.319850s   0ms DEBUG checking requirements {id} for edge 'Post/c -(🔑🧩{id})- Post/d'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
              ├─   0.319885s   0ms DEBUG checking edge Post/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c", edge="id"}
                ├─   0.319905s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.319922s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c with edge Post/c -(id)- ID/c
              ├─   0.319931s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
              ├─   0.319960s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/d
              ├─   0.319968s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
              ├─   0.319976s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/c
              ├─   0.319982s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.319990s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.319996s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.320011s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.320027s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.320040s   0ms DEBUG Paths for id
        ├─   0.320048s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(id)- ID/c is valid
        ├─   0.320056s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.320072s   0ms DEBUG path Post/c -(id)- ID/c is valid
        ├─   0.320078s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
      ┌─┘
      ├─   0.320092s   0ms DEBUG Advancing path to Post/c -(🔑🧩{id})- Post/d
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Post/c"}
        └─┐create_root_for_path_sequences{root_node="Post/c", segments_count=1}
          ├─   0.320118s   0ms DEBUG Building root query tree node: Post/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.320132s   0ms DEBUG Processing edge: Post/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.320152s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
        ├─   0.320201s   0ms DEBUG checking edge Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d
        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="author"}
          ├─   0.320220s   0ms DEBUG checking requirements {comments(limit: 3){authorId}} for edge 'Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Int(3)} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
                ├─   0.320258s   0ms DEBUG checking edge Post/d -(comments)- Comment/d
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="comments"}
                  ├─   0.320278s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.320296s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d with edge Post/d -(comments)- Comment/d
                ├─   0.320308s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Int(3)} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
                ├─   0.320341s   0ms DEBUG Exploring edge Post/d -(🔑🧩{id})- Post/d
                ├─   0.320348s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
                ├─   0.320356s   0ms DEBUG Exploring edge Post/d -(🔑🧩{id})- Post/c
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="id"}
                  ├─   0.320376s   0ms DEBUG checking requirements {id} for edge 'Post/d -(🔑🧩{id})- Post/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
                        ├─   0.320444s   0ms DEBUG checking edge Post/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="id"}
                          ├─   0.320475s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.320497s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d with edge Post/d -(id)- ID/d
                        ├─   0.320509s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(26)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
                        ├─   0.320544s   0ms DEBUG Exploring edge Post/d -(🔑🧩{id})- Post/d
                        ├─   0.320552s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                        ├─   0.320560s   0ms DEBUG Exploring edge Post/d -(🔑🧩{id})- Post/c
                        ├─   0.320567s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                        ├─   0.320576s   0ms DEBUG Finished finding indirect paths, found total of 0
                        ├─   0.320583s   0ms INFO return=Ok([])
                      ┌─┘
                      ├─   0.320600s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(26)" }], [])))
                    ┌─┘
                    ├─   0.320618s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(26)" }], [])))
                  ┌─┘
                  ├─   0.320634s   0ms DEBUG Paths for id
                  ├─   0.320644s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(id)- ID/d is valid
                  ├─   0.320650s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.320663s   0ms DEBUG path Post/d -(id)- ID/d is valid
                  ├─   0.320670s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(26)" }]))
                ┌─┘
                ├─   0.320686s   0ms DEBUG Advancing path to Post/d -(🔑🧩{id})- Post/c
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(26)" }, root_node="Post/d"}
                  └─┐create_root_for_path_sequences{root_node="Post/d", segments_count=1}
                    ├─   0.320713s   0ms DEBUG Building root query tree node: Post/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.320733s   0ms DEBUG Processing edge: Post/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.320756s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Int(3)} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(🔑🧩{id})- Post/c", current_cost=3005}
                  ├─   0.320811s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.320829s   0ms DEBUG No direct paths found
                ├─   0.320840s   0ms DEBUG going deeper
                ├─   0.320867s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/d
                ├─   0.320877s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                ├─   0.320885s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/c
                ├─   0.320891s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                ├─   0.320903s   0ms DEBUG Finished finding indirect paths, found total of 0
                ├─   0.320909s   0ms INFO return=Ok([])
              ┌─┘
              ├─   0.320930s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }], [MoveRequirement { paths: [ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }], selection: SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } } }])))
            ┌─┘
            ├─   0.320964s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }], [MoveRequirement { paths: [ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }], selection: SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } } }])))
          ┌─┘
          ├─   0.320981s   0ms DEBUG Paths for comments(limit: 3){authorId}
          ├─   0.320994s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d is valid
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "authorId", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
                ├─   0.321035s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "authorId", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
                ├─   0.321065s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/d
                ├─   0.321073s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
                ├─   0.321080s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/c
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", edge="id"}
                  ├─   0.321101s   0ms DEBUG checking requirements {id} for edge 'Comment/d -(🔑🧩{id})- Comment/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
                        ├─   0.321138s   0ms DEBUG checking edge Comment/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", edge="id"}
                          ├─   0.321160s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.321181s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d with edge Comment/d -(id)- ID/d
                        ├─   0.321191s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
                        ├─   0.321225s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/d
                        ├─   0.321233s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                        ├─   0.321241s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/c
                        ├─   0.321248s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                        ├─   0.321257s   0ms DEBUG Finished finding indirect paths, found total of 0
                        ├─   0.321264s   0ms INFO return=Ok([])
                      ┌─┘
                      ├─   0.321281s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }], [])))
                    ┌─┘
                    ├─   0.321298s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }], [])))
                  ┌─┘
                  ├─   0.321314s   0ms DEBUG Paths for id
                  ├─   0.321324s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(id)- ID/d is valid
                  ├─   0.321331s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.321343s   0ms DEBUG path Comment/d -(id)- ID/d is valid
                  ├─   0.321349s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(22)" }]))
                ┌─┘
                ├─   0.321365s   0ms DEBUG Advancing path to Comment/d -(🔑🧩{id})- Comment/c
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(22)" }, root_node="Comment/d"}
                  └─┐create_root_for_path_sequences{root_node="Comment/d", segments_count=1}
                    ├─   0.321392s   0ms DEBUG Building root query tree node: Comment/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.321408s   0ms DEBUG Processing edge: Comment/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.321431s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "authorId", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c", current_cost=3006}
                  ├─   0.321489s   0ms DEBUG checking edge Comment/c -(authorId)- ID/c
                  └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c", edge="authorId"}
                    ├─   0.321510s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.321529s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c with edge Comment/c -(authorId)- ID/c
                  ├─   0.321538s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }])
                ┌─┘
                ├─   0.321555s   0ms DEBUG Found 1 direct paths to Comment/d -(🔑🧩{id})- Comment/c
                ├─   0.321567s   0ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.321573s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.321590s   0ms INFO return=Ok(Some(([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }], [])))
            ┌─┘
            ├─   0.321605s   0ms INFO return=Ok(Some(([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.321620s   1ms DEBUG Paths for authorId
          ├─   0.321629s   1ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c -(authorId)- ID/c is valid
          ├─   0.321635s   1ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.321648s   1ms DEBUG path Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c -(authorId)- ID/c is valid
          ├─   0.321654s   1ms INFO return=Ok(Some([ { cost: 1004, egdes: "EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }]))
        ┌─┘
        ├─   0.321672s   1ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d with edge Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d
        └─┐from_path{path= { cost: 1004, egdes: "EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }, root_node="Post/d"}
          └─┐create_root_for_path_sequences{root_node="Post/d", segments_count=3}
            ├─   0.321697s   0ms DEBUG Building root query tree node: Post/d
            └─┐from_path_segment_sequences{current_index=0, total_segments=3}
              ├─   0.321711s   0ms DEBUG Processing edge: Post/d -(comments)- Comment/d
              └─┐from_path_segment_sequences{current_index=1, total_segments=3}
                ├─   0.321725s   0ms DEBUG Processing edge: Comment/d -(🔑🧩{id})- Comment/c
                └─┐from_path_segment_sequences{current_index=2, total_segments=3}
                  ├─   0.321739s   0ms DEBUG Processing edge: Comment/c -(authorId)- ID/c
                  └─┐from_path_segment_sequences{current_index=3, total_segments=3}
                  ┌─┘
                  ├─   0.321760s   0ms DEBUG No subsequent steps (leaf or end of path)
                ┌─┘
                ├─   0.321773s   0ms DEBUG Adding subsequent step as child
              ┌─┘
              ├─   0.321785s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.321814s   1ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(28)" }])
      ┌─┘
      ├─   0.321830s   2ms DEBUG Found 1 direct paths to Post/c -(🔑🧩{id})- Post/d
      ├─   0.321838s   2ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/c
      ├─   0.321843s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.321850s   2ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.321856s   2ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(28)" }])
    ┌─┘
    ├─   0.321869s   2ms DEBUG Indirect paths found: 1
    ├─   0.321877s   2ms DEBUG advanced: root(Query) -(c)- Query/c -(feed)- Post/c
  ┌─┘
  ├─   0.321890s   2ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.321909s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d", current_cost=2007}
      ├─   0.321959s   0ms DEBUG checking edge Author/d -(id)- ID/d
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d", edge="id"}
        ├─   0.321988s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.322008s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d with edge Author/d -(id)- ID/d
      ├─   0.322017s   0ms INFO return=Ok([ { cost: 2008, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(28) --> EdgeIndex(30)" }])
    ┌─┘
    ├─   0.322031s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d", current_cost=2007}
      ├─   0.322054s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.322060s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.322071s   0ms DEBUG Indirect paths found: 0
    ├─   0.322080s   0ms DEBUG advanced: root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2008, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(28) --> EdgeIndex(30)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.322121s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.322133s   0ms DEBUG Processing edge: root(Query) -(c)- Query/c
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.322144s   0ms DEBUG Processing edge: Query/c -(feed)- Post/c
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.322156s   0ms DEBUG Processing edge: Post/c -(🔑🧩{id})- Post/d
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.322169s   0ms DEBUG Processing edge: Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.322182s   0ms DEBUG Processing edge: Author/d -(id)- ID/d
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.322201s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.322213s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.322224s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.322235s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.322245s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="c", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="feed", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.322354s   0ms DEBUG adding output field 'feed' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Post/c -(🔑🧩{id})- Post/d", parent_fetch_step_index=1}
              ├─   0.322388s   0ms DEBUG created a new fetch step [2] subgraph(d) type(Post) requirement() key({id}) in children of 1
              ├─   0.322395s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.322402s   0ms DEBUG adding __typename field to output for type 'Post'
              ├─   0.322410s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Post", field="id", leaf=true, list=false, response_path="feed.@", fetch_path="feed.@"}
                      ├─   0.322471s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.322494s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Post/d"}
                    └─┐can_satisfy_edge{path="Post/d", edge="id"}
                      ├─   0.322650s   0ms DEBUG checking requirements {id} for edge 'Post/d -(🔑🧩{id})- Post/d'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Post/d", current_cost=0}
                            ├─   0.322714s   0ms DEBUG checking edge Post/d -(id)- ID/d
                            └─┐can_satisfy_edge{path="Post/d", edge="id"}
                              ├─   0.322741s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.322762s   0ms DEBUG Advancing path Post/d with edge Post/d -(id)- ID/d
                            ├─   0.322773s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(26)" }])
                          ┌─┘
                          ├─   0.322795s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(26)" }], [])))
                        ┌─┘
                        ├─   0.322812s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(26)" }], [])))
                      ┌─┘
                      ├─   0.322828s   0ms DEBUG Paths for id
                      ├─   0.322839s   0ms DEBUG   Path Post/d -(id)- ID/d is valid
                      ├─   0.322847s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.322859s   0ms DEBUG path Post/d -(id)- ID/d is valid
                      ├─   0.322880s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(26)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.322913s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.322924s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.322937s   0ms DEBUG created a new fetch step [3] subgraph(d) type(Post) requirement({comments(limit: 3){authorId}}) in children of 1
                  ├─   0.322952s   0ms DEBUG Adding {comments(limit: 3){authorId}} to fetch([3]).input
                  ├─   0.322962s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.322969s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.322980s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.323011s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_plain_field_edge{parent_fetch_step_index=4, type_name="Post", field="comments", arguments="limit: 3", leaf=false, list=true, response_path="feed.@", fetch_path=""}
                        ├─   0.323049s   0ms DEBUG adding output field 'comments' to fetch step [4]
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                          └─┐process_entity_move_edge{edge="Comment/d -(🔑🧩{id})- Comment/c", parent_fetch_step_index=4}
                            ├─   0.323086s   0ms DEBUG created a new fetch step [5] subgraph(c) type(Comment) requirement() key({id}) in children of 4
                            ├─   0.323109s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                            ├─   0.323122s   0ms DEBUG adding __typename field to output for type 'Comment'
                            ├─   0.323131s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                            └─┐connect{parent=4, child=5}
                            ┌─┘
                            └─┐process_requirements_for_fetch_steps{count=1}
                              └─┐process_noop_edge{}
                                └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                  └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Comment", field="id", leaf=true, list=false, response_path="feed.@.comments.@", fetch_path="comments.@"}
                                    ├─   0.323245s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                    └─┐connect{parent=4, child=5}
                                    ┌─┘
                                    ├─   0.323279s   0ms DEBUG adding output field 'id' to fetch step [4]
                                    └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                              └─┐connect{parent=4, child=5}
                              ┌─┘
                            ┌─┘
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="Comment", field="authorId", leaf=true, list=false, response_path="feed.@.comments.@", fetch_path=""}
                                ├─   0.323396s   0ms DEBUG adding output field 'authorId' to fetch step [5]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.323486s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  ├─   0.323510s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                    └─┐process_plain_field_edge{parent_fetch_step_index=3, type_name="Author", field="id", leaf=true, list=false, response_path="feed.@.author", fetch_path="author"}
                      ├─   0.323536s   0ms DEBUG adding output field 'id' to fetch step [3]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.323631s   1ms DEBUG Done
├─   0.323638s   1ms DEBUG found roots
├─   0.323643s   1ms DEBUG print graph
├─   0.323647s   1ms DEBUG Nodes:
│ [1] Query/c {} → {feed{__typename id}} at $.
│ [2] Post/d {__typename id} → {} at $.feed.@
│ [3] Post/d {__typename comments(limit: 3){authorId} id} → {author{id}} at $.feed.@
│ [4] Post/d {__typename id} → {comments(limit: 3){__typename id}} at $.feed.@
│ [5] Comment/c {__typename id} → {authorId} at $.feed.@.comments.@
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│       [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.323731s   0ms DEBUG Found optimization: 4 <- 2
    └─┐perform_fetch_step_merge{}
      ├─   0.323746s   0ms DEBUG merging fetch steps [4] and [2]
      └─┐connect{parent=1, child=4}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="c"}
      └─┐execute{subgraph_name="c"}
        ├─   0.324211s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.329804s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"feed": Array [Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="d"}
        └─┐execute{subgraph_name="d"}
          ├─   0.330473s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.336828s   6ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"feed": Array [Object {"__typename": String("Post"), "id": String("p1"), "comments": Array [Object {"__typename": String("Comment"), "id": String("c1")}, Object {"__typename": String("Comment"), "id": String("c2")}, Object {"__typename": String("Comment"), "id": String("c3")}]}, Object {"__typename": String("Post"), "id": String("p2"), "comments": Array [Object {"__typename": String("Comment"), "id": String("c4")}, Object {"__typename": String("Comment"), "id": String("c5")}, Object {"__typename": String("Comment"), "id": String("c6")}]}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Comment"), "id": String("c1")}, Object {"__typename": String("Comment"), "id": String("c2")}, Object {"__typename": String("Comment"), "id": String("c3")}, Object {"__typename": String("Comment"), "id": String("c4")}, Object {"__typename": String("Comment"), "id": String("c5")}, Object {"__typename": String("Comment"), "id": String("c6")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Comment", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Comment"), "id": String("c1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Comment", type_condition="Comment"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Comment"), "id": String("c1")}}
          └─┐project_requires{requires_selections=[], entity=String("Comment")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("c1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Comment", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Comment"), "id": String("c2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Comment", type_condition="Comment"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Comment"), "id": String("c2")}}
          └─┐project_requires{requires_selections=[], entity=String("Comment")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("c2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Comment", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Comment"), "id": String("c3")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Comment", type_condition="Comment"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Comment"), "id": String("c3")}}
          └─┐project_requires{requires_selections=[], entity=String("Comment")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("c3")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Comment", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Comment"), "id": String("c4")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Comment", type_condition="Comment"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Comment"), "id": String("c4")}}
          └─┐project_requires{requires_selections=[], entity=String("Comment")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("c4")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Comment", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Comment"), "id": String("c5")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Comment", type_condition="Comment"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Comment"), "id": String("c5")}}
          └─┐project_requires{requires_selections=[], entity=String("Comment")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("c5")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Comment", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Comment"), "id": String("c6")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Comment", type_condition="Comment"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Comment"), "id": String("c6")}}
          └─┐project_requires{requires_selections=[], entity=String("Comment")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("c6")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.337953s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.340142s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"feed": Array [Object {"__typename": String("Post"), "id": String("p1"), "comments": Array [Object {"__typename": String("Comment"), "id": String("c1"), "authorId": String("a2")}, Object {"__typename": String("Comment"), "id": String("c2"), "authorId": String("a2")}, Object {"__typename": String("Comment"), "id": String("c3"), "authorId": String("a2")}]}, Object {"__typename": String("Post"), "id": String("p2"), "comments": Array [Object {"__typename": String("Comment"), "id": String("c4"), "authorId": String("a1")}, Object {"__typename": String("Comment"), "id": String("c5"), "authorId": String("a1")}, Object {"__typename": String("Comment"), "id": String("c6"), "authorId": String("a1")}]}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Post"), "id": String("p1"), "comments": Array [Object {"__typename": String("Comment"), "id": String("c1"), "authorId": String("a2")}, Object {"__typename": String("Comment"), "id": String("c2"), "authorId": String("a2")}, Object {"__typename": String("Comment"), "id": String("c3"), "authorId": String("a2")}]}, Object {"__typename": String("Post"), "id": String("p2"), "comments": Array [Object {"__typename": String("Comment"), "id": String("c4"), "authorId": String("a1")}, Object {"__typename": String("Comment"), "id": String("c5"), "authorId": String("a1")}, Object {"__typename": String("Comment"), "id": String("c6"), "authorId": String("a1")}]}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p1"), "comments": Array [Object {"__typename": String("Comment"), "id": String("c1"), "authorId": String("a2")}, Object {"__typename": String("Comment"), "id": String("c2"), "authorId": String("a2")}, Object {"__typename": String("Comment"), "id": String("c3"), "authorId": String("a2")}]}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p1"), "comments": Array [Object {"__typename": String("Comment"), "id": String("c1"), "authorId": String("a2")}, Object {"__typename": String("Comment"), "id": String("c2"), "authorId": String("a2")}, Object {"__typename": String("Comment"), "id": String("c3"), "authorId": String("a2")}]}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Array [Object {"__typename": String("Comment"), "id": String("c1"), "authorId": String("a2")}, Object {"__typename": String("Comment"), "id": String("c2"), "authorId": String("a2")}, Object {"__typename": String("Comment"), "id": String("c3"), "authorId": String("a2")}]}
            └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Comment"), "id": String("c1"), "authorId": String("a2")}}
              └─┐project_requires{requires_selections=[], entity=String("a2")}
              ┌─┘
            ┌─┘
            └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Comment"), "id": String("c2"), "authorId": String("a2")}}
              └─┐project_requires{requires_selections=[], entity=String("a2")}
              ┌─┘
            ┌─┘
            └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Comment"), "id": String("c3"), "authorId": String("a2")}}
              └─┐project_requires{requires_selections=[], entity=String("a2")}
              ┌─┘
            ┌─┘
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p2"), "comments": Array [Object {"__typename": String("Comment"), "id": String("c4"), "authorId": String("a1")}, Object {"__typename": String("Comment"), "id": String("c5"), "authorId": String("a1")}, Object {"__typename": String("Comment"), "id": String("c6"), "authorId": String("a1")}]}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p2"), "comments": Array [Object {"__typename": String("Comment"), "id": String("c4"), "authorId": String("a1")}, Object {"__typename": String("Comment"), "id": String("c5"), "authorId": String("a1")}, Object {"__typename": String("Comment"), "id": String("c6"), "authorId": String("a1")}]}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Array [Object {"__typename": String("Comment"), "id": String("c4"), "authorId": String("a1")}, Object {"__typename": String("Comment"), "id": String("c5"), "authorId": String("a1")}, Object {"__typename": String("Comment"), "id": String("c6"), "authorId": String("a1")}]}
            └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Comment"), "id": String("c4"), "authorId": String("a1")}}
              └─┐project_requires{requires_selections=[], entity=String("a1")}
              ┌─┘
            ┌─┘
            └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Comment"), "id": String("c5"), "authorId": String("a1")}}
              └─┐project_requires{requires_selections=[], entity=String("a1")}
              ┌─┘
            ┌─┘
            └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Comment"), "id": String("c6"), "authorId": String("a1")}}
              └─┐project_requires{requires_selections=[], entity=String("a1")}
              ┌─┘
            ┌─┘
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="d"}
        └─┐execute{subgraph_name="d"}
          ├─   0.341336s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.343060s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.343370s DEBUG execution result: ExecutionResult { data: Some(Object {"feed": Array [Object {"author": Object {"id": String("a2")}}, Object {"author": Object {"id": String("a1")}}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("{feed{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("feed"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("d"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Post{comments(limit: 3){__typename id}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Post"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("feed"), String("@"), String("comments"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Comment{authorId}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Comment"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("feed"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("d"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Post{author{id}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Post"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("comments"), "selections": Array [Object {"kind": String("Field"), "name": String("authorId")}]}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.346840s DEBUG original document: query {
  feed {
    author {
      id
    }
    comments(limit: 1) {
      id
    }
  }
}

   0.346938s DEBUG normalized document: query{feed{author{id} comments(limit: 1){id}}}

   0.346958s DEBUG executable operation: query{feed{author{id} comments(limit: 1){id}}}
┐walk_operation{}
├─   0.347401s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="feed", leaf=false}
  ├─   0.347450s   0ms DEBUG Trying to advance to: feed{author{id} comments(limit: 1){id}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.347512s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.347534s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.347561s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.347568s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.347617s   0ms DEBUG Indirect paths found: 0
    ├─   0.347653s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  └─┐explore_path{path="root(Query) -(c)- Query/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.347698s   0ms DEBUG checking edge Query/c -(feed)- Post/c
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c", edge="feed"}
        ├─   0.347717s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.347732s   0ms DEBUG Advancing path root(Query) -(c)- Query/c with edge Query/c -(feed)- Post/c
      ├─   0.347742s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.347757s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.347779s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.347786s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.347797s   0ms DEBUG Indirect paths found: 0
    ├─   0.347803s   0ms DEBUG advanced: root(Query) -(c)- Query/c
  ┌─┘
  ├─   0.347817s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="comments", leaf=false}
  ├─   0.347860s   0ms DEBUG Trying to advance to: comments(limit: 1){id} through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(feed)- Post/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Int(1)} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
      ├─   0.347910s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.347928s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Int(1)} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
      ├─   0.347948s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/d
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c", edge="id"}
        ├─   0.347968s   0ms DEBUG checking requirements {id} for edge 'Post/c -(🔑🧩{id})- Post/d'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
              ├─   0.348013s   0ms DEBUG checking edge Post/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c", edge="id"}
                ├─   0.348031s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.348048s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c with edge Post/c -(id)- ID/c
              ├─   0.348057s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
              ├─   0.348086s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/d
              ├─   0.348094s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
              ├─   0.348102s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/c
              ├─   0.348109s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.348117s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.348123s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.348139s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.348155s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.348168s   0ms DEBUG Paths for id
        ├─   0.348176s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(id)- ID/c is valid
        ├─   0.348183s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.348197s   0ms DEBUG path Post/c -(id)- ID/c is valid
        ├─   0.348204s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
      ┌─┘
      ├─   0.348217s   0ms DEBUG Advancing path to Post/c -(🔑🧩{id})- Post/d
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Post/c"}
        └─┐create_root_for_path_sequences{root_node="Post/c", segments_count=1}
          ├─   0.348244s   0ms DEBUG Building root query tree node: Post/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.348258s   0ms DEBUG Processing edge: Post/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.348279s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Int(1)} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
        ├─   0.348324s   0ms DEBUG checking edge Post/d -(comments)- Comment/d
        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="comments"}
          ├─   0.348341s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.348356s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d with edge Post/d -(comments)- Comment/d
        ├─   0.348365s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }])
      ┌─┘
      ├─   0.348381s   0ms DEBUG Found 1 direct paths to Post/c -(🔑🧩{id})- Post/d
      ├─   0.348389s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/c
      ├─   0.348394s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.348401s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.348406s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }])
    ┌─┘
    ├─   0.348419s   0ms DEBUG Indirect paths found: 1
    ├─   0.348427s   0ms DEBUG advanced: root(Query) -(c)- Query/c -(feed)- Post/c
  ┌─┘
  ├─   0.348437s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.348458s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
      ├─   0.348486s   0ms DEBUG checking edge Comment/d -(id)- ID/d
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", edge="id"}
        ├─   0.348504s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.348519s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d with edge Comment/d -(id)- ID/d
      ├─   0.348526s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }])
    ┌─┘
    ├─   0.348540s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
      ├─   0.348561s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/d
      ├─   0.348583s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.348593s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/c
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", edge="id"}
        ├─   0.348630s   0ms DEBUG checking requirements {id} for edge 'Comment/d -(🔑🧩{id})- Comment/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
              ├─   0.348671s   0ms DEBUG checking edge Comment/d -(id)- ID/d
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", edge="id"}
                ├─   0.348691s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.348711s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d with edge Comment/d -(id)- ID/d
              ├─   0.348722s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
              ├─   0.348754s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/d
              ├─   0.348762s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.348768s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/c
              ├─   0.348774s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.348782s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.348789s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.348804s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }], [])))
          ┌─┘
          ├─   0.348820s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }], [])))
        ┌─┘
        ├─   0.348834s   0ms DEBUG Paths for id
        ├─   0.348843s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(id)- ID/d is valid
        ├─   0.348848s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.348860s   0ms DEBUG path Comment/d -(id)- ID/d is valid
        ├─   0.348881s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(22)" }]))
      ┌─┘
      ├─   0.348903s   0ms DEBUG Advancing path to Comment/d -(🔑🧩{id})- Comment/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(22)" }, root_node="Comment/d"}
        └─┐create_root_for_path_sequences{root_node="Comment/d", segments_count=1}
          ├─   0.348930s   0ms DEBUG Building root query tree node: Comment/d
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.348944s   0ms DEBUG Processing edge: Comment/d -(id)- ID/d
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.348964s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c", current_cost=3006}
        ├─   0.349009s   0ms DEBUG checking edge Comment/c -(id)- ID/c
        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c", edge="id"}
          ├─   0.349029s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.349046s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c with edge Comment/c -(id)- ID/c
        ├─   0.349054s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(18)" }])
      ┌─┘
      ├─   0.349070s   0ms DEBUG Found 1 direct paths to Comment/d -(🔑🧩{id})- Comment/c
      ├─   0.349080s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.349086s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.349100s   0ms DEBUG Indirect paths found: 1
    ├─   0.349111s   0ms DEBUG advanced: root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d
  ┌─┘
┌─┘
└─┐process_field{field_name="author", leaf=false}
  ├─   0.349139s   0ms DEBUG Trying to advance to: author{id} through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(feed)- Post/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
      ├─   0.349164s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.349175s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
      ├─   0.349192s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/d
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c", edge="id"}
        ├─   0.349212s   0ms DEBUG checking requirements {id} for edge 'Post/c -(🔑🧩{id})- Post/d'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
              ├─   0.349243s   0ms DEBUG checking edge Post/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c", edge="id"}
                ├─   0.349260s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.349276s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c with edge Post/c -(id)- ID/c
              ├─   0.349285s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
              ├─   0.349312s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/d
              ├─   0.349319s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
              ├─   0.349326s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/c
              ├─   0.349333s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.349340s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.349346s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.349360s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.349376s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.349389s   0ms DEBUG Paths for id
        ├─   0.349397s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(id)- ID/c is valid
        ├─   0.349403s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.349414s   0ms DEBUG path Post/c -(id)- ID/c is valid
        ├─   0.349419s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
      ┌─┘
      ├─   0.349454s   0ms DEBUG Advancing path to Post/c -(🔑🧩{id})- Post/d
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Post/c"}
        └─┐create_root_for_path_sequences{root_node="Post/c", segments_count=1}
          ├─   0.349481s   0ms DEBUG Building root query tree node: Post/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.349495s   0ms DEBUG Processing edge: Post/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.349535s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
        ├─   0.349592s   0ms DEBUG checking edge Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d
        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="author"}
          ├─   0.349612s   0ms DEBUG checking requirements {comments(limit: 3){authorId}} for edge 'Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Int(3)} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
                ├─   0.349650s   0ms DEBUG checking edge Post/d -(comments)- Comment/d
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="comments"}
                  ├─   0.349673s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.349692s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d with edge Post/d -(comments)- Comment/d
                ├─   0.349702s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Int(3)} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
                ├─   0.349736s   0ms DEBUG Exploring edge Post/d -(🔑🧩{id})- Post/d
                ├─   0.349744s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
                ├─   0.349751s   0ms DEBUG Exploring edge Post/d -(🔑🧩{id})- Post/c
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="id"}
                  ├─   0.349773s   0ms DEBUG checking requirements {id} for edge 'Post/d -(🔑🧩{id})- Post/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
                        ├─   0.349811s   0ms DEBUG checking edge Post/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="id"}
                          ├─   0.349843s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.349863s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d with edge Post/d -(id)- ID/d
                        ├─   0.349873s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(26)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
                        ├─   0.349907s   0ms DEBUG Exploring edge Post/d -(🔑🧩{id})- Post/d
                        ├─   0.349916s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                        ├─   0.349924s   0ms DEBUG Exploring edge Post/d -(🔑🧩{id})- Post/c
                        ├─   0.349931s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                        ├─   0.349940s   0ms DEBUG Finished finding indirect paths, found total of 0
                        ├─   0.349947s   0ms INFO return=Ok([])
                      ┌─┘
                      ├─   0.349964s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(26)" }], [])))
                    ┌─┘
                    ├─   0.349982s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(26)" }], [])))
                  ┌─┘
                  ├─   0.349998s   0ms DEBUG Paths for id
                  ├─   0.350008s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(id)- ID/d is valid
                  ├─   0.350015s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.350027s   0ms DEBUG path Post/d -(id)- ID/d is valid
                  ├─   0.350034s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(26)" }]))
                ┌─┘
                ├─   0.350050s   0ms DEBUG Advancing path to Post/d -(🔑🧩{id})- Post/c
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(26)" }, root_node="Post/d"}
                  └─┐create_root_for_path_sequences{root_node="Post/d", segments_count=1}
                    ├─   0.350079s   0ms DEBUG Building root query tree node: Post/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.350095s   0ms DEBUG Processing edge: Post/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.350119s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Int(3)} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(🔑🧩{id})- Post/c", current_cost=3005}
                  ├─   0.350170s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.350187s   0ms DEBUG No direct paths found
                ├─   0.350198s   0ms DEBUG going deeper
                ├─   0.350207s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/d
                ├─   0.350214s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                ├─   0.350223s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/c
                ├─   0.350230s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                ├─   0.350241s   0ms DEBUG Finished finding indirect paths, found total of 0
                ├─   0.350248s   0ms INFO return=Ok([])
              ┌─┘
              ├─   0.350265s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }], [MoveRequirement { paths: [ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }], selection: SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } } }])))
            ┌─┘
            ├─   0.350284s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }], [MoveRequirement { paths: [ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }], selection: SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } } }])))
          ┌─┘
          ├─   0.350300s   0ms DEBUG Paths for comments(limit: 3){authorId}
          ├─   0.350311s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d is valid
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "authorId", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
                ├─   0.350347s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "authorId", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
                ├─   0.350398s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/d
                ├─   0.350409s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
                ├─   0.350416s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/c
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", edge="id"}
                  ├─   0.350442s   0ms DEBUG checking requirements {id} for edge 'Comment/d -(🔑🧩{id})- Comment/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
                        ├─   0.350481s   0ms DEBUG checking edge Comment/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", edge="id"}
                          ├─   0.350502s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.350525s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d with edge Comment/d -(id)- ID/d
                        ├─   0.350552s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
                        ├─   0.350587s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/d
                        ├─   0.350595s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"c", "d"})
                        ├─   0.350603s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/c
                        ├─   0.350610s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "d"})
                        ├─   0.350618s   0ms DEBUG Finished finding indirect paths, found total of 0
                        ├─   0.350625s   0ms INFO return=Ok([])
                      ┌─┘
                      ├─   0.350642s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }], [])))
                    ┌─┘
                    ├─   0.350660s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }], [])))
                  ┌─┘
                  ├─   0.350677s   0ms DEBUG Paths for id
                  ├─   0.350687s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(id)- ID/d is valid
                  ├─   0.350694s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.350706s   0ms DEBUG path Comment/d -(id)- ID/d is valid
                  ├─   0.350724s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(22)" }]))
                ┌─┘
                ├─   0.350739s   0ms DEBUG Advancing path to Comment/d -(🔑🧩{id})- Comment/c
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(22)" }, root_node="Comment/d"}
                  └─┐create_root_for_path_sequences{root_node="Comment/d", segments_count=1}
                    ├─   0.350766s   0ms DEBUG Building root query tree node: Comment/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.350782s   0ms DEBUG Processing edge: Comment/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.350804s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "authorId", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c", current_cost=3006}
                  ├─   0.350869s   0ms DEBUG checking edge Comment/c -(authorId)- ID/c
                  └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c", edge="authorId"}
                    ├─   0.350901s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.350922s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c with edge Comment/c -(authorId)- ID/c
                  ├─   0.350942s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }])
                ┌─┘
                ├─   0.350965s   0ms DEBUG Found 1 direct paths to Comment/d -(🔑🧩{id})- Comment/c
                ├─   0.350977s   0ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.350983s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.351001s   0ms INFO return=Ok(Some(([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }], [])))
            ┌─┘
            ├─   0.351017s   0ms INFO return=Ok(Some(([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.351032s   1ms DEBUG Paths for authorId
          ├─   0.351042s   1ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c -(authorId)- ID/c is valid
          ├─   0.351048s   1ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.351062s   1ms DEBUG path Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c -(authorId)- ID/c is valid
          ├─   0.351068s   1ms INFO return=Ok(Some([ { cost: 1004, egdes: "EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }]))
        ┌─┘
        ├─   0.351087s   1ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d with edge Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d
        └─┐from_path{path= { cost: 1004, egdes: "EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }, root_node="Post/d"}
          └─┐create_root_for_path_sequences{root_node="Post/d", segments_count=3}
            ├─   0.351135s   0ms DEBUG Building root query tree node: Post/d
            └─┐from_path_segment_sequences{current_index=0, total_segments=3}
              ├─   0.351152s   0ms DEBUG Processing edge: Post/d -(comments)- Comment/d
              └─┐from_path_segment_sequences{current_index=1, total_segments=3}
                ├─   0.351168s   0ms DEBUG Processing edge: Comment/d -(🔑🧩{id})- Comment/c
                └─┐from_path_segment_sequences{current_index=2, total_segments=3}
                  ├─   0.351182s   0ms DEBUG Processing edge: Comment/c -(authorId)- ID/c
                  └─┐from_path_segment_sequences{current_index=3, total_segments=3}
                  ┌─┘
                  ├─   0.351206s   0ms DEBUG No subsequent steps (leaf or end of path)
                ┌─┘
                ├─   0.351220s   0ms DEBUG Adding subsequent step as child
              ┌─┘
              ├─   0.351233s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.351266s   1ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(28)" }])
      ┌─┘
      ├─   0.351283s   2ms DEBUG Found 1 direct paths to Post/c -(🔑🧩{id})- Post/d
      ├─   0.351292s   2ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/c
      ├─   0.351298s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.351305s   2ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.351312s   2ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(28)" }])
    ┌─┘
    ├─   0.351325s   2ms DEBUG Indirect paths found: 1
    ├─   0.351333s   2ms DEBUG advanced: root(Query) -(c)- Query/c -(feed)- Post/c
  ┌─┘
  ├─   0.351344s   2ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.351365s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d", current_cost=2007}
      ├─   0.351423s   0ms DEBUG checking edge Author/d -(id)- ID/d
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d", edge="id"}
        ├─   0.351463s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.351499s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d with edge Author/d -(id)- ID/d
      ├─   0.351510s   0ms INFO return=Ok([ { cost: 2008, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(28) --> EdgeIndex(30)" }])
    ┌─┘
    ├─   0.351525s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d", current_cost=2007}
      ├─   0.351553s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.351559s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.351571s   0ms DEBUG Indirect paths found: 0
    ├─   0.351580s   0ms DEBUG advanced: root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.351632s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.351644s   0ms DEBUG Processing edge: root(Query) -(c)- Query/c
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.351656s   0ms DEBUG Processing edge: Query/c -(feed)- Post/c
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.351668s   0ms DEBUG Processing edge: Post/c -(🔑🧩{id})- Post/d
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.351680s   0ms DEBUG Processing edge: Post/d -(comments)- Comment/d
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.351708s   0ms DEBUG Processing edge: Comment/d -(id)- ID/d
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.351736s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.351748s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.351759s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.351770s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.351780s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2008, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(28) --> EdgeIndex(30)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.351817s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.351828s   0ms DEBUG Processing edge: root(Query) -(c)- Query/c
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.351839s   0ms DEBUG Processing edge: Query/c -(feed)- Post/c
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.351853s   0ms DEBUG Processing edge: Post/c -(🔑🧩{id})- Post/d
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.351867s   0ms DEBUG Processing edge: Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.351880s   0ms DEBUG Processing edge: Author/d -(id)- ID/d
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.351899s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.351911s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.351922s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.351933s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.351943s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="c", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="feed", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.352064s   0ms DEBUG adding output field 'feed' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Post/c -(🔑🧩{id})- Post/d", parent_fetch_step_index=1}
              ├─   0.352101s   0ms DEBUG created a new fetch step [2] subgraph(d) type(Post) requirement() key({id}) in children of 1
              ├─   0.352109s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.352116s   0ms DEBUG adding __typename field to output for type 'Post'
              ├─   0.352127s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Post", field="id", leaf=true, list=false, response_path="feed.@", fetch_path="feed.@"}
                      ├─   0.352205s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.352230s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Post", field="comments", arguments="limit: 1", leaf=false, list=true, response_path="feed.@", fetch_path=""}
                  ├─   0.352366s   0ms DEBUG adding output field 'comments' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Comment", field="id", leaf=true, list=false, response_path="feed.@.comments.@", fetch_path="comments.@"}
                      ├─   0.352421s   0ms DEBUG adding output field 'id' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_entity_move_edge{edge="Post/c -(🔑🧩{id})- Post/d", parent_fetch_step_index=1}
              ├─   0.352526s   0ms DEBUG found existing fetch step [2] for entity move requirement() key({id}) in children of 1
              ├─   0.352534s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.352542s   0ms DEBUG adding __typename field to output for type 'Post'
              ├─   0.352549s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Post", field="id", leaf=true, list=false, response_path="feed.@", fetch_path="feed.@"}
                      ├─   0.352607s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.352631s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Post/d"}
                    └─┐can_satisfy_edge{path="Post/d", edge="id"}
                      ├─   0.352767s   0ms DEBUG checking requirements {id} for edge 'Post/d -(🔑🧩{id})- Post/d'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Post/d", current_cost=0}
                            ├─   0.352809s   0ms DEBUG checking edge Post/d -(id)- ID/d
                            └─┐can_satisfy_edge{path="Post/d", edge="id"}
                              ├─   0.352830s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.352851s   0ms DEBUG Advancing path Post/d with edge Post/d -(id)- ID/d
                            ├─   0.352878s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(26)" }])
                          ┌─┘
                          ├─   0.352908s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(26)" }], [])))
                        ┌─┘
                        ├─   0.352926s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(26)" }], [])))
                      ┌─┘
                      ├─   0.352943s   0ms DEBUG Paths for id
                      ├─   0.352953s   0ms DEBUG   Path Post/d -(id)- ID/d is valid
                      ├─   0.352972s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.352990s   0ms DEBUG path Post/d -(id)- ID/d is valid
                      ├─   0.352998s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(26)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.353027s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.353036s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.353048s   0ms DEBUG created a new fetch step [3] subgraph(d) type(Post) requirement({comments(limit: 3){authorId}}) in children of 1
                  ├─   0.353058s   0ms DEBUG Adding {comments(limit: 3){authorId}} to fetch([3]).input
                  ├─   0.353075s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.353083s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.353092s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.353143s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_plain_field_edge{parent_fetch_step_index=4, type_name="Post", field="comments", arguments="limit: 3", leaf=false, list=true, response_path="feed.@", fetch_path=""}
                        ├─   0.353184s   0ms DEBUG adding output field 'comments' to fetch step [4]
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                          └─┐process_entity_move_edge{edge="Comment/d -(🔑🧩{id})- Comment/c", parent_fetch_step_index=4}
                            ├─   0.353226s   0ms DEBUG created a new fetch step [5] subgraph(c) type(Comment) requirement() key({id}) in children of 4
                            ├─   0.353246s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                            ├─   0.353254s   0ms DEBUG adding __typename field to output for type 'Comment'
                            ├─   0.353263s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                            └─┐connect{parent=4, child=5}
                            ┌─┘
                            └─┐process_requirements_for_fetch_steps{count=1}
                              └─┐process_noop_edge{}
                                └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                  └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Comment", field="id", leaf=true, list=false, response_path="feed.@.comments.@", fetch_path="comments.@"}
                                    ├─   0.353381s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                    └─┐connect{parent=4, child=5}
                                    ┌─┘
                                    ├─   0.353431s   0ms DEBUG adding output field 'id' to fetch step [4]
                                    └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                              └─┐connect{parent=4, child=5}
                              ┌─┘
                            ┌─┘
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="Comment", field="authorId", leaf=true, list=false, response_path="feed.@.comments.@", fetch_path=""}
                                ├─   0.353587s   0ms DEBUG adding output field 'authorId' to fetch step [5]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.353689s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  ├─   0.353715s   1ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                    └─┐process_plain_field_edge{parent_fetch_step_index=3, type_name="Author", field="id", leaf=true, list=false, response_path="feed.@.author", fetch_path="author"}
                      ├─   0.353761s   0ms DEBUG adding output field 'id' to fetch step [3]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.353859s   1ms DEBUG Done
├─   0.353891s   1ms DEBUG found roots
├─   0.353900s   1ms DEBUG print graph
├─   0.353905s   1ms DEBUG Nodes:
│ [1] Query/c {} → {feed{__typename id}} at $.
│ [2] Post/d {__typename id} → {comments(limit: 1){id}} at $.feed.@
│ [3] Post/d {__typename comments(limit: 3){authorId} id} → {author{id}} at $.feed.@
│ [4] Post/d {__typename id} → {comments(limit: 3){__typename id}} at $.feed.@
│ [5] Comment/c {__typename id} → {authorId} at $.feed.@.comments.@
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│       [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.354034s   0ms DEBUG Found optimization: 4 <- 2
    └─┐perform_fetch_step_merge{}
      ├─   0.354072s   0ms DEBUG merging fetch steps [4] and [2]
      └─┐connect{parent=1, child=4}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="c"}
      └─┐execute{subgraph_name="c"}
        ├─   0.354814s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.357262s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"feed": Array [Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="d"}
        └─┐execute{subgraph_name="d"}
          ├─   0.358133s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.361098s   3ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"feed": Array [Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}, representations=[]}
    ├─   0.362064s   0ms WARN Flatten node produced no representations for path ["feed", "@", "comments", "@"]. Skipping child node execution.
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"feed": Array [Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Null}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Null}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="d"}
        └─┐execute{subgraph_name="d"}
          ├─   0.363242s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.365186s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.365587s DEBUG execution result: ExecutionResult { data: Some(Object {"feed": Array [Object {"author": Null, "comments": Null}, Object {"author": Null, "comments": Null}]}), errors: Some([GraphQLError { message: "Fields \"comments\" conflict because they have differing arguments. Use different aliases on the fields to fetch both if this was intentional.", locations: Some([GraphQLErrorLocation { line: 1, column: 90 }, GraphQLErrorLocation { line: 1, column: 124 }]), path: None, extensions: Some({"code": String("GRAPHQL_VALIDATION_FAILED")}) }, GraphQLError { message: "Fields \"comments\" conflict because they have differing arguments. Use different aliases on the fields to fetch both if this was intentional.", locations: Some([GraphQLErrorLocation { line: 1, column: 90 }, GraphQLErrorLocation { line: 1, column: 124 }]), path: None, extensions: Some({"code": String("GRAPHQL_VALIDATION_FAILED")}) }]), extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("{feed{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("feed"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("d"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Post{comments(limit: 3){__typename id} comments(limit: 1){id}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Post"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("feed"), String("@"), String("comments"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Comment{authorId}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Comment"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("feed"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("d"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Post{author{id}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Post"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("comments"), "selections": Array [Object {"kind": String("Field"), "name": String("authorId")}]}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.372646s DEBUG original document: query($limit: Int = 1) {
  feed {
    author {
      id
    }
    comments(limit: $limit) {
      id
    }
  }
}

   0.372779s DEBUG normalized document: query($limit:Int){feed{author{id} comments(limit: $limit){id}}}

   0.372801s DEBUG executable operation: query($limit:Int){feed{author{id} comments(limit: $limit){id}}}
┐walk_operation{}
├─   0.373346s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="feed", leaf=false}
  ├─   0.373401s   0ms DEBUG Trying to advance to: feed{author{id} comments(limit: $limit){id}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.373480s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.373520s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.373561s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.373568s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.373581s   0ms DEBUG Indirect paths found: 0
    ├─   0.373603s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  └─┐explore_path{path="root(Query) -(c)- Query/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.373655s   0ms DEBUG checking edge Query/c -(feed)- Post/c
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c", edge="feed"}
        ├─   0.373676s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.373691s   0ms DEBUG Advancing path root(Query) -(c)- Query/c with edge Query/c -(feed)- Post/c
      ├─   0.373702s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.373718s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.373756s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.373762s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.373774s   0ms DEBUG Indirect paths found: 0
    ├─   0.373780s   0ms DEBUG advanced: root(Query) -(c)- Query/c
  ┌─┘
  ├─   0.373794s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="comments", leaf=false}
  ├─   0.373816s   0ms DEBUG Trying to advance to: comments(limit: $limit){id} through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(feed)- Post/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Variable("limit")} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
      ├─   0.373845s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.373878s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Variable("limit")} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
      ├─   0.373904s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/d
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c", edge="id"}
        ├─   0.373949s   0ms DEBUG checking requirements {id} for edge 'Post/c -(🔑🧩{id})- Post/d'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
              ├─   0.373989s   0ms DEBUG checking edge Post/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c", edge="id"}
                ├─   0.374017s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.374036s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c with edge Post/c -(id)- ID/c
              ├─   0.374047s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
              ├─   0.374078s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/d
              ├─   0.374086s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
              ├─   0.374095s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/c
              ├─   0.374101s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.374109s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.374116s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.374133s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.374150s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.374164s   0ms DEBUG Paths for id
        ├─   0.374172s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(id)- ID/c is valid
        ├─   0.374179s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.374196s   0ms DEBUG path Post/c -(id)- ID/c is valid
        ├─   0.374202s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
      ┌─┘
      ├─   0.374216s   0ms DEBUG Advancing path to Post/c -(🔑🧩{id})- Post/d
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Post/c"}
        └─┐create_root_for_path_sequences{root_node="Post/c", segments_count=1}
          ├─   0.374244s   0ms DEBUG Building root query tree node: Post/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.374260s   0ms DEBUG Processing edge: Post/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.374280s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Variable("limit")} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
        ├─   0.374347s   0ms DEBUG checking edge Post/d -(comments)- Comment/d
        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="comments"}
          ├─   0.374376s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.374395s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d with edge Post/d -(comments)- Comment/d
        ├─   0.374407s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }])
      ┌─┘
      ├─   0.374424s   0ms DEBUG Found 1 direct paths to Post/c -(🔑🧩{id})- Post/d
      ├─   0.374433s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/c
      ├─   0.374439s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.374447s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.374454s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }])
    ┌─┘
    ├─   0.374468s   0ms DEBUG Indirect paths found: 1
    ├─   0.374476s   0ms DEBUG advanced: root(Query) -(c)- Query/c -(feed)- Post/c
  ┌─┘
  ├─   0.374488s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.374510s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
      ├─   0.374541s   0ms DEBUG checking edge Comment/d -(id)- ID/d
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", edge="id"}
        ├─   0.374559s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.374574s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d with edge Comment/d -(id)- ID/d
      ├─   0.374582s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }])
    ┌─┘
    ├─   0.374600s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
      ├─   0.374622s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/d
      ├─   0.374628s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.374635s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/c
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", edge="id"}
        ├─   0.374653s   0ms DEBUG checking requirements {id} for edge 'Comment/d -(🔑🧩{id})- Comment/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
              ├─   0.374689s   0ms DEBUG checking edge Comment/d -(id)- ID/d
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", edge="id"}
                ├─   0.374708s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.374726s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d with edge Comment/d -(id)- ID/d
              ├─   0.374735s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
              ├─   0.374766s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/d
              ├─   0.374774s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.374781s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/c
              ├─   0.374788s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.374796s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.374802s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.374818s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }], [])))
          ┌─┘
          ├─   0.374835s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }], [])))
        ┌─┘
        ├─   0.374850s   0ms DEBUG Paths for id
        ├─   0.374859s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(id)- ID/d is valid
        ├─   0.374865s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.374878s   0ms DEBUG path Comment/d -(id)- ID/d is valid
        ├─   0.374884s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(22)" }]))
      ┌─┘
      ├─   0.374898s   0ms DEBUG Advancing path to Comment/d -(🔑🧩{id})- Comment/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(22)" }, root_node="Comment/d"}
        └─┐create_root_for_path_sequences{root_node="Comment/d", segments_count=1}
          ├─   0.374923s   0ms DEBUG Building root query tree node: Comment/d
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.374938s   0ms DEBUG Processing edge: Comment/d -(id)- ID/d
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.374958s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c", current_cost=3006}
        ├─   0.375002s   0ms DEBUG checking edge Comment/c -(id)- ID/c
        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c", edge="id"}
          ├─   0.375021s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.375037s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c with edge Comment/c -(id)- ID/c
        ├─   0.375045s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(18)" }])
      ┌─┘
      ├─   0.375061s   0ms DEBUG Found 1 direct paths to Comment/d -(🔑🧩{id})- Comment/c
      ├─   0.375071s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.375076s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.375090s   0ms DEBUG Indirect paths found: 1
    ├─   0.375101s   0ms DEBUG advanced: root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d
  ┌─┘
┌─┘
└─┐process_field{field_name="author", leaf=false}
  ├─   0.375130s   0ms DEBUG Trying to advance to: author{id} through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(feed)- Post/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
      ├─   0.375155s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.375166s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
      ├─   0.375184s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/d
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c", edge="id"}
        ├─   0.375203s   0ms DEBUG checking requirements {id} for edge 'Post/c -(🔑🧩{id})- Post/d'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
              ├─   0.375235s   0ms DEBUG checking edge Post/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c", edge="id"}
                ├─   0.375252s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.375268s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c with edge Post/c -(id)- ID/c
              ├─   0.375277s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c", current_cost=1001}
              ├─   0.375306s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/d
              ├─   0.375313s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
              ├─   0.375320s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/c
              ├─   0.375327s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.375334s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.375340s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.375355s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.375370s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.375384s   0ms DEBUG Paths for id
        ├─   0.375392s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(id)- ID/c is valid
        ├─   0.375398s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.375409s   0ms DEBUG path Post/c -(id)- ID/c is valid
        ├─   0.375414s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
      ┌─┘
      ├─   0.375428s   0ms DEBUG Advancing path to Post/c -(🔑🧩{id})- Post/d
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Post/c"}
        └─┐create_root_for_path_sequences{root_node="Post/c", segments_count=1}
          ├─   0.375452s   0ms DEBUG Building root query tree node: Post/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.375466s   0ms DEBUG Processing edge: Post/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.375486s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
        ├─   0.375532s   0ms DEBUG checking edge Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d
        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="author"}
          ├─   0.375551s   0ms DEBUG checking requirements {comments(limit: 3){authorId}} for edge 'Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Int(3)} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
                ├─   0.375588s   0ms DEBUG checking edge Post/d -(comments)- Comment/d
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="comments"}
                  ├─   0.375608s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.375626s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d with edge Post/d -(comments)- Comment/d
                ├─   0.375640s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Int(3)} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
                ├─   0.375674s   0ms DEBUG Exploring edge Post/d -(🔑🧩{id})- Post/d
                ├─   0.375681s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
                ├─   0.375689s   0ms DEBUG Exploring edge Post/d -(🔑🧩{id})- Post/c
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="id"}
                  ├─   0.375712s   0ms DEBUG checking requirements {id} for edge 'Post/d -(🔑🧩{id})- Post/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
                        ├─   0.375889s   0ms DEBUG checking edge Post/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", edge="id"}
                          ├─   0.375920s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.375945s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d with edge Post/d -(id)- ID/d
                        ├─   0.375959s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(26)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d", current_cost=2003}
                        ├─   0.375998s   0ms DEBUG Exploring edge Post/d -(🔑🧩{id})- Post/d
                        ├─   0.376007s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                        ├─   0.376018s   0ms DEBUG Exploring edge Post/d -(🔑🧩{id})- Post/c
                        ├─   0.376026s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                        ├─   0.376035s   0ms DEBUG Finished finding indirect paths, found total of 0
                        ├─   0.376042s   0ms INFO return=Ok([])
                      ┌─┘
                      ├─   0.376061s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(26)" }], [])))
                    ┌─┘
                    ├─   0.376080s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(26)" }], [])))
                  ┌─┘
                  ├─   0.376097s   0ms DEBUG Paths for id
                  ├─   0.376108s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(id)- ID/d is valid
                  ├─   0.376115s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.376128s   0ms DEBUG path Post/d -(id)- ID/d is valid
                  ├─   0.376152s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(26)" }]))
                ┌─┘
                ├─   0.376212s   0ms DEBUG Advancing path to Post/d -(🔑🧩{id})- Post/c
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(26)" }, root_node="Post/d"}
                  └─┐create_root_for_path_sequences{root_node="Post/d", segments_count=1}
                    ├─   0.376262s   0ms DEBUG Building root query tree node: Post/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.376281s   0ms DEBUG Processing edge: Post/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.376305s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"limit": Int(3)} }), skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(🔑🧩{id})- Post/c", current_cost=3005}
                  ├─   0.376366s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.376381s   0ms DEBUG No direct paths found
                ├─   0.376393s   0ms DEBUG going deeper
                ├─   0.376422s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/d
                ├─   0.376433s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                ├─   0.376441s   0ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/c
                ├─   0.376449s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                ├─   0.376463s   0ms DEBUG Finished finding indirect paths, found total of 0
                ├─   0.376469s   0ms INFO return=Ok([])
              ┌─┘
              ├─   0.376505s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }], [MoveRequirement { paths: [ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }], selection: SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } } }])))
            ┌─┘
            ├─   0.376544s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }], [MoveRequirement { paths: [ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27)" }], selection: SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } } }])))
          ┌─┘
          ├─   0.376565s   1ms DEBUG Paths for comments(limit: 3){authorId}
          ├─   0.376579s   1ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d is valid
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "authorId", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
                ├─   0.376633s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "authorId", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
                ├─   0.376677s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/d
                ├─   0.376685s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d"})
                ├─   0.376693s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/c
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", edge="id"}
                  ├─   0.376721s   0ms DEBUG checking requirements {id} for edge 'Comment/d -(🔑🧩{id})- Comment/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
                        ├─   0.376760s   0ms DEBUG checking edge Comment/d -(id)- ID/d
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", edge="id"}
                          ├─   0.376783s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.376803s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d with edge Comment/d -(id)- ID/d
                        ├─   0.376814s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d", current_cost=2004}
                        ├─   0.376868s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/d
                        ├─   0.376880s   0ms DEBUG Ignoring, graph is excluded and already visited (current: d, visited: {"d", "c"})
                        ├─   0.376888s   0ms DEBUG Exploring edge Comment/d -(🔑🧩{id})- Comment/c
                        ├─   0.376895s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"d", "c"})
                        ├─   0.376905s   0ms DEBUG Finished finding indirect paths, found total of 0
                        ├─   0.376912s   0ms INFO return=Ok([])
                      ┌─┘
                      ├─   0.376934s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }], [])))
                    ┌─┘
                    ├─   0.376955s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }], [])))
                  ┌─┘
                  ├─   0.376971s   0ms DEBUG Paths for id
                  ├─   0.376983s   0ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(id)- ID/d is valid
                  ├─   0.376990s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.377087s   0ms DEBUG path Comment/d -(id)- ID/d is valid
                  ├─   0.377114s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(22)" }]))
                ┌─┘
                ├─   0.377160s   0ms DEBUG Advancing path to Comment/d -(🔑🧩{id})- Comment/c
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(22)" }, root_node="Comment/d"}
                  └─┐create_root_for_path_sequences{root_node="Comment/d", segments_count=1}
                    ├─   0.377216s   0ms DEBUG Building root query tree node: Comment/d
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.377246s   0ms DEBUG Processing edge: Comment/d -(id)- ID/d
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.377303s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "authorId", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c", current_cost=3006}
                  ├─   0.377408s   0ms DEBUG checking edge Comment/c -(authorId)- ID/c
                  └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c", edge="authorId"}
                    ├─   0.377457s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.377491s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c with edge Comment/c -(authorId)- ID/c
                  ├─   0.377506s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }])
                ┌─┘
                ├─   0.377532s   0ms DEBUG Found 1 direct paths to Comment/d -(🔑🧩{id})- Comment/c
                ├─   0.377554s   0ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.377585s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }])
              ┌─┘
              ├─   0.377626s   1ms INFO return=Ok(Some(([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }], [])))
            ┌─┘
            ├─   0.377649s   1ms INFO return=Ok(Some(([ { cost: 3007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.377670s   2ms DEBUG Paths for authorId
          ├─   0.377712s   2ms DEBUG   Path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c -(authorId)- ID/c is valid
          ├─   0.377747s   2ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.377778s   2ms DEBUG path Post/d -(comments)- Comment/d -(🔑🧩{id})- Comment/c -(authorId)- ID/c is valid
          ├─   0.377787s   2ms INFO return=Ok(Some([ { cost: 1004, egdes: "EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }]))
        ┌─┘
        ├─   0.377824s   2ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d with edge Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d
        └─┐from_path{path= { cost: 1004, egdes: "EdgeIndex(27) --> EdgeIndex(38) --> EdgeIndex(17)" }, root_node="Post/d"}
          └─┐create_root_for_path_sequences{root_node="Post/d", segments_count=3}
            ├─   0.377870s   0ms DEBUG Building root query tree node: Post/d
            └─┐from_path_segment_sequences{current_index=0, total_segments=3}
              ├─   0.377900s   0ms DEBUG Processing edge: Post/d -(comments)- Comment/d
              └─┐from_path_segment_sequences{current_index=1, total_segments=3}
                ├─   0.377931s   0ms DEBUG Processing edge: Comment/d -(🔑🧩{id})- Comment/c
                └─┐from_path_segment_sequences{current_index=2, total_segments=3}
                  ├─   0.377957s   0ms DEBUG Processing edge: Comment/c -(authorId)- ID/c
                  └─┐from_path_segment_sequences{current_index=3, total_segments=3}
                  ┌─┘
                  ├─   0.377988s   0ms DEBUG No subsequent steps (leaf or end of path)
                ┌─┘
                ├─   0.378005s   0ms DEBUG Adding subsequent step as child
              ┌─┘
              ├─   0.378023s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.378065s   2ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(28)" }])
      ┌─┘
      ├─   0.378091s   2ms DEBUG Found 1 direct paths to Post/c -(🔑🧩{id})- Post/d
      ├─   0.378102s   2ms DEBUG Exploring edge Post/c -(🔑🧩{id})- Post/c
      ├─   0.378109s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.378118s   2ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.378124s   2ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(28)" }])
    ┌─┘
    ├─   0.378143s   3ms DEBUG Indirect paths found: 1
    ├─   0.378153s   3ms DEBUG advanced: root(Query) -(c)- Query/c -(feed)- Post/c
  ┌─┘
  ├─   0.378166s   3ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.378191s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d", current_cost=2007}
      ├─   0.378274s   0ms DEBUG checking edge Author/d -(id)- ID/d
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d", edge="id"}
        ├─   0.378300s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.378321s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d with edge Author/d -(id)- ID/d
      ├─   0.378331s   0ms INFO return=Ok([ { cost: 2008, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(28) --> EdgeIndex(30)" }])
    ┌─┘
    ├─   0.378347s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d", current_cost=2007}
      ├─   0.378386s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.378397s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.378412s   0ms DEBUG Indirect paths found: 0
    ├─   0.378425s   0ms DEBUG advanced: root(Query) -(c)- Query/c -(feed)- Post/c -(🔑🧩{id})- Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(27) --> EdgeIndex(22)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.378515s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.378530s   0ms DEBUG Processing edge: root(Query) -(c)- Query/c
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.378543s   0ms DEBUG Processing edge: Query/c -(feed)- Post/c
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.378556s   0ms DEBUG Processing edge: Post/c -(🔑🧩{id})- Post/d
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.378571s   0ms DEBUG Processing edge: Post/d -(comments)- Comment/d
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.378584s   0ms DEBUG Processing edge: Comment/d -(id)- ID/d
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.378607s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.378621s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.378640s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.378657s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.378671s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2008, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(41) --> EdgeIndex(28) --> EdgeIndex(30)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.378743s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.378762s   0ms DEBUG Processing edge: root(Query) -(c)- Query/c
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.378775s   0ms DEBUG Processing edge: Query/c -(feed)- Post/c
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.378788s   0ms DEBUG Processing edge: Post/c -(🔑🧩{id})- Post/d
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.378805s   0ms DEBUG Processing edge: Post/d -(author🧩{comments(limit: 3){authorId}})- Author/d
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.378819s   0ms DEBUG Processing edge: Author/d -(id)- ID/d
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.378843s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.378855s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.378869s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.378881s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.378918s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="c", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="feed", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.379094s   0ms DEBUG adding output field 'feed' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Post/c -(🔑🧩{id})- Post/d", parent_fetch_step_index=1}
              ├─   0.379161s   0ms DEBUG created a new fetch step [2] subgraph(d) type(Post) requirement() key({id}) in children of 1
              ├─   0.379193s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.379209s   0ms DEBUG adding __typename field to output for type 'Post'
              ├─   0.379222s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Post", field="id", leaf=true, list=false, response_path="feed.@", fetch_path="feed.@"}
                      ├─   0.379334s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.379371s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Post", field="comments", arguments="limit: $limit", leaf=false, list=true, response_path="feed.@", fetch_path=""}
                  ├─   0.379487s   0ms DEBUG adding output field 'comments' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Comment", field="id", leaf=true, list=false, response_path="feed.@.comments.@", fetch_path="comments.@"}
                      ├─   0.379520s   0ms DEBUG adding output field 'id' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_entity_move_edge{edge="Post/c -(🔑🧩{id})- Post/d", parent_fetch_step_index=1}
              ├─   0.379619s   0ms DEBUG found existing fetch step [2] for entity move requirement() key({id}) in children of 1
              ├─   0.379628s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.379635s   0ms DEBUG adding __typename field to output for type 'Post'
              ├─   0.379642s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Post", field="id", leaf=true, list=false, response_path="feed.@", fetch_path="feed.@"}
                      ├─   0.379702s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.379726s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Post/d"}
                    └─┐can_satisfy_edge{path="Post/d", edge="id"}
                      ├─   0.379844s   0ms DEBUG checking requirements {id} for edge 'Post/d -(🔑🧩{id})- Post/d'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Post/d", current_cost=0}
                            ├─   0.379885s   0ms DEBUG checking edge Post/d -(id)- ID/d
                            └─┐can_satisfy_edge{path="Post/d", edge="id"}
                              ├─   0.379906s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.379925s   0ms DEBUG Advancing path Post/d with edge Post/d -(id)- ID/d
                            ├─   0.379937s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(26)" }])
                          ┌─┘
                          ├─   0.379969s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(26)" }], [])))
                        ┌─┘
                        ├─   0.379987s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(26)" }], [])))
                      ┌─┘
                      ├─   0.380004s   0ms DEBUG Paths for id
                      ├─   0.380014s   0ms DEBUG   Path Post/d -(id)- ID/d is valid
                      ├─   0.380022s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.380034s   0ms DEBUG path Post/d -(id)- ID/d is valid
                      ├─   0.380061s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(26)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.380097s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.380106s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.380119s   0ms DEBUG created a new fetch step [3] subgraph(d) type(Post) requirement({comments(limit: 3){authorId}}) in children of 1
                  ├─   0.380129s   0ms DEBUG Adding {comments(limit: 3){authorId}} to fetch([3]).input
                  ├─   0.380142s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.380149s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.380159s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.380220s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_plain_field_edge{parent_fetch_step_index=4, type_name="Post", field="comments", arguments="limit: 3", leaf=false, list=true, response_path="feed.@", fetch_path=""}
                        ├─   0.380268s   0ms DEBUG adding output field 'comments' to fetch step [4]
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                          └─┐process_entity_move_edge{edge="Comment/d -(🔑🧩{id})- Comment/c", parent_fetch_step_index=4}
                            ├─   0.380330s   0ms DEBUG created a new fetch step [5] subgraph(c) type(Comment) requirement() key({id}) in children of 4
                            ├─   0.380341s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                            ├─   0.380364s   0ms DEBUG adding __typename field to output for type 'Comment'
                            ├─   0.380377s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                            └─┐connect{parent=4, child=5}
                            ┌─┘
                            └─┐process_requirements_for_fetch_steps{count=1}
                              └─┐process_noop_edge{}
                                └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                  └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Comment", field="id", leaf=true, list=false, response_path="feed.@.comments.@", fetch_path="comments.@"}
                                    ├─   0.380490s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                    └─┐connect{parent=4, child=5}
                                    ┌─┘
                                    ├─   0.380527s   0ms DEBUG adding output field 'id' to fetch step [4]
                                    └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                              └─┐connect{parent=4, child=5}
                              ┌─┘
                            ┌─┘
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="Comment", field="authorId", leaf=true, list=false, response_path="feed.@.comments.@", fetch_path=""}
                                ├─   0.380683s   0ms DEBUG adding output field 'authorId' to fetch step [5]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.380780s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  ├─   0.380805s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                    └─┐process_plain_field_edge{parent_fetch_step_index=3, type_name="Author", field="id", leaf=true, list=false, response_path="feed.@.author", fetch_path="author"}
                      ├─   0.380832s   0ms DEBUG adding output field 'id' to fetch step [3]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.380935s   1ms DEBUG Done
├─   0.380944s   1ms DEBUG found roots
├─   0.380949s   1ms DEBUG print graph
├─   0.380954s   1ms DEBUG Nodes:
│ [1] Query/c {} → {feed{__typename id}} at $.
│ [2] Post/d {__typename id} → {comments(limit: $limit){id}} at $.feed.@
│ [3] Post/d {__typename comments(limit: 3){authorId} id} → {author{id}} at $.feed.@
│ [4] Post/d {__typename id} → {comments(limit: 3){__typename id}} at $.feed.@
│ [5] Comment/c {__typename id} → {authorId} at $.feed.@.comments.@
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│       [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.381044s   0ms DEBUG Found optimization: 4 <- 2
    └─┐perform_fetch_step_merge{}
      ├─   0.381060s   0ms DEBUG merging fetch steps [4] and [2]
      └─┐connect{parent=1, child=4}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="c"}
      └─┐execute{subgraph_name="c"}
        ├─   0.381489s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.383996s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"feed": Array [Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="d"}
        └─┐execute{subgraph_name="d"}
          ├─   0.384972s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.387861s   3ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"feed": Array [Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}, representations=[]}
    ├─   0.388175s   0ms WARN Flatten node produced no representations for path ["feed", "@", "comments", "@"]. Skipping child node execution.
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"feed": Array [Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Null}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Null}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="d"}
        └─┐execute{subgraph_name="d"}
          ├─   0.388547s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.390449s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.390843s DEBUG execution result: ExecutionResult { data: Some(Object {"feed": Array [Object {"author": Null, "comments": Null}, Object {"author": Null, "comments": Null}]}), errors: Some([GraphQLError { message: "Fields \"comments\" conflict because they have differing arguments. Use different aliases on the fields to fetch both if this was intentional.", locations: Some([GraphQLErrorLocation { line: 1, column: 90 }, GraphQLErrorLocation { line: 1, column: 124 }]), path: None, extensions: Some({"code": String("GRAPHQL_VALIDATION_FAILED")}) }, GraphQLError { message: "Fields \"comments\" conflict because they have differing arguments. Use different aliases on the fields to fetch both if this was intentional.", locations: Some([GraphQLErrorLocation { line: 1, column: 90 }, GraphQLErrorLocation { line: 1, column: 124 }]), path: None, extensions: Some({"code": String("GRAPHQL_VALIDATION_FAILED")}) }, GraphQLError { message: "Variable \"$limit\" is not defined.", locations: Some([GraphQLErrorLocation { line: 1, column: 140 }, GraphQLErrorLocation { line: 1, column: 1 }]), path: None, extensions: Some({"code": String("GRAPHQL_VALIDATION_FAILED")}) }]), extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("{feed{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("feed"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("d"), "variableUsages": Array [String("limit")], "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Post{comments(limit: 3){__typename id} comments(limit: $limit){id}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Post"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("feed"), String("@"), String("comments"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Comment{authorId}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Comment"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("feed"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("d"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Post{author{id}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Post"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("comments"), "selections": Array [Object {"kind": String("Field"), "name": String("authorId")}]}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.395961s DEBUG original document: query($limit: Int = 1) {
  feed {
    author {
      id
    }
    ...Foo
    ...Bar
  }
}

fragment Foo on Post {
  comments(limit: $limit) {
    id
  }
}

fragment Bar on Post {
  comments(limit: $limit) {
    id
  }
}

   0.396089s DEBUG normalized document: query($limit:Int){feed{author{id} comments(limit: $limit){id}}}

   0.396109s DEBUG executable operation: query($limit:Int){feed{author{id} comments(limit: $limit){id}}}
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="c"}
      └─┐execute{subgraph_name="c"}
        ├─   0.396392s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.398218s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"feed": Array [Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="d"}
        └─┐execute{subgraph_name="d"}
          ├─   0.398916s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.400763s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"feed": Array [Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}, representations=[]}
    ├─   0.400982s   0ms WARN Flatten node produced no representations for path ["feed", "@", "comments", "@"]. Skipping child node execution.
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"feed": Array [Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Post"), "id": String("p1")}, Object {"__typename": String("Post"), "id": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Null}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "comments", selections: SelectionSet { items: [SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "authorId", selections: SelectionSet { items: [] } }], entity=Null}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="d"}
        └─┐execute{subgraph_name="d"}
          ├─   0.401319s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.402966s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.403272s DEBUG execution result: ExecutionResult { data: Some(Object {"feed": Array [Object {"author": Null, "comments": Null}, Object {"author": Null, "comments": Null}]}), errors: Some([GraphQLError { message: "Fields \"comments\" conflict because they have differing arguments. Use different aliases on the fields to fetch both if this was intentional.", locations: Some([GraphQLErrorLocation { line: 1, column: 90 }, GraphQLErrorLocation { line: 1, column: 124 }]), path: None, extensions: Some({"code": String("GRAPHQL_VALIDATION_FAILED")}) }, GraphQLError { message: "Fields \"comments\" conflict because they have differing arguments. Use different aliases on the fields to fetch both if this was intentional.", locations: Some([GraphQLErrorLocation { line: 1, column: 90 }, GraphQLErrorLocation { line: 1, column: 124 }]), path: None, extensions: Some({"code": String("GRAPHQL_VALIDATION_FAILED")}) }, GraphQLError { message: "Variable \"$limit\" is not defined.", locations: Some([GraphQLErrorLocation { line: 1, column: 140 }, GraphQLErrorLocation { line: 1, column: 1 }]), path: None, extensions: Some({"code": String("GRAPHQL_VALIDATION_FAILED")}) }]), extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("{feed{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("feed"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("d"), "variableUsages": Array [String("limit")], "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Post{comments(limit: 3){__typename id} comments(limit: $limit){id}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Post"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("feed"), String("@"), String("comments"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Comment{authorId}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Comment"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("feed"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("d"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Post{author{id}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Post"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("comments"), "selections": Array [Object {"kind": String("Field"), "name": String("authorId")}]}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
