generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.11s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="User"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006036s   0ms DEBUG Building graph for supergraph with 14 definitions
  └─┐build_root_nodes{}
    ├─   0.006075s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006126s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006159s   0ms INFO [ ] Field 'Query.userById/A' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006169s   0ms INFO [x] Creating field move edge 'Query.randomUser/A' (type: User)
    ├─   0.006177s   0ms INFO [x] Creating field move edge 'Query.randomUser/A' (type: User)
    ├─   0.006185s   0ms INFO [x] Creating field move edge 'Query.providedRandomUser/A' (type: User)
    ├─   0.006191s   0ms INFO [x] Creating field move edge 'Query.providedRandomUser/A' (type: User)
    ├─   0.006199s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006206s   0ms INFO [x] Creating field move edge 'Query.userById/B' (type: User)
    ├─   0.006212s   0ms INFO [x] Creating field move edge 'Query.userById/B' (type: User)
    ├─   0.006218s   0ms INFO [ ] Field 'Query.randomUser/B' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006223s   0ms INFO [ ] Field 'Query.providedRandomUser/B' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006228s   0ms INFO [x] Creating owned field move edge 'User.__typename/A' (type: String)
    ├─   0.006235s   0ms INFO [ ] Field 'User.name/A' is external, skipping edge creation
    ├─   0.006240s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006248s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006254s   0ms INFO [x] Creating field move edge 'User.rid/A' (type: ID)
    ├─   0.006260s   0ms INFO [x] Creating field move edge 'User.rid/A' (type: ID)
    ├─   0.006265s   0ms INFO [ ] Field 'User.nickname/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006270s   0ms INFO [x] Creating owned field move edge 'User.__typename/B' (type: String)
    ├─   0.006276s   0ms INFO [x] Creating field move edge 'User.name/B' (type: String)
    ├─   0.006282s   0ms INFO [x] Creating field move edge 'User.name/B' (type: String)
    ├─   0.006287s   0ms INFO [x] Creating field move edge 'User.id/B' (type: ID)
    ├─   0.006293s   0ms INFO [x] Creating field move edge 'User.id/B' (type: ID)
    ├─   0.006299s   0ms INFO [ ] Field 'User.rid/B' does is not available in the subgraph, skipping edge creation (type: ID)
    ├─   0.006304s   0ms INFO [x] Creating field move edge 'User.nickname/B' (type: String)
    ├─   0.006309s   0ms INFO [x] Creating field move edge 'User.nickname/B' (type: String)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006426s   0ms INFO Creating self-referencing entity move edge in 'User/A' via key 'id'
    ├─   0.006499s   0ms INFO Creating entity move edge from 'User/A' to 'User/B' via key 'id'
    ├─   0.006546s   0ms INFO Creating entity move edge from 'User/B' to 'User/A' via key 'id'
    ├─   0.006610s   0ms INFO Creating self-referencing entity move edge in 'User/B' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
    ├─   0.006706s   0ms INFO Creating viewed (#1) link for provided field 'Query.providedRandomUser/"A"' (type: User)
    └─┐handle_viewed_selection_set{graph_id="A", view_id=1, parent_type_name="User"}
      ├─   0.006735s   0ms INFO Upserting graph viewed node for 'String.A'
      ├─   0.006742s   0ms INFO Creating viewed (#1) field edge for 'User.name' (type: String)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.062738s INFO Starting server on http://localhost:4000
   0.063924s INFO starting 16 workers
   0.063971s INFO Actix runtime found; starting in Actix runtime
   0.063980s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.285741s DEBUG original document: query ping {
  __typename
}

   0.285856s DEBUG normalized document: query ping {__typename}

   0.285887s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.286282s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.363115s DEBUG original document: query {
  randomUser {
    id
    name
  }
  userById(id: "u2") {
    id
    name
    nickname
  }
}

   0.363253s DEBUG normalized document: query{randomUser{id name} userById(id: "u2"){id name nickname}}

   0.363287s DEBUG executable operation: query{randomUser{id name} userById(id: "u2"){id name nickname}}
┐walk_operation{}
├─   0.363823s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="userById", leaf=false}
  ├─   0.363886s   0ms DEBUG Trying to advance to: userById(id: "u2"){id name nickname} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.363957s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.363981s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.364013s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.364020s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.364032s   0ms DEBUG Indirect paths found: 0
    ├─   0.364040s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.364076s   0ms DEBUG checking edge Query/b -(userById)- User/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="userById"}
        ├─   0.364096s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.364111s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(userById)- User/b
      ├─   0.364138s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.364162s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.364193s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.364213s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.364231s   0ms DEBUG Indirect paths found: 0
    ├─   0.364242s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.364257s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="nickname", leaf=true}
  ├─   0.364281s   0ms DEBUG Trying to advance to: nickname through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userById)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.364309s   0ms DEBUG checking edge User/b -(nickname)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="nickname"}
        ├─   0.364325s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.364339s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(nickname)- String/b
      ├─   0.364348s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.364362s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.364382s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.364389s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.364395s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.364414s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.364450s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
                ├─   0.364472s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.364511s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
              ├─   0.364521s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(12)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.364555s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.364563s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.364569s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.364577s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.364587s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.364593s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.364610s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(12)" }], [])))
          ┌─┘
          ├─   0.364627s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(12)" }], [])))
        ┌─┘
        ├─   0.364641s   0ms DEBUG Paths for id
        ├─   0.364650s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userById)- User/b -(id)- ID/b is valid
        ├─   0.364656s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.364673s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.364679s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(12)" }]))
      ┌─┘
      ├─   0.364694s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(12)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.364721s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.364737s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.364758s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.364803s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.364816s   0ms DEBUG No direct paths found
      ├─   0.364826s   0ms DEBUG going deeper
      ├─   0.364834s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      ├─   0.364840s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.364845s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.364851s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.364859s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.364864s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.364876s   0ms DEBUG Indirect paths found: 0
    ├─   0.364883s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(userById)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.364910s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userById)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.364935s   0ms DEBUG checking edge User/b -(name)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="name"}
        ├─   0.364950s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.364965s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(name)- String/b
      ├─   0.364972s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.364985s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.365004s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.365011s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.365019s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.365035s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.365065s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
                ├─   0.365081s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.365098s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
              ├─   0.365106s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(12)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.365133s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.365140s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.365146s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.365152s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.365160s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.365166s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.365180s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(12)" }], [])))
          ┌─┘
          ├─   0.365195s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(12)" }], [])))
        ┌─┘
        ├─   0.365208s   0ms DEBUG Paths for id
        ├─   0.365216s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userById)- User/b -(id)- ID/b is valid
        ├─   0.365222s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.365232s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.365238s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(12)" }]))
      ┌─┘
      ├─   0.365251s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(12)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.365274s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.365287s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.365307s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.365347s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.365440s   0ms DEBUG No direct paths found
      ├─   0.365451s   0ms DEBUG going deeper
      ├─   0.365462s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      ├─   0.365468s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.365473s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.365478s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.365487s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.365492s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.365504s   0ms DEBUG Indirect paths found: 0
    ├─   0.365513s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(userById)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.365542s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userById)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.365567s   0ms DEBUG checking edge User/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.365582s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.365597s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
      ├─   0.365604s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.365618s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.365636s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.365642s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.365647s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.365662s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.365693s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
                ├─   0.365709s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.365726s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
              ├─   0.365734s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(12)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.365761s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.365768s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.365774s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.365780s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.365788s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.365793s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.365808s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(12)" }], [])))
          ┌─┘
          ├─   0.365823s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(12)" }], [])))
        ┌─┘
        ├─   0.365837s   0ms DEBUG Paths for id
        ├─   0.365844s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userById)- User/b -(id)- ID/b is valid
        ├─   0.365850s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.365861s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.365866s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(12)" }]))
      ┌─┘
      ├─   0.365880s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(12)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.365903s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.365916s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.365936s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.365999s   0ms DEBUG checking edge User/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", edge="id"}
          ├─   0.366028s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.366046s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
        ├─   0.366056s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(16) --> EdgeIndex(8)" }])
      ┌─┘
      ├─   0.366078s   0ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/a
      ├─   0.366088s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.366093s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(16) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.366107s   0ms DEBUG Indirect paths found: 1
    ├─   0.366117s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(userById)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="randomUser", leaf=false}
  ├─   0.366145s   0ms DEBUG Trying to advance to: randomUser{id name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.366171s   0ms DEBUG checking edge Query/a -(randomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="randomUser"}
        ├─   0.366186s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.366200s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(randomUser)- User/a
      ├─   0.366207s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.366220s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.366238s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.366243s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.366254s   0ms DEBUG Indirect paths found: 0
    ├─   0.366261s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.366287s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.366298s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.366313s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.366318s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.366329s   0ms DEBUG Indirect paths found: 0
    ├─   0.366335s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.366347s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.366365s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.366387s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.366398s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.366414s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.366430s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.366460s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.366477s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.366493s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.366502s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.366530s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.366537s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.366544s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.366550s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.366557s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.366562s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.366577s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.366592s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.366606s   0ms DEBUG Paths for id
        ├─   0.366613s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.366619s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.366630s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.366636s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.366666s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.366700s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.366714s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.366734s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.366788s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.366812s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.366830s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.366839s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.366855s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.366863s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.366869s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.366876s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.366881s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.366895s   0ms DEBUG Indirect paths found: 1
    ├─   0.366902s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.366927s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.366951s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.366967s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.366981s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.366988s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.367001s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.367019s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.367035s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.367065s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.367081s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.367098s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.367106s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.367133s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.367140s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.367147s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.367153s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.367160s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.367166s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.367181s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.367196s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.367209s   0ms DEBUG Paths for id
        ├─   0.367217s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.367222s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.367233s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.367238s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.367252s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.367301s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.367316s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.367341s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.367388s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.367407s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.367423s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.367434s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(12)" }])
      ┌─┘
      ├─   0.367449s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.367458s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.367463s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.367471s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.367476s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.367489s   0ms DEBUG Indirect paths found: 1
    ├─   0.367497s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.367539s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.367551s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.367562s   0ms DEBUG Processing edge: Query/b -(userById)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.367574s   0ms DEBUG Processing edge: User/b -(nickname)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.367592s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.367605s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.367615s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.367648s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.367659s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.367670s   0ms DEBUG Processing edge: Query/b -(userById)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.367682s   0ms DEBUG Processing edge: User/b -(name)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.367700s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.367710s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.367720s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(12)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.367752s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.367763s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.367774s   0ms DEBUG Processing edge: Query/b -(userById)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.367786s   0ms DEBUG Processing edge: User/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.367804s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.367815s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.367825s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.367857s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.367868s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.367879s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.367891s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.367903s   0ms DEBUG Processing edge: User/b -(name)- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.367921s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.367932s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.367943s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.367953s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.367984s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.367995s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.368044s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.368056s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.368076s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.368087s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.368097s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=5}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=2}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="userById", arguments="id: \"u2\"", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.368264s   0ms DEBUG adding output field 'userById' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="nickname", leaf=true, list=false, response_path="userById", fetch_path="userById"}
              ├─   0.368297s   0ms DEBUG adding output field 'nickname' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="name", leaf=true, list=false, response_path="userById", fetch_path="userById"}
              ├─   0.368338s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="userById", fetch_path="userById"}
              ├─   0.368375s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=2}
      ┌─┘
      └─┐connect{parent=0, child=2}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
        └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Query", field="randomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.368472s   0ms DEBUG adding output field 'randomUser' to fetch step [2]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=2}
            └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/b", parent_fetch_step_index=2}
              ├─   0.368504s   0ms DEBUG created a new fetch step [3] subgraph(b) type(User) requirement() key({id}) in children of 2
              ├─   0.368528s   0ms DEBUG adding input requirement '{id}' to fetch step [3]
              ├─   0.368539s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.368548s   0ms DEBUG connecting fetch step to parent [2] -> [3]
              └─┐connect{parent=2, child=3}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, requiring_fetch_step_index=3, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
                      ├─   0.368614s   0ms DEBUG connecting parent fetch step [2] to requiring fetch step [3]
                      └─┐connect{parent=2, child=3}
                      ┌─┘
                      ├─   0.368638s   0ms DEBUG adding output field 'id' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=2, child=3}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                └─┐process_plain_field_edge{parent_fetch_step_index=3, type_name="User", field="name", leaf=true, list=false, response_path="randomUser", fetch_path=""}
                  ├─   0.368725s   0ms DEBUG adding output field 'name' to fetch step [3]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.368778s   0ms DEBUG adding output field 'id' to fetch step [2]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.368858s   0ms DEBUG Done
├─   0.368868s   0ms DEBUG found roots
├─   0.368873s   0ms DEBUG print graph
├─   0.368878s   0ms DEBUG Nodes:
│ [1] Query/b {} → {userById(id: "u2"){nickname name id}} at $.
│ [2] Query/a {} → {randomUser{__typename id}} at $.
│ [3] User/b {__typename id} → {name} at $.randomUser
│ 
│ Tree:
│ [2]
│   [3]
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐ParallelNode::execute{data=Null, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[]}
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.369384s   0ms DEBUG starting new connection: http://localhost:4200/
    └─┐FetchNode::execute{data=Null, representations=[]}
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.369683s   0ms DEBUG starting new connection: http://localhost:4200/
          ├─   0.369809s   0ms DEBUG connecting to 127.0.0.1:4200
          ├─   0.369912s   0ms DEBUG connecting to 127.0.0.1:4200
          ├─   0.370107s   0ms DEBUG connected to 127.0.0.1:4200
          ├─   0.370301s   0ms DEBUG connected to 127.0.0.1:4200
          ├─   0.375508s   6ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
          ├─   0.379999s  10ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"randomUser": Object {"__typename": String("User"), "id": String("u1")}, "userById": Object {"nickname": String("u2-nickname"), "name": String("u2-name"), "id": String("u2")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.380560s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.382255s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.382557s DEBUG execution result: ExecutionResult { data: Some(Object {"randomUser": Object {"id": String("u1"), "name": String("u1-name")}, "userById": Object {"id": String("u2"), "name": String("u2-name"), "nickname": String("u2-nickname")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Parallel"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{randomUser{__typename id}}")}, Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{userById(id: \"u2\"){nickname name id}}")}]}, Object {"kind": String("Flatten"), "path": Array [String("randomUser")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.389407s DEBUG original document: query {
  randomUser {
    id
    rid
  }
}

   0.389510s DEBUG normalized document: query{randomUser{id rid}}

   0.389532s DEBUG executable operation: query{randomUser{id rid}}
┐walk_operation{}
├─   0.389868s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="randomUser", leaf=false}
  ├─   0.389916s   0ms DEBUG Trying to advance to: randomUser{id rid} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.389966s   0ms DEBUG checking edge Query/a -(randomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="randomUser"}
        ├─   0.389986s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.390010s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(randomUser)- User/a
      ├─   0.390022s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.390039s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.390067s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.390073s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.390084s   0ms DEBUG Indirect paths found: 0
    ├─   0.390091s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.390118s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.390129s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.390144s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.390149s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.390160s   0ms DEBUG Indirect paths found: 0
    ├─   0.390166s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.390179s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="rid", leaf=true}
  ├─   0.390200s   0ms DEBUG Trying to advance to: rid through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.390227s   0ms DEBUG checking edge User/a -(rid)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="rid"}
        ├─   0.390242s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.390256s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(rid)- ID/a
      ├─   0.390264s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.390277s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.390295s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.390312s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.390346s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.390363s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.390379s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.390387s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.390418s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.390439s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.390448s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.390455s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.390463s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.390469s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.390488s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.390506s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.390519s   0ms DEBUG Paths for id
        ├─   0.390528s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.390535s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.390551s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.390557s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.390571s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.390599s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.390614s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.390634s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.390678s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.390691s   0ms DEBUG No direct paths found
      ├─   0.390700s   0ms DEBUG going deeper
      ├─   0.390707s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.390712s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.390718s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.390724s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.390729s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.390734s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.390742s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.390747s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.390758s   0ms DEBUG Indirect paths found: 0
    ├─   0.390766s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.390792s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.390816s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.390832s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.390846s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.390853s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.390867s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.390899s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.390925s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.390957s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.390974s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.390993s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.391002s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.391031s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.391038s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.391045s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.391051s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.391058s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.391064s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.391079s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.391093s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.391106s   0ms DEBUG Paths for id
        ├─   0.391114s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.391121s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.391132s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.391138s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.391151s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.391175s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.391188s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.391207s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.391249s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.391267s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.391282s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.391290s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(12)" }])
      ┌─┘
      ├─   0.391305s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.391313s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.391319s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.391325s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.391330s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.391347s   0ms DEBUG Indirect paths found: 1
    ├─   0.391357s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.391397s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.391409s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.391421s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.391433s   0ms DEBUG Processing edge: User/a -(rid)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.391450s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.391461s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.391471s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.391504s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.391514s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.391525s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.391536s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.391554s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.391565s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.391574s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="randomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.391685s   0ms DEBUG adding output field 'randomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="rid", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.391714s   0ms DEBUG adding output field 'rid' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.391753s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.391814s   0ms DEBUG Done
├─   0.391821s   0ms DEBUG found roots
├─   0.391825s   0ms DEBUG print graph
├─   0.391830s   0ms DEBUG Nodes:
│ [1] Query/a {} → {randomUser{rid id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.392179s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.394292s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.394532s DEBUG execution result: ExecutionResult { data: Some(Object {"randomUser": Object {"id": String("u1"), "rid": String("u1-rid")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{randomUser{rid id}}")}}}) }
   0.397854s DEBUG original document: query {
  randomUser {
    id
    rid
    name
  }
}

   0.397967s DEBUG normalized document: query{randomUser{id rid name}}

   0.397994s DEBUG executable operation: query{randomUser{id rid name}}
┐walk_operation{}
├─   0.398370s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="randomUser", leaf=false}
  ├─   0.398432s   0ms DEBUG Trying to advance to: randomUser{id rid name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.398516s   0ms DEBUG checking edge Query/a -(randomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="randomUser"}
        ├─   0.398554s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.398579s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(randomUser)- User/a
      ├─   0.398590s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.398606s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.398635s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.398641s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.398661s   0ms DEBUG Indirect paths found: 0
    ├─   0.398673s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.398707s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.398719s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.398736s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.398742s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.398752s   0ms DEBUG Indirect paths found: 0
    ├─   0.398759s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.398773s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.398794s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.398818s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.398829s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.398847s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.398865s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.398900s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.398918s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.398935s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.398943s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.398973s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.398981s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.398990s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.398996s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.399003s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.399009s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.399025s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.399044s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.399057s   0ms DEBUG Paths for id
        ├─   0.399065s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.399072s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.399087s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.399093s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.399107s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.399133s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.399148s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.399169s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.399214s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.399232s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.399247s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.399256s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.399271s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.399279s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.399284s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.399291s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.399296s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.399310s   0ms DEBUG Indirect paths found: 1
    ├─   0.399318s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="rid", leaf=true}
  ├─   0.399373s   0ms DEBUG Trying to advance to: rid through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.399402s   0ms DEBUG checking edge User/a -(rid)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="rid"}
        ├─   0.399418s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.399434s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(rid)- ID/a
      ├─   0.399442s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.399456s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.399475s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.399491s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.399521s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.399538s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.399554s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.399562s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.399590s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.399598s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.399605s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.399611s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.399618s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.399625s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.399639s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.399655s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.399668s   0ms DEBUG Paths for id
        ├─   0.399676s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.399682s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.399693s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.399698s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.399712s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.399785s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.399801s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.399823s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.399876s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.399889s   0ms DEBUG No direct paths found
      ├─   0.399899s   0ms DEBUG going deeper
      ├─   0.399907s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.399912s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.399918s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.399923s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.399929s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.399934s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.399943s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.399948s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.399959s   0ms DEBUG Indirect paths found: 0
    ├─   0.399966s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.399993s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.400018s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.400033s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.400047s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.400054s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.400068s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.400087s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.400103s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.400136s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.400153s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.400171s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.400179s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.400207s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.400214s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.400221s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.400227s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.400233s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.400239s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.400254s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.400269s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.400282s   0ms DEBUG Paths for id
        ├─   0.400290s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.400296s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.400306s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.400312s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.400325s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.400348s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.400361s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.400381s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.400421s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.400439s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.400454s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.400463s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(12)" }])
      ┌─┘
      ├─   0.400478s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.400486s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.400491s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.400498s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.400503s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.400516s   0ms DEBUG Indirect paths found: 1
    ├─   0.400526s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.400567s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.400578s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.400590s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.400601s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.400613s   0ms DEBUG Processing edge: User/b -(name)- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.400632s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.400644s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.400654s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.400664s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.400696s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.400707s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.400718s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.400729s   0ms DEBUG Processing edge: User/a -(rid)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.400747s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.400757s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.400767s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.400799s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.400809s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.400820s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.400832s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.400849s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.400859s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.400869s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="randomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.400980s   0ms DEBUG adding output field 'randomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/b", parent_fetch_step_index=1}
              ├─   0.401021s   0ms DEBUG created a new fetch step [2] subgraph(b) type(User) requirement() key({id}) in children of 1
              ├─   0.401029s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.401036s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.401043s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
                      ├─   0.401098s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.401122s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="name", leaf=true, list=false, response_path="randomUser", fetch_path=""}
                  ├─   0.401208s   0ms DEBUG adding output field 'name' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="rid", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.401260s   0ms DEBUG adding output field 'rid' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.401297s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.401357s   0ms DEBUG Done
├─   0.401364s   0ms DEBUG found roots
├─   0.401369s   0ms DEBUG print graph
├─   0.401373s   0ms DEBUG Nodes:
│ [1] Query/a {} → {randomUser{__typename id rid}} at $.
│ [2] User/b {__typename id} → {name} at $.randomUser
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.401848s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.404461s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"randomUser": Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.405024s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.407392s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.407748s DEBUG execution result: ExecutionResult { data: Some(Object {"randomUser": Object {"id": String("u1"), "rid": String("u1-rid"), "name": String("u1-name")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{randomUser{__typename id rid}}")}, Object {"kind": String("Flatten"), "path": Array [String("randomUser")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.410466s DEBUG original document: query {
  providedRandomUser {
    id
    rid
    name
  }
}

   0.410540s DEBUG normalized document: query{providedRandomUser{id rid name}}

   0.410566s DEBUG executable operation: query{providedRandomUser{id rid name}}
┐walk_operation{}
├─   0.410899s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="providedRandomUser", leaf=false}
  ├─   0.410947s   0ms DEBUG Trying to advance to: providedRandomUser{id rid name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.410998s   0ms DEBUG checking edge Query/a -(providedRandomUser)- User/a/1
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="providedRandomUser"}
        ├─   0.411020s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.411042s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(providedRandomUser)- User/a/1
      ├─   0.411054s   0ms DEBUG checking edge Query/a -(providedRandomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="providedRandomUser"}
        ├─   0.411068s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.411082s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(providedRandomUser)- User/a
      ├─   0.411088s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(18)" },  { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.411106s   0ms DEBUG Direct paths found: 2
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.411136s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.411142s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411153s   0ms DEBUG Indirect paths found: 0
    ├─   0.411160s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.411188s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411199s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.411214s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.411220s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411230s   0ms DEBUG Indirect paths found: 0
    ├─   0.411236s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.411249s   0ms DEBUG Found 2 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.411271s   0ms DEBUG Trying to advance to: name through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.411295s   0ms DEBUG checking edge User/a/1 -(name)- String/a/1
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", edge="name"}
        ├─   0.411310s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.411325s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1 with edge User/a/1 -(name)- String/a/1
      ├─   0.411332s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(18) --> EdgeIndex(19)" }])
    ┌─┘
    ├─   0.411345s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.411362s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.411368s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411378s   0ms DEBUG Indirect paths found: 0
    ├─   0.411385s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.411413s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411424s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.411441s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.411459s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.411495s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
                ├─   0.411514s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.411530s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.411539s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.411597s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.411610s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.411619s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.411625s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.411633s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.411639s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.411656s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.411673s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.411687s   0ms DEBUG Paths for id
        ├─   0.411695s   0ms DEBUG   Path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(id)- ID/a is valid
        ├─   0.411702s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.411718s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.411724s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.411738s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.411765s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.411780s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.411800s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.411845s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.411864s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.411879s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.411887s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.411902s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.411911s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.411919s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.411926s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.411931s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.411944s   0ms DEBUG Indirect paths found: 1
    ├─   0.411954s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="rid", leaf=true}
  ├─   0.412016s   0ms DEBUG Trying to advance to: rid through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.412045s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.412057s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.412075s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.412080s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.412091s   0ms DEBUG Indirect paths found: 0
    ├─   0.412098s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.412126s   0ms DEBUG checking edge User/a -(rid)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="rid"}
        ├─   0.412142s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.412156s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(rid)- ID/a
      ├─   0.412164s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.412178s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.412195s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.412211s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.412242s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
                ├─   0.412259s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.412275s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.412283s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.412310s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.412317s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.412324s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.412330s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.412337s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.412343s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.412359s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.412374s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.412387s   0ms DEBUG Paths for id
        ├─   0.412395s   0ms DEBUG   Path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(id)- ID/a is valid
        ├─   0.412401s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.412413s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.412419s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.412432s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.412456s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.412470s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.412490s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.412531s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.412544s   0ms DEBUG No direct paths found
      ├─   0.412554s   0ms DEBUG going deeper
      ├─   0.412564s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.412569s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.412575s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.412580s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.412586s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.412591s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.412599s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.412604s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.412615s   0ms DEBUG Indirect paths found: 0
    ├─   0.412623s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.412649s   0ms DEBUG Trying to advance to: id through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.412673s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.412684s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.412701s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.412706s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.412717s   0ms DEBUG Indirect paths found: 0
    ├─   0.412723s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.412750s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.412766s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.412780s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.412787s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.412800s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.412818s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.412833s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.412863s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
                ├─   0.412881s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.412897s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.412923s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.412966s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.412974s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.412981s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.412987s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.412994s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.413000s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.413017s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.413033s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.413046s   0ms DEBUG Paths for id
        ├─   0.413054s   0ms DEBUG   Path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(id)- ID/a is valid
        ├─   0.413059s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.413071s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.413077s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.413091s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.413116s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.413130s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.413150s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.413191s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.413221s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.413243s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.413253s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(12)" }])
      ┌─┘
      ├─   0.413269s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.413278s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.413283s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.413290s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.413296s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.413309s   0ms DEBUG Indirect paths found: 1
    ├─   0.413317s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(18) --> EdgeIndex(19)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.413361s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.413374s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.413385s   0ms DEBUG Processing edge: Query/a -(providedRandomUser)- User/a/1
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.413397s   0ms DEBUG Processing edge: User/a/1 -(name)- String/a/1
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.413415s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.413427s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.413437s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.413470s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.413481s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.413492s   0ms DEBUG Processing edge: Query/a -(providedRandomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.413504s   0ms DEBUG Processing edge: User/a -(rid)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.413521s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.413532s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.413542s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.413574s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.413586s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.413597s   0ms DEBUG Processing edge: Query/a -(providedRandomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.413608s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.413625s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.413637s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.413647s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="providedRandomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.413760s   0ms DEBUG adding output field 'providedRandomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="name", leaf=false, list=false, response_path="providedRandomUser", fetch_path="providedRandomUser"}
              ├─   0.413789s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="providedRandomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.413863s   0ms DEBUG adding output field 'providedRandomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="rid", leaf=true, list=false, response_path="providedRandomUser", fetch_path="providedRandomUser"}
              ├─   0.413889s   0ms DEBUG adding output field 'rid' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="providedRandomUser", fetch_path="providedRandomUser"}
              ├─   0.413929s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.413991s   0ms DEBUG Done
├─   0.413998s   0ms DEBUG found roots
├─   0.414003s   0ms DEBUG print graph
├─   0.414008s   0ms DEBUG Nodes:
│ [1] Query/a {} → {providedRandomUser{name rid id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.414391s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.416537s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.416809s DEBUG execution result: ExecutionResult { data: Some(Object {"providedRandomUser": Object {"id": String("u1"), "rid": String("u1-rid"), "name": String("u1-name")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{providedRandomUser{name rid id}}")}}}) }
