generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.11s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Product"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="PRODUCT"}
┌─┘
└─┐decompose_from_supergraph{graph_id="PRICE"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.005788s   0ms DEBUG Building graph for supergraph with 14 definitions
  └─┐build_root_nodes{}
    ├─   0.005836s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.005904s   0ms INFO [x] Creating owned field move edge 'Query.__typename/PRICE' (type: String)
    ├─   0.006001s   0ms INFO [x] Creating field move edge 'Query.cheapestProduct/PRICE' (type: Product)
    ├─   0.006013s   0ms INFO [x] Creating field move edge 'Query.cheapestProduct/PRICE' (type: Product)
    ├─   0.006023s   0ms INFO [ ] Field 'Query.products/PRICE' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006033s   0ms INFO [x] Creating owned field move edge 'Query.__typename/PRODUCT' (type: String)
    ├─   0.006042s   0ms INFO [ ] Field 'Query.cheapestProduct/PRODUCT' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006048s   0ms INFO [x] Creating field move edge 'Query.products/PRODUCT' (type: Product)
    ├─   0.006055s   0ms INFO [x] Creating field move edge 'Query.products/PRODUCT' (type: Product)
    ├─   0.006062s   0ms INFO [x] Creating owned field move edge 'Product.__typename/PRICE' (type: String)
    ├─   0.006068s   0ms INFO [ ] Field 'Product.name/PRICE' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006074s   0ms INFO [x] Creating field move edge 'Product.id/PRICE' (type: ID)
    ├─   0.006081s   0ms INFO [x] Creating field move edge 'Product.id/PRICE' (type: ID)
    ├─   0.006087s   0ms INFO [x] Creating field move edge 'Product.price/PRICE' (type: Float)
    ├─   0.006093s   0ms INFO [x] Creating field move edge 'Product.price/PRICE' (type: Float)
    ├─   0.006099s   0ms INFO [x] Creating owned field move edge 'Product.__typename/PRODUCT' (type: String)
    ├─   0.006105s   0ms INFO [x] Creating field move edge 'Product.name/PRODUCT' (type: String)
    ├─   0.006111s   0ms INFO [x] Creating field move edge 'Product.name/PRODUCT' (type: String)
    ├─   0.006117s   0ms INFO [x] Creating field move edge 'Product.id/PRODUCT' (type: ID)
    ├─   0.006123s   0ms INFO [x] Creating field move edge 'Product.id/PRODUCT' (type: ID)
    ├─   0.006129s   0ms INFO [ ] Field 'Product.price/PRODUCT' does is not available in the subgraph, skipping edge creation (type: Float)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006237s   0ms INFO Creating self-referencing entity move edge in 'Product/PRICE' via key 'id'
    ├─   0.006279s   0ms INFO Creating entity move edge from 'Product/PRICE' to 'Product/PRODUCT' via key 'id'
    ├─   0.006322s   0ms INFO Creating entity move edge from 'Product/PRODUCT' to 'Product/PRICE' via key 'id'
    ├─   0.006353s   0ms INFO Creating self-referencing entity move edge in 'Product/PRODUCT' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.061991s INFO Starting server on http://localhost:4000
   0.062949s INFO starting 16 workers
   0.062979s INFO Actix runtime found; starting in Actix runtime
   0.062987s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.110709s DEBUG original document: query ping {
  __typename
}

   0.110812s DEBUG normalized document: query ping {__typename}

   0.110853s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.111250s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.186220s DEBUG original document: query {
  cheapestProduct {
    id
    price
    name
  }
}

   0.186340s DEBUG normalized document: query{cheapestProduct{id price name}}

   0.186362s DEBUG executable operation: query{cheapestProduct{id price name}}
┐walk_operation{}
├─   0.186726s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="cheapestProduct", leaf=false}
  ├─   0.186775s   0ms DEBUG Trying to advance to: cheapestProduct{id price name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(price)- Query/price"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "cheapestProduct", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price", current_cost=1000}
      ├─   0.186837s   0ms DEBUG checking edge Query/price -(cheapestProduct)- Product/price
      └─┐can_satisfy_edge{path="root(Query) -(price)- Query/price", edge="cheapestProduct"}
        ├─   0.186859s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.186885s   0ms DEBUG Advancing path root(Query) -(price)- Query/price with edge Query/price -(cheapestProduct)- Product/price
      ├─   0.186896s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.186914s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "cheapestProduct", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price", current_cost=1000}
      ├─   0.186949s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.186964s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.186976s   0ms DEBUG Indirect paths found: 0
    ├─   0.186984s   0ms DEBUG advanced: root(Query) -(price)- Query/price
  ┌─┘
  └─┐explore_path{path="root(Query) -(product)- Query/product"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "cheapestProduct", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product", current_cost=1000}
      ├─   0.187015s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.187027s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "cheapestProduct", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product", current_cost=1000}
      ├─   0.187043s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.187048s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.187059s   0ms DEBUG Indirect paths found: 0
    ├─   0.187066s   0ms WARN failed to advance: root(Query) -(product)- Query/product
  ┌─┘
  ├─   0.187084s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.187106s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", current_cost=1001}
      ├─   0.187130s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.187141s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", current_cost=1001}
      ├─   0.187159s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/product
      └─┐can_satisfy_edge{path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", edge="id"}
        ├─   0.187179s   0ms DEBUG checking requirements {id} for edge 'Product/price -(🔑🧩{id})- Product/product'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", current_cost=1001}
              ├─   0.187220s   0ms DEBUG checking edge Product/price -(id)- ID/price
              └─┐can_satisfy_edge{path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", edge="id"}
                ├─   0.187239s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.187256s   0ms DEBUG Advancing path root(Query) -(price)- Query/price -(cheapestProduct)- Product/price with edge Product/price -(id)- ID/price
              ├─   0.187265s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(7)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", current_cost=1001}
              ├─   0.187295s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/product
              ├─   0.187304s   0ms DEBUG Ignoring, graph is excluded and already visited (current: product, visited: {"product"})
              ├─   0.187312s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/price
              ├─   0.187319s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.187327s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.187333s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.187349s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(7)" }], [])))
          ┌─┘
          ├─   0.187366s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(7)" }], [])))
        ┌─┘
        ├─   0.187380s   0ms DEBUG Paths for id
        ├─   0.187389s   0ms DEBUG   Path root(Query) -(price)- Query/price -(cheapestProduct)- Product/price -(id)- ID/price is valid
        ├─   0.187396s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.187412s   0ms DEBUG path Product/price -(id)- ID/price is valid
        ├─   0.187419s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" }]))
      ┌─┘
      ├─   0.187433s   0ms DEBUG Advancing path to Product/price -(🔑🧩{id})- Product/product
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/price"}
        └─┐create_root_for_path_sequences{root_node="Product/price", segments_count=1}
          ├─   0.187488s   0ms DEBUG Building root query tree node: Product/price
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.187507s   0ms DEBUG Processing edge: Product/price -(id)- ID/price
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.187531s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price -(🔑🧩{id})- Product/product", current_cost=2003}
        ├─   0.187585s   0ms DEBUG checking edge Product/product -(name)- String/product
        └─┐can_satisfy_edge{path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price -(🔑🧩{id})- Product/product", edge="name"}
          ├─   0.187605s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.187634s   0ms DEBUG Advancing path root(Query) -(price)- Query/price -(cheapestProduct)- Product/price -(🔑🧩{id})- Product/product with edge Product/product -(name)- String/product
        ├─   0.187670s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(13) --> EdgeIndex(10)" }])
      ┌─┘
      ├─   0.187700s   0ms DEBUG Found 1 direct paths to Product/price -(🔑🧩{id})- Product/product
      ├─   0.187713s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/price
      ├─   0.187718s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.187726s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.187731s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(13) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.187745s   0ms DEBUG Indirect paths found: 1
    ├─   0.187754s   0ms DEBUG advanced: root(Query) -(price)- Query/price -(cheapestProduct)- Product/price
  ┌─┘
┌─┘
└─┐process_field{field_name="price", leaf=true}
  ├─   0.187784s   0ms DEBUG Trying to advance to: price through 1 possible paths
  └─┐explore_path{path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", current_cost=1001}
      ├─   0.187810s   0ms DEBUG checking edge Product/price -(price)- Float/price
      └─┐can_satisfy_edge{path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", edge="price"}
        ├─   0.187834s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.187849s   0ms DEBUG Advancing path root(Query) -(price)- Query/price -(cheapestProduct)- Product/price with edge Product/price -(price)- Float/price
      ├─   0.187857s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.187872s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", current_cost=1001}
      ├─   0.187890s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/product
      └─┐can_satisfy_edge{path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", edge="id"}
        ├─   0.187907s   0ms DEBUG checking requirements {id} for edge 'Product/price -(🔑🧩{id})- Product/product'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", current_cost=1001}
              ├─   0.187960s   0ms DEBUG checking edge Product/price -(id)- ID/price
              └─┐can_satisfy_edge{path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", edge="id"}
                ├─   0.187987s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.188006s   0ms DEBUG Advancing path root(Query) -(price)- Query/price -(cheapestProduct)- Product/price with edge Product/price -(id)- ID/price
              ├─   0.188016s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(7)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", current_cost=1001}
              ├─   0.188047s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/product
              ├─   0.188057s   0ms DEBUG Ignoring, graph is excluded and already visited (current: product, visited: {"product"})
              ├─   0.188065s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/price
              ├─   0.188071s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.188078s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.188084s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.188100s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(7)" }], [])))
          ┌─┘
          ├─   0.188115s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(7)" }], [])))
        ┌─┘
        ├─   0.188129s   0ms DEBUG Paths for id
        ├─   0.188137s   0ms DEBUG   Path root(Query) -(price)- Query/price -(cheapestProduct)- Product/price -(id)- ID/price is valid
        ├─   0.188159s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.188170s   0ms DEBUG path Product/price -(id)- ID/price is valid
        ├─   0.188176s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" }]))
      ┌─┘
      ├─   0.188189s   0ms DEBUG Advancing path to Product/price -(🔑🧩{id})- Product/product
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/price"}
        └─┐create_root_for_path_sequences{root_node="Product/price", segments_count=1}
          ├─   0.188214s   0ms DEBUG Building root query tree node: Product/price
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.188228s   0ms DEBUG Processing edge: Product/price -(id)- ID/price
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.188248s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price -(🔑🧩{id})- Product/product", current_cost=2003}
        ├─   0.188289s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.188303s   0ms DEBUG No direct paths found
      ├─   0.188313s   0ms DEBUG going deeper
      ├─   0.188320s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/price
      ├─   0.188325s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.188331s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/product
      ├─   0.188337s   0ms DEBUG Ignoring, graph is excluded and already visited (current: product, visited: {"product"})
      ├─   0.188343s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/price
      ├─   0.188348s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.188356s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.188361s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.188373s   0ms DEBUG Indirect paths found: 0
    ├─   0.188381s   0ms DEBUG advanced: root(Query) -(price)- Query/price -(cheapestProduct)- Product/price
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.188407s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", current_cost=1001}
      ├─   0.188450s   0ms DEBUG checking edge Product/price -(id)- ID/price
      └─┐can_satisfy_edge{path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", edge="id"}
        ├─   0.188475s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.188492s   0ms DEBUG Advancing path root(Query) -(price)- Query/price -(cheapestProduct)- Product/price with edge Product/price -(id)- ID/price
      ├─   0.188501s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.188531s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", current_cost=1001}
      ├─   0.188559s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/product
      └─┐can_satisfy_edge{path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", edge="id"}
        ├─   0.188582s   0ms DEBUG checking requirements {id} for edge 'Product/price -(🔑🧩{id})- Product/product'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", current_cost=1001}
              ├─   0.188613s   0ms DEBUG checking edge Product/price -(id)- ID/price
              └─┐can_satisfy_edge{path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", edge="id"}
                ├─   0.188633s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.188650s   0ms DEBUG Advancing path root(Query) -(price)- Query/price -(cheapestProduct)- Product/price with edge Product/price -(id)- ID/price
              ├─   0.188660s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(7)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price", current_cost=1001}
              ├─   0.188689s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/product
              ├─   0.188696s   0ms DEBUG Ignoring, graph is excluded and already visited (current: product, visited: {"product"})
              ├─   0.188703s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/price
              ├─   0.188710s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.188717s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.188723s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.188738s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(7)" }], [])))
          ┌─┘
          ├─   0.188753s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(7)" }], [])))
        ┌─┘
        ├─   0.188767s   0ms DEBUG Paths for id
        ├─   0.188775s   0ms DEBUG   Path root(Query) -(price)- Query/price -(cheapestProduct)- Product/price -(id)- ID/price is valid
        ├─   0.188781s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.188792s   0ms DEBUG path Product/price -(id)- ID/price is valid
        ├─   0.188797s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(7)" }]))
      ┌─┘
      ├─   0.188811s   0ms DEBUG Advancing path to Product/price -(🔑🧩{id})- Product/product
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(7)" }, root_node="Product/price"}
        └─┐create_root_for_path_sequences{root_node="Product/price", segments_count=1}
          ├─   0.188834s   0ms DEBUG Building root query tree node: Product/price
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.188848s   0ms DEBUG Processing edge: Product/price -(id)- ID/price
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.188868s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price -(🔑🧩{id})- Product/product", current_cost=2003}
        ├─   0.188910s   0ms DEBUG checking edge Product/product -(id)- ID/product
        └─┐can_satisfy_edge{path="root(Query) -(price)- Query/price -(cheapestProduct)- Product/price -(🔑🧩{id})- Product/product", edge="id"}
          ├─   0.188928s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.188943s   0ms DEBUG Advancing path root(Query) -(price)- Query/price -(cheapestProduct)- Product/price -(🔑🧩{id})- Product/product with edge Product/product -(id)- ID/product
        ├─   0.188951s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(13) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.188966s   0ms DEBUG Found 1 direct paths to Product/price -(🔑🧩{id})- Product/product
      ├─   0.188975s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/price
      ├─   0.188980s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.188987s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.188992s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(13) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.189006s   0ms DEBUG Indirect paths found: 1
    ├─   0.189015s   0ms DEBUG advanced: root(Query) -(price)- Query/price -(cheapestProduct)- Product/price
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(13) --> EdgeIndex(10)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.189056s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.189068s   0ms DEBUG Processing edge: root(Query) -(price)- Query/price
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.189080s   0ms DEBUG Processing edge: Query/price -(cheapestProduct)- Product/price
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.189092s   0ms DEBUG Processing edge: Product/price -(🔑🧩{id})- Product/product
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.189104s   0ms DEBUG Processing edge: Product/product -(name)- String/product
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.189123s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.189137s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.189147s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.189157s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.189191s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.189202s   0ms DEBUG Processing edge: root(Query) -(price)- Query/price
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.189213s   0ms DEBUG Processing edge: Query/price -(cheapestProduct)- Product/price
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.189225s   0ms DEBUG Processing edge: Product/price -(price)- Float/price
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.189243s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.189253s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.189264s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(7)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.189297s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.189307s   0ms DEBUG Processing edge: root(Query) -(price)- Query/price
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.189319s   0ms DEBUG Processing edge: Query/price -(cheapestProduct)- Product/price
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.189330s   0ms DEBUG Processing edge: Product/price -(id)- ID/price
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.189348s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.189358s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.189369s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="price", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="cheapestProduct", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.189493s   0ms DEBUG adding output field 'cheapestProduct' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/price -(🔑🧩{id})- Product/product", parent_fetch_step_index=1}
              ├─   0.189543s   0ms DEBUG created a new fetch step [2] subgraph(product) type(Product) requirement() key({id}) in children of 1
              ├─   0.189552s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.189559s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.189567s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="cheapestProduct", fetch_path="cheapestProduct"}
                      ├─   0.189625s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.189650s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Product", field="name", leaf=true, list=false, response_path="cheapestProduct", fetch_path=""}
                  ├─   0.189767s   0ms DEBUG adding output field 'name' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="price", leaf=true, list=false, response_path="cheapestProduct", fetch_path="cheapestProduct"}
              ├─   0.189858s   0ms DEBUG adding output field 'price' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="id", leaf=true, list=false, response_path="cheapestProduct", fetch_path="cheapestProduct"}
              ├─   0.189901s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.189965s   0ms DEBUG Done
├─   0.189972s   0ms DEBUG found roots
├─   0.189977s   0ms DEBUG print graph
├─   0.189982s   0ms DEBUG Nodes:
│ [1] Query/price {} → {cheapestProduct{__typename id price}} at $.
│ [2] Product/product {__typename id} → {name} at $.cheapestProduct
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="price"}
      └─┐execute{subgraph_name="price"}
        ├─   0.190476s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.190848s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.191194s   0ms DEBUG connected to 127.0.0.1:4200
        ├─   0.195871s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"cheapestProduct": Object {"__typename": String("Product"), "id": String("1"), "price": Number(100)}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("1"), "price": Number(100)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("1"), "price": Number(100)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("1"), "price": Number(100)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="product"}
        └─┐execute{subgraph_name="product"}
          ├─   0.196478s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.200600s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.200906s DEBUG execution result: ExecutionResult { data: Some(Object {"cheapestProduct": Object {"id": String("1"), "price": Number(100), "name": String("name-1")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("price"), "operationKind": String("query"), "operation": String("{cheapestProduct{__typename id price}}")}, Object {"kind": String("Flatten"), "path": Array [String("cheapestProduct")], "node": Object {"kind": String("Fetch"), "serviceName": String("product"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.207964s DEBUG original document: query {
  products {
    name
    price
    id
  }
}

   0.208065s DEBUG normalized document: query{products{name price id}}

   0.208078s DEBUG executable operation: query{products{name price id}}
┐walk_operation{}
├─   0.208429s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="products", leaf=false}
  ├─   0.208479s   0ms DEBUG Trying to advance to: products{name price id} through 2 possible paths
  └─┐explore_path{path="root(Query) -(price)- Query/price"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price", current_cost=1000}
      ├─   0.208529s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.208550s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(price)- Query/price", current_cost=1000}
      ├─   0.208576s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.208583s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.208595s   0ms DEBUG Indirect paths found: 0
    ├─   0.208602s   0ms WARN failed to advance: root(Query) -(price)- Query/price
  ┌─┘
  └─┐explore_path{path="root(Query) -(product)- Query/product"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product", current_cost=1000}
      ├─   0.208634s   0ms DEBUG checking edge Query/product -(products)- Product/product
      └─┐can_satisfy_edge{path="root(Query) -(product)- Query/product", edge="products"}
        ├─   0.208653s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.208668s   0ms DEBUG Advancing path root(Query) -(product)- Query/product with edge Query/product -(products)- Product/product
      ├─   0.208678s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(5)" }])
    ┌─┘
    ├─   0.208693s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product", current_cost=1000}
      ├─   0.208714s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.208719s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.208730s   0ms DEBUG Indirect paths found: 0
    ├─   0.208737s   0ms DEBUG advanced: root(Query) -(product)- Query/product
  ┌─┘
  ├─   0.208751s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.208771s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(product)- Query/product -(products)- Product/product"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product", current_cost=1001}
      ├─   0.208796s   0ms DEBUG checking edge Product/product -(id)- ID/product
      └─┐can_satisfy_edge{path="root(Query) -(product)- Query/product -(products)- Product/product", edge="id"}
        ├─   0.208811s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.208826s   0ms DEBUG Advancing path root(Query) -(product)- Query/product -(products)- Product/product with edge Product/product -(id)- ID/product
      ├─   0.208833s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.208847s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product", current_cost=1001}
      ├─   0.208864s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/product
      ├─   0.208871s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.208877s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/price
      └─┐can_satisfy_edge{path="root(Query) -(product)- Query/product -(products)- Product/product", edge="id"}
        ├─   0.208896s   0ms DEBUG checking requirements {id} for edge 'Product/product -(🔑🧩{id})- Product/price'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product", current_cost=1001}
              ├─   0.208931s   0ms DEBUG checking edge Product/product -(id)- ID/product
              └─┐can_satisfy_edge{path="root(Query) -(product)- Query/product -(products)- Product/product", edge="id"}
                ├─   0.208948s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.208965s   0ms DEBUG Advancing path root(Query) -(product)- Query/product -(products)- Product/product with edge Product/product -(id)- ID/product
              ├─   0.208974s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product", current_cost=1001}
              ├─   0.209003s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/product
              ├─   0.209010s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.209017s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/price
              ├─   0.209024s   0ms DEBUG Ignoring, graph is excluded and already visited (current: price, visited: {"price"})
              ├─   0.209032s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.209038s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.209054s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.209070s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.209084s   0ms DEBUG Paths for id
        ├─   0.209092s   0ms DEBUG   Path root(Query) -(product)- Query/product -(products)- Product/product -(id)- ID/product is valid
        ├─   0.209098s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.209114s   0ms DEBUG path Product/product -(id)- ID/product is valid
        ├─   0.209120s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.209134s   0ms DEBUG Advancing path to Product/product -(🔑🧩{id})- Product/price
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/product"}
        └─┐create_root_for_path_sequences{root_node="Product/product", segments_count=1}
          ├─   0.209165s   0ms DEBUG Building root query tree node: Product/product
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.209180s   0ms DEBUG Processing edge: Product/product -(id)- ID/product
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.209200s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product -(🔑🧩{id})- Product/price", current_cost=2003}
        ├─   0.209243s   0ms DEBUG checking edge Product/price -(id)- ID/price
        └─┐can_satisfy_edge{path="root(Query) -(product)- Query/product -(products)- Product/product -(🔑🧩{id})- Product/price", edge="id"}
          ├─   0.209261s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.209276s   0ms DEBUG Advancing path root(Query) -(product)- Query/product -(products)- Product/product -(🔑🧩{id})- Product/price with edge Product/price -(id)- ID/price
        ├─   0.209285s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(14) --> EdgeIndex(7)" }])
      ┌─┘
      ├─   0.209303s   0ms DEBUG Found 1 direct paths to Product/product -(🔑🧩{id})- Product/price
      ├─   0.209312s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.209317s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(14) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.209331s   0ms DEBUG Indirect paths found: 1
    ├─   0.209340s   0ms DEBUG advanced: root(Query) -(product)- Query/product -(products)- Product/product
  ┌─┘
┌─┘
└─┐process_field{field_name="price", leaf=true}
  ├─   0.209379s   0ms DEBUG Trying to advance to: price through 1 possible paths
  └─┐explore_path{path="root(Query) -(product)- Query/product -(products)- Product/product"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product", current_cost=1001}
      ├─   0.209414s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.209429s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product", current_cost=1001}
      ├─   0.209446s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/product
      ├─   0.209452s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.209458s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/price
      └─┐can_satisfy_edge{path="root(Query) -(product)- Query/product -(products)- Product/product", edge="id"}
        ├─   0.209474s   0ms DEBUG checking requirements {id} for edge 'Product/product -(🔑🧩{id})- Product/price'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product", current_cost=1001}
              ├─   0.209505s   0ms DEBUG checking edge Product/product -(id)- ID/product
              └─┐can_satisfy_edge{path="root(Query) -(product)- Query/product -(products)- Product/product", edge="id"}
                ├─   0.209523s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.209539s   0ms DEBUG Advancing path root(Query) -(product)- Query/product -(products)- Product/product with edge Product/product -(id)- ID/product
              ├─   0.209548s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product", current_cost=1001}
              ├─   0.209577s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/product
              ├─   0.209584s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.209590s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/price
              ├─   0.209596s   0ms DEBUG Ignoring, graph is excluded and already visited (current: price, visited: {"price"})
              ├─   0.209604s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.209610s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.209625s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.209640s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.209653s   0ms DEBUG Paths for id
        ├─   0.209661s   0ms DEBUG   Path root(Query) -(product)- Query/product -(products)- Product/product -(id)- ID/product is valid
        ├─   0.209666s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.209677s   0ms DEBUG path Product/product -(id)- ID/product is valid
        ├─   0.209682s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.209696s   0ms DEBUG Advancing path to Product/product -(🔑🧩{id})- Product/price
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/product"}
        └─┐create_root_for_path_sequences{root_node="Product/product", segments_count=1}
          ├─   0.209719s   0ms DEBUG Building root query tree node: Product/product
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.209733s   0ms DEBUG Processing edge: Product/product -(id)- ID/product
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.209752s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product -(🔑🧩{id})- Product/price", current_cost=2003}
        ├─   0.209793s   0ms DEBUG checking edge Product/price -(price)- Float/price
        └─┐can_satisfy_edge{path="root(Query) -(product)- Query/product -(products)- Product/product -(🔑🧩{id})- Product/price", edge="price"}
          ├─   0.209810s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.209826s   0ms DEBUG Advancing path root(Query) -(product)- Query/product -(products)- Product/product -(🔑🧩{id})- Product/price with edge Product/price -(price)- Float/price
        ├─   0.209834s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(14) --> EdgeIndex(8)" }])
      ┌─┘
      ├─   0.209849s   0ms DEBUG Found 1 direct paths to Product/product -(🔑🧩{id})- Product/price
      ├─   0.209858s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.209863s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(14) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.209876s   0ms DEBUG Indirect paths found: 1
    ├─   0.209884s   0ms DEBUG advanced: root(Query) -(product)- Query/product -(products)- Product/product
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.209908s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(product)- Query/product -(products)- Product/product"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product", current_cost=1001}
      ├─   0.209932s   0ms DEBUG checking edge Product/product -(name)- String/product
      └─┐can_satisfy_edge{path="root(Query) -(product)- Query/product -(products)- Product/product", edge="name"}
        ├─   0.209949s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.209963s   0ms DEBUG Advancing path root(Query) -(product)- Query/product -(products)- Product/product with edge Product/product -(name)- String/product
      ├─   0.209970s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.209983s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product", current_cost=1001}
      ├─   0.210001s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/product
      ├─   0.210006s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.210012s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/price
      └─┐can_satisfy_edge{path="root(Query) -(product)- Query/product -(products)- Product/product", edge="id"}
        ├─   0.210027s   0ms DEBUG checking requirements {id} for edge 'Product/product -(🔑🧩{id})- Product/price'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product", current_cost=1001}
              ├─   0.210058s   0ms DEBUG checking edge Product/product -(id)- ID/product
              └─┐can_satisfy_edge{path="root(Query) -(product)- Query/product -(products)- Product/product", edge="id"}
                ├─   0.210074s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.210090s   0ms DEBUG Advancing path root(Query) -(product)- Query/product -(products)- Product/product with edge Product/product -(id)- ID/product
              ├─   0.210098s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product", current_cost=1001}
              ├─   0.210126s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/product
              ├─   0.210132s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.210139s   0ms DEBUG Exploring edge Product/product -(🔑🧩{id})- Product/price
              ├─   0.210145s   0ms DEBUG Ignoring, graph is excluded and already visited (current: price, visited: {"price"})
              ├─   0.210152s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.210158s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.210173s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.210188s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.210201s   0ms DEBUG Paths for id
        ├─   0.210209s   0ms DEBUG   Path root(Query) -(product)- Query/product -(products)- Product/product -(id)- ID/product is valid
        ├─   0.210214s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.210224s   0ms DEBUG path Product/product -(id)- ID/product is valid
        ├─   0.210230s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.210243s   0ms DEBUG Advancing path to Product/product -(🔑🧩{id})- Product/price
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/product"}
        └─┐create_root_for_path_sequences{root_node="Product/product", segments_count=1}
          ├─   0.210266s   0ms DEBUG Building root query tree node: Product/product
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.210279s   0ms DEBUG Processing edge: Product/product -(id)- ID/product
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.210299s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(product)- Query/product -(products)- Product/product -(🔑🧩{id})- Product/price", current_cost=2003}
        ├─   0.210339s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.210351s   0ms DEBUG No direct paths found
      ├─   0.210360s   0ms DEBUG going deeper
      ├─   0.210368s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/product
      ├─   0.210373s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.210379s   0ms DEBUG Exploring edge Product/price -(🔑🧩{id})- Product/price
      ├─   0.210384s   0ms DEBUG Ignoring, graph is excluded and already visited (current: price, visited: {"price"})
      ├─   0.210392s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.210397s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.210408s   0ms DEBUG Indirect paths found: 0
    ├─   0.210416s   0ms DEBUG advanced: root(Query) -(product)- Query/product -(products)- Product/product
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.210457s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.210468s   0ms DEBUG Processing edge: root(Query) -(product)- Query/product
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.210480s   0ms DEBUG Processing edge: Query/product -(products)- Product/product
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.210492s   0ms DEBUG Processing edge: Product/product -(id)- ID/product
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.210510s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.210521s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.210531s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(14) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.210564s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.210575s   0ms DEBUG Processing edge: root(Query) -(product)- Query/product
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.210586s   0ms DEBUG Processing edge: Query/product -(products)- Product/product
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.210598s   0ms DEBUG Processing edge: Product/product -(🔑🧩{id})- Product/price
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.210610s   0ms DEBUG Processing edge: Product/price -(price)- Float/price
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.210629s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.210640s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.210651s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.210661s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(5) --> EdgeIndex(10)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.210693s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.210704s   0ms DEBUG Processing edge: root(Query) -(product)- Query/product
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.210715s   0ms DEBUG Processing edge: Query/product -(products)- Product/product
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.210726s   0ms DEBUG Processing edge: Product/product -(name)- String/product
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.210744s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.210755s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.210765s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="product", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="products", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.210877s   0ms DEBUG adding output field 'products' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="id", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
              ├─   0.210906s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_entity_move_edge{edge="Product/product -(🔑🧩{id})- Product/price", parent_fetch_step_index=1}
              ├─   0.210951s   0ms DEBUG created a new fetch step [2] subgraph(price) type(Product) requirement() key({id}) in children of 1
              ├─   0.210958s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.210966s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.210973s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
                      ├─   0.211072s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.211101s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Product", field="price", leaf=true, list=false, response_path="products.@", fetch_path=""}
                  ├─   0.211224s   0ms DEBUG adding output field 'price' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="name", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
              ├─   0.211296s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.211359s   0ms DEBUG Done
├─   0.211366s   0ms DEBUG found roots
├─   0.211371s   0ms DEBUG print graph
├─   0.211375s   0ms DEBUG Nodes:
│ [1] Query/product {} → {products{__typename id name}} at $.
│ [2] Product/price {__typename id} → {price} at $.products.@
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="product"}
      └─┐execute{subgraph_name="product"}
        ├─   0.211826s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.214078s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"products": Array [Object {"__typename": String("Product"), "id": String("1"), "name": String("name-1")}, Object {"__typename": String("Product"), "id": String("2"), "name": String("name-2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("1"), "name": String("name-1")}, Object {"__typename": String("Product"), "id": String("2"), "name": String("name-2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("1"), "name": String("name-1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("1"), "name": String("name-1")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("2"), "name": String("name-2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("2"), "name": String("name-2")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="price"}
        └─┐execute{subgraph_name="price"}
          ├─   0.214649s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.216317s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.216572s DEBUG execution result: ExecutionResult { data: Some(Object {"products": Array [Object {"name": String("name-1"), "price": Number(100), "id": String("1")}, Object {"name": String("name-2"), "price": Number(200), "id": String("2")}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("product"), "operationKind": String("query"), "operation": String("{products{__typename id name}}")}, Object {"kind": String("Flatten"), "path": Array [String("products"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("price"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{price}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
