generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.12s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Product"}
    └─┐build_fields{fields_count=8}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Review"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="User"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="ACCOUNTS"}
┌─┘
└─┐decompose_from_supergraph{graph_id="PRODUCTS"}
┌─┘
└─┐decompose_from_supergraph{graph_id="INVENTORY"}
┌─┘
└─┐decompose_from_supergraph{graph_id="REVIEWS"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006647s   0ms DEBUG Building graph for supergraph with 16 definitions
  └─┐build_root_nodes{}
    ├─   0.006691s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006743s   0ms INFO [x] Creating owned field move edge 'Review.__typename/REVIEWS' (type: String)
    ├─   0.006757s   0ms INFO [x] Creating field move edge 'Review.author/REVIEWS' (type: User)
    ├─   0.006765s   0ms INFO [x] Creating field move edge 'Review.author/REVIEWS' (type: User)
    ├─   0.006773s   0ms INFO [x] Creating field move edge 'Review.product/REVIEWS' (type: Product)
    ├─   0.006779s   0ms INFO [x] Creating field move edge 'Review.product/REVIEWS' (type: Product)
    ├─   0.006785s   0ms INFO [x] Creating field move edge 'Review.id/REVIEWS' (type: ID)
    ├─   0.006795s   0ms INFO [x] Creating field move edge 'Review.id/REVIEWS' (type: ID)
    ├─   0.006800s   0ms INFO [x] Creating field move edge 'Review.body/REVIEWS' (type: String)
    ├─   0.006806s   0ms INFO [x] Creating field move edge 'Review.body/REVIEWS' (type: String)
    ├─   0.006813s   0ms INFO [x] Creating owned field move edge 'User.__typename/ACCOUNTS' (type: String)
    ├─   0.006820s   0ms INFO [x] Creating field move edge 'User.id/ACCOUNTS' (type: ID)
    ├─   0.006826s   0ms INFO [x] Creating field move edge 'User.id/ACCOUNTS' (type: ID)
    ├─   0.006832s   0ms INFO [x] Creating field move edge 'User.name/ACCOUNTS' (type: String)
    ├─   0.006838s   0ms INFO [x] Creating field move edge 'User.name/ACCOUNTS' (type: String)
    ├─   0.006843s   0ms INFO [x] Creating field move edge 'User.username/ACCOUNTS' (type: String)
    ├─   0.006849s   0ms INFO [x] Creating field move edge 'User.username/ACCOUNTS' (type: String)
    ├─   0.006855s   0ms INFO [ ] Field 'User.reviews/ACCOUNTS' does is not available in the subgraph, skipping edge creation (type: Review)
    ├─   0.006860s   0ms INFO [x] Creating owned field move edge 'User.__typename/REVIEWS' (type: String)
    ├─   0.006867s   0ms INFO [x] Creating field move edge 'User.id/REVIEWS' (type: ID)
    ├─   0.006873s   0ms INFO [x] Creating field move edge 'User.id/REVIEWS' (type: ID)
    ├─   0.006878s   0ms INFO [ ] Field 'User.name/REVIEWS' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006884s   0ms INFO [ ] Field 'User.username/REVIEWS' is external, skipping edge creation
    ├─   0.006889s   0ms INFO [x] Creating field move edge 'User.reviews/REVIEWS' (type: Review)
    ├─   0.006895s   0ms INFO [x] Creating field move edge 'User.reviews/REVIEWS' (type: Review)
    ├─   0.006901s   0ms INFO [x] Creating owned field move edge 'Query.__typename/ACCOUNTS' (type: String)
    ├─   0.006908s   0ms INFO [ ] Field 'Query.products/ACCOUNTS' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006913s   0ms INFO [x] Creating field move edge 'Query.me/ACCOUNTS' (type: User)
    ├─   0.006918s   0ms INFO [x] Creating field move edge 'Query.me/ACCOUNTS' (type: User)
    ├─   0.006924s   0ms INFO [x] Creating owned field move edge 'Query.__typename/INVENTORY' (type: String)
    ├─   0.006931s   0ms INFO [ ] Field 'Query.products/INVENTORY' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006936s   0ms INFO [ ] Field 'Query.me/INVENTORY' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006941s   0ms INFO [x] Creating owned field move edge 'Query.__typename/PRODUCTS' (type: String)
    ├─   0.006948s   0ms INFO [x] Creating field move edge 'Query.products/PRODUCTS' (type: Product)
    ├─   0.006957s   0ms INFO [x] Creating field move edge 'Query.products/PRODUCTS' (type: Product)
    ├─   0.006963s   0ms INFO [ ] Field 'Query.me/PRODUCTS' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006968s   0ms INFO [x] Creating owned field move edge 'Query.__typename/REVIEWS' (type: String)
    ├─   0.006975s   0ms INFO [ ] Field 'Query.products/REVIEWS' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006979s   0ms INFO [ ] Field 'Query.me/REVIEWS' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006985s   0ms INFO [x] Creating owned field move edge 'Product.__typename/INVENTORY' (type: String)
    ├─   0.007079s   0ms INFO [x] Creating field move edge 'Product.shippingEstimate/INVENTORY' (type: Int)
    ├─   0.007111s   0ms INFO [x] Creating field move edge 'Product.shippingEstimate/INVENTORY' (type: Int)
    ├─   0.007124s   0ms INFO [x] Creating field move edge 'Product.inStock/INVENTORY' (type: Boolean)
    ├─   0.007130s   0ms INFO [x] Creating field move edge 'Product.inStock/INVENTORY' (type: Boolean)
    ├─   0.007185s   0ms INFO [x] Creating field move edge 'Product.shippingEstimateTag/INVENTORY' (type: String)
    ├─   0.007211s   0ms INFO [x] Creating field move edge 'Product.shippingEstimateTag/INVENTORY' (type: String)
    ├─   0.007224s   0ms INFO [ ] Field 'Product.weight/INVENTORY' is external, skipping edge creation
    ├─   0.007229s   0ms INFO [ ] Field 'Product.reviews/INVENTORY' does is not available in the subgraph, skipping edge creation (type: Review)
    ├─   0.007235s   0ms INFO [x] Creating field move edge 'Product.upc/INVENTORY' (type: String)
    ├─   0.007240s   0ms INFO [x] Creating field move edge 'Product.upc/INVENTORY' (type: String)
    ├─   0.007246s   0ms INFO [ ] Field 'Product.name/INVENTORY' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007251s   0ms INFO [ ] Field 'Product.price/INVENTORY' is external, skipping edge creation
    ├─   0.007257s   0ms INFO [x] Creating owned field move edge 'Product.__typename/PRODUCTS' (type: String)
    ├─   0.007264s   0ms INFO [ ] Field 'Product.shippingEstimate/PRODUCTS' does is not available in the subgraph, skipping edge creation (type: Int)
    ├─   0.007269s   0ms INFO [ ] Field 'Product.inStock/PRODUCTS' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.007274s   0ms INFO [ ] Field 'Product.shippingEstimateTag/PRODUCTS' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007279s   0ms INFO [x] Creating field move edge 'Product.weight/PRODUCTS' (type: Int)
    ├─   0.007285s   0ms INFO [x] Creating field move edge 'Product.weight/PRODUCTS' (type: Int)
    ├─   0.007291s   0ms INFO [ ] Field 'Product.reviews/PRODUCTS' does is not available in the subgraph, skipping edge creation (type: Review)
    ├─   0.007296s   0ms INFO [x] Creating field move edge 'Product.upc/PRODUCTS' (type: String)
    ├─   0.007302s   0ms INFO [x] Creating field move edge 'Product.upc/PRODUCTS' (type: String)
    ├─   0.007307s   0ms INFO [x] Creating field move edge 'Product.name/PRODUCTS' (type: String)
    ├─   0.007313s   0ms INFO [x] Creating field move edge 'Product.name/PRODUCTS' (type: String)
    ├─   0.007318s   0ms INFO [x] Creating field move edge 'Product.price/PRODUCTS' (type: Int)
    ├─   0.007324s   0ms INFO [x] Creating field move edge 'Product.price/PRODUCTS' (type: Int)
    ├─   0.007330s   0ms INFO [x] Creating owned field move edge 'Product.__typename/REVIEWS' (type: String)
    ├─   0.007337s   0ms INFO [ ] Field 'Product.shippingEstimate/REVIEWS' does is not available in the subgraph, skipping edge creation (type: Int)
    ├─   0.007342s   0ms INFO [ ] Field 'Product.inStock/REVIEWS' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.007346s   0ms INFO [ ] Field 'Product.shippingEstimateTag/REVIEWS' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007351s   0ms INFO [ ] Field 'Product.weight/REVIEWS' does is not available in the subgraph, skipping edge creation (type: Int)
    ├─   0.007356s   0ms INFO [x] Creating field move edge 'Product.reviews/REVIEWS' (type: Review)
    ├─   0.007362s   0ms INFO [x] Creating field move edge 'Product.reviews/REVIEWS' (type: Review)
    ├─   0.007368s   0ms INFO [x] Creating field move edge 'Product.upc/REVIEWS' (type: String)
    ├─   0.007374s   0ms INFO [x] Creating field move edge 'Product.upc/REVIEWS' (type: String)
    ├─   0.007385s   0ms INFO [ ] Field 'Product.name/REVIEWS' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007397s   0ms INFO [ ] Field 'Product.price/REVIEWS' does is not available in the subgraph, skipping edge creation (type: Int)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.007486s   0ms INFO Creating self-referencing entity move edge in 'Review/REVIEWS' via key 'id'
    ├─   0.007558s   0ms INFO Creating self-referencing entity move edge in 'User/ACCOUNTS' via key 'id'
    ├─   0.007630s   0ms INFO Creating entity move edge from 'User/ACCOUNTS' to 'User/REVIEWS' via key 'id'
    ├─   0.007701s   0ms INFO Creating entity move edge from 'User/REVIEWS' to 'User/ACCOUNTS' via key 'id'
    ├─   0.007769s   0ms INFO Creating self-referencing entity move edge in 'User/REVIEWS' via key 'id'
    ├─   0.007852s   0ms INFO Creating self-referencing entity move edge in 'Product/INVENTORY' via key 'upc'
    ├─   0.007922s   0ms INFO Creating entity move edge from 'Product/INVENTORY' to 'Product/PRODUCTS' via key 'upc'
    ├─   0.007997s   0ms INFO Creating entity move edge from 'Product/INVENTORY' to 'Product/REVIEWS' via key 'upc'
    ├─   0.008066s   0ms INFO Creating entity move edge from 'Product/PRODUCTS' to 'Product/INVENTORY' via key 'upc'
    ├─   0.008134s   0ms INFO Creating self-referencing entity move edge in 'Product/PRODUCTS' via key 'upc'
    ├─   0.008202s   0ms INFO Creating entity move edge from 'Product/PRODUCTS' to 'Product/REVIEWS' via key 'upc'
    ├─   0.008272s   0ms INFO Creating entity move edge from 'Product/REVIEWS' to 'Product/INVENTORY' via key 'upc'
    ├─   0.008340s   0ms INFO Creating entity move edge from 'Product/REVIEWS' to 'Product/PRODUCTS' via key 'upc'
    ├─   0.008418s   0ms INFO Creating self-referencing entity move edge in 'Product/REVIEWS' via key 'upc'
  ┌─┘
  └─┐build_viewed_field_edges{}
    ├─   0.008518s   0ms INFO Creating viewed (#1) link for provided field 'Review.author/"REVIEWS"' (type: User)
    └─┐handle_viewed_selection_set{graph_id="REVIEWS", view_id=1, parent_type_name="User"}
      ├─   0.008568s   0ms INFO Upserting graph viewed node for 'String.REVIEWS'
      ├─   0.008577s   0ms INFO Creating viewed (#1) field edge for 'User.username' (type: String)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.067182s INFO Starting server on http://localhost:4000
   0.068284s INFO starting 16 workers
   0.068331s INFO Actix runtime found; starting in Actix runtime
   0.068340s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.218922s DEBUG original document: query ping {
  __typename
}

   0.219029s DEBUG normalized document: query ping {__typename}

   0.219050s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.219454s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.307646s DEBUG original document: query {
  me {
    id
  }
}

   0.307787s DEBUG normalized document: query{me{id}}

   0.307805s DEBUG executable operation: query{me{id}}
┐walk_operation{}
├─   0.308198s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="me", leaf=false}
  ├─   0.308260s   0ms DEBUG Trying to advance to: me{id} through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.308323s   0ms DEBUG checking edge Query/accounts -(me)- User/accounts
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts", edge="me"}
        ├─   0.308355s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.308382s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts with edge Query/accounts -(me)- User/accounts
      ├─   0.308394s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.308412s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.308449s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.308455s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.308468s   0ms DEBUG Indirect paths found: 0
    ├─   0.308475s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts
  ┌─┘
  └─┐explore_path{path="root(Query) -(products)- Query/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.308504s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.308515s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.308530s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.308536s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.308546s   0ms DEBUG Indirect paths found: 0
    ├─   0.308553s   0ms WARN failed to advance: root(Query) -(products)- Query/products
  ┌─┘
  ├─   0.308572s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.308593s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.308619s   0ms DEBUG checking edge User/accounts -(id)- ID/accounts
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
        ├─   0.308635s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.308649s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts with edge User/accounts -(id)- ID/accounts
      ├─   0.308657s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.308671s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.308692s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
        ├─   0.308711s   0ms DEBUG checking requirements {id} for edge 'User/accounts -(🔑🧩{id})- User/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.308753s   0ms DEBUG checking edge User/accounts -(id)- ID/accounts
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
                ├─   0.308773s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.308790s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts with edge User/accounts -(id)- ID/accounts
              ├─   0.308799s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.308827s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
              ├─   0.308837s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.308845s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
              ├─   0.308852s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.308860s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.308866s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.308883s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.308900s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.308914s   0ms DEBUG Paths for id
        ├─   0.308922s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(id)- ID/accounts is valid
        ├─   0.308929s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.308947s   0ms DEBUG path User/accounts -(id)- ID/accounts is valid
        ├─   0.308954s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.308969s   0ms DEBUG Advancing path to User/accounts -(🔑🧩{id})- User/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/accounts"}
        └─┐create_root_for_path_sequences{root_node="User/accounts", segments_count=1}
          ├─   0.308998s   0ms DEBUG Building root query tree node: User/accounts
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.309014s   0ms DEBUG Processing edge: User/accounts -(id)- ID/accounts
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.309036s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", current_cost=2003}
        ├─   0.309133s   0ms DEBUG checking edge User/reviews -(id)- ID/reviews
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", edge="id"}
          ├─   0.309161s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.309180s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews with edge User/reviews -(id)- ID/reviews
        ├─   0.309190s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(12)" }])
      ┌─┘
      ├─   0.309208s   0ms DEBUG Found 1 direct paths to User/accounts -(🔑🧩{id})- User/reviews
      ├─   0.309218s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
      ├─   0.309223s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.309231s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.309237s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.309251s   0ms DEBUG Indirect paths found: 1
    ├─   0.309261s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.309305s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.309318s   0ms DEBUG Processing edge: root(Query) -(accounts)- Query/accounts
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.309330s   0ms DEBUG Processing edge: Query/accounts -(me)- User/accounts
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.309342s   0ms DEBUG Processing edge: User/accounts -(id)- ID/accounts
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.309360s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.309372s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.309382s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="accounts", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="me", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.309509s   0ms DEBUG adding output field 'me' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="me", fetch_path="me"}
              ├─   0.309539s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.309604s   0ms DEBUG Done
├─   0.309612s   0ms DEBUG found roots
├─   0.309617s   0ms DEBUG print graph
├─   0.309622s   0ms DEBUG Nodes:
│ [1] Query/accounts {} → {me{id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="accounts"}
    └─┐execute{subgraph_name="accounts"}
      ├─   0.310105s   0ms DEBUG starting new connection: http://localhost:4200/
      ├─   0.310508s   0ms DEBUG connecting to 127.0.0.1:4200
      ├─   0.310902s   1ms DEBUG connected to 127.0.0.1:4200
      ├─   0.315372s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.315686s DEBUG execution result: ExecutionResult { data: Some(Object {"me": Object {"id": String("u1")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("accounts"), "operationKind": String("query"), "operation": String("{me{id}}")}}}) }
   0.321829s DEBUG original document: query {
  me {
    id
    reviews {
      id
    }
  }
}

   0.321921s DEBUG normalized document: query{me{id reviews{id}}}

   0.321941s DEBUG executable operation: query{me{id reviews{id}}}
┐walk_operation{}
├─   0.322298s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="me", leaf=false}
  ├─   0.322346s   0ms DEBUG Trying to advance to: me{id reviews{id}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.322401s   0ms DEBUG checking edge Query/accounts -(me)- User/accounts
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts", edge="me"}
        ├─   0.322423s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.322444s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts with edge Query/accounts -(me)- User/accounts
      ├─   0.322456s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.322472s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.322501s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.322508s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.322519s   0ms DEBUG Indirect paths found: 0
    ├─   0.322526s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts
  ┌─┘
  └─┐explore_path{path="root(Query) -(products)- Query/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.322554s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.322565s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.322583s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.322589s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.322599s   0ms DEBUG Indirect paths found: 0
    ├─   0.322606s   0ms WARN failed to advance: root(Query) -(products)- Query/products
  ┌─┘
  ├─   0.322620s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="reviews", leaf=false}
  ├─   0.322640s   0ms DEBUG Trying to advance to: reviews{id} through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.322665s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.322677s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.322694s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
        ├─   0.322713s   0ms DEBUG checking requirements {id} for edge 'User/accounts -(🔑🧩{id})- User/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.322750s   0ms DEBUG checking edge User/accounts -(id)- ID/accounts
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
                ├─   0.322769s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.322786s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts with edge User/accounts -(id)- ID/accounts
              ├─   0.322794s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.322826s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
              ├─   0.322834s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.322842s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
              ├─   0.322849s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.322857s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.322863s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.322879s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.322895s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.322909s   0ms DEBUG Paths for id
        ├─   0.322918s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(id)- ID/accounts is valid
        ├─   0.322924s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.322939s   0ms DEBUG path User/accounts -(id)- ID/accounts is valid
        ├─   0.322945s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.322960s   0ms DEBUG Advancing path to User/accounts -(🔑🧩{id})- User/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/accounts"}
        └─┐create_root_for_path_sequences{root_node="User/accounts", segments_count=1}
          ├─   0.322987s   0ms DEBUG Building root query tree node: User/accounts
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.323002s   0ms DEBUG Processing edge: User/accounts -(id)- ID/accounts
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.323023s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", current_cost=2003}
        ├─   0.323067s   0ms DEBUG checking edge User/reviews -(reviews)- Review/reviews
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", edge="reviews"}
          ├─   0.323085s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.323102s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews with edge User/reviews -(reviews)- Review/reviews
        ├─   0.323111s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13)" }])
      ┌─┘
      ├─   0.323126s   0ms DEBUG Found 1 direct paths to User/accounts -(🔑🧩{id})- User/reviews
      ├─   0.323134s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
      ├─   0.323140s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.323147s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.323152s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.323174s   0ms DEBUG Indirect paths found: 1
    ├─   0.323181s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts
  ┌─┘
  ├─   0.323192s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.323212s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.323241s   0ms DEBUG checking edge Review/reviews -(id)- ID/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", edge="id"}
        ├─   0.323259s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.323290s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews with edge Review/reviews -(id)- ID/reviews
      ├─   0.323303s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(5)" }])
    ┌─┘
    ├─   0.323322s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.323351s   0ms DEBUG Exploring edge Review/reviews -(🔑🧩{id})- Review/reviews
      ├─   0.323358s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.323365s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.323370s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.323382s   0ms DEBUG Indirect paths found: 0
    ├─   0.323390s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.323417s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.323442s   0ms DEBUG checking edge User/accounts -(id)- ID/accounts
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
        ├─   0.323458s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.323472s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts with edge User/accounts -(id)- ID/accounts
      ├─   0.323480s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.323493s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.323512s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
        ├─   0.323528s   0ms DEBUG checking requirements {id} for edge 'User/accounts -(🔑🧩{id})- User/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.323596s   0ms DEBUG checking edge User/accounts -(id)- ID/accounts
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
                ├─   0.323627s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.323648s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts with edge User/accounts -(id)- ID/accounts
              ├─   0.323658s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.323689s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
              ├─   0.323697s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.323705s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
              ├─   0.323711s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.323719s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.323725s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.323740s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.323756s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.323769s   0ms DEBUG Paths for id
        ├─   0.323777s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(id)- ID/accounts is valid
        ├─   0.323783s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.323795s   0ms DEBUG path User/accounts -(id)- ID/accounts is valid
        ├─   0.323801s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.323814s   0ms DEBUG Advancing path to User/accounts -(🔑🧩{id})- User/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/accounts"}
        └─┐create_root_for_path_sequences{root_node="User/accounts", segments_count=1}
          ├─   0.323840s   0ms DEBUG Building root query tree node: User/accounts
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.323854s   0ms DEBUG Processing edge: User/accounts -(id)- ID/accounts
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.323874s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", current_cost=2003}
        ├─   0.323916s   0ms DEBUG checking edge User/reviews -(id)- ID/reviews
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", edge="id"}
          ├─   0.323934s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.323950s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews with edge User/reviews -(id)- ID/reviews
        ├─   0.323958s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(12)" }])
      ┌─┘
      ├─   0.323973s   0ms DEBUG Found 1 direct paths to User/accounts -(🔑🧩{id})- User/reviews
      ├─   0.323981s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
      ├─   0.323986s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.323994s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.323999s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.324017s   0ms DEBUG Indirect paths found: 1
    ├─   0.324026s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(5)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.324069s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.324081s   0ms DEBUG Processing edge: root(Query) -(accounts)- Query/accounts
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.324093s   0ms DEBUG Processing edge: Query/accounts -(me)- User/accounts
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.324105s   0ms DEBUG Processing edge: User/accounts -(🔑🧩{id})- User/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.324117s   0ms DEBUG Processing edge: User/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.324130s   0ms DEBUG Processing edge: Review/reviews -(id)- ID/reviews
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.324150s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.324162s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.324173s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.324184s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.324194s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.324227s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.324238s   0ms DEBUG Processing edge: root(Query) -(accounts)- Query/accounts
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.324249s   0ms DEBUG Processing edge: Query/accounts -(me)- User/accounts
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.324261s   0ms DEBUG Processing edge: User/accounts -(id)- ID/accounts
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.324279s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.324289s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.324300s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="accounts", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="me", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.324409s   0ms DEBUG adding output field 'me' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="User/accounts -(🔑🧩{id})- User/reviews", parent_fetch_step_index=1}
              ├─   0.324450s   0ms DEBUG created a new fetch step [2] subgraph(reviews) type(User) requirement() key({id}) in children of 1
              ├─   0.324458s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.324465s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.324473s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="me", fetch_path="me"}
                      ├─   0.324550s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.324581s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="reviews", leaf=false, list=true, response_path="me", fetch_path=""}
                  ├─   0.324707s   0ms DEBUG adding output field 'reviews' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Review", field="id", leaf=true, list=false, response_path="me.reviews.@", fetch_path="reviews.@"}
                      ├─   0.324738s   0ms DEBUG adding output field 'id' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="me", fetch_path="me"}
              ├─   0.324807s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.324869s   0ms DEBUG Done
├─   0.324875s   0ms DEBUG found roots
├─   0.324880s   0ms DEBUG print graph
├─   0.324885s   0ms DEBUG Nodes:
│ [1] Query/accounts {} → {me{__typename id}} at $.
│ [2] User/reviews {__typename id} → {reviews{id}} at $.me
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="accounts"}
      └─┐execute{subgraph_name="accounts"}
        ├─   0.325299s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.327223s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"me": Object {"__typename": String("User"), "id": String("u1")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="reviews"}
        └─┐execute{subgraph_name="reviews"}
          ├─   0.327634s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.331916s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.332276s DEBUG execution result: ExecutionResult { data: Some(Object {"me": Object {"id": String("u1"), "reviews": Array [Object {"id": String("r1")}, Object {"id": String("r2")}]}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("accounts"), "operationKind": String("query"), "operation": String("{me{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("me")], "node": Object {"kind": String("Fetch"), "serviceName": String("reviews"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{reviews{id}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.335889s DEBUG original document: query {
  me {
    reviews {
      id
      author {
        id
        username
      }
      product {
        inStock
      }
    }
  }
}

   0.335998s DEBUG normalized document: query{me{reviews{id author{id username} product{inStock}}}}

   0.336026s DEBUG executable operation: query{me{reviews{id author{id username} product{inStock}}}}
┐walk_operation{}
├─   0.336397s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="me", leaf=false}
  ├─   0.336445s   0ms DEBUG Trying to advance to: me{reviews{id author{id username} product{inStock}}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.336498s   0ms DEBUG checking edge Query/accounts -(me)- User/accounts
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts", edge="me"}
        ├─   0.336519s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.336545s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts with edge Query/accounts -(me)- User/accounts
      ├─   0.336557s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.336582s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.336615s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.336635s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.336653s   0ms DEBUG Indirect paths found: 0
    ├─   0.336663s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts
  ┌─┘
  └─┐explore_path{path="root(Query) -(products)- Query/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.336697s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.336708s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.336727s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.336732s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.336743s   0ms DEBUG Indirect paths found: 0
    ├─   0.336750s   0ms WARN failed to advance: root(Query) -(products)- Query/products
  ┌─┘
  ├─   0.336764s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="reviews", leaf=false}
  ├─   0.336785s   0ms DEBUG Trying to advance to: reviews{id author{id username} product{inStock}} through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.336813s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.336824s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.336843s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
        ├─   0.336862s   0ms DEBUG checking requirements {id} for edge 'User/accounts -(🔑🧩{id})- User/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.336899s   0ms DEBUG checking edge User/accounts -(id)- ID/accounts
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
                ├─   0.336938s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.336965s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts with edge User/accounts -(id)- ID/accounts
              ├─   0.336976s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.337012s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
              ├─   0.337021s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.337029s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
              ├─   0.337036s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.337044s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.337050s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.337066s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.337083s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.337115s   0ms DEBUG Paths for id
        ├─   0.337128s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(id)- ID/accounts is valid
        ├─   0.337136s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.337153s   0ms DEBUG path User/accounts -(id)- ID/accounts is valid
        ├─   0.337159s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.337175s   0ms DEBUG Advancing path to User/accounts -(🔑🧩{id})- User/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/accounts"}
        └─┐create_root_for_path_sequences{root_node="User/accounts", segments_count=1}
          ├─   0.337204s   0ms DEBUG Building root query tree node: User/accounts
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.337219s   0ms DEBUG Processing edge: User/accounts -(id)- ID/accounts
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.337240s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", current_cost=2003}
        ├─   0.337308s   0ms DEBUG checking edge User/reviews -(reviews)- Review/reviews
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", edge="reviews"}
          ├─   0.337332s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.337350s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews with edge User/reviews -(reviews)- Review/reviews
        ├─   0.337361s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13)" }])
      ┌─┘
      ├─   0.337377s   0ms DEBUG Found 1 direct paths to User/accounts -(🔑🧩{id})- User/reviews
      ├─   0.337387s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
      ├─   0.337392s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.337400s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.337405s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.337421s   0ms DEBUG Indirect paths found: 1
    ├─   0.337429s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts
  ┌─┘
  ├─   0.337440s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="product", leaf=false}
  ├─   0.337461s   0ms DEBUG Trying to advance to: product{inStock} through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.337493s   0ms DEBUG checking edge Review/reviews -(product)- Product/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", edge="product"}
        ├─   0.337511s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.337527s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews with edge Review/reviews -(product)- Product/reviews
      ├─   0.337535s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.337549s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.337571s   0ms DEBUG Exploring edge Review/reviews -(🔑🧩{id})- Review/reviews
      ├─   0.337576s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.337582s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.337587s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.337599s   0ms DEBUG Indirect paths found: 0
    ├─   0.337607s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews
  ┌─┘
  ├─   0.337618s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="inStock", leaf=true}
  ├─   0.337636s   0ms DEBUG Trying to advance to: inStock through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "inStock", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.337665s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.337676s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "inStock", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.337695s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.337700s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.337706s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.337748s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.337793s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.337814s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.337835s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.337845s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.337878s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.337885s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.337891s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.337898s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
              ├─   0.337906s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.337927s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.337992s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.338024s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.338048s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.338059s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.338096s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.338104s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.338111s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.338118s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                      ├─   0.338126s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.338133s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                      ├─   0.338141s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.338148s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.338166s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.338184s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.338200s   0ms DEBUG Paths for upc
                ├─   0.338212s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.338218s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.338231s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.338237s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.338256s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.338283s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.338299s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.338322s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.338372s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.338394s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.338413s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.338422s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.338440s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.338451s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.338457s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.338474s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.338491s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.338508s   0ms DEBUG Paths for upc
        ├─   0.338518s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.338527s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.338534s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.338544s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.338549s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.338562s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.338585s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.338599s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.338619s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "inStock", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
        ├─   0.338679s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.338702s   1ms DEBUG No direct paths found
      ├─   0.338712s   1ms DEBUG going deeper
      ├─   0.338722s   1ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.338746s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.338781s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.338801s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.338820s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.338828s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.338862s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.338870s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.338876s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.338896s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.338932s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.338959s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.338983s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.338993s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.339028s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.339036s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.339043s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.339050s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                      ├─   0.339058s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.339064s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                      ├─   0.339073s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.339080s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.339098s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.339116s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.339132s   0ms DEBUG Paths for upc
                ├─   0.339142s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.339149s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.339161s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.339168s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.339183s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.339210s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.339225s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.339248s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
                ├─   0.339296s   0ms DEBUG checking edge Product/products -(upc)- String/products
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", edge="upc"}
                  ├─   0.339335s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.339364s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                ├─   0.339375s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
              ┌─┘
              ├─   0.339410s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.339422s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.339429s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.339439s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.339445s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
            ┌─┘
            ├─   0.339482s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
          ┌─┘
          ├─   0.339504s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
        ┌─┘
        ├─   0.339520s   0ms DEBUG Paths for upc
        ├─   0.339532s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.339551s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
        ├─   0.339558s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.339569s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.339575s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.339588s   1ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.339615s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.339629s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.339649s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "inStock", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
        ├─   0.339695s   0ms DEBUG checking edge Product/inventory -(inStock)- Boolean/inventory
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="inStock"}
          ├─   0.339715s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.339732s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(inStock)- Boolean/inventory
        ├─   0.339740s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(22)" }])
      ┌─┘
      ├─   0.339756s   2ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
      ├─   0.339765s   2ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      ├─   0.339771s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.339777s   2ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.339782s   2ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
      ├─   0.339788s   2ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      ├─   0.339797s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.339807s   2ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.339812s   2ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(22)" }])
    ┌─┘
    ├─   0.339827s   2ms DEBUG Indirect paths found: 1
    ├─   0.339837s   2ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews
  ┌─┘
┌─┘
└─┐process_field{field_name="author", leaf=false}
  ├─   0.339863s   0ms DEBUG Trying to advance to: author{id username} through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.339894s   0ms DEBUG checking edge Review/reviews -(author)- User/reviews/1
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", edge="author"}
        ├─   0.339912s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.339928s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews with edge Review/reviews -(author)- User/reviews/1
      ├─   0.339936s   0ms DEBUG checking edge Review/reviews -(author)- User/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", edge="author"}
        ├─   0.339954s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.339968s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews with edge Review/reviews -(author)- User/reviews
      ├─   0.339976s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(47)" },  { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.339992s   0ms DEBUG Direct paths found: 2
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.340021s   0ms DEBUG Exploring edge Review/reviews -(🔑🧩{id})- Review/reviews
      ├─   0.340027s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.340033s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.340038s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.340049s   0ms DEBUG Indirect paths found: 0
    ├─   0.340057s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews
  ┌─┘
  ├─   0.340069s   0ms DEBUG Found 2 paths
┌─┘
└─┐process_field{field_name="username", leaf=true}
  ├─   0.340087s   0ms DEBUG Trying to advance to: username through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews/1", current_cost=2005}
      ├─   0.340116s   0ms DEBUG checking edge User/reviews/1 -(username)- String/reviews/1
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews/1", edge="username"}
        ├─   0.340134s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.340150s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews/1 with edge User/reviews/1 -(username)- String/reviews/1
      ├─   0.340157s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(47) --> EdgeIndex(48)" }])
    ┌─┘
    ├─   0.340171s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews/1", current_cost=2005}
      ├─   0.340191s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.340197s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.340208s   0ms DEBUG Indirect paths found: 0
    ├─   0.340216s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews", current_cost=2005}
      ├─   0.340249s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.340260s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews", current_cost=2005}
      ├─   0.340278s   0ms DEBUG Exploring edge User/reviews -(🔑🧩{id})- User/reviews
      ├─   0.340284s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.340289s   0ms DEBUG Exploring edge User/reviews -(🔑🧩{id})- User/accounts
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews", edge="id"}
        ├─   0.340308s   0ms DEBUG checking requirements {id} for edge 'User/reviews -(🔑🧩{id})- User/accounts'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews", current_cost=2005}
              ├─   0.340341s   0ms DEBUG checking edge User/reviews -(id)- ID/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews", edge="id"}
                ├─   0.340361s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.340380s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews with edge User/reviews -(id)- ID/reviews
              ├─   0.340388s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(3) --> EdgeIndex(12)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews", current_cost=2005}
              ├─   0.340420s   0ms DEBUG Exploring edge User/reviews -(🔑🧩{id})- User/reviews
              ├─   0.340427s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.340433s   0ms DEBUG Exploring edge User/reviews -(🔑🧩{id})- User/accounts
              ├─   0.340439s   0ms DEBUG Ignoring, graph is excluded and already visited (current: accounts, visited: {"accounts"})
              ├─   0.340447s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.340452s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.340467s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(3) --> EdgeIndex(12)" }], [])))
          ┌─┘
          ├─   0.340483s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(3) --> EdgeIndex(12)" }], [])))
        ┌─┘
        ├─   0.340497s   0ms DEBUG Paths for id
        ├─   0.340506s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews -(id)- ID/reviews is valid
        ├─   0.340512s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.340523s   0ms DEBUG path User/reviews -(id)- ID/reviews is valid
        ├─   0.340528s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(12)" }]))
      ┌─┘
      ├─   0.340542s   0ms DEBUG Advancing path to User/reviews -(🔑🧩{id})- User/accounts
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(12)" }, root_node="User/reviews"}
        └─┐create_root_for_path_sequences{root_node="User/reviews", segments_count=1}
          ├─   0.340565s   0ms DEBUG Building root query tree node: User/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.340579s   0ms DEBUG Processing edge: User/reviews -(id)- ID/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.340599s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews -(🔑🧩{id})- User/accounts", current_cost=3007}
        ├─   0.340643s   0ms DEBUG checking edge User/accounts -(username)- String/accounts
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews -(🔑🧩{id})- User/accounts", edge="username"}
          ├─   0.340663s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.340680s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews -(🔑🧩{id})- User/accounts with edge User/accounts -(username)- String/accounts
        ├─   0.340687s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(3) --> EdgeIndex(36) --> EdgeIndex(10)" }])
      ┌─┘
      ├─   0.340703s   0ms DEBUG Found 1 direct paths to User/reviews -(🔑🧩{id})- User/accounts
      ├─   0.340718s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.340723s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(3) --> EdgeIndex(36) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.340739s   0ms DEBUG Indirect paths found: 1
    ├─   0.340750s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.340777s   0ms DEBUG Trying to advance to: id through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews/1", current_cost=2005}
      ├─   0.340806s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.340817s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews/1", current_cost=2005}
      ├─   0.340836s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.340842s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.340852s   0ms DEBUG Indirect paths found: 0
    ├─   0.340861s   0ms WARN failed to advance: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews", current_cost=2005}
      ├─   0.340893s   0ms DEBUG checking edge User/reviews -(id)- ID/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews", edge="id"}
        ├─   0.340911s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.340927s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews with edge User/reviews -(id)- ID/reviews
      ├─   0.340934s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(3) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.340948s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews", current_cost=2005}
      ├─   0.340968s   0ms DEBUG Exploring edge User/reviews -(🔑🧩{id})- User/reviews
      ├─   0.340974s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.340979s   0ms DEBUG Exploring edge User/reviews -(🔑🧩{id})- User/accounts
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews", edge="id"}
        ├─   0.340997s   0ms DEBUG checking requirements {id} for edge 'User/reviews -(🔑🧩{id})- User/accounts'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews", current_cost=2005}
              ├─   0.341030s   0ms DEBUG checking edge User/reviews -(id)- ID/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews", edge="id"}
                ├─   0.341049s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.341067s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews with edge User/reviews -(id)- ID/reviews
              ├─   0.341094s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(3) --> EdgeIndex(12)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews", current_cost=2005}
              ├─   0.341141s   0ms DEBUG Exploring edge User/reviews -(🔑🧩{id})- User/reviews
              ├─   0.341149s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.341155s   0ms DEBUG Exploring edge User/reviews -(🔑🧩{id})- User/accounts
              ├─   0.341161s   0ms DEBUG Ignoring, graph is excluded and already visited (current: accounts, visited: {"accounts"})
              ├─   0.341169s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.341175s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.341190s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(3) --> EdgeIndex(12)" }], [])))
          ┌─┘
          ├─   0.341206s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(3) --> EdgeIndex(12)" }], [])))
        ┌─┘
        ├─   0.341220s   0ms DEBUG Paths for id
        ├─   0.341230s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews -(id)- ID/reviews is valid
        ├─   0.341235s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.341247s   0ms DEBUG path User/reviews -(id)- ID/reviews is valid
        ├─   0.341252s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(12)" }]))
      ┌─┘
      ├─   0.341266s   0ms DEBUG Advancing path to User/reviews -(🔑🧩{id})- User/accounts
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(12)" }, root_node="User/reviews"}
        └─┐create_root_for_path_sequences{root_node="User/reviews", segments_count=1}
          ├─   0.341289s   0ms DEBUG Building root query tree node: User/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.341303s   0ms DEBUG Processing edge: User/reviews -(id)- ID/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.341323s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews -(🔑🧩{id})- User/accounts", current_cost=3007}
        ├─   0.341367s   0ms DEBUG checking edge User/accounts -(id)- ID/accounts
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews -(🔑🧩{id})- User/accounts", edge="id"}
          ├─   0.341387s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.341404s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews -(🔑🧩{id})- User/accounts with edge User/accounts -(id)- ID/accounts
        ├─   0.341412s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(3) --> EdgeIndex(36) --> EdgeIndex(8)" }])
      ┌─┘
      ├─   0.341427s   0ms DEBUG Found 1 direct paths to User/reviews -(🔑🧩{id})- User/accounts
      ├─   0.341437s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.341442s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(3) --> EdgeIndex(36) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.341456s   0ms DEBUG Indirect paths found: 1
    ├─   0.341465s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(author)- User/reviews
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.341492s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.341522s   0ms DEBUG checking edge Review/reviews -(id)- ID/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", edge="id"}
        ├─   0.341540s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.341555s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews with edge Review/reviews -(id)- ID/reviews
      ├─   0.341563s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(5)" }])
    ┌─┘
    ├─   0.341576s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.341596s   0ms DEBUG Exploring edge Review/reviews -(🔑🧩{id})- Review/reviews
      ├─   0.341602s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.341608s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.341613s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.341636s   0ms DEBUG Indirect paths found: 0
    ├─   0.341663s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(22)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=7}
  ├─   0.341718s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=7}
    ├─   0.341730s   0ms DEBUG Processing edge: root(Query) -(accounts)- Query/accounts
    └─┐from_path_segment_sequences{current_index=1, total_segments=7}
      ├─   0.341742s   0ms DEBUG Processing edge: Query/accounts -(me)- User/accounts
      └─┐from_path_segment_sequences{current_index=2, total_segments=7}
        ├─   0.341754s   0ms DEBUG Processing edge: User/accounts -(🔑🧩{id})- User/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=7}
          ├─   0.341767s   0ms DEBUG Processing edge: User/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=7}
            ├─   0.341780s   0ms DEBUG Processing edge: Review/reviews -(product)- Product/reviews
            └─┐from_path_segment_sequences{current_index=5, total_segments=7}
              ├─   0.341793s   0ms DEBUG Processing edge: Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path_segment_sequences{current_index=6, total_segments=7}
                ├─   0.341807s   0ms DEBUG Processing edge: Product/inventory -(inStock)- Boolean/inventory
                └─┐from_path_segment_sequences{current_index=7, total_segments=7}
                ┌─┘
                ├─   0.341828s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.341841s   0ms DEBUG Adding subsequent step as child
            ┌─┘
            ├─   0.341853s   0ms DEBUG Adding subsequent step as child
          ┌─┘
          ├─   0.341870s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.341885s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.341901s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.341912s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(47) --> EdgeIndex(48)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=6}
  ├─   0.341950s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=6}
    ├─   0.341961s   0ms DEBUG Processing edge: root(Query) -(accounts)- Query/accounts
    └─┐from_path_segment_sequences{current_index=1, total_segments=6}
      ├─   0.341973s   0ms DEBUG Processing edge: Query/accounts -(me)- User/accounts
      └─┐from_path_segment_sequences{current_index=2, total_segments=6}
        ├─   0.341985s   0ms DEBUG Processing edge: User/accounts -(🔑🧩{id})- User/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=6}
          ├─   0.341998s   0ms DEBUG Processing edge: User/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=6}
            ├─   0.342012s   0ms DEBUG Processing edge: Review/reviews -(author)- User/reviews/1
            └─┐from_path_segment_sequences{current_index=5, total_segments=6}
              ├─   0.342025s   0ms DEBUG Processing edge: User/reviews/1 -(username)- String/reviews/1
              └─┐from_path_segment_sequences{current_index=6, total_segments=6}
              ┌─┘
              ├─   0.342046s   0ms DEBUG No subsequent steps (leaf or end of path)
            ┌─┘
            ├─   0.342059s   0ms DEBUG Adding subsequent step as child
          ┌─┘
          ├─   0.342070s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.342083s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.342094s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.342104s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(3) --> EdgeIndex(12)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=6}
  ├─   0.342137s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=6}
    ├─   0.342149s   0ms DEBUG Processing edge: root(Query) -(accounts)- Query/accounts
    └─┐from_path_segment_sequences{current_index=1, total_segments=6}
      ├─   0.342160s   0ms DEBUG Processing edge: Query/accounts -(me)- User/accounts
      └─┐from_path_segment_sequences{current_index=2, total_segments=6}
        ├─   0.342172s   0ms DEBUG Processing edge: User/accounts -(🔑🧩{id})- User/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=6}
          ├─   0.342184s   0ms DEBUG Processing edge: User/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=6}
            ├─   0.342197s   0ms DEBUG Processing edge: Review/reviews -(author)- User/reviews
            └─┐from_path_segment_sequences{current_index=5, total_segments=6}
              ├─   0.342210s   0ms DEBUG Processing edge: User/reviews -(id)- ID/reviews
              └─┐from_path_segment_sequences{current_index=6, total_segments=6}
              ┌─┘
              ├─   0.342230s   0ms DEBUG No subsequent steps (leaf or end of path)
            ┌─┘
            ├─   0.342242s   0ms DEBUG Adding subsequent step as child
          ┌─┘
          ├─   0.342255s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.342266s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.342277s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.342287s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(5)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.342319s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.342331s   0ms DEBUG Processing edge: root(Query) -(accounts)- Query/accounts
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.342343s   0ms DEBUG Processing edge: Query/accounts -(me)- User/accounts
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.342355s   0ms DEBUG Processing edge: User/accounts -(🔑🧩{id})- User/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.342367s   0ms DEBUG Processing edge: User/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.342379s   0ms DEBUG Processing edge: Review/reviews -(id)- ID/reviews
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.342399s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.342410s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.342421s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.342432s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.342442s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=4}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="accounts", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="me", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.342557s   0ms DEBUG adding output field 'me' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="User/accounts -(🔑🧩{id})- User/reviews", parent_fetch_step_index=1}
              ├─   0.342598s   0ms DEBUG created a new fetch step [2] subgraph(reviews) type(User) requirement() key({id}) in children of 1
              ├─   0.342607s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.342614s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.342621s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="me", fetch_path="me"}
                      ├─   0.342678s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.342702s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="reviews", leaf=false, list=true, response_path="me", fetch_path=""}
                  ├─   0.342791s   0ms DEBUG adding output field 'reviews' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=4, parent_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Review", field="product", leaf=false, list=false, response_path="me.reviews.@", fetch_path="reviews.@"}
                      ├─   0.342818s   0ms DEBUG adding output field 'product' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                        └─┐process_entity_move_edge{edge="Product/reviews -(🔑🧩{upc})- Product/inventory", parent_fetch_step_index=2}
                          ├─   0.342854s   0ms DEBUG created a new fetch step [3] subgraph(inventory) type(Product) requirement() key({upc}) in children of 2
                          ├─   0.342862s   0ms DEBUG adding input requirement '{upc}' to fetch step [3]
                          ├─   0.342870s   0ms DEBUG adding __typename field to output for type 'Product'
                          ├─   0.342878s   0ms DEBUG connecting fetch step to parent [2] -> [3]
                          └─┐connect{parent=2, child=3}
                          ┌─┘
                          └─┐process_requirements_for_fetch_steps{count=1}
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                                └─┐process_plain_field_edge{parent_fetch_step_index=2, requiring_fetch_step_index=3, type_name="Product", field="upc", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path="reviews.@.product"}
                                  ├─   0.342979s   0ms DEBUG connecting parent fetch step [2] to requiring fetch step [3]
                                  └─┐connect{parent=2, child=3}
                                  ┌─┘
                                  ├─   0.343013s   0ms DEBUG adding output field 'upc' to fetch step [2]
                                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            └─┐connect{parent=2, child=3}
                            ┌─┘
                          ┌─┘
                          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                            └─┐process_plain_field_edge{parent_fetch_step_index=3, type_name="Product", field="inStock", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path=""}
                              ├─   0.343127s   0ms DEBUG adding output field 'inStock' to fetch step [3]
                              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                              ┌─┘
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Review", field="author", leaf=false, list=false, response_path="me.reviews.@", fetch_path="reviews.@"}
                      ├─   0.343239s   0ms DEBUG adding output field 'author' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                        └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="username", leaf=false, list=false, response_path="me.reviews.@.author", fetch_path="reviews.@.author"}
                          ├─   0.343289s   0ms DEBUG adding output field 'username' to fetch step [2]
                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Review", field="author", leaf=false, list=false, response_path="me.reviews.@", fetch_path="reviews.@"}
                      ├─   0.343356s   0ms DEBUG adding output field 'author' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                        └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="me.reviews.@.author", fetch_path="reviews.@.author"}
                          ├─   0.343385s   0ms DEBUG adding output field 'id' to fetch step [2]
                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Review", field="id", leaf=true, list=false, response_path="me.reviews.@", fetch_path="reviews.@"}
                      ├─   0.343444s   0ms DEBUG adding output field 'id' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.343539s   1ms DEBUG Done
├─   0.343547s   1ms DEBUG found roots
├─   0.343552s   1ms DEBUG print graph
├─   0.343557s   1ms DEBUG Nodes:
│ [1] Query/accounts {} → {me{__typename id}} at $.
│ [2] User/reviews {__typename id} → {reviews{product{__typename upc} author{username id} id}} at $.me
│ [3] Product/inventory {__typename upc} → {inStock} at $.me.reviews.@.product
│ 
│ Tree:
│ [1]
│   [2]
│     [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="accounts"}
      └─┐execute{subgraph_name="accounts"}
        ├─   0.344084s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.346034s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"me": Object {"__typename": String("User"), "id": String("u1")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="reviews"}
        └─┐execute{subgraph_name="reviews"}
          ├─   0.346547s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.349005s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"me": Object {"__typename": String("User"), "id": String("u1"), "reviews": Array [Object {"product": Object {"__typename": String("Product"), "upc": String("p1")}, "author": Object {"username": String("u-username-1"), "id": String("u1")}, "id": String("r1")}, Object {"product": Object {"__typename": String("Product"), "upc": String("p2")}, "author": Object {"username": String("u-username-1"), "id": String("u1")}, "id": String("r2")}]}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "upc": String("p1")}, Object {"__typename": String("Product"), "upc": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="inventory"}
        └─┐execute{subgraph_name="inventory"}
          ├─   0.349662s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.354367s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.354847s DEBUG execution result: ExecutionResult { data: Some(Object {"me": Object {"reviews": Array [Object {"id": String("r1"), "author": Object {"id": String("u1"), "username": String("u-username-1")}, "product": Object {"inStock": Bool(true)}}, Object {"id": String("r2"), "author": Object {"id": String("u1"), "username": String("u-username-1")}, "product": Object {"inStock": Bool(false)}}]}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("accounts"), "operationKind": String("query"), "operation": String("{me{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("me")], "node": Object {"kind": String("Fetch"), "serviceName": String("reviews"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{reviews{product{__typename upc} author{username id} id}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("me"), String("reviews"), String("@"), String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("inventory"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{inStock}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("upc")}]}]}}]}}}) }
   0.358017s DEBUG original document: query {
  products {
    name
  }
}

   0.358112s DEBUG normalized document: query{products{name}}

   0.358124s DEBUG executable operation: query{products{name}}
┐walk_operation{}
├─   0.358418s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="products", leaf=false}
  ├─   0.358465s   0ms DEBUG Trying to advance to: products{name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.358513s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.358534s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.358561s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.358567s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.358579s   0ms DEBUG Indirect paths found: 0
    ├─   0.358587s   0ms WARN failed to advance: root(Query) -(accounts)- Query/accounts
  ┌─┘
  └─┐explore_path{path="root(Query) -(products)- Query/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.358617s   0ms DEBUG checking edge Query/products -(products)- Product/products
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products", edge="products"}
        ├─   0.358636s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.358651s   0ms DEBUG Advancing path root(Query) -(products)- Query/products with edge Query/products -(products)- Product/products
      ├─   0.358664s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.358679s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.358706s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.358712s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.358723s   0ms DEBUG Indirect paths found: 0
    ├─   0.358730s   0ms DEBUG advanced: root(Query) -(products)- Query/products
  ┌─┘
  ├─   0.358744s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.358765s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.358792s   0ms DEBUG checking edge Product/products -(name)- String/products
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="name"}
        ├─   0.358824s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.358849s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(name)- String/products
      ├─   0.358858s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(28)" }])
    ┌─┘
    ├─   0.358888s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.358929s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.358957s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.359009s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.359036s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.359056s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.359073s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.359105s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.359114s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.359123s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.359130s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.359137s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.359172s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.359228s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.359251s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.359277s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.359291s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.359360s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.359375s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                      ├─   0.359386s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.359396s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.359406s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.359419s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                      ├─   0.359431s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.359454s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.359488s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.359519s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.359540s   0ms DEBUG Paths for upc
                ├─   0.359552s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.359560s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.359578s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.359600s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.359627s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.359663s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.359680s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.359706s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.359760s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.359782s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.359800s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.359811s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.359829s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.359842s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.359849s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.359866s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.359883s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.359917s   0ms DEBUG Paths for upc
        ├─   0.359930s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.359939s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.359947s   1ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.359958s   1ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.359964s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.359979s   1ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.360009s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.360023s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.360044s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
        ├─   0.360092s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.360105s   1ms DEBUG No direct paths found
      ├─   0.360115s   1ms DEBUG going deeper
      ├─   0.360123s   1ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.360129s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.360135s   1ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.360152s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.360185s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.360204s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.360222s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.360230s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.360261s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.360300s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.360361s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.360389s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.360413s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.360424s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.360483s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.360493s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                      ├─   0.360502s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.360509s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.360517s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.360524s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                      ├─   0.360533s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.360540s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.360558s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.360576s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.360594s   0ms DEBUG Paths for upc
                ├─   0.360603s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.360610s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.360623s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.360630s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.360646s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.360684s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.360700s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.360724s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
                ├─   0.360772s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", edge="upc"}
                  ├─   0.360792s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.360814s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                ├─   0.360824s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
              ┌─┘
              ├─   0.360841s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.360850s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.360857s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.360864s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.360870s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.360879s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.360885s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
            ┌─┘
            ├─   0.360910s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
          ┌─┘
          ├─   0.360926s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
        ┌─┘
        ├─   0.360940s   0ms DEBUG Paths for upc
        ├─   0.360949s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.360957s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
        ├─   0.360963s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.360973s   0ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.360995s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.361019s   2ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.361047s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.361061s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.361081s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
        ├─   0.361128s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.361141s   2ms DEBUG No direct paths found
      ├─   0.361149s   2ms DEBUG going deeper
      ├─   0.361158s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
      ├─   0.361167s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.361173s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
      ├─   0.361178s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.361184s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
      ├─   0.361189s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
      ├─   0.361198s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.361204s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
      ├─   0.361210s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      ├─   0.361215s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.361220s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      ├─   0.361226s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.361233s   2ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.361239s   2ms INFO return=Ok([])
    ┌─┘
    ├─   0.361251s   2ms DEBUG Indirect paths found: 0
    ├─   0.361259s   2ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(28)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.361306s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.361319s   0ms DEBUG Processing edge: root(Query) -(products)- Query/products
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.361331s   0ms DEBUG Processing edge: Query/products -(products)- Product/products
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.361343s   0ms DEBUG Processing edge: Product/products -(name)- String/products
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.361363s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.361374s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.361385s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="products", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="products", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.361515s   0ms DEBUG adding output field 'products' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="name", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
              ├─   0.361549s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.361627s   0ms DEBUG Done
├─   0.361637s   0ms DEBUG found roots
├─   0.361642s   0ms DEBUG print graph
├─   0.361647s   0ms DEBUG Nodes:
│ [1] Query/products {} → {products{name}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="products"}
    └─┐execute{subgraph_name="products"}
      ├─   0.362028s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.366299s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.366653s DEBUG execution result: ExecutionResult { data: Some(Object {"products": Array [Object {"name": String("p-name-1")}, Object {"name": String("p-name-2")}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("products"), "operationKind": String("query"), "operation": String("{products{name}}")}}}) }
   0.369401s DEBUG original document: query {
  products {
    price
  }
}

   0.369495s DEBUG normalized document: query{products{price}}

   0.369506s DEBUG executable operation: query{products{price}}
┐walk_operation{}
├─   0.369844s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="products", leaf=false}
  ├─   0.369892s   0ms DEBUG Trying to advance to: products{price} through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.369941s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.369962s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.369987s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.369994s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.370006s   0ms DEBUG Indirect paths found: 0
    ├─   0.370015s   0ms WARN failed to advance: root(Query) -(accounts)- Query/accounts
  ┌─┘
  └─┐explore_path{path="root(Query) -(products)- Query/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.370051s   0ms DEBUG checking edge Query/products -(products)- Product/products
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products", edge="products"}
        ├─   0.370070s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.370084s   0ms DEBUG Advancing path root(Query) -(products)- Query/products with edge Query/products -(products)- Product/products
      ├─   0.370094s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.370109s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.370130s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.370135s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.370146s   0ms DEBUG Indirect paths found: 0
    ├─   0.370153s   0ms DEBUG advanced: root(Query) -(products)- Query/products
  ┌─┘
  ├─   0.370167s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="price", leaf=true}
  ├─   0.370187s   0ms DEBUG Trying to advance to: price through 1 possible paths
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.370213s   0ms DEBUG checking edge Product/products -(price)- Int/products
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="price"}
        ├─   0.370229s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.370244s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(price)- Int/products
      ├─   0.370252s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(29)" }])
    ┌─┘
    ├─   0.370265s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.370285s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.370307s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.370343s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.370362s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.370380s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.370389s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.370419s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.370433s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.370442s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.370449s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.370456s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.370476s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.370532s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.370569s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.370591s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.370602s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.370637s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.370657s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                      ├─   0.370665s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.370672s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.370680s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.370686s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                      ├─   0.370695s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.370702s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.370721s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.370761s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.370782s   0ms DEBUG Paths for upc
                ├─   0.370793s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.370801s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.370817s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.370825s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.370841s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.370875s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.370908s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.370938s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.370994s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.371016s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.371034s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.371046s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.371065s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.371077s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.371083s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.371101s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.371118s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.371133s   0ms DEBUG Paths for upc
        ├─   0.371141s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.371149s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.371156s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.371166s   0ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.371174s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.371188s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.371213s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.371228s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.371248s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
        ├─   0.371292s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.371305s   1ms DEBUG No direct paths found
      ├─   0.371314s   1ms DEBUG going deeper
      ├─   0.371322s   1ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.371328s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.371334s   1ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.371351s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.371384s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.371402s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.371419s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.371427s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.371457s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.371476s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.371512s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.371532s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.371552s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.371561s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.371593s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.371601s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                      ├─   0.371609s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.371617s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.371624s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.371631s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                      ├─   0.371640s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.371647s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.371664s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.371682s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.371701s   0ms DEBUG Paths for upc
                ├─   0.371710s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.371717s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.371728s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.371754s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.371780s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.371811s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.371827s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.371850s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
                ├─   0.371921s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", edge="upc"}
                  ├─   0.371942s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.371961s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                ├─   0.371971s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
              ┌─┘
              ├─   0.371989s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.371999s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.372008s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.372015s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.372022s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.372031s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.372037s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
            ┌─┘
            ├─   0.372055s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
          ┌─┘
          ├─   0.372071s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
        ┌─┘
        ├─   0.372106s   0ms DEBUG Paths for upc
        ├─   0.372118s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.372127s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
        ├─   0.372135s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.372145s   0ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.372162s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.372186s   1ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.372214s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.372228s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.372249s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
        ├─   0.372313s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.372332s   2ms DEBUG No direct paths found
      ├─   0.372341s   2ms DEBUG going deeper
      ├─   0.372351s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
      ├─   0.372359s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.372365s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
      ├─   0.372371s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.372377s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
      ├─   0.372384s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
      ├─   0.372394s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.372399s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
      ├─   0.372405s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      ├─   0.372410s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.372415s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      ├─   0.372421s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.372428s   2ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.372446s   2ms INFO return=Ok([])
    ┌─┘
    ├─   0.372465s   2ms DEBUG Indirect paths found: 0
    ├─   0.372477s   2ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(29)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.372541s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.372556s   0ms DEBUG Processing edge: root(Query) -(products)- Query/products
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.372568s   0ms DEBUG Processing edge: Query/products -(products)- Product/products
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.372580s   0ms DEBUG Processing edge: Product/products -(price)- Int/products
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.372600s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.372611s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.372622s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="products", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="products", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.372758s   0ms DEBUG adding output field 'products' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="price", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
              ├─   0.372793s   0ms DEBUG adding output field 'price' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.372859s   0ms DEBUG Done
├─   0.372869s   0ms DEBUG found roots
├─   0.372874s   0ms DEBUG print graph
├─   0.372879s   0ms DEBUG Nodes:
│ [1] Query/products {} → {products{price}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="products"}
    └─┐execute{subgraph_name="products"}
      ├─   0.373300s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.375453s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.375770s DEBUG execution result: ExecutionResult { data: Some(Object {"products": Array [Object {"price": Number(11)}, Object {"price": Number(22)}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("products"), "operationKind": String("query"), "operation": String("{products{price}}")}}}) }
   0.378510s DEBUG original document: query {
  products {
    shippingEstimate
  }
}

   0.378596s DEBUG normalized document: query{products{shippingEstimate}}

   0.378607s DEBUG executable operation: query{products{shippingEstimate}}
┐walk_operation{}
├─   0.378926s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="products", leaf=false}
  ├─   0.378978s   0ms DEBUG Trying to advance to: products{shippingEstimate} through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.379042s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379066s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.379109s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.379120s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379135s   0ms DEBUG Indirect paths found: 0
    ├─   0.379146s   0ms WARN failed to advance: root(Query) -(accounts)- Query/accounts
  ┌─┘
  └─┐explore_path{path="root(Query) -(products)- Query/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.379197s   0ms DEBUG checking edge Query/products -(products)- Product/products
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products", edge="products"}
        ├─   0.379217s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.379232s   0ms DEBUG Advancing path root(Query) -(products)- Query/products with edge Query/products -(products)- Product/products
      ├─   0.379243s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.379259s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.379281s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.379287s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379298s   0ms DEBUG Indirect paths found: 0
    ├─   0.379305s   0ms DEBUG advanced: root(Query) -(products)- Query/products
  ┌─┘
  ├─   0.379321s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="shippingEstimate", leaf=true}
  ├─   0.379361s   0ms DEBUG Trying to advance to: shippingEstimate through 1 possible paths
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.379398s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379413s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.379433s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.379470s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.379529s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.379550s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.379569s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.379580s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.379612s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.379634s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.379647s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.379654s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.379662s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.379696s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.379736s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.379758s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.379780s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.379791s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.379825s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.379833s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                      ├─   0.379856s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.379867s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.379874s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.379882s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                      ├─   0.379892s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.379899s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.379922s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.379958s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.379979s   0ms DEBUG Paths for upc
                ├─   0.379991s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.379999s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.380017s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.380036s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.380062s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.380096s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.380115s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.380157s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.380229s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.380259s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.380280s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.380292s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.380311s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.380324s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.380330s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.380352s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.380369s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.380384s   0ms DEBUG Paths for upc
        ├─   0.380392s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.380400s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.380407s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.380418s   0ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.380423s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.380438s   1ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.380463s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.380477s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.380497s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
        ├─   0.380543s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.380555s   1ms DEBUG No direct paths found
      ├─   0.380565s   1ms DEBUG going deeper
      ├─   0.380573s   1ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.380578s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.380584s   1ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.380601s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.380634s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.380652s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.380669s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.380677s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.380707s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.380726s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.380767s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.380787s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.380806s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.380815s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.380846s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.380854s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                      ├─   0.380862s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.380870s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.380877s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.380884s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                      ├─   0.380893s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.380900s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.380917s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.380935s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.380950s   0ms DEBUG Paths for upc
                ├─   0.380960s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.380966s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.380978s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.380984s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.381017s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.381054s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.381071s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.381096s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
                ├─   0.381147s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", edge="upc"}
                  ├─   0.381168s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.381187s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                ├─   0.381197s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
              ┌─┘
              ├─   0.381214s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.381224s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.381231s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.381238s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.381244s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.381254s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.381260s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
            ┌─┘
            ├─   0.381298s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
          ┌─┘
          ├─   0.381318s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
        ┌─┘
        ├─   0.381348s   0ms DEBUG Paths for upc
        ├─   0.381361s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.381371s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
        ├─   0.381379s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.381389s   0ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.381396s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.381411s   1ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.381438s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.381453s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.381474s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
        ├─   0.381521s   0ms DEBUG checking edge Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="shippingEstimate"}
          ├─   0.381564s   0ms DEBUG checking requirements {price weight} for edge 'Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.381623s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.381668s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.381693s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.381753s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.381787s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.381811s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.381836s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.381887s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.381898s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                        ├─   0.381906s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.381931s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.382005s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.382056s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.382100s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.382130s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.382199s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.382212s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "products", "inventory"})
                                ├─   0.382222s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.382230s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"reviews", "products", "inventory"})
                                ├─   0.382241s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.382249s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "products", "inventory"})
                                ├─   0.382260s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.382277s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.382305s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.382336s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.382355s   0ms DEBUG Paths for upc
                          ├─   0.382368s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.382376s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.382389s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.382397s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.382416s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.382468s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.382489s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.382532s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=3005}
                          ├─   0.382599s   0ms DEBUG checking edge Product/products -(upc)- String/products
                          └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="upc"}
                            ├─   0.382625s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.382647s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                          ├─   0.382657s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                        ┌─┘
                        ├─   0.382678s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.382689s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.382698s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                        ├─   0.382709s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.382716s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                      ┌─┘
                      ├─   0.382753s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                    ┌─┘
                    ├─   0.382781s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.382799s   1ms DEBUG Paths for upc
                  ├─   0.382812s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.382822s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
                  ├─   0.382830s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.382842s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.382860s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.382886s   1ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.382918s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.382935s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.382959s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=3005}
                  ├─   0.383015s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.383030s   1ms DEBUG No direct paths found
                ├─   0.383040s   1ms DEBUG going deeper
                ├─   0.383049s   1ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.383071s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.383129s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.383160s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.383184s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.383196s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.383234s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.383257s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.383306s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.383332s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.383355s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.383367s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.383405s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.383415s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "products", "inventory"})
                                ├─   0.383424s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.383432s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"reviews", "products", "inventory"})
                                ├─   0.383441s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.383450s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "products", "inventory"})
                                ├─   0.383460s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.383468s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.383488s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.383509s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.383527s   0ms DEBUG Paths for upc
                          ├─   0.383538s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.383546s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.383559s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.383567s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.383586s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.383617s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.383635s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.383664s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=3005}
                          ├─   0.383721s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                          └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", edge="upc"}
                            ├─   0.383746s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.383767s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                          ├─   0.383777s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                        ┌─┘
                        ├─   0.383797s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.383808s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.383816s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                        ├─   0.383824s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.383832s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                        ├─   0.383841s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.383849s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                      ┌─┘
                      ├─   0.383869s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                    ┌─┘
                    ├─   0.383888s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.383905s   0ms DEBUG Paths for upc
                  ├─   0.383915s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.383925s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
                  ├─   0.383933s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.383944s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.383950s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.383966s   2ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.383994s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.384011s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.384035s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=3005}
                  ├─   0.384087s   0ms DEBUG checking edge Product/products -(price)- Int/products
                  └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="price"}
                    ├─   0.384112s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.384131s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(price)- Int/products
                  ├─   0.384141s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(29)" }])
                ┌─┘
                ├─   0.384158s   2ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                ├─   0.384168s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                ├─   0.384175s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
                ├─   0.384184s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                ├─   0.384190s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                ├─   0.384197s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                ├─   0.384206s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.384213s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                ├─   0.384220s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                ├─   0.384230s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.384236s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(29)" }])
              ┌─┘
              ├─   0.384255s   2ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(29)" }], [])))
            ┌─┘
            ├─   0.384270s   2ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(29)" }], [])))
          ┌─┘
          ├─   0.384300s   2ms DEBUG Paths for price
          ├─   0.384316s   2ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(price)- Int/products is valid
          ├─   0.384323s   2ms DEBUG Found 1 best paths for this leaf requirement
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.384369s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.384401s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.384424s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.384462s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.384485s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.384506s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.384517s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.384552s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.384560s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                        ├─   0.384570s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.384592s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.384636s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.384661s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.384683s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.384695s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.384733s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.384742s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "products", "inventory"})
                                ├─   0.384752s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.384760s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"reviews", "products", "inventory"})
                                ├─   0.384768s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.384776s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "products", "inventory"})
                                ├─   0.384786s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.384795s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.384815s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.384835s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.384853s   0ms DEBUG Paths for upc
                          ├─   0.384864s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.384872s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.384884s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.384891s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.384910s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.384941s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.384959s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.384988s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=3005}
                          ├─   0.385044s   0ms DEBUG checking edge Product/products -(upc)- String/products
                          └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="upc"}
                            ├─   0.385069s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.385090s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                          ├─   0.385100s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                        ┌─┘
                        ├─   0.385120s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.385130s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.385138s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                        ├─   0.385148s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.385156s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                      ┌─┘
                      ├─   0.385175s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                    ┌─┘
                    ├─   0.385194s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.385215s   0ms DEBUG Paths for upc
                  ├─   0.385226s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.385235s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
                  ├─   0.385243s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.385254s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.385260s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.385277s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.385305s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.385323s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.385347s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=3005}
                  ├─   0.385414s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.385436s   1ms DEBUG No direct paths found
                ├─   0.385446s   1ms DEBUG going deeper
                ├─   0.385456s   1ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.385483s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.385525s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.385561s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.385590s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.385611s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.385650s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.385674s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.385753s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.385788s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.385814s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.385854s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.385923s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.385951s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "products", "inventory"})
                                ├─   0.385961s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.385969s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"reviews", "products", "inventory"})
                                ├─   0.385978s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.385986s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "products", "inventory"})
                                ├─   0.385997s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.386005s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.386028s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.386050s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.386068s   0ms DEBUG Paths for upc
                          ├─   0.386080s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.386088s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.386102s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.386110s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.386129s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.386162s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.386180s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.386212s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=3005}
                          ├─   0.386274s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                          └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", edge="upc"}
                            ├─   0.386324s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.386349s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                          ├─   0.386361s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                        ┌─┘
                        ├─   0.386383s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.386395s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.386403s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                        ├─   0.386413s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.386420s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                        ├─   0.386431s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.386438s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                      ┌─┘
                      ├─   0.386472s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                    ┌─┘
                    ├─   0.386500s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.386518s   1ms DEBUG Paths for upc
                  ├─   0.386530s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.386559s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
                  ├─   0.386573s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.386586s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.386593s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.386614s   2ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.386668s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.386687s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.386713s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=3005}
                  ├─   0.386784s   0ms DEBUG checking edge Product/products -(weight)- Int/products
                  └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="weight"}
                    ├─   0.386816s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.386838s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(weight)- Int/products
                  ├─   0.386849s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(26)" }])
                ┌─┘
                ├─   0.386882s   2ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                ├─   0.386893s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                ├─   0.386900s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
                ├─   0.386908s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                ├─   0.386915s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                ├─   0.386937s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                ├─   0.386949s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.386956s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                ├─   0.386962s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                ├─   0.386974s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.386988s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(26)" }])
              ┌─┘
              ├─   0.387013s   2ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(26)" }], [])))
            ┌─┘
            ├─   0.387045s   2ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(26)" }], [])))
          ┌─┘
          ├─   0.387065s   5ms DEBUG Paths for weight
          ├─   0.387078s   5ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(weight)- Int/products is valid
          ├─   0.387084s   5ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.387097s   5ms DEBUG path Product/inventory -(🔑🧩{upc})- Product/products -(price)- Int/products is valid
          ├─   0.387118s   5ms DEBUG path Product/inventory -(🔑🧩{upc})- Product/products -(weight)- Int/products is valid
          ├─   0.387128s   5ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(29)" },  { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(26)" }]))
        ┌─┘
        ├─   0.387152s   5ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(29)" }, root_node="Product/inventory"}
          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=2}
            ├─   0.387181s   0ms DEBUG Building root query tree node: Product/inventory
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.387196s   0ms DEBUG Processing edge: Product/inventory -(🔑🧩{upc})- Product/products
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.387212s   0ms DEBUG Processing edge: Product/products -(price)- Int/products
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.387234s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.387248s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(26)" }, root_node="Product/inventory"}
          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=2}
            ├─   0.387290s   0ms DEBUG Building root query tree node: Product/inventory
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.387304s   0ms DEBUG Processing edge: Product/inventory -(🔑🧩{upc})- Product/products
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.387319s   0ms DEBUG Processing edge: Product/products -(weight)- Int/products
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.387340s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.387353s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐merge_trees{tree_count=2}
        ┌─┘
        ├─   0.387404s   5ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(21)" }])
      ┌─┘
      ├─   0.387440s   8ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/inventory
      ├─   0.387453s   8ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.387460s   8ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
      ├─   0.387466s   8ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      ├─   0.387472s   8ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.387478s   8ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      ├─   0.387485s   8ms DEBUG Ignoring. Already visited similar edge
      ├─   0.387494s   8ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.387500s   8ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(21)" }])
    ┌─┘
    ├─   0.387519s   8ms DEBUG Indirect paths found: 1
    ├─   0.387529s   8ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2007, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(21)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.387580s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.387593s   0ms DEBUG Processing edge: root(Query) -(products)- Query/products
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.387605s   0ms DEBUG Processing edge: Query/products -(products)- Product/products
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.387618s   0ms DEBUG Processing edge: Product/products -(🔑🧩{upc})- Product/inventory
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.387632s   0ms DEBUG Processing edge: Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.387652s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.387664s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.387676s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.387686s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="products", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="products", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.387847s   0ms DEBUG adding output field 'products' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/products -(🔑🧩{upc})- Product/inventory", parent_fetch_step_index=1}
              ├─   0.387888s   0ms DEBUG created a new fetch step [2] subgraph(inventory) type(Product) requirement() key({upc}) in children of 1
              ├─   0.387897s   0ms DEBUG adding input requirement '{upc}' to fetch step [2]
              ├─   0.387908s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.387915s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="upc", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
                      ├─   0.387976s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.388001s   0ms DEBUG adding output field 'upc' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/inventory"}
                    └─┐can_satisfy_edge{path="Product/inventory", edge="upc"}
                      ├─   0.388130s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/inventory", current_cost=0}
                            ├─   0.388171s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                            └─┐can_satisfy_edge{path="Product/inventory", edge="upc"}
                              ├─   0.388192s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.388213s   0ms DEBUG Advancing path Product/inventory with edge Product/inventory -(upc)- String/inventory
                            ├─   0.388225s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(24)" }])
                          ┌─┘
                          ├─   0.388247s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(24)" }], [])))
                        ┌─┘
                        ├─   0.388265s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(24)" }], [])))
                      ┌─┘
                      ├─   0.388288s   0ms DEBUG Paths for upc
                      ├─   0.388297s   0ms DEBUG   Path Product/inventory -(upc)- String/inventory is valid
                      ├─   0.388305s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.388317s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                      ├─   0.388324s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.388351s   0ms DEBUG Key to re-enter: {upc}
                  ├─   0.388360s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.388371s   0ms DEBUG created a new fetch step [3] subgraph(inventory) type(Product) requirement({price weight}) in children of 1
                  ├─   0.388381s   0ms DEBUG Adding {price weight} to fetch([3]).input
                  ├─   0.388390s   0ms DEBUG Adding {upc} to fetch([3]).input
                  ├─   0.388399s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.388424s   0ms DEBUG Adding {upc} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.388472s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/inventory -(🔑🧩{upc})- Product/products", parent_fetch_step_index=4}
                        ├─   0.388513s   0ms DEBUG created a new fetch step [5] subgraph(products) type(Product) requirement() key({upc}) in children of 4
                        ├─   0.388522s   0ms DEBUG adding input requirement '{upc}' to fetch step [5]
                        ├─   0.388530s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.388538s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="upc", leaf=true, list=false, response_path="products.@", fetch_path=""}
                                ├─   0.388640s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.388683s   0ms DEBUG adding output field 'upc' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=5}
                          └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="Product", field="price", leaf=true, list=false, response_path="products.@", fetch_path=""}
                            ├─   0.388800s   0ms DEBUG adding output field 'price' to fetch step [5]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                            ┌─┘
                          ┌─┘
                          └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="Product", field="weight", leaf=true, list=false, response_path="products.@", fetch_path=""}
                            ├─   0.388848s   0ms DEBUG adding output field 'weight' to fetch step [5]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.388917s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  ├─   0.388958s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.389042s   1ms DEBUG Done
├─   0.389049s   1ms DEBUG found roots
├─   0.389054s   1ms DEBUG print graph
├─   0.389059s   1ms DEBUG Nodes:
│ [1] Query/products {} → {products{__typename upc}} at $.
│ [2] Product/inventory {__typename upc} → {} at $.products.@
│ [3] Product/inventory {__typename price weight upc} → {shippingEstimate} at $.products.@
│ [4] Product/inventory {__typename upc} → {__typename upc} at $.products.@
│ [5] Product/products {__typename upc} → {price weight} at $.products.@
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│       [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.389104s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.389141s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.389208s   0ms DEBUG optimization found: merge parent [1] with child [5]
    └─┐perform_fetch_step_merge{}
      ├─   0.389223s   0ms DEBUG merging fetch steps [1] and [5]
      └─┐connect{parent=1, child=3}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.389273s   0ms DEBUG Found optimization: 3 <- 2
    └─┐perform_fetch_step_merge{}
      ├─   0.389287s   0ms DEBUG merging fetch steps [3] and [2]
      └─┐connect{parent=1, child=3}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="products"}
      └─┐execute{subgraph_name="products"}
        ├─   0.389706s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.391722s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"products": Array [Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1)}, Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2)}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1)}, Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(11)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(1)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(22)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(2)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="inventory"}
        └─┐execute{subgraph_name="inventory"}
          ├─   0.392350s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.394171s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.394480s DEBUG execution result: ExecutionResult { data: Some(Object {"products": Array [Object {"shippingEstimate": Number(110)}, Object {"shippingEstimate": Number(440)}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("products"), "operationKind": String("query"), "operation": String("{products{__typename upc price weight}}")}, Object {"kind": String("Flatten"), "path": Array [String("products"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("inventory"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{shippingEstimate}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("weight")}, Object {"kind": String("Field"), "name": String("upc")}]}]}}]}}}) }
   0.397023s DEBUG original document: query {
  products {
    shippingEstimate
    weight
    price
  }
}

   0.397111s DEBUG normalized document: query{products{shippingEstimate weight price}}

   0.397120s DEBUG executable operation: query{products{shippingEstimate weight price}}
┐walk_operation{}
├─   0.397462s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="products", leaf=false}
  ├─   0.397527s   0ms DEBUG Trying to advance to: products{shippingEstimate weight price} through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.397589s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.397612s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.397641s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.397661s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.397680s   0ms DEBUG Indirect paths found: 0
    ├─   0.397691s   0ms WARN failed to advance: root(Query) -(accounts)- Query/accounts
  ┌─┘
  └─┐explore_path{path="root(Query) -(products)- Query/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.397728s   0ms DEBUG checking edge Query/products -(products)- Product/products
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products", edge="products"}
        ├─   0.397750s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.397765s   0ms DEBUG Advancing path root(Query) -(products)- Query/products with edge Query/products -(products)- Product/products
      ├─   0.397777s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.397793s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.397817s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.397823s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.397834s   0ms DEBUG Indirect paths found: 0
    ├─   0.397841s   0ms DEBUG advanced: root(Query) -(products)- Query/products
  ┌─┘
  ├─   0.397856s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="price", leaf=true}
  ├─   0.397879s   0ms DEBUG Trying to advance to: price through 1 possible paths
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.397907s   0ms DEBUG checking edge Product/products -(price)- Int/products
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="price"}
        ├─   0.397924s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.397939s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(price)- Int/products
      ├─   0.397947s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(29)" }])
    ┌─┘
    ├─   0.397961s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.397983s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.398003s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.398049s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.398070s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.398088s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.398097s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.398133s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.398142s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.398150s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.398157s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.398164s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.398184s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.398223s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.398245s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.398264s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.398273s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.398306s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.398314s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                      ├─   0.398323s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.398330s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.398337s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.398345s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                      ├─   0.398357s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.398364s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.398383s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.398423s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.398444s   0ms DEBUG Paths for upc
                ├─   0.398456s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.398464s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.398497s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.398512s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.398535s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.398570s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.398589s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.398618s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.398674s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.398696s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.398714s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.398728s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.398750s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.398764s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.398771s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.398793s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.398811s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.398849s   0ms DEBUG Paths for upc
        ├─   0.398863s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.398872s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.398880s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.398892s   0ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.398898s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.398915s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.398962s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.398989s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.399021s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
        ├─   0.399086s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.399100s   1ms DEBUG No direct paths found
      ├─   0.399111s   1ms DEBUG going deeper
      ├─   0.399120s   1ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.399126s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.399132s   1ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.399150s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.399184s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.399204s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.399222s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.399251s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.399298s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.399320s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.399363s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.399402s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.399430s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.399442s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.399493s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.399505s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                      ├─   0.399514s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.399522s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.399530s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.399537s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                      ├─   0.399546s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.399553s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.399586s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.399611s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.399627s   0ms DEBUG Paths for upc
                ├─   0.399638s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.399645s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.399658s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.399665s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.399682s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.399712s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.399728s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.399753s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
                ├─   0.399821s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", edge="upc"}
                  ├─   0.399856s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.399877s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                ├─   0.399889s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
              ┌─┘
              ├─   0.399907s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.399917s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.399925s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.399931s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.399938s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.399948s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.399954s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
            ┌─┘
            ├─   0.399972s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
          ┌─┘
          ├─   0.399989s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
        ┌─┘
        ├─   0.400005s   0ms DEBUG Paths for upc
        ├─   0.400013s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.400022s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
        ├─   0.400029s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.400039s   0ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.400061s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.400085s   2ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.400129s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.400146s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.400169s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
        ├─   0.400219s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.400233s   2ms DEBUG No direct paths found
      ├─   0.400242s   2ms DEBUG going deeper
      ├─   0.400251s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
      ├─   0.400259s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.400265s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
      ├─   0.400271s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.400277s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
      ├─   0.400282s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
      ├─   0.400292s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.400297s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
      ├─   0.400303s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      ├─   0.400308s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.400314s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      ├─   0.400319s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.400327s   2ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.400333s   2ms INFO return=Ok([])
    ┌─┘
    ├─   0.400345s   2ms DEBUG Indirect paths found: 0
    ├─   0.400356s   2ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products
  ┌─┘
┌─┘
└─┐process_field{field_name="weight", leaf=true}
  ├─   0.400386s   0ms DEBUG Trying to advance to: weight through 1 possible paths
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.400413s   0ms DEBUG checking edge Product/products -(weight)- Int/products
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="weight"}
        ├─   0.400429s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.400444s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(weight)- Int/products
      ├─   0.400452s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(26)" }])
    ┌─┘
    ├─   0.400467s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.400487s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.400505s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.400537s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.400572s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.400598s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.400609s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.400643s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.400675s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.400687s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.400693s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.400700s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.400726s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.400767s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.400789s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.400810s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.400821s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.400855s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.400863s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                      ├─   0.400871s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.400878s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.400885s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.400892s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                      ├─   0.400902s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.400909s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.400927s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.400964s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.400998s   0ms DEBUG Paths for upc
                ├─   0.401016s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.401023s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.401036s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.401048s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.401066s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.401095s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.401112s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.401153s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.401225s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.401265s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.401292s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.401304s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.401323s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.401335s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.401350s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.401368s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.401384s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.401400s   0ms DEBUG Paths for upc
        ├─   0.401408s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.401416s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.401423s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.401434s   0ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.401439s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.401454s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.401489s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.401503s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.401524s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
        ├─   0.401567s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.401580s   1ms DEBUG No direct paths found
      ├─   0.401589s   1ms DEBUG going deeper
      ├─   0.401596s   1ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.401602s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.401608s   1ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.401627s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.401659s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.401702s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.401723s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.401733s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.401766s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.401786s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.401826s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.401846s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.401866s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.401876s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.401909s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.401931s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                      ├─   0.401944s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.401952s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.401959s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.401966s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                      ├─   0.401976s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.401983s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.402005s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.402025s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.402049s   0ms DEBUG Paths for upc
                ├─   0.402075s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.402085s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.402098s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.402112s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.402133s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.402163s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.402179s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.402203s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
                ├─   0.402256s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", edge="upc"}
                  ├─   0.402288s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.402306s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                ├─   0.402317s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
              ┌─┘
              ├─   0.402334s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.402344s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.402351s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.402357s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.402364s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.402373s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.402380s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
            ┌─┘
            ├─   0.402397s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
          ┌─┘
          ├─   0.402434s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
        ┌─┘
        ├─   0.402454s   0ms DEBUG Paths for upc
        ├─   0.402464s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.402473s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
        ├─   0.402480s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.402491s   0ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.402496s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.402511s   2ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.402540s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.402554s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.402576s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
        ├─   0.402620s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.402653s   2ms DEBUG No direct paths found
      ├─   0.402664s   2ms DEBUG going deeper
      ├─   0.402674s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
      ├─   0.402682s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.402688s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
      ├─   0.402693s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.402699s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
      ├─   0.402705s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
      ├─   0.402714s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.402719s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
      ├─   0.402725s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      ├─   0.402730s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.402736s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      ├─   0.402742s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.402749s   2ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.402755s   2ms INFO return=Ok([])
    ┌─┘
    ├─   0.402768s   2ms DEBUG Indirect paths found: 0
    ├─   0.402778s   2ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products
  ┌─┘
┌─┘
└─┐process_field{field_name="shippingEstimate", leaf=true}
  ├─   0.402811s   0ms DEBUG Trying to advance to: shippingEstimate through 1 possible paths
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.402858s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.402874s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.402893s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.402911s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.402960s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.402988s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.403008s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.403019s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.403051s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.403059s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.403066s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.403073s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.403079s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.403099s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.403146s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.403166s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.403185s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.403195s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.403227s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.403235s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                      ├─   0.403243s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.403251s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.403258s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.403265s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                      ├─   0.403274s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.403281s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.403299s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.403317s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.403333s   0ms DEBUG Paths for upc
                ├─   0.403344s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.403350s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.403362s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.403369s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.403385s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.403413s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.403429s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.403454s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.403510s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.403530s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.403548s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.403558s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.403576s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.403587s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.403594s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.403611s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.403627s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.403642s   0ms DEBUG Paths for upc
        ├─   0.403651s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.403659s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.403665s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.403674s   0ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.403680s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.403694s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.403718s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.403732s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.403753s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
        ├─   0.403796s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.403809s   0ms DEBUG No direct paths found
      ├─   0.403816s   0ms DEBUG going deeper
      ├─   0.403824s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.403829s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.403835s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.403852s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.403887s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.403907s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.403925s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.403950s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.403998s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.404020s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.404059s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.404093s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.404121s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.404132s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.404170s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.404180s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                      ├─   0.404189s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.404196s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.404204s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.404211s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                      ├─   0.404220s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.404227s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.404246s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.404272s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.404288s   0ms DEBUG Paths for upc
                ├─   0.404298s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.404304s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.404316s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.404323s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.404339s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.404388s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.404417s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.404460s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
                ├─   0.404521s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", edge="upc"}
                  ├─   0.404542s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.404561s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                ├─   0.404571s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
              ┌─┘
              ├─   0.404589s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.404599s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.404606s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.404614s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.404621s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.404630s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.404637s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
            ┌─┘
            ├─   0.404655s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
          ┌─┘
          ├─   0.404671s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
        ┌─┘
        ├─   0.404705s   0ms DEBUG Paths for upc
        ├─   0.404718s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.404727s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
        ├─   0.404744s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.404760s   0ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.404766s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.404785s   1ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.404829s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.404845s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.404869s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
        ├─   0.404933s   0ms DEBUG checking edge Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="shippingEstimate"}
          ├─   0.404962s   0ms DEBUG checking requirements {price weight} for edge 'Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.405013s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.405055s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.405078s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.405119s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.405161s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.405197s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.405210s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.405277s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.405288s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                        ├─   0.405297s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.405340s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.405403s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.405448s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.405481s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.405496s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.405558s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.405571s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"products", "inventory", "reviews"})
                                ├─   0.405581s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.405590s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory", "reviews"})
                                ├─   0.405599s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.405607s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory", "reviews"})
                                ├─   0.405618s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.405626s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.405651s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.405676s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.405695s   0ms DEBUG Paths for upc
                          ├─   0.405707s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.405716s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.405730s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.405749s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.405769s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.405803s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.405839s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.405877s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=3005}
                          ├─   0.405942s   0ms DEBUG checking edge Product/products -(upc)- String/products
                          └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="upc"}
                            ├─   0.405969s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.405991s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                          ├─   0.406002s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                        ┌─┘
                        ├─   0.406024s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.406036s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.406045s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                        ├─   0.406057s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.406065s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                      ┌─┘
                      ├─   0.406086s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                    ┌─┘
                    ├─   0.406107s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.406149s   1ms DEBUG Paths for upc
                  ├─   0.406165s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.406175s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
                  ├─   0.406198s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.406215s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.406222s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.406259s   1ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.406311s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.406333s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.406361s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=3005}
                  ├─   0.406431s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.406453s   1ms DEBUG No direct paths found
                ├─   0.406464s   1ms DEBUG going deeper
                ├─   0.406475s   1ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.406516s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.406602s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.406635s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.406658s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.406683s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.406733s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.406760s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.406807s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.406868s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.406901s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.406915s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.406973s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.406987s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"products", "inventory", "reviews"})
                                ├─   0.406997s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.407005s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory", "reviews"})
                                ├─   0.407014s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.407023s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory", "reviews"})
                                ├─   0.407033s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.407042s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.407066s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.407089s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.407108s   0ms DEBUG Paths for upc
                          ├─   0.407120s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.407128s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.407142s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.407150s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.407184s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.407223s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.407242s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.407303s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=3005}
                          ├─   0.407380s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                          └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", edge="upc"}
                            ├─   0.407407s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.407428s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                          ├─   0.407453s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                        ┌─┘
                        ├─   0.407483s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.407495s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.407506s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                        ├─   0.407514s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.407522s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                        ├─   0.407532s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.407539s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                      ┌─┘
                      ├─   0.407560s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                    ┌─┘
                    ├─   0.407589s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.407607s   1ms DEBUG Paths for upc
                  ├─   0.407618s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.407628s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
                  ├─   0.407636s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.407648s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.407668s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.407694s   2ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.407741s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.407769s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.407796s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=3005}
                  ├─   0.407851s   0ms DEBUG checking edge Product/products -(price)- Int/products
                  └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="price"}
                    ├─   0.407874s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.407894s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(price)- Int/products
                  ├─   0.407904s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(29)" }])
                ┌─┘
                ├─   0.407923s   2ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                ├─   0.407934s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                ├─   0.407942s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
                ├─   0.407950s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                ├─   0.407957s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                ├─   0.407964s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                ├─   0.407973s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.407980s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                ├─   0.407987s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                ├─   0.407997s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.408004s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(29)" }])
              ┌─┘
              ├─   0.408025s   3ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(29)" }], [])))
            ┌─┘
            ├─   0.408041s   3ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(29)" }], [])))
          ┌─┘
          ├─   0.408056s   3ms DEBUG Paths for price
          ├─   0.408102s   3ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(price)- Int/products is valid
          ├─   0.408112s   3ms DEBUG Found 1 best paths for this leaf requirement
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.408160s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.408195s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.408245s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.408327s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.408358s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.408382s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.408397s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.408493s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.408505s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                        ├─   0.408516s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.408543s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.408606s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.408649s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.408682s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.408696s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.408741s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.408754s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"products", "inventory", "reviews"})
                                ├─   0.408765s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.408773s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory", "reviews"})
                                ├─   0.408782s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.408790s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory", "reviews"})
                                ├─   0.408801s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.408810s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.408831s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.408852s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.408872s   0ms DEBUG Paths for upc
                          ├─   0.408884s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.408893s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.408906s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.408915s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.408933s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.408991s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.409012s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.409044s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=3005}
                          ├─   0.409113s   0ms DEBUG checking edge Product/products -(upc)- String/products
                          └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="upc"}
                            ├─   0.409139s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.409162s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                          ├─   0.409172s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                        ┌─┘
                        ├─   0.409194s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.409206s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.409216s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                        ├─   0.409228s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.409236s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                      ┌─┘
                      ├─   0.409257s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                    ┌─┘
                    ├─   0.409280s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.409299s   1ms DEBUG Paths for upc
                  ├─   0.409311s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.409323s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
                  ├─   0.409332s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.409362s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.409370s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.409392s   1ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.409424s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.409443s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.409494s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=3005}
                  ├─   0.409575s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.409597s   1ms DEBUG No direct paths found
                ├─   0.409612s   1ms DEBUG going deeper
                ├─   0.409646s   1ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.409699s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.409785s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.409841s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.409889s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.409916s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                        ├─   0.410016s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.410083s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.410191s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.410267s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.410305s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.410320s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                                ├─   0.410377s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.410387s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"products", "inventory", "reviews"})
                                ├─   0.410397s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.410407s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory", "reviews"})
                                ├─   0.410416s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.410424s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory", "reviews"})
                                ├─   0.410434s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.410443s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.410464s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.410485s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.410504s   0ms DEBUG Paths for upc
                          ├─   0.410515s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.410523s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.410537s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.410545s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.410564s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.410598s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.410616s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.410645s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=3005}
                          ├─   0.410735s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                          └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", edge="upc"}
                            ├─   0.410763s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.410785s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                          ├─   0.410795s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                        ┌─┘
                        ├─   0.410816s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.410836s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.410844s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                        ├─   0.410853s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.410860s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                        ├─   0.410870s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.410878s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                      ┌─┘
                      ├─   0.410899s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                    ┌─┘
                    ├─   0.410919s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.410937s   1ms DEBUG Paths for upc
                  ├─   0.410947s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.410957s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
                  ├─   0.410981s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.410999s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.411006s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.411028s   2ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.411059s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.411076s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.411101s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=3005}
                  ├─   0.411171s   0ms DEBUG checking edge Product/products -(weight)- Int/products
                  └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="weight"}
                    ├─   0.411203s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.411225s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(weight)- Int/products
                  ├─   0.411236s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(26)" }])
                ┌─┘
                ├─   0.411255s   3ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                ├─   0.411265s   3ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                ├─   0.411273s   3ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
                ├─   0.411281s   3ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                ├─   0.411288s   3ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                ├─   0.411295s   3ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                ├─   0.411304s   3ms DEBUG Ignoring. Already visited similar edge
                ├─   0.411311s   3ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                ├─   0.411318s   3ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                ├─   0.411328s   3ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.411335s   3ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(26)" }])
              ┌─┘
              ├─   0.411356s   3ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(26)" }], [])))
            ┌─┘
            ├─   0.411378s   3ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(39) --> EdgeIndex(26)" }], [])))
          ┌─┘
          ├─   0.411394s   6ms DEBUG Paths for weight
          ├─   0.411404s   6ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(weight)- Int/products is valid
          ├─   0.411410s   6ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.411423s   6ms DEBUG path Product/inventory -(🔑🧩{upc})- Product/products -(price)- Int/products is valid
          ├─   0.411430s   6ms DEBUG path Product/inventory -(🔑🧩{upc})- Product/products -(weight)- Int/products is valid
          ├─   0.411436s   6ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(29)" },  { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(26)" }]))
        ┌─┘
        ├─   0.411481s   6ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(29)" }, root_node="Product/inventory"}
          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=2}
            ├─   0.411528s   0ms DEBUG Building root query tree node: Product/inventory
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.411547s   0ms DEBUG Processing edge: Product/inventory -(🔑🧩{upc})- Product/products
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.411564s   0ms DEBUG Processing edge: Product/products -(price)- Int/products
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.411590s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.411623s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(26)" }, root_node="Product/inventory"}
          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=2}
            ├─   0.411684s   0ms DEBUG Building root query tree node: Product/inventory
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.411700s   0ms DEBUG Processing edge: Product/inventory -(🔑🧩{upc})- Product/products
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.411715s   0ms DEBUG Processing edge: Product/products -(weight)- Int/products
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.411738s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.411751s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐merge_trees{tree_count=2}
        ┌─┘
        ├─   0.411805s   6ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(21)" }])
      ┌─┘
      ├─   0.411846s   8ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/inventory
      ├─   0.411860s   8ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.411868s   8ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
      ├─   0.411874s   8ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      ├─   0.411881s   9ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.411887s   9ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      ├─   0.411894s   9ms DEBUG Ignoring. Already visited similar edge
      ├─   0.411904s   9ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.411910s   9ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(21)" }])
    ┌─┘
    ├─   0.411932s   9ms DEBUG Indirect paths found: 1
    ├─   0.411957s   9ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(29)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.412032s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.412051s   0ms DEBUG Processing edge: root(Query) -(products)- Query/products
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.412065s   0ms DEBUG Processing edge: Query/products -(products)- Product/products
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.412080s   0ms DEBUG Processing edge: Product/products -(price)- Int/products
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.412102s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.412113s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.412125s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(26)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.412181s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.412195s   0ms DEBUG Processing edge: root(Query) -(products)- Query/products
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.412208s   0ms DEBUG Processing edge: Query/products -(products)- Product/products
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.412220s   0ms DEBUG Processing edge: Product/products -(weight)- Int/products
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.412242s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.412253s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.412264s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2007, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(21)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.412302s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.412314s   0ms DEBUG Processing edge: root(Query) -(products)- Query/products
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.412327s   0ms DEBUG Processing edge: Query/products -(products)- Product/products
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.412340s   0ms DEBUG Processing edge: Product/products -(🔑🧩{upc})- Product/inventory
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.412354s   0ms DEBUG Processing edge: Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.412374s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.412386s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.412398s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.412409s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="products", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="products", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.412599s   0ms DEBUG adding output field 'products' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="price", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
              ├─   0.412642s   0ms DEBUG adding output field 'price' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="weight", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
              ├─   0.412689s   0ms DEBUG adding output field 'weight' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_entity_move_edge{edge="Product/products -(🔑🧩{upc})- Product/inventory", parent_fetch_step_index=1}
              ├─   0.412762s   0ms DEBUG created a new fetch step [2] subgraph(inventory) type(Product) requirement() key({upc}) in children of 1
              ├─   0.412771s   0ms DEBUG adding input requirement '{upc}' to fetch step [2]
              ├─   0.412779s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.412788s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="upc", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
                      ├─   0.412849s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.412874s   0ms DEBUG adding output field 'upc' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="Product/inventory"}
                    └─┐can_satisfy_edge{path="Product/inventory", edge="upc"}
                      ├─   0.413019s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/inventory", current_cost=0}
                            ├─   0.413061s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                            └─┐can_satisfy_edge{path="Product/inventory", edge="upc"}
                              ├─   0.413083s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.413103s   0ms DEBUG Advancing path Product/inventory with edge Product/inventory -(upc)- String/inventory
                            ├─   0.413114s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(24)" }])
                          ┌─┘
                          ├─   0.413137s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(24)" }], [])))
                        ┌─┘
                        ├─   0.413155s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(24)" }], [])))
                      ┌─┘
                      ├─   0.413171s   0ms DEBUG Paths for upc
                      ├─   0.413181s   0ms DEBUG   Path Product/inventory -(upc)- String/inventory is valid
                      ├─   0.413189s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.413202s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                      ├─   0.413209s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.413245s   0ms DEBUG Key to re-enter: {upc}
                  ├─   0.413254s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.413265s   0ms DEBUG created a new fetch step [3] subgraph(inventory) type(Product) requirement({price weight}) in children of 1
                  ├─   0.413275s   0ms DEBUG Adding {price weight} to fetch([3]).input
                  ├─   0.413283s   0ms DEBUG Adding {upc} to fetch([3]).input
                  ├─   0.413290s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.413300s   0ms DEBUG Adding {upc} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.413330s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="Product/inventory -(🔑🧩{upc})- Product/products", parent_fetch_step_index=4}
                        ├─   0.413400s   0ms DEBUG created a new fetch step [5] subgraph(products) type(Product) requirement() key({upc}) in children of 4
                        ├─   0.413417s   0ms DEBUG adding input requirement '{upc}' to fetch step [5]
                        ├─   0.413426s   0ms DEBUG adding __typename field to output for type 'Product'
                        ├─   0.413434s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="Product", field="upc", leaf=true, list=false, response_path="products.@", fetch_path=""}
                                ├─   0.413527s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.413569s   0ms DEBUG adding output field 'upc' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=5}
                          └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="Product", field="price", leaf=true, list=false, response_path="products.@", fetch_path=""}
                            ├─   0.413688s   0ms DEBUG adding output field 'price' to fetch step [5]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                            ┌─┘
                          ┌─┘
                          └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="Product", field="weight", leaf=true, list=false, response_path="products.@", fetch_path=""}
                            ├─   0.413764s   0ms DEBUG adding output field 'weight' to fetch step [5]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.413834s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  ├─   0.413875s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.413955s   1ms DEBUG Done
├─   0.413962s   1ms DEBUG found roots
├─   0.413967s   1ms DEBUG print graph
├─   0.413972s   1ms DEBUG Nodes:
│ [1] Query/products {} → {products{__typename price weight upc}} at $.
│ [2] Product/inventory {__typename upc} → {} at $.products.@
│ [3] Product/inventory {__typename price weight upc} → {shippingEstimate} at $.products.@
│ [4] Product/inventory {__typename upc} → {__typename upc} at $.products.@
│ [5] Product/products {__typename upc} → {price weight} at $.products.@
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│       [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.414038s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.414055s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.414132s   0ms DEBUG optimization found: merge parent [1] with child [5]
    └─┐perform_fetch_step_merge{}
      ├─   0.414168s   0ms DEBUG merging fetch steps [1] and [5]
      └─┐connect{parent=1, child=3}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.414224s   0ms DEBUG Found optimization: 3 <- 2
    └─┐perform_fetch_step_merge{}
      ├─   0.414239s   0ms DEBUG merging fetch steps [3] and [2]
      └─┐connect{parent=1, child=3}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="products"}
      └─┐execute{subgraph_name="products"}
        ├─   0.414723s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.416935s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"products": Array [Object {"__typename": String("Product"), "price": Number(11), "weight": Number(1), "upc": String("p1")}, Object {"__typename": String("Product"), "price": Number(22), "weight": Number(2), "upc": String("p2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "price": Number(11), "weight": Number(1), "upc": String("p1")}, Object {"__typename": String("Product"), "price": Number(22), "weight": Number(2), "upc": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "price": Number(11), "weight": Number(1), "upc": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "price": Number(11), "weight": Number(1), "upc": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(11)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(1)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "price": Number(22), "weight": Number(2), "upc": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "price": Number(22), "weight": Number(2), "upc": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(22)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(2)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="inventory"}
        └─┐execute{subgraph_name="inventory"}
          ├─   0.417581s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.419107s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.419352s DEBUG execution result: ExecutionResult { data: Some(Object {"products": Array [Object {"shippingEstimate": Number(110), "weight": Number(1), "price": Number(11)}, Object {"shippingEstimate": Number(440), "weight": Number(2), "price": Number(22)}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("products"), "operationKind": String("query"), "operation": String("{products{__typename price weight upc}}")}, Object {"kind": String("Flatten"), "path": Array [String("products"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("inventory"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{shippingEstimate}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("weight")}, Object {"kind": String("Field"), "name": String("upc")}]}]}}]}}}) }
   0.422226s DEBUG original document: {
  products {
    reviews {
      id
      author {
        username
      }
      product {
        name
        shippingEstimate
      }
    }
  }
}

   0.422316s DEBUG normalized document: query{products{reviews{id author{username} product{name shippingEstimate}}}}

   0.422327s DEBUG executable operation: query{products{reviews{id author{username} product{name shippingEstimate}}}}
┐walk_operation{}
├─   0.422717s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="products", leaf=false}
  ├─   0.422771s   0ms DEBUG Trying to advance to: products{reviews{id author{username} product{name shippingEstimate}}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.422829s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.422851s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.422882s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.422889s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.422901s   0ms DEBUG Indirect paths found: 0
    ├─   0.422909s   0ms WARN failed to advance: root(Query) -(accounts)- Query/accounts
  ┌─┘
  └─┐explore_path{path="root(Query) -(products)- Query/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.422942s   0ms DEBUG checking edge Query/products -(products)- Product/products
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products", edge="products"}
        ├─   0.422962s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.422977s   0ms DEBUG Advancing path root(Query) -(products)- Query/products with edge Query/products -(products)- Product/products
      ├─   0.422987s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.423003s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "products", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.423026s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.423032s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.423043s   0ms DEBUG Indirect paths found: 0
    ├─   0.423050s   0ms DEBUG advanced: root(Query) -(products)- Query/products
  ┌─┘
  ├─   0.423065s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="reviews", leaf=false}
  ├─   0.423087s   0ms DEBUG Trying to advance to: reviews{id author{username} product{name shippingEstimate}} through 1 possible paths
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.423118s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.423130s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
      ├─   0.423150s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.423170s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.423209s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.423247s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.423275s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.423286s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.423322s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.423330s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.423339s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.423346s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.423353s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.423373s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.423413s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.423435s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.423454s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.423464s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.423497s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.423505s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                      ├─   0.423513s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.423520s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.423528s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.423535s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                      ├─   0.423544s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.423551s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.423570s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.423590s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.423606s   0ms DEBUG Paths for upc
                ├─   0.423615s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.423623s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.423640s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.423648s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.423669s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.423713s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.423746s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.423773s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
                ├─   0.423845s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.423876s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.423897s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.423909s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.423928s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.423941s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.423948s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.423967s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.423984s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(41) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.423999s   0ms DEBUG Paths for upc
        ├─   0.424008s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.424016s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.424023s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.424034s   0ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.424040s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.424055s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.424081s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.424096s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.424117s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
        ├─   0.424169s   0ms DEBUG checking edge Product/reviews -(reviews)- Review/reviews
        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", edge="reviews"}
          ├─   0.424188s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.424205s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(reviews)- Review/reviews
        ├─   0.424213s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31)" }])
      ┌─┘
      ├─   0.424229s   1ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/reviews
      ├─   0.424238s   1ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.424244s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.424250s   1ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
        ├─   0.424267s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.424301s   0ms DEBUG checking edge Product/products -(upc)- String/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.424319s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.424336s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
              ├─   0.424344s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
              ├─   0.424374s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                ├─   0.424394s   0ms DEBUG checking requirements {upc} for edge 'Product/products -(🔑🧩{upc})- Product/reviews'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.424431s   0ms DEBUG checking edge Product/products -(upc)- String/products
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products", edge="upc"}
                        ├─   0.424451s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.424469s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products with edge Product/products -(upc)- String/products
                      ├─   0.424478s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products", current_cost=1001}
                      ├─   0.424510s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
                      ├─   0.424519s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                      ├─   0.424527s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
                      ├─   0.424534s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.424542s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
                      ├─   0.424549s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                      ├─   0.424558s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.424565s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.424582s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.424600s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" }], [])))
                ┌─┘
                ├─   0.424616s   0ms DEBUG Paths for upc
                ├─   0.424625s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
                ├─   0.424632s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.424644s   0ms DEBUG path Product/products -(upc)- String/products is valid
                ├─   0.424650s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
              ┌─┘
              ├─   0.424666s   0ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/reviews
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
                └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
                  ├─   0.424694s   0ms DEBUG Building root query tree node: Product/products
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.424710s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.424760s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", current_cost=2003}
                ├─   0.424817s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews", edge="upc"}
                  ├─   0.424850s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.424869s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                ├─   0.424880s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
              ┌─┘
              ├─   0.424898s   0ms DEBUG Found 1 direct paths to Product/products -(🔑🧩{upc})- Product/reviews
              ├─   0.424908s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
              ├─   0.424915s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.424922s   0ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
              ├─   0.424929s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.424939s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.424945s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }])
            ┌─┘
            ├─   0.424964s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
          ┌─┘
          ├─   0.424981s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(27)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(32)" }], [])))
        ┌─┘
        ├─   0.424997s   0ms DEBUG Paths for upc
        ├─   0.425005s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(upc)- String/products is valid
        ├─   0.425013s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
        ├─   0.425020s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.425031s   0ms DEBUG path Product/products -(upc)- String/products is valid
        ├─   0.425037s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(27)" }]))
      ┌─┘
      ├─   0.425051s   1ms DEBUG Advancing path to Product/products -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(27)" }, root_node="Product/products"}
        └─┐create_root_for_path_sequences{root_node="Product/products", segments_count=1}
          ├─   0.425076s   0ms DEBUG Building root query tree node: Product/products
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.425090s   0ms DEBUG Processing edge: Product/products -(upc)- String/products
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.425111s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/inventory", current_cost=2003}
        ├─   0.425155s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.425168s   2ms DEBUG No direct paths found
      ├─   0.425178s   2ms DEBUG going deeper
      ├─   0.425187s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
      ├─   0.425195s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.425201s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
      ├─   0.425207s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.425213s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
      ├─   0.425218s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
      ├─   0.425228s   2ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.425233s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31)" }])
    ┌─┘
    ├─   0.425250s   2ms DEBUG Indirect paths found: 1
    ├─   0.425258s   2ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products
  ┌─┘
  ├─   0.425271s   2ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="product", leaf=false}
  ├─   0.425293s   0ms DEBUG Trying to advance to: product{name shippingEstimate} through 1 possible paths
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.425326s   0ms DEBUG checking edge Review/reviews -(product)- Product/reviews
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews", edge="product"}
        ├─   0.425344s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.425360s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews with edge Review/reviews -(product)- Product/reviews
      ├─   0.425368s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.425383s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.425405s   0ms DEBUG Exploring edge Review/reviews -(🔑🧩{id})- Review/reviews
      ├─   0.425411s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.425417s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.425422s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.425434s   0ms DEBUG Indirect paths found: 0
    ├─   0.425442s   0ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews
  ┌─┘
  ├─   0.425454s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="shippingEstimate", leaf=true}
  ├─   0.425473s   0ms DEBUG Trying to advance to: shippingEstimate through 1 possible paths
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.425502s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.425514s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.425533s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.425539s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.425545s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.425565s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.425600s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.425620s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.425639s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.425648s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.425681s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.425688s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.425695s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.425701s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
              ├─   0.425708s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.425730s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.425768s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.425791s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.425812s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.425821s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.425856s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.425865s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.425872s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.425910s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                      ├─   0.425923s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.425933s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                      ├─   0.425946s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.425955s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.425985s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.426010s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.426026s   0ms DEBUG Paths for upc
                ├─   0.426040s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.426047s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.426061s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.426068s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.426084s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.426144s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.426163s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.426189s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.426261s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.426293s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.426316s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.426326s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.426345s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.426357s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.426364s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.426382s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.426401s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.426418s   0ms DEBUG Paths for upc
        ├─   0.426428s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.426437s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.426444s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.426455s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.426461s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.426478s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.426516s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.426534s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.426571s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
        ├─   0.426653s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.426667s   1ms DEBUG No direct paths found
      ├─   0.426676s   1ms DEBUG going deeper
      ├─   0.426686s   1ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.426707s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.426743s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.426763s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.426782s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.426791s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.426825s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.426833s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.426839s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.426860s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.426898s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.426921s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.426942s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.426951s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.426986s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.426994s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.427002s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.427009s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                      ├─   0.427018s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.427025s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                      ├─   0.427034s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.427041s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.427059s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.427077s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.427094s   0ms DEBUG Paths for upc
                ├─   0.427105s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.427114s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.427127s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.427134s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.427150s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.427179s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.427195s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.427219s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
                ├─   0.427270s   0ms DEBUG checking edge Product/products -(upc)- String/products
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", edge="upc"}
                  ├─   0.427293s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.427313s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                ├─   0.427322s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
              ┌─┘
              ├─   0.427340s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.427349s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.427356s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.427365s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.427372s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
            ┌─┘
            ├─   0.427390s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
          ┌─┘
          ├─   0.427408s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
        ┌─┘
        ├─   0.427425s   0ms DEBUG Paths for upc
        ├─   0.427435s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.427445s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
        ├─   0.427451s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.427461s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.427467s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.427481s   1ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.427505s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.427519s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.427540s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
        ├─   0.427587s   0ms DEBUG checking edge Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="shippingEstimate"}
          ├─   0.427609s   0ms DEBUG checking requirements {price weight} for edge 'Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.427646s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.427679s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.427703s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.427783s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.427818s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.427844s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.427856s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.427897s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.427906s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                        ├─   0.427915s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.427942s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.428001s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.428032s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.428087s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.428112s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.428171s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.428181s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory", "products"})
                                ├─   0.428191s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.428199s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"reviews", "inventory", "products"})
                                ├─   0.428208s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.428217s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory", "products"})
                                ├─   0.428227s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.428235s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.428256s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.428278s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.428298s   0ms DEBUG Paths for upc
                          ├─   0.428311s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.428319s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.428333s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.428341s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.428360s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.428392s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.428411s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.428440s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                          ├─   0.428517s   0ms DEBUG checking edge Product/products -(upc)- String/products
                          └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="upc"}
                            ├─   0.428566s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.428599s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                          ├─   0.428623s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                        ┌─┘
                        ├─   0.428654s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.428666s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.428675s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                        ├─   0.428685s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.428693s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                      ┌─┘
                      ├─   0.428715s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                    ┌─┘
                    ├─   0.428736s   1ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.428756s   1ms DEBUG Paths for upc
                  ├─   0.428769s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.428780s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
                  ├─   0.428788s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.428801s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.428811s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.428828s   1ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.428859s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.428876s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.428901s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                  ├─   0.428954s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.428970s   1ms DEBUG No direct paths found
                ├─   0.428979s   1ms DEBUG going deeper
                ├─   0.428988s   1ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.429012s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.429072s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.429107s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.429133s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.429144s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.429185s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.429211s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.429275s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.429322s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.429351s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.429363s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.429424s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.429437s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory", "products"})
                                ├─   0.429447s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.429455s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"reviews", "inventory", "products"})
                                ├─   0.429464s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.429473s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory", "products"})
                                ├─   0.429483s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.429492s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.429516s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.429540s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.429560s   0ms DEBUG Paths for upc
                          ├─   0.429573s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.429581s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.429595s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.429603s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.429622s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.429675s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.429708s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.429741s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                          ├─   0.429821s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                          └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", edge="upc"}
                            ├─   0.429859s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.429885s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                          ├─   0.429899s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                        ┌─┘
                        ├─   0.429922s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.429934s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.429942s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                        ├─   0.429951s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.429958s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                        ├─   0.429970s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.429977s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                      ┌─┘
                      ├─   0.429999s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                    ┌─┘
                    ├─   0.430021s   1ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.430041s   1ms DEBUG Paths for upc
                  ├─   0.430052s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.430064s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
                  ├─   0.430087s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.430105s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.430113s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.430134s   2ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.430166s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.430183s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.430208s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                  ├─   0.430290s   0ms DEBUG checking edge Product/products -(price)- Int/products
                  └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="price"}
                    ├─   0.430316s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.430337s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(price)- Int/products
                  ├─   0.430349s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }])
                ┌─┘
                ├─   0.430368s   2ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                ├─   0.430379s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                ├─   0.430387s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
                ├─   0.430412s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                ├─   0.430422s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                ├─   0.430429s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                ├─   0.430438s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.430445s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                ├─   0.430451s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                ├─   0.430463s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.430470s   2ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }])
              ┌─┘
              ├─   0.430496s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }], [])))
            ┌─┘
            ├─   0.430529s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }], [])))
          ┌─┘
          ├─   0.430549s   2ms DEBUG Paths for price
          ├─   0.430563s   2ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(price)- Int/products is valid
          ├─   0.430580s   2ms DEBUG Found 1 best paths for this leaf requirement
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.430634s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.430676s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.430701s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.430742s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.430767s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.430790s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.430808s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.430865s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.430877s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                        ├─   0.430886s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.430942s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.431023s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.431072s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.431107s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.431129s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.431187s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.431209s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory", "products"})
                                ├─   0.431223s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.431231s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"reviews", "inventory", "products"})
                                ├─   0.431241s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.431263s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory", "products"})
                                ├─   0.431274s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.431282s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.431307s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.431330s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.431350s   0ms DEBUG Paths for upc
                          ├─   0.431363s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.431372s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.431386s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.431394s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.431414s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.431448s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.431467s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.431495s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                          ├─   0.431573s   0ms DEBUG checking edge Product/products -(upc)- String/products
                          └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="upc"}
                            ├─   0.431610s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.431638s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                          ├─   0.431651s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                        ┌─┘
                        ├─   0.431679s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.431691s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.431699s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                        ├─   0.431710s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.431717s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                      ┌─┘
                      ├─   0.431738s   1ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                    ┌─┘
                    ├─   0.431760s   1ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.431803s   1ms DEBUG Paths for upc
                  ├─   0.431817s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.431828s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
                  ├─   0.431837s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.431849s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.431856s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.431873s   1ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.431904s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.431921s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.431967s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                  ├─   0.432039s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.432061s   1ms DEBUG No direct paths found
                ├─   0.432071s   1ms DEBUG going deeper
                ├─   0.432082s   1ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.432111s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.432153s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.432178s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.432227s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.432241s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.432299s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.432334s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.432382s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.432441s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.432476s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.432499s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.432560s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.432571s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory", "products"})
                                ├─   0.432580s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.432589s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"reviews", "inventory", "products"})
                                ├─   0.432598s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.432607s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory", "products"})
                                ├─   0.432617s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.432626s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.432647s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.432669s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.432688s   0ms DEBUG Paths for upc
                          ├─   0.432701s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.432719s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.432733s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.432741s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.432759s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.432814s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.432835s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.432867s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                          ├─   0.432936s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                          └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", edge="upc"}
                            ├─   0.432964s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.432988s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                          ├─   0.433000s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                        ┌─┘
                        ├─   0.433021s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.433032s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.433041s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                        ├─   0.433049s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.433057s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                        ├─   0.433067s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.433074s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                      ┌─┘
                      ├─   0.433096s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                    ┌─┘
                    ├─   0.433118s   1ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.433138s   1ms DEBUG Paths for upc
                  ├─   0.433150s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.433162s   1ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
                  ├─   0.433169s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.433181s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.433188s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.433205s   2ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.433234s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.433269s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.433302s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                  ├─   0.433364s   0ms DEBUG checking edge Product/products -(weight)- Int/products
                  └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="weight"}
                    ├─   0.433389s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.433413s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(weight)- Int/products
                  ├─   0.433425s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }])
                ┌─┘
                ├─   0.433445s   2ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                ├─   0.433455s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                ├─   0.433463s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
                ├─   0.433472s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                ├─   0.433478s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews", "inventory"})
                ├─   0.433485s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                ├─   0.433494s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.433501s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                ├─   0.433507s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"reviews", "inventory"})
                ├─   0.433518s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.433525s   2ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }])
              ┌─┘
              ├─   0.433566s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }], [])))
            ┌─┘
            ├─   0.433587s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }], [])))
          ┌─┘
          ├─   0.433603s   6ms DEBUG Paths for weight
          ├─   0.433617s   6ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(weight)- Int/products is valid
          ├─   0.433625s   6ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.433639s   6ms DEBUG path Product/inventory -(🔑🧩{upc})- Product/products -(price)- Int/products is valid
          ├─   0.433646s   6ms DEBUG path Product/inventory -(🔑🧩{upc})- Product/products -(weight)- Int/products is valid
          ├─   0.433652s   6ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(29)" },  { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(26)" }]))
        ┌─┘
        ├─   0.433673s   6ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(29)" }, root_node="Product/inventory"}
          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=2}
            ├─   0.433702s   0ms DEBUG Building root query tree node: Product/inventory
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.433717s   0ms DEBUG Processing edge: Product/inventory -(🔑🧩{upc})- Product/products
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.433732s   0ms DEBUG Processing edge: Product/products -(price)- Int/products
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.433754s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.433767s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(26)" }, root_node="Product/inventory"}
          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=2}
            ├─   0.433828s   0ms DEBUG Building root query tree node: Product/inventory
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.433849s   0ms DEBUG Processing edge: Product/inventory -(🔑🧩{upc})- Product/products
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.433864s   0ms DEBUG Processing edge: Product/products -(weight)- Int/products
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.433888s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.433902s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐merge_trees{tree_count=2}
        ┌─┘
        ├─   0.433953s   6ms INFO return=Ok([ { cost: 3011, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(21)" }])
      ┌─┘
      ├─   0.433973s   8ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
      ├─   0.433983s   8ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      ├─   0.433989s   8ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.433995s   8ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.434001s   8ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
      ├─   0.434007s   8ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      ├─   0.434014s   8ms DEBUG Ignoring. Already visited similar edge
      ├─   0.434023s   8ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.434029s   8ms INFO return=Ok([ { cost: 3011, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(21)" }])
    ┌─┘
    ├─   0.434065s   8ms DEBUG Indirect paths found: 1
    ├─   0.434082s   8ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.434124s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.434163s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.434175s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.434196s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.434208s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.434214s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.434234s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.434269s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.434290s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.434309s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.434318s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.434369s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.434380s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.434387s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.434394s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
              ├─   0.434401s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.434440s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.434489s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.434524s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.434555s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.434576s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.434626s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.434635s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.434643s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.434650s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                      ├─   0.434658s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.434665s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                      ├─   0.434675s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.434682s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.434700s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.434735s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.434759s   0ms DEBUG Paths for upc
                ├─   0.434772s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.434779s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.434792s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.434799s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.434816s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.434846s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.434862s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.434887s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.434939s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.434962s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.434982s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.434991s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.435010s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.435021s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.435027s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.435045s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.435063s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.435080s   0ms DEBUG Paths for upc
        ├─   0.435090s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.435099s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.435106s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.435116s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.435121s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.435135s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.435160s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.435174s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.435194s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
        ├─   0.435239s   0ms DEBUG checking edge Product/products -(name)- String/products
        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", edge="name"}
          ├─   0.435260s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.435277s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products with edge Product/products -(name)- String/products
        ├─   0.435285s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(28)" }])
      ┌─┘
      ├─   0.435301s   1ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/products
      ├─   0.435310s   1ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.435330s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.435372s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.435392s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.435410s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.435419s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.435452s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.435459s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.435466s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.435487s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.435524s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.435546s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.435566s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.435577s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.435612s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.435620s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.435628s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.435635s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                      ├─   0.435644s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.435651s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                      ├─   0.435659s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.435667s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.435684s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.435702s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.435718s   0ms DEBUG Paths for upc
                ├─   0.435729s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.435736s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.435748s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.435754s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.435770s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.435821s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.435839s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.435866s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
                ├─   0.435921s   0ms DEBUG checking edge Product/products -(upc)- String/products
                └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", edge="upc"}
                  ├─   0.435944s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.435964s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                ├─   0.435973s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
              ┌─┘
              ├─   0.435992s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.436002s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.436024s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.436037s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.436044s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
            ┌─┘
            ├─   0.436068s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
          ┌─┘
          ├─   0.436087s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
        ┌─┘
        ├─   0.436119s   0ms DEBUG Paths for upc
        ├─   0.436134s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.436143s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
        ├─   0.436151s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.436162s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.436168s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.436183s   2ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.436210s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.436225s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.436246s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
        ├─   0.436292s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.436305s   2ms DEBUG No direct paths found
      ├─   0.436314s   2ms DEBUG going deeper
      ├─   0.436323s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
      ├─   0.436329s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.436335s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
      ├─   0.436341s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.436347s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
      ├─   0.436353s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
      ├─   0.436362s   2ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.436368s   2ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(28)" }])
    ┌─┘
    ├─   0.436386s   2ms DEBUG Indirect paths found: 1
    ├─   0.436396s   2ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(product)- Product/reviews
  ┌─┘
┌─┘
└─┐process_field{field_name="author", leaf=false}
  ├─   0.436425s   0ms DEBUG Trying to advance to: author{username} through 1 possible paths
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.436458s   0ms DEBUG checking edge Review/reviews -(author)- User/reviews/1
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews", edge="author"}
        ├─   0.436476s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.436493s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews with edge Review/reviews -(author)- User/reviews/1
      ├─   0.436502s   0ms DEBUG checking edge Review/reviews -(author)- User/reviews
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews", edge="author"}
        ├─   0.436519s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.436535s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews with edge Review/reviews -(author)- User/reviews
      ├─   0.436541s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(47)" },  { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.436558s   0ms DEBUG Direct paths found: 2
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "author", selections: SelectionSet { items: [SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.436610s   0ms DEBUG Exploring edge Review/reviews -(🔑🧩{id})- Review/reviews
      ├─   0.436619s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.436626s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.436632s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.436648s   0ms DEBUG Indirect paths found: 0
    ├─   0.436659s   0ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews
  ┌─┘
  ├─   0.436687s   0ms DEBUG Found 2 paths
┌─┘
└─┐process_field{field_name="username", leaf=true}
  ├─   0.436720s   0ms DEBUG Trying to advance to: username through 2 possible paths
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews/1", current_cost=2005}
      ├─   0.436773s   0ms DEBUG checking edge User/reviews/1 -(username)- String/reviews/1
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews/1", edge="username"}
        ├─   0.436794s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.436814s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews/1 with edge User/reviews/1 -(username)- String/reviews/1
      ├─   0.436823s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(47) --> EdgeIndex(48)" }])
    ┌─┘
    ├─   0.436838s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews/1", current_cost=2005}
      ├─   0.436861s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.436868s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.436880s   0ms DEBUG Indirect paths found: 0
    ├─   0.436889s   0ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews", current_cost=2005}
      ├─   0.436924s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.436935s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews", current_cost=2005}
      ├─   0.436954s   0ms DEBUG Exploring edge User/reviews -(🔑🧩{id})- User/reviews
      ├─   0.436960s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.436966s   0ms DEBUG Exploring edge User/reviews -(🔑🧩{id})- User/accounts
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews", edge="id"}
        ├─   0.436986s   0ms DEBUG checking requirements {id} for edge 'User/reviews -(🔑🧩{id})- User/accounts'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews", current_cost=2005}
              ├─   0.437022s   0ms DEBUG checking edge User/reviews -(id)- ID/reviews
              └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews", edge="id"}
                ├─   0.437042s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.437060s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews with edge User/reviews -(id)- ID/reviews
              ├─   0.437069s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(3) --> EdgeIndex(12)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews", current_cost=2005}
              ├─   0.437102s   0ms DEBUG Exploring edge User/reviews -(🔑🧩{id})- User/reviews
              ├─   0.437109s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.437116s   0ms DEBUG Exploring edge User/reviews -(🔑🧩{id})- User/accounts
              ├─   0.437122s   0ms DEBUG Ignoring, graph is excluded and already visited (current: accounts, visited: {"accounts"})
              ├─   0.437130s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.437136s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.437152s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(3) --> EdgeIndex(12)" }], [])))
          ┌─┘
          ├─   0.437168s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(3) --> EdgeIndex(12)" }], [])))
        ┌─┘
        ├─   0.437183s   0ms DEBUG Paths for id
        ├─   0.437193s   0ms DEBUG   Path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews -(id)- ID/reviews is valid
        ├─   0.437199s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.437211s   0ms DEBUG path User/reviews -(id)- ID/reviews is valid
        ├─   0.437217s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(12)" }]))
      ┌─┘
      ├─   0.437231s   0ms DEBUG Advancing path to User/reviews -(🔑🧩{id})- User/accounts
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(12)" }, root_node="User/reviews"}
        └─┐create_root_for_path_sequences{root_node="User/reviews", segments_count=1}
          ├─   0.437255s   0ms DEBUG Building root query tree node: User/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.437270s   0ms DEBUG Processing edge: User/reviews -(id)- ID/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.437291s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews -(🔑🧩{id})- User/accounts", current_cost=3007}
        ├─   0.437355s   0ms DEBUG checking edge User/accounts -(username)- String/accounts
        └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews -(🔑🧩{id})- User/accounts", edge="username"}
          ├─   0.437385s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.437406s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews -(🔑🧩{id})- User/accounts with edge User/accounts -(username)- String/accounts
        ├─   0.437416s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(3) --> EdgeIndex(36) --> EdgeIndex(10)" }])
      ┌─┘
      ├─   0.437433s   0ms DEBUG Found 1 direct paths to User/reviews -(🔑🧩{id})- User/accounts
      ├─   0.437444s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.437449s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(3) --> EdgeIndex(36) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.437464s   0ms DEBUG Indirect paths found: 1
    ├─   0.437475s   0ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews -(author)- User/reviews
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.437504s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.437535s   0ms DEBUG checking edge Review/reviews -(id)- ID/reviews
      └─┐can_satisfy_edge{path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews", edge="id"}
        ├─   0.437554s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.437570s   0ms DEBUG Advancing path root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews with edge Review/reviews -(id)- ID/reviews
      ├─   0.437578s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(5)" }])
    ┌─┘
    ├─   0.437592s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.437614s   0ms DEBUG Exploring edge Review/reviews -(🔑🧩{id})- Review/reviews
      ├─   0.437620s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.437626s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.437631s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.437642s   0ms DEBUG Indirect paths found: 0
    ├─   0.437651s   0ms DEBUG advanced: root(Query) -(products)- Query/products -(products)- Product/products -(🔑🧩{upc})- Product/reviews -(reviews)- Review/reviews
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 3011, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(21)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=7}
  ├─   0.437695s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=7}
    ├─   0.437708s   0ms DEBUG Processing edge: root(Query) -(products)- Query/products
    └─┐from_path_segment_sequences{current_index=1, total_segments=7}
      ├─   0.437721s   0ms DEBUG Processing edge: Query/products -(products)- Product/products
      └─┐from_path_segment_sequences{current_index=2, total_segments=7}
        ├─   0.437733s   0ms DEBUG Processing edge: Product/products -(🔑🧩{upc})- Product/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=7}
          ├─   0.437749s   0ms DEBUG Processing edge: Product/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=7}
            ├─   0.437762s   0ms DEBUG Processing edge: Review/reviews -(product)- Product/reviews
            └─┐from_path_segment_sequences{current_index=5, total_segments=7}
              ├─   0.437801s   0ms DEBUG Processing edge: Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path_segment_sequences{current_index=6, total_segments=7}
                ├─   0.437818s   0ms DEBUG Processing edge: Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
                └─┐from_path_segment_sequences{current_index=7, total_segments=7}
                ┌─┘
                ├─   0.437844s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.437858s   0ms DEBUG Adding subsequent step as child
            ┌─┘
            ├─   0.437870s   0ms DEBUG Adding subsequent step as child
          ┌─┘
          ├─   0.437882s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.437894s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.437904s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.437915s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 3008, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(28)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=7}
  ├─   0.437955s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=7}
    ├─   0.437967s   0ms DEBUG Processing edge: root(Query) -(products)- Query/products
    └─┐from_path_segment_sequences{current_index=1, total_segments=7}
      ├─   0.437979s   0ms DEBUG Processing edge: Query/products -(products)- Product/products
      └─┐from_path_segment_sequences{current_index=2, total_segments=7}
        ├─   0.437991s   0ms DEBUG Processing edge: Product/products -(🔑🧩{upc})- Product/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=7}
          ├─   0.438004s   0ms DEBUG Processing edge: Product/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=7}
            ├─   0.438017s   0ms DEBUG Processing edge: Review/reviews -(product)- Product/reviews
            └─┐from_path_segment_sequences{current_index=5, total_segments=7}
              ├─   0.438032s   0ms DEBUG Processing edge: Product/reviews -(🔑🧩{upc})- Product/products
              └─┐from_path_segment_sequences{current_index=6, total_segments=7}
                ├─   0.438046s   0ms DEBUG Processing edge: Product/products -(name)- String/products
                └─┐from_path_segment_sequences{current_index=7, total_segments=7}
                ┌─┘
                ├─   0.438069s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.438082s   0ms DEBUG Adding subsequent step as child
            ┌─┘
            ├─   0.438094s   0ms DEBUG Adding subsequent step as child
          ┌─┘
          ├─   0.438106s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.438118s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.438129s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.438139s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(47) --> EdgeIndex(48)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=6}
  ├─   0.438174s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=6}
    ├─   0.438186s   0ms DEBUG Processing edge: root(Query) -(products)- Query/products
    └─┐from_path_segment_sequences{current_index=1, total_segments=6}
      ├─   0.438198s   0ms DEBUG Processing edge: Query/products -(products)- Product/products
      └─┐from_path_segment_sequences{current_index=2, total_segments=6}
        ├─   0.438210s   0ms DEBUG Processing edge: Product/products -(🔑🧩{upc})- Product/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=6}
          ├─   0.438223s   0ms DEBUG Processing edge: Product/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=6}
            ├─   0.438237s   0ms DEBUG Processing edge: Review/reviews -(author)- User/reviews/1
            └─┐from_path_segment_sequences{current_index=5, total_segments=6}
              ├─   0.438251s   0ms DEBUG Processing edge: User/reviews/1 -(username)- String/reviews/1
              └─┐from_path_segment_sequences{current_index=6, total_segments=6}
              ┌─┘
              ├─   0.438274s   0ms DEBUG No subsequent steps (leaf or end of path)
            ┌─┘
            ├─   0.438287s   0ms DEBUG Adding subsequent step as child
          ┌─┘
          ├─   0.438298s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.438310s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.438321s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.438332s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(18) --> EdgeIndex(43) --> EdgeIndex(31) --> EdgeIndex(5)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.438366s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.438378s   0ms DEBUG Processing edge: root(Query) -(products)- Query/products
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.438390s   0ms DEBUG Processing edge: Query/products -(products)- Product/products
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.438404s   0ms DEBUG Processing edge: Product/products -(🔑🧩{upc})- Product/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.438417s   0ms DEBUG Processing edge: Product/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.438431s   0ms DEBUG Processing edge: Review/reviews -(id)- ID/reviews
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.438471s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.438487s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.438498s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.438509s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.438520s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=4}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="products", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="products", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.438644s   0ms DEBUG adding output field 'products' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/products -(🔑🧩{upc})- Product/reviews", parent_fetch_step_index=1}
              ├─   0.438703s   0ms DEBUG created a new fetch step [2] subgraph(reviews) type(Product) requirement() key({upc}) in children of 1
              ├─   0.438722s   0ms DEBUG adding input requirement '{upc}' to fetch step [2]
              ├─   0.438734s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.438742s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="upc", leaf=true, list=false, response_path="products.@", fetch_path="products.@"}
                      ├─   0.438819s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.438863s   0ms DEBUG adding output field 'upc' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Product", field="reviews", leaf=false, list=true, response_path="products.@", fetch_path=""}
                  ├─   0.439003s   0ms DEBUG adding output field 'reviews' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Review", field="product", leaf=false, list=false, response_path="products.@.reviews.@", fetch_path="reviews.@"}
                      ├─   0.439035s   0ms DEBUG adding output field 'product' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=2}
                        └─┐process_entity_move_edge{edge="Product/reviews -(🔑🧩{upc})- Product/inventory", parent_fetch_step_index=2}
                          ├─   0.439071s   0ms DEBUG created a new fetch step [3] subgraph(inventory) type(Product) requirement() key({upc}) in children of 2
                          ├─   0.439081s   0ms DEBUG adding input requirement '{upc}' to fetch step [3]
                          ├─   0.439089s   0ms DEBUG adding __typename field to output for type 'Product'
                          ├─   0.439097s   0ms DEBUG connecting fetch step to parent [2] -> [3]
                          └─┐connect{parent=2, child=3}
                          ┌─┘
                          └─┐process_requirements_for_fetch_steps{count=1}
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                                └─┐process_plain_field_edge{parent_fetch_step_index=2, requiring_fetch_step_index=3, type_name="Product", field="upc", leaf=true, list=false, response_path="products.@.reviews.@.product", fetch_path="reviews.@.product"}
                                  ├─   0.439198s   0ms DEBUG connecting parent fetch step [2] to requiring fetch step [3]
                                  └─┐connect{parent=2, child=3}
                                  ┌─┘
                                  ├─   0.439236s   0ms DEBUG adding output field 'upc' to fetch step [2]
                                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            └─┐connect{parent=2, child=3}
                            ┌─┘
                          ┌─┘
                          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                            └─┐process_requires_field_edge{parent_fetch_step_index=3}
                              └─┐find_satisfiable_key{node="Product/inventory"}
                                └─┐can_satisfy_edge{path="Product/inventory", edge="upc"}
                                  ├─   0.439381s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/inventory", current_cost=0}
                                        ├─   0.439430s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                        └─┐can_satisfy_edge{path="Product/inventory", edge="upc"}
                                          ├─   0.439464s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.439488s   0ms DEBUG Advancing path Product/inventory with edge Product/inventory -(upc)- String/inventory
                                        ├─   0.439502s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(24)" }])
                                      ┌─┘
                                      ├─   0.439527s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(24)" }], [])))
                                    ┌─┘
                                    ├─   0.439548s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(24)" }], [])))
                                  ┌─┘
                                  ├─   0.439575s   0ms DEBUG Paths for upc
                                  ├─   0.439586s   0ms DEBUG   Path Product/inventory -(upc)- String/inventory is valid
                                  ├─   0.439595s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.439609s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                                  ├─   0.439618s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                                ┌─┘
                              ┌─┘
                              ├─   0.439649s   0ms DEBUG Key to re-enter: {upc}
                              ├─   0.439659s   0ms DEBUG Creating a fetch step for children of @requires
                              ├─   0.439672s   0ms DEBUG created a new fetch step [4] subgraph(inventory) type(Product) requirement({price weight}) in children of 2
                              ├─   0.439683s   0ms DEBUG Adding {price weight} to fetch([4]).input
                              ├─   0.439692s   0ms DEBUG Adding {upc} to fetch([4]).input
                              ├─   0.439701s   0ms DEBUG Creating a fetch step for requirement of @requires
                              ├─   0.439709s   0ms DEBUG Adding {upc} to fetch([5]).input
                              └─┐connect{parent=2, child=5}
                              ┌─┘
                              ├─   0.439747s   0ms DEBUG Processing requirements
                              └─┐process_noop_edge{}
                                └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                                  └─┐process_entity_move_edge{edge="Product/inventory -(🔑🧩{upc})- Product/products", parent_fetch_step_index=5}
                                    ├─   0.439793s   0ms DEBUG created a new fetch step [6] subgraph(products) type(Product) requirement() key({upc}) in children of 5
                                    ├─   0.439803s   0ms DEBUG adding input requirement '{upc}' to fetch step [6]
                                    ├─   0.439812s   0ms DEBUG adding __typename field to output for type 'Product'
                                    ├─   0.439822s   0ms DEBUG connecting fetch step to parent [5] -> [6]
                                    └─┐connect{parent=5, child=6}
                                    ┌─┘
                                    └─┐process_requirements_for_fetch_steps{count=1}
                                      └─┐process_noop_edge{}
                                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5, requiring_fetch_step_index=6}
                                          └─┐process_plain_field_edge{parent_fetch_step_index=5, requiring_fetch_step_index=6, type_name="Product", field="upc", leaf=true, list=false, response_path="products.@.reviews.@.product", fetch_path=""}
                                            ├─   0.439909s   0ms DEBUG connecting parent fetch step [5] to requiring fetch step [6]
                                            └─┐connect{parent=5, child=6}
                                            ┌─┘
                                            ├─   0.439944s   0ms DEBUG adding output field 'upc' to fetch step [5]
                                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5, requiring_fetch_step_index=6}
                                            ┌─┘
                                          ┌─┘
                                        ┌─┘
                                      ┌─┘
                                      └─┐connect{parent=5, child=6}
                                      ┌─┘
                                    ┌─┘
                                    └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=6}
                                      └─┐process_plain_field_edge{parent_fetch_step_index=6, type_name="Product", field="price", leaf=true, list=false, response_path="products.@.reviews.@.product", fetch_path=""}
                                        ├─   0.440067s   0ms DEBUG adding output field 'price' to fetch step [6]
                                        └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                                        ┌─┘
                                      ┌─┘
                                      └─┐process_plain_field_edge{parent_fetch_step_index=6, type_name="Product", field="weight", leaf=true, list=false, response_path="products.@.reviews.@.product", fetch_path=""}
                                        ├─   0.440128s   0ms DEBUG adding output field 'weight' to fetch step [6]
                                        └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                                        ┌─┘
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                              ├─   0.440236s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                              └─┐connect{parent=6, child=4}
                              ┌─┘
                              └─┐connect{parent=6, child=4}
                              ┌─┘
                              ├─   0.440289s   0ms DEBUG Processing children
                              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4}
                              ┌─┘
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐process_entity_move_edge{edge="Product/reviews -(🔑🧩{upc})- Product/products", parent_fetch_step_index=2}
                          ├─   0.440364s   0ms DEBUG created a new fetch step [7] subgraph(products) type(Product) requirement() key({upc}) in children of 2
                          ├─   0.440373s   0ms DEBUG adding input requirement '{upc}' to fetch step [7]
                          ├─   0.440381s   0ms DEBUG adding __typename field to output for type 'Product'
                          ├─   0.440389s   0ms DEBUG connecting fetch step to parent [2] -> [7]
                          └─┐connect{parent=2, child=7}
                          ┌─┘
                          └─┐process_requirements_for_fetch_steps{count=1}
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2, requiring_fetch_step_index=7}
                                └─┐process_plain_field_edge{parent_fetch_step_index=2, requiring_fetch_step_index=7, type_name="Product", field="upc", leaf=true, list=false, response_path="products.@.reviews.@.product", fetch_path="reviews.@.product"}
                                  ├─   0.440463s   0ms DEBUG connecting parent fetch step [2] to requiring fetch step [7]
                                  └─┐connect{parent=2, child=7}
                                  ┌─┘
                                  ├─   0.440502s   0ms DEBUG adding output field 'upc' to fetch step [2]
                                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2, requiring_fetch_step_index=7}
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            └─┐connect{parent=2, child=7}
                            ┌─┘
                          ┌─┘
                          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7}
                            └─┐process_plain_field_edge{parent_fetch_step_index=7, type_name="Product", field="name", leaf=true, list=false, response_path="products.@.reviews.@.product", fetch_path=""}
                              ├─   0.440621s   0ms DEBUG adding output field 'name' to fetch step [7]
                              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=7}
                              ┌─┘
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Review", field="author", leaf=false, list=false, response_path="products.@.reviews.@", fetch_path="reviews.@"}
                      ├─   0.440726s   0ms DEBUG adding output field 'author' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                        └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="username", leaf=false, list=false, response_path="products.@.reviews.@.author", fetch_path="reviews.@.author"}
                          ├─   0.440759s   0ms DEBUG adding output field 'username' to fetch step [2]
                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Review", field="id", leaf=true, list=false, response_path="products.@.reviews.@", fetch_path="reviews.@"}
                      ├─   0.440835s   0ms DEBUG adding output field 'id' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.440944s   2ms DEBUG Done
├─   0.440952s   2ms DEBUG found roots
├─   0.440957s   2ms DEBUG print graph
├─   0.440961s   2ms DEBUG Nodes:
│ [1] Query/products {} → {products{__typename upc}} at $.
│ [2] Product/reviews {__typename upc} → {reviews{product{__typename upc} author{username} id}} at $.products.@
│ [3] Product/inventory {__typename upc} → {} at $.products.@.reviews.@.product
│ [4] Product/inventory {__typename price weight upc} → {shippingEstimate} at $.products.@.reviews.@.product
│ [5] Product/inventory {__typename upc} → {__typename upc} at $.products.@.reviews.@.product
│ [6] Product/products {__typename upc} → {price weight} at $.products.@.reviews.@.product
│ [7] Product/products {__typename upc} → {name} at $.products.@.reviews.@.product
│ 
│ Tree:
│ [1]
│   [2]
│     [3]
│     [5]
│       [6]
│         [4]
│     [7]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.441020s   0ms DEBUG optimization found: merge parent [2] with a passthrough child [5]
    └─┐perform_passthrough_child_merge{}
      ├─   0.441036s   0ms DEBUG merging fetch steps [2] and [5]
      └─┐connect{parent=2, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.441134s   0ms DEBUG Found optimization: 6 <- 7
    └─┐perform_fetch_step_merge{}
      ├─   0.441169s   0ms DEBUG merging fetch steps [6] and [7]
      └─┐connect{parent=2, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.441233s   0ms DEBUG optimization found: remove 'Product/inventory {__typename upc} → {} at $.products.@.reviews.@.product'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="products"}
      └─┐execute{subgraph_name="products"}
        ├─   0.441657s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.443675s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"products": Array [Object {"__typename": String("Product"), "upc": String("p1")}, Object {"__typename": String("Product"), "upc": String("p2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "upc": String("p1")}, Object {"__typename": String("Product"), "upc": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="reviews"}
        └─┐execute{subgraph_name="reviews"}
          ├─   0.444267s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.446305s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"products": Array [Object {"__typename": String("Product"), "upc": String("p1"), "reviews": Array [Object {"product": Object {"__typename": String("Product"), "upc": String("p1")}, "author": Object {"username": String("u-username-1")}, "id": String("r1")}]}, Object {"__typename": String("Product"), "upc": String("p2"), "reviews": Array [Object {"product": Object {"__typename": String("Product"), "upc": String("p2")}, "author": Object {"username": String("u-username-1")}, "id": String("r2")}]}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "upc": String("p1")}, Object {"__typename": String("Product"), "upc": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="products"}
        └─┐execute{subgraph_name="products"}
          ├─   0.446807s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.448442s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"products": Array [Object {"__typename": String("Product"), "upc": String("p1"), "reviews": Array [Object {"product": Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1), "name": String("p-name-1")}, "author": Object {"username": String("u-username-1")}, "id": String("r1")}]}, Object {"__typename": String("Product"), "upc": String("p2"), "reviews": Array [Object {"product": Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2), "name": String("p-name-2")}, "author": Object {"username": String("u-username-1")}, "id": String("r2")}]}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1), "name": String("p-name-1")}, Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2), "name": String("p-name-2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1), "name": String("p-name-1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1), "name": String("p-name-1")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(11)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(1)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2), "name": String("p-name-2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2), "name": String("p-name-2")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(22)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(2)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="inventory"}
        └─┐execute{subgraph_name="inventory"}
          ├─   0.449104s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.450463s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.450838s DEBUG execution result: ExecutionResult { data: Some(Object {"products": Array [Object {"reviews": Array [Object {"id": String("r1"), "author": Object {"username": String("u-username-1")}, "product": Object {"name": String("p-name-1"), "shippingEstimate": Number(110)}}]}, Object {"reviews": Array [Object {"id": String("r2"), "author": Object {"username": String("u-username-1")}, "product": Object {"name": String("p-name-2"), "shippingEstimate": Number(440)}}]}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("products"), "operationKind": String("query"), "operation": String("{products{__typename upc}}")}, Object {"kind": String("Flatten"), "path": Array [String("products"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("reviews"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{reviews{product{__typename upc} author{username} id}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("upc")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("products"), String("@"), String("reviews"), String("@"), String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("products"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{price weight name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("upc")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("products"), String("@"), String("reviews"), String("@"), String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("inventory"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{shippingEstimate}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("weight")}, Object {"kind": String("Field"), "name": String("upc")}]}]}}]}}}) }
   0.455019s DEBUG original document: {
  me {
    reviews {
      product {
        reviews {
          id
        }
      }
    }
  }
}

   0.455109s DEBUG normalized document: query{me{reviews{product{reviews{id}}}}}

   0.455119s DEBUG executable operation: query{me{reviews{product{reviews{id}}}}}
┐walk_operation{}
├─   0.455453s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="me", leaf=false}
  ├─   0.455502s   0ms DEBUG Trying to advance to: me{reviews{product{reviews{id}}}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.455584s   0ms DEBUG checking edge Query/accounts -(me)- User/accounts
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts", edge="me"}
        ├─   0.455621s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.455645s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts with edge Query/accounts -(me)- User/accounts
      ├─   0.455658s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.455675s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.455705s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.455712s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.455724s   0ms DEBUG Indirect paths found: 0
    ├─   0.455748s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts
  ┌─┘
  └─┐explore_path{path="root(Query) -(products)- Query/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.455788s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.455801s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.455826s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.455831s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.455843s   0ms DEBUG Indirect paths found: 0
    ├─   0.455850s   0ms WARN failed to advance: root(Query) -(products)- Query/products
  ┌─┘
  ├─   0.455864s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="reviews", leaf=false}
  ├─   0.455922s   0ms DEBUG Trying to advance to: reviews{product{reviews{id}}} through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.455955s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.455967s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.455987s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
        ├─   0.456007s   0ms DEBUG checking requirements {id} for edge 'User/accounts -(🔑🧩{id})- User/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.456044s   0ms DEBUG checking edge User/accounts -(id)- ID/accounts
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
                ├─   0.456085s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.456106s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts with edge User/accounts -(id)- ID/accounts
              ├─   0.456117s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.456150s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
              ├─   0.456158s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.456167s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
              ├─   0.456174s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.456182s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.456188s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.456205s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.456222s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.456236s   0ms DEBUG Paths for id
        ├─   0.456244s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(id)- ID/accounts is valid
        ├─   0.456251s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.456267s   0ms DEBUG path User/accounts -(id)- ID/accounts is valid
        ├─   0.456273s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.456288s   0ms DEBUG Advancing path to User/accounts -(🔑🧩{id})- User/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/accounts"}
        └─┐create_root_for_path_sequences{root_node="User/accounts", segments_count=1}
          ├─   0.456315s   0ms DEBUG Building root query tree node: User/accounts
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.456330s   0ms DEBUG Processing edge: User/accounts -(id)- ID/accounts
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.456352s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", current_cost=2003}
        ├─   0.456399s   0ms DEBUG checking edge User/reviews -(reviews)- Review/reviews
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", edge="reviews"}
          ├─   0.456418s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.456434s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews with edge User/reviews -(reviews)- Review/reviews
        ├─   0.456443s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13)" }])
      ┌─┘
      ├─   0.456475s   0ms DEBUG Found 1 direct paths to User/accounts -(🔑🧩{id})- User/reviews
      ├─   0.456489s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
      ├─   0.456495s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.456503s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.456508s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.456526s   0ms DEBUG Indirect paths found: 1
    ├─   0.456534s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts
  ┌─┘
  ├─   0.456546s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="product", leaf=false}
  ├─   0.456583s   0ms DEBUG Trying to advance to: product{reviews{id}} through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.456648s   0ms DEBUG checking edge Review/reviews -(product)- Product/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", edge="product"}
        ├─   0.456679s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.456698s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews with edge Review/reviews -(product)- Product/reviews
      ├─   0.456708s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.456723s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.456749s   0ms DEBUG Exploring edge Review/reviews -(🔑🧩{id})- Review/reviews
      ├─   0.456755s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.456762s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.456767s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.456779s   0ms DEBUG Indirect paths found: 0
    ├─   0.456788s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews
  ┌─┘
  ├─   0.456800s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="reviews", leaf=false}
  ├─   0.456820s   0ms DEBUG Trying to advance to: reviews{id} through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.456858s   0ms DEBUG checking edge Product/reviews -(reviews)- Review/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="reviews"}
        ├─   0.456877s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.456894s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(reviews)- Review/reviews
      ├─   0.456902s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(31)" }])
    ┌─┘
    ├─   0.456935s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.456967s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.456973s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.456979s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.456999s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.457036s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.457083s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.457111s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.457122s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.457159s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.457167s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.457174s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.457180s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
              ├─   0.457188s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.457242s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.457291s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.457316s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.457340s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.457350s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.457388s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.457396s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.457403s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.457411s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                      ├─   0.457419s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.457426s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                      ├─   0.457435s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.457442s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.457460s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.457478s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.457495s   0ms DEBUG Paths for upc
                ├─   0.457506s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.457527s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.457546s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.457553s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.457574s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.457616s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.457632s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.457656s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.457724s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.457756s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.457779s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.457790s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.457814s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.457826s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.457832s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.457851s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.457872s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.457889s   0ms DEBUG Paths for upc
        ├─   0.457899s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.457908s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.457915s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.457926s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.457932s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.457946s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.457971s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.457985s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.458006s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
        ├─   0.458068s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.458088s   1ms DEBUG No direct paths found
      ├─   0.458098s   1ms DEBUG going deeper
      ├─   0.458108s   1ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.458148s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.458186s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.458207s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.458228s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.458238s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.458272s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.458294s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.458305s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.458333s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.458392s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.458417s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.458456s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.458469s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.458523s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.458534s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.458542s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.458549s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                      ├─   0.458558s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.458565s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                      ├─   0.458583s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.458593s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.458615s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.458658s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.458681s   0ms DEBUG Paths for upc
                ├─   0.458695s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.458702s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.458715s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.458722s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.458738s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.458769s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.458785s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.458816s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
                ├─   0.458883s   0ms DEBUG checking edge Product/products -(upc)- String/products
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", edge="upc"}
                  ├─   0.458916s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.458954s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                ├─   0.458966s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
              ┌─┘
              ├─   0.458986s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.458996s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.459003s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.459013s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.459019s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
            ┌─┘
            ├─   0.459052s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
          ┌─┘
          ├─   0.459078s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
        ┌─┘
        ├─   0.459095s   0ms DEBUG Paths for upc
        ├─   0.459118s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.459130s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
        ├─   0.459138s   1ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.459149s   1ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.459155s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.459173s   2ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.459200s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.459214s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.459234s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
        ├─   0.459281s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.459294s   2ms DEBUG No direct paths found
      ├─   0.459302s   2ms DEBUG going deeper
      ├─   0.459310s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
      ├─   0.459316s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.459322s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
      ├─   0.459329s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.459335s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
      ├─   0.459341s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
      ├─   0.459349s   2ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      ├─   0.459354s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.459360s   2ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.459365s   2ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
      ├─   0.459371s   2ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      ├─   0.459377s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.459384s   2ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.459390s   2ms INFO return=Ok([])
    ┌─┘
    ├─   0.459401s   2ms DEBUG Indirect paths found: 0
    ├─   0.459411s   2ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews
  ┌─┘
  ├─   0.459423s   2ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.459448s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(reviews)- Review/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(reviews)- Review/reviews", current_cost=2006}
      ├─   0.459479s   0ms DEBUG checking edge Review/reviews -(id)- ID/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(reviews)- Review/reviews", edge="id"}
        ├─   0.459498s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.459515s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(reviews)- Review/reviews with edge Review/reviews -(id)- ID/reviews
      ├─   0.459523s   0ms INFO return=Ok([ { cost: 2007, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(31) --> EdgeIndex(5)" }])
    ┌─┘
    ├─   0.459539s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(reviews)- Review/reviews", current_cost=2006}
      ├─   0.459561s   0ms DEBUG Exploring edge Review/reviews -(🔑🧩{id})- Review/reviews
      ├─   0.459567s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.459573s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.459578s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.459590s   0ms DEBUG Indirect paths found: 0
    ├─   0.459598s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(reviews)- Review/reviews
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2007, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(31) --> EdgeIndex(5)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=7}
  ├─   0.459640s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=7}
    ├─   0.459653s   0ms DEBUG Processing edge: root(Query) -(accounts)- Query/accounts
    └─┐from_path_segment_sequences{current_index=1, total_segments=7}
      ├─   0.459665s   0ms DEBUG Processing edge: Query/accounts -(me)- User/accounts
      └─┐from_path_segment_sequences{current_index=2, total_segments=7}
        ├─   0.459677s   0ms DEBUG Processing edge: User/accounts -(🔑🧩{id})- User/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=7}
          ├─   0.459690s   0ms DEBUG Processing edge: User/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=7}
            ├─   0.459703s   0ms DEBUG Processing edge: Review/reviews -(product)- Product/reviews
            └─┐from_path_segment_sequences{current_index=5, total_segments=7}
              ├─   0.459717s   0ms DEBUG Processing edge: Product/reviews -(reviews)- Review/reviews
              └─┐from_path_segment_sequences{current_index=6, total_segments=7}
                ├─   0.459731s   0ms DEBUG Processing edge: Review/reviews -(id)- ID/reviews
                └─┐from_path_segment_sequences{current_index=7, total_segments=7}
                ┌─┘
                ├─   0.459752s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.459766s   0ms DEBUG Adding subsequent step as child
            ┌─┘
            ├─   0.459778s   0ms DEBUG Adding subsequent step as child
          ┌─┘
          ├─   0.459790s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.459801s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.459812s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.459822s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="accounts", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="me", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.459931s   0ms DEBUG adding output field 'me' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="User/accounts -(🔑🧩{id})- User/reviews", parent_fetch_step_index=1}
              ├─   0.459965s   0ms DEBUG created a new fetch step [2] subgraph(reviews) type(User) requirement() key({id}) in children of 1
              ├─   0.459973s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.459980s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.459988s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="me", fetch_path="me"}
                      ├─   0.460046s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.460071s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="reviews", leaf=false, list=true, response_path="me", fetch_path=""}
                  ├─   0.460161s   0ms DEBUG adding output field 'reviews' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Review", field="product", leaf=false, list=false, response_path="me.reviews.@", fetch_path="reviews.@"}
                      ├─   0.460188s   0ms DEBUG adding output field 'product' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                        └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Product", field="reviews", leaf=false, list=true, response_path="me.reviews.@.product", fetch_path="reviews.@.product"}
                          ├─   0.460249s   0ms DEBUG adding output field 'reviews' to fetch step [2]
                          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                            └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Review", field="id", leaf=true, list=false, response_path="me.reviews.@.product.reviews.@", fetch_path="reviews.@.product.reviews.@"}
                              ├─   0.460283s   0ms DEBUG adding output field 'id' to fetch step [2]
                              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                              ┌─┘
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.460421s   0ms DEBUG Done
├─   0.460429s   0ms DEBUG found roots
├─   0.460433s   0ms DEBUG print graph
├─   0.460438s   0ms DEBUG Nodes:
│ [1] Query/accounts {} → {me{__typename id}} at $.
│ [2] User/reviews {__typename id} → {reviews{product{reviews{id}}}} at $.me
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="accounts"}
      └─┐execute{subgraph_name="accounts"}
        ├─   0.460827s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.462320s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"me": Object {"__typename": String("User"), "id": String("u1")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="reviews"}
        └─┐execute{subgraph_name="reviews"}
          ├─   0.462679s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.464238s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.464501s DEBUG execution result: ExecutionResult { data: Some(Object {"me": Object {"reviews": Array [Object {"product": Object {"reviews": Array [Object {"id": String("r1")}]}}, Object {"product": Object {"reviews": Array [Object {"id": String("r2")}]}}]}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("accounts"), "operationKind": String("query"), "operation": String("{me{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("me")], "node": Object {"kind": String("Fetch"), "serviceName": String("reviews"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{reviews{product{reviews{id}}}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.467135s DEBUG original document: query {
  me {
    reviews {
      product {
        inStock
      }
    }
  }
}

   0.467206s DEBUG normalized document: query{me{reviews{product{inStock}}}}

   0.467214s DEBUG executable operation: query{me{reviews{product{inStock}}}}
┐walk_operation{}
├─   0.467499s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="me", leaf=false}
  ├─   0.467545s   0ms DEBUG Trying to advance to: me{reviews{product{inStock}}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.467593s   0ms DEBUG checking edge Query/accounts -(me)- User/accounts
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts", edge="me"}
        ├─   0.467614s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.467635s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts with edge Query/accounts -(me)- User/accounts
      ├─   0.467647s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.467664s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.467692s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.467699s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.467711s   0ms DEBUG Indirect paths found: 0
    ├─   0.467736s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts
  ┌─┘
  └─┐explore_path{path="root(Query) -(products)- Query/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.467776s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.467789s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.467820s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.467839s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.467857s   0ms DEBUG Indirect paths found: 0
    ├─   0.467867s   0ms WARN failed to advance: root(Query) -(products)- Query/products
  ┌─┘
  ├─   0.467882s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="reviews", leaf=false}
  ├─   0.467905s   0ms DEBUG Trying to advance to: reviews{product{inStock}} through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.467934s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.467946s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.467965s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
        ├─   0.467985s   0ms DEBUG checking requirements {id} for edge 'User/accounts -(🔑🧩{id})- User/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.468021s   0ms DEBUG checking edge User/accounts -(id)- ID/accounts
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
                ├─   0.468040s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.468057s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts with edge User/accounts -(id)- ID/accounts
              ├─   0.468066s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.468097s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
              ├─   0.468114s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.468122s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
              ├─   0.468129s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.468136s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.468152s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.468205s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.468228s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.468243s   0ms DEBUG Paths for id
        ├─   0.468253s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(id)- ID/accounts is valid
        ├─   0.468271s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.468301s   0ms DEBUG path User/accounts -(id)- ID/accounts is valid
        ├─   0.468310s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.468342s   0ms DEBUG Advancing path to User/accounts -(🔑🧩{id})- User/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/accounts"}
        └─┐create_root_for_path_sequences{root_node="User/accounts", segments_count=1}
          ├─   0.468375s   0ms DEBUG Building root query tree node: User/accounts
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.468391s   0ms DEBUG Processing edge: User/accounts -(id)- ID/accounts
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.468415s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", current_cost=2003}
        ├─   0.468464s   0ms DEBUG checking edge User/reviews -(reviews)- Review/reviews
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", edge="reviews"}
          ├─   0.468483s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.468500s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews with edge User/reviews -(reviews)- Review/reviews
        ├─   0.468509s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13)" }])
      ┌─┘
      ├─   0.468525s   0ms DEBUG Found 1 direct paths to User/accounts -(🔑🧩{id})- User/reviews
      ├─   0.468534s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
      ├─   0.468539s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.468547s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.468553s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.468567s   0ms DEBUG Indirect paths found: 1
    ├─   0.468575s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts
  ┌─┘
  ├─   0.468588s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="product", leaf=false}
  ├─   0.468623s   0ms DEBUG Trying to advance to: product{inStock} through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.468679s   0ms DEBUG checking edge Review/reviews -(product)- Product/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", edge="product"}
        ├─   0.468700s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.468721s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews with edge Review/reviews -(product)- Product/reviews
      ├─   0.468730s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.468747s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "inStock", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.468780s   0ms DEBUG Exploring edge Review/reviews -(🔑🧩{id})- Review/reviews
      ├─   0.468786s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.468793s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.468798s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.468810s   0ms DEBUG Indirect paths found: 0
    ├─   0.468819s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews
  ┌─┘
  ├─   0.468830s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="inStock", leaf=true}
  ├─   0.468872s   0ms DEBUG Trying to advance to: inStock through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "inStock", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.468932s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.468948s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "inStock", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.468969s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.468975s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.468981s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.469001s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.469041s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.469061s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.469080s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.469104s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.469160s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.469168s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.469174s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.469195s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
              ├─   0.469207s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.469237s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.469292s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.469318s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.469341s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.469352s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.469406s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.469417s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.469425s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.469433s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                      ├─   0.469441s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.469449s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                      ├─   0.469459s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.469466s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.469499s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.469522s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.469538s   0ms DEBUG Paths for upc
                ├─   0.469551s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.469566s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.469579s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.469585s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.469617s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.469667s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.469685s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.469735s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.469806s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.469830s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.469851s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.469875s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.469904s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.469916s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.469927s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.469945s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.469964s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.469996s   1ms DEBUG Paths for upc
        ├─   0.470011s   1ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.470021s   1ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.470029s   1ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.470040s   1ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.470046s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.470061s   1ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.470090s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.470105s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.470125s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "inStock", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
        ├─   0.470187s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.470205s   1ms DEBUG No direct paths found
      ├─   0.470216s   1ms DEBUG going deeper
      ├─   0.470225s   1ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.470250s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.470286s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.470306s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.470325s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.470334s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.470369s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.470377s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.470383s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.470404s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.470442s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.470464s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.470484s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.470494s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.470530s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.470538s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.470545s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.470553s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                      ├─   0.470577s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.470588s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                      ├─   0.470598s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.470605s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.470626s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.470661s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.470684s   0ms DEBUG Paths for upc
                ├─   0.470697s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.470705s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.470717s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.470724s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.470740s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.470785s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.470801s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.470854s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
                ├─   0.470931s   0ms DEBUG checking edge Product/products -(upc)- String/products
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", edge="upc"}
                  ├─   0.470956s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.470976s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                ├─   0.470986s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
              ┌─┘
              ├─   0.471006s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.471016s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.471024s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.471034s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.471041s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
            ┌─┘
            ├─   0.471059s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
          ┌─┘
          ├─   0.471077s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
        ┌─┘
        ├─   0.471094s   0ms DEBUG Paths for upc
        ├─   0.471104s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.471114s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
        ├─   0.471121s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.471131s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.471137s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.471151s   2ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.471176s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.471190s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.471211s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "inStock", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
        ├─   0.471284s   0ms DEBUG checking edge Product/inventory -(inStock)- Boolean/inventory
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="inStock"}
          ├─   0.471307s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.471325s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(inStock)- Boolean/inventory
        ├─   0.471334s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(22)" }])
      ┌─┘
      ├─   0.471353s   2ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
      ├─   0.471362s   2ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      ├─   0.471369s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.471375s   2ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.471382s   2ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
      ├─   0.471388s   2ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      ├─   0.471396s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.471405s   2ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.471411s   2ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(22)" }])
    ┌─┘
    ├─   0.471427s   2ms DEBUG Indirect paths found: 1
    ├─   0.471436s   2ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(22)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=7}
  ├─   0.471500s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=7}
    ├─   0.471525s   0ms DEBUG Processing edge: root(Query) -(accounts)- Query/accounts
    └─┐from_path_segment_sequences{current_index=1, total_segments=7}
      ├─   0.471543s   0ms DEBUG Processing edge: Query/accounts -(me)- User/accounts
      └─┐from_path_segment_sequences{current_index=2, total_segments=7}
        ├─   0.471558s   0ms DEBUG Processing edge: User/accounts -(🔑🧩{id})- User/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=7}
          ├─   0.471571s   0ms DEBUG Processing edge: User/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=7}
            ├─   0.471584s   0ms DEBUG Processing edge: Review/reviews -(product)- Product/reviews
            └─┐from_path_segment_sequences{current_index=5, total_segments=7}
              ├─   0.471598s   0ms DEBUG Processing edge: Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path_segment_sequences{current_index=6, total_segments=7}
                ├─   0.471612s   0ms DEBUG Processing edge: Product/inventory -(inStock)- Boolean/inventory
                └─┐from_path_segment_sequences{current_index=7, total_segments=7}
                ┌─┘
                ├─   0.471636s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.471661s   0ms DEBUG Adding subsequent step as child
            ┌─┘
            ├─   0.471674s   0ms DEBUG Adding subsequent step as child
          ┌─┘
          ├─   0.471685s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.471697s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.471707s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.471719s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="accounts", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="me", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.471831s   0ms DEBUG adding output field 'me' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="User/accounts -(🔑🧩{id})- User/reviews", parent_fetch_step_index=1}
              ├─   0.471867s   0ms DEBUG created a new fetch step [2] subgraph(reviews) type(User) requirement() key({id}) in children of 1
              ├─   0.471875s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.471882s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.471890s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="me", fetch_path="me"}
                      ├─   0.471994s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.472023s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="reviews", leaf=false, list=true, response_path="me", fetch_path=""}
                  ├─   0.472116s   0ms DEBUG adding output field 'reviews' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Review", field="product", leaf=false, list=false, response_path="me.reviews.@", fetch_path="reviews.@"}
                      ├─   0.472165s   0ms DEBUG adding output field 'product' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                        └─┐process_entity_move_edge{edge="Product/reviews -(🔑🧩{upc})- Product/inventory", parent_fetch_step_index=2}
                          ├─   0.472200s   0ms DEBUG created a new fetch step [3] subgraph(inventory) type(Product) requirement() key({upc}) in children of 2
                          ├─   0.472209s   0ms DEBUG adding input requirement '{upc}' to fetch step [3]
                          ├─   0.472219s   0ms DEBUG adding __typename field to output for type 'Product'
                          ├─   0.472228s   0ms DEBUG connecting fetch step to parent [2] -> [3]
                          └─┐connect{parent=2, child=3}
                          ┌─┘
                          └─┐process_requirements_for_fetch_steps{count=1}
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                                └─┐process_plain_field_edge{parent_fetch_step_index=2, requiring_fetch_step_index=3, type_name="Product", field="upc", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path="reviews.@.product"}
                                  ├─   0.472303s   0ms DEBUG connecting parent fetch step [2] to requiring fetch step [3]
                                  └─┐connect{parent=2, child=3}
                                  ┌─┘
                                  ├─   0.472332s   0ms DEBUG adding output field 'upc' to fetch step [2]
                                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            └─┐connect{parent=2, child=3}
                            ┌─┘
                          ┌─┘
                          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                            └─┐process_plain_field_edge{parent_fetch_step_index=3, type_name="Product", field="inStock", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path=""}
                              ├─   0.472466s   0ms DEBUG adding output field 'inStock' to fetch step [3]
                              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                              ┌─┘
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.472618s   0ms DEBUG Done
├─   0.472628s   0ms DEBUG found roots
├─   0.472633s   0ms DEBUG print graph
├─   0.472638s   0ms DEBUG Nodes:
│ [1] Query/accounts {} → {me{__typename id}} at $.
│ [2] User/reviews {__typename id} → {reviews{product{__typename upc}}} at $.me
│ [3] Product/inventory {__typename upc} → {inStock} at $.me.reviews.@.product
│ 
│ Tree:
│ [1]
│   [2]
│     [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="accounts"}
      └─┐execute{subgraph_name="accounts"}
        ├─   0.473095s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.474697s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"me": Object {"__typename": String("User"), "id": String("u1")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="reviews"}
        └─┐execute{subgraph_name="reviews"}
          ├─   0.475134s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.476765s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"me": Object {"__typename": String("User"), "id": String("u1"), "reviews": Array [Object {"product": Object {"__typename": String("Product"), "upc": String("p1")}}, Object {"product": Object {"__typename": String("Product"), "upc": String("p2")}}]}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "upc": String("p1")}, Object {"__typename": String("Product"), "upc": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="inventory"}
        └─┐execute{subgraph_name="inventory"}
          ├─   0.477254s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.478546s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.478861s DEBUG execution result: ExecutionResult { data: Some(Object {"me": Object {"reviews": Array [Object {"product": Object {"inStock": Bool(true)}}, Object {"product": Object {"inStock": Bool(false)}}]}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("accounts"), "operationKind": String("query"), "operation": String("{me{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("me")], "node": Object {"kind": String("Fetch"), "serviceName": String("reviews"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{reviews{product{__typename upc}}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("me"), String("reviews"), String("@"), String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("inventory"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{inStock}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("upc")}]}]}}]}}}) }
   0.481255s DEBUG original document: query {
  me {
    reviews {
      product {
        shippingEstimate
      }
    }
  }
}

   0.481335s DEBUG normalized document: query{me{reviews{product{shippingEstimate}}}}

   0.481366s DEBUG executable operation: query{me{reviews{product{shippingEstimate}}}}
┐walk_operation{}
├─   0.481678s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="me", leaf=false}
  ├─   0.481727s   0ms DEBUG Trying to advance to: me{reviews{product{shippingEstimate}}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.481799s   0ms DEBUG checking edge Query/accounts -(me)- User/accounts
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts", edge="me"}
        ├─   0.481824s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.481846s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts with edge Query/accounts -(me)- User/accounts
      ├─   0.481859s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.481876s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.481905s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.481912s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.481926s   0ms DEBUG Indirect paths found: 0
    ├─   0.481934s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts
  ┌─┘
  └─┐explore_path{path="root(Query) -(products)- Query/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.481986s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.482002s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.482022s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.482027s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.482039s   0ms DEBUG Indirect paths found: 0
    ├─   0.482045s   0ms WARN failed to advance: root(Query) -(products)- Query/products
  ┌─┘
  ├─   0.482060s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="reviews", leaf=false}
  ├─   0.482083s   0ms DEBUG Trying to advance to: reviews{product{shippingEstimate}} through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.482133s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.482149s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.482169s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
        ├─   0.482190s   0ms DEBUG checking requirements {id} for edge 'User/accounts -(🔑🧩{id})- User/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.482229s   0ms DEBUG checking edge User/accounts -(id)- ID/accounts
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
                ├─   0.482249s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.482268s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts with edge User/accounts -(id)- ID/accounts
              ├─   0.482289s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.482337s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
              ├─   0.482349s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.482357s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
              ├─   0.482364s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.482373s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.482379s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.482401s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.482419s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.482433s   0ms DEBUG Paths for id
        ├─   0.482442s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(id)- ID/accounts is valid
        ├─   0.482462s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.482483s   0ms DEBUG path User/accounts -(id)- ID/accounts is valid
        ├─   0.482490s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.482509s   0ms DEBUG Advancing path to User/accounts -(🔑🧩{id})- User/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/accounts"}
        └─┐create_root_for_path_sequences{root_node="User/accounts", segments_count=1}
          ├─   0.482538s   0ms DEBUG Building root query tree node: User/accounts
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.482553s   0ms DEBUG Processing edge: User/accounts -(id)- ID/accounts
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.482575s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", current_cost=2003}
        ├─   0.482638s   0ms DEBUG checking edge User/reviews -(reviews)- Review/reviews
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", edge="reviews"}
          ├─   0.482666s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.482685s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews with edge User/reviews -(reviews)- Review/reviews
        ├─   0.482716s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13)" }])
      ┌─┘
      ├─   0.482754s   0ms DEBUG Found 1 direct paths to User/accounts -(🔑🧩{id})- User/reviews
      ├─   0.482766s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
      ├─   0.482782s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.482793s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.482799s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.482820s   0ms DEBUG Indirect paths found: 1
    ├─   0.482830s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts
  ┌─┘
  ├─   0.482842s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="product", leaf=false}
  ├─   0.482881s   0ms DEBUG Trying to advance to: product{shippingEstimate} through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.482941s   0ms DEBUG checking edge Review/reviews -(product)- Product/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", edge="product"}
        ├─   0.482962s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.482981s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews with edge Review/reviews -(product)- Product/reviews
      ├─   0.482990s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.483012s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.483035s   0ms DEBUG Exploring edge Review/reviews -(🔑🧩{id})- Review/reviews
      ├─   0.483040s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.483047s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.483091s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.483108s   0ms DEBUG Indirect paths found: 0
    ├─   0.483121s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews
  ┌─┘
  ├─   0.483134s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="shippingEstimate", leaf=true}
  ├─   0.483157s   0ms DEBUG Trying to advance to: shippingEstimate through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.483189s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.483202s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.483223s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.483229s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.483235s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.483256s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.483299s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.483320s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.483339s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.483348s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.483421s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.483432s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.483439s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.483445s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
              ├─   0.483453s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.483483s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.483527s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.483551s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.483575s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.483585s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.483625s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.483633s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.483640s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.483649s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                      ├─   0.483657s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.483664s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                      ├─   0.483672s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.483693s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.483718s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.483739s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.483755s   0ms DEBUG Paths for upc
                ├─   0.483768s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.483775s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.483790s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.483811s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.483837s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.483868s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.483884s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.483908s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.483977s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.484010s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.484032s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.484043s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.484062s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.484074s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.484081s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.484099s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.484124s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.484140s   0ms DEBUG Paths for upc
        ├─   0.484150s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.484160s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.484166s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.484177s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.484183s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.484197s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.484222s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.484236s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.484257s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
        ├─   0.484305s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.484318s   1ms DEBUG No direct paths found
      ├─   0.484328s   1ms DEBUG going deeper
      ├─   0.484336s   1ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.484356s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.484407s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.484437s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.484459s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.484468s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.484503s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.484510s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.484517s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.484538s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.484577s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.484600s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.484620s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.484629s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.484664s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.484672s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.484680s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.484701s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                      ├─   0.484714s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.484721s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                      ├─   0.484730s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.484738s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.484759s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.484779s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.484812s   0ms DEBUG Paths for upc
                ├─   0.484828s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.484835s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.484848s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.484854s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.484881s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.484933s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.484951s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.484977s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
                ├─   0.485031s   0ms DEBUG checking edge Product/products -(upc)- String/products
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", edge="upc"}
                  ├─   0.485056s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.485078s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                ├─   0.485088s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
              ┌─┘
              ├─   0.485125s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.485137s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.485155s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.485168s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.485174s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
            ┌─┘
            ├─   0.485207s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
          ┌─┘
          ├─   0.485225s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
        ┌─┘
        ├─   0.485246s   0ms DEBUG Paths for upc
        ├─   0.485258s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.485267s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
        ├─   0.485275s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.485286s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.485292s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.485306s   2ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.485333s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.485347s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.485368s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
        ├─   0.485432s   0ms DEBUG checking edge Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="shippingEstimate"}
          ├─   0.485463s   0ms DEBUG checking requirements {price weight} for edge 'Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.485502s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.485539s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.485578s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.485629s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.485654s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.485679s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.485689s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.485735s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.485744s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                        ├─   0.485752s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.485780s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.485831s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.485862s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.485886s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.485897s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.485938s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.485947s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"products", "inventory", "reviews"})
                                ├─   0.485956s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.485964s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory", "reviews"})
                                ├─   0.485973s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.485981s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory", "reviews"})
                                ├─   0.485991s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.486000s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.486020s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.486041s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.486060s   0ms DEBUG Paths for upc
                          ├─   0.486072s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.486080s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.486094s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.486102s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.486120s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.486151s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.486170s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.486207s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                          ├─   0.486273s   0ms DEBUG checking edge Product/products -(upc)- String/products
                          └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="upc"}
                            ├─   0.486300s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.486323s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                          ├─   0.486335s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                        ┌─┘
                        ├─   0.486378s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.486391s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.486400s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                        ├─   0.486411s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.486418s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                      ┌─┘
                      ├─   0.486442s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                    ┌─┘
                    ├─   0.486465s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.486484s   0ms DEBUG Paths for upc
                  ├─   0.486497s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.486508s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
                  ├─   0.486516s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.486528s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.486535s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.486551s   1ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.486587s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.486605s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.486631s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                  ├─   0.486686s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.486701s   1ms DEBUG No direct paths found
                ├─   0.486711s   1ms DEBUG going deeper
                ├─   0.486720s   1ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.486770s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.486814s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.486839s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.486862s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.486886s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.486939s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.486967s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.487023s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.487067s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.487099s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.487111s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.487159s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.487169s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"products", "inventory", "reviews"})
                                ├─   0.487178s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.487186s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory", "reviews"})
                                ├─   0.487195s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.487204s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory", "reviews"})
                                ├─   0.487214s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.487223s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.487243s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.487283s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.487307s   0ms DEBUG Paths for upc
                          ├─   0.487322s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.487335s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.487349s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.487356s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.487377s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.487411s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.487430s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.487459s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                          ├─   0.487543s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                          └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", edge="upc"}
                            ├─   0.487573s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.487597s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                          ├─   0.487609s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                        ┌─┘
                        ├─   0.487649s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.487663s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.487671s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                        ├─   0.487680s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.487687s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                        ├─   0.487697s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.487713s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                      ┌─┘
                      ├─   0.487739s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                    ┌─┘
                    ├─   0.487761s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.487780s   1ms DEBUG Paths for upc
                  ├─   0.487794s   1ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.487806s   1ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
                  ├─   0.487814s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.487826s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.487833s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.487849s   2ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.487879s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.487896s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.487923s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                  ├─   0.487993s   0ms DEBUG checking edge Product/products -(price)- Int/products
                  └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="price"}
                    ├─   0.488034s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.488058s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(price)- Int/products
                  ├─   0.488073s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }])
                ┌─┘
                ├─   0.488093s   2ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                ├─   0.488103s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                ├─   0.488110s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
                ├─   0.488121s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                ├─   0.488127s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                ├─   0.488134s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                ├─   0.488144s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.488150s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                ├─   0.488156s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                ├─   0.488167s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.488173s   2ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }])
              ┌─┘
              ├─   0.488194s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }], [])))
            ┌─┘
            ├─   0.488211s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }], [])))
          ┌─┘
          ├─   0.488226s   2ms DEBUG Paths for price
          ├─   0.488238s   2ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(price)- Int/products is valid
          ├─   0.488249s   2ms DEBUG Found 1 best paths for this leaf requirement
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.488321s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.488374s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.488408s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.488452s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.488480s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.488504s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.488515s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.488554s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.488576s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                        ├─   0.488589s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.488621s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.488670s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.488699s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.488747s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.488761s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.488818s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.488828s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"products", "inventory", "reviews"})
                                ├─   0.488837s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.488845s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory", "reviews"})
                                ├─   0.488854s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.488862s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory", "reviews"})
                                ├─   0.488872s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.488881s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.488903s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.488931s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.488950s   0ms DEBUG Paths for upc
                          ├─   0.488963s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.488971s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.488985s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.488993s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.489012s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.489043s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.489061s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.489090s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                          ├─   0.489150s   0ms DEBUG checking edge Product/products -(upc)- String/products
                          └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="upc"}
                            ├─   0.489177s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.489200s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                          ├─   0.489212s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                        ┌─┘
                        ├─   0.489256s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.489268s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.489277s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                        ├─   0.489288s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.489295s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                      ┌─┘
                      ├─   0.489316s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                    ┌─┘
                    ├─   0.489338s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.489357s   0ms DEBUG Paths for upc
                  ├─   0.489370s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.489381s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
                  ├─   0.489389s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.489401s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.489408s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.489424s   1ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.489455s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.489472s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.489496s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                  ├─   0.489549s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.489564s   1ms DEBUG No direct paths found
                ├─   0.489574s   1ms DEBUG going deeper
                ├─   0.489583s   1ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.489607s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.489648s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.489672s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.489695s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.489704s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.489743s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.489769s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.489826s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.489853s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.489877s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.489888s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.489929s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.489938s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"products", "inventory", "reviews"})
                                ├─   0.489947s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.489955s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory", "reviews"})
                                ├─   0.489964s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.489972s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory", "reviews"})
                                ├─   0.489982s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.489990s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.490010s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.490032s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.490051s   0ms DEBUG Paths for upc
                          ├─   0.490064s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.490072s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.490085s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.490093s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.490111s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.490148s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.490167s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.490196s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                          ├─   0.490253s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                          └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", edge="upc"}
                            ├─   0.490297s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.490330s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                          ├─   0.490343s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                        ┌─┘
                        ├─   0.490365s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.490377s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.490385s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                        ├─   0.490393s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.490400s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                        ├─   0.490410s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.490418s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                      ┌─┘
                      ├─   0.490445s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                    ┌─┘
                    ├─   0.490466s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.490485s   0ms DEBUG Paths for upc
                  ├─   0.490497s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.490508s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
                  ├─   0.490515s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.490528s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.490548s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.490584s   2ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.490645s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.490674s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.490705s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                  ├─   0.490764s   0ms DEBUG checking edge Product/products -(weight)- Int/products
                  └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="weight"}
                    ├─   0.490789s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.490810s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(weight)- Int/products
                  ├─   0.490821s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }])
                ┌─┘
                ├─   0.490840s   2ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                ├─   0.490850s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                ├─   0.490858s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
                ├─   0.490866s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                ├─   0.490873s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                ├─   0.490880s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                ├─   0.490889s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.490895s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                ├─   0.490904s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                ├─   0.490914s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.490921s   2ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }])
              ┌─┘
              ├─   0.490959s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }], [])))
            ┌─┘
            ├─   0.490980s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }], [])))
          ┌─┘
          ├─   0.490996s   5ms DEBUG Paths for weight
          ├─   0.491010s   5ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(weight)- Int/products is valid
          ├─   0.491016s   5ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.491030s   5ms DEBUG path Product/inventory -(🔑🧩{upc})- Product/products -(price)- Int/products is valid
          ├─   0.491045s   5ms DEBUG path Product/inventory -(🔑🧩{upc})- Product/products -(weight)- Int/products is valid
          ├─   0.491050s   5ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(29)" },  { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(26)" }]))
        ┌─┘
        ├─   0.491071s   5ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(29)" }, root_node="Product/inventory"}
          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=2}
            ├─   0.491098s   0ms DEBUG Building root query tree node: Product/inventory
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.491113s   0ms DEBUG Processing edge: Product/inventory -(🔑🧩{upc})- Product/products
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.491131s   0ms DEBUG Processing edge: Product/products -(price)- Int/products
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.491153s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.491166s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(26)" }, root_node="Product/inventory"}
          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=2}
            ├─   0.491210s   0ms DEBUG Building root query tree node: Product/inventory
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.491224s   0ms DEBUG Processing edge: Product/inventory -(🔑🧩{upc})- Product/products
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.491239s   0ms DEBUG Processing edge: Product/products -(weight)- Int/products
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.491260s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.491273s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐merge_trees{tree_count=2}
        ┌─┘
        ├─   0.491322s   5ms INFO return=Ok([ { cost: 3011, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(21)" }])
      ┌─┘
      ├─   0.491340s   8ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
      ├─   0.491350s   8ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      ├─   0.491356s   8ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.491362s   8ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.491368s   8ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
      ├─   0.491374s   8ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      ├─   0.491381s   8ms DEBUG Ignoring. Already visited similar edge
      ├─   0.491400s   8ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.491410s   8ms INFO return=Ok([ { cost: 3011, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(21)" }])
    ┌─┘
    ├─   0.491432s   8ms DEBUG Indirect paths found: 1
    ├─   0.491445s   8ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 3011, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(21)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=7}
  ├─   0.491497s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=7}
    ├─   0.491509s   0ms DEBUG Processing edge: root(Query) -(accounts)- Query/accounts
    └─┐from_path_segment_sequences{current_index=1, total_segments=7}
      ├─   0.491522s   0ms DEBUG Processing edge: Query/accounts -(me)- User/accounts
      └─┐from_path_segment_sequences{current_index=2, total_segments=7}
        ├─   0.491534s   0ms DEBUG Processing edge: User/accounts -(🔑🧩{id})- User/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=7}
          ├─   0.491547s   0ms DEBUG Processing edge: User/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=7}
            ├─   0.491560s   0ms DEBUG Processing edge: Review/reviews -(product)- Product/reviews
            └─┐from_path_segment_sequences{current_index=5, total_segments=7}
              ├─   0.491574s   0ms DEBUG Processing edge: Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path_segment_sequences{current_index=6, total_segments=7}
                ├─   0.491589s   0ms DEBUG Processing edge: Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
                └─┐from_path_segment_sequences{current_index=7, total_segments=7}
                ┌─┘
                ├─   0.491612s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.491625s   0ms DEBUG Adding subsequent step as child
            ┌─┘
            ├─   0.491637s   0ms DEBUG Adding subsequent step as child
          ┌─┘
          ├─   0.491649s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.491661s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.491671s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.491682s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="accounts", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="me", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.491795s   0ms DEBUG adding output field 'me' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="User/accounts -(🔑🧩{id})- User/reviews", parent_fetch_step_index=1}
              ├─   0.491832s   0ms DEBUG created a new fetch step [2] subgraph(reviews) type(User) requirement() key({id}) in children of 1
              ├─   0.491840s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.491847s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.491854s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="me", fetch_path="me"}
                      ├─   0.491912s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.491937s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="reviews", leaf=false, list=true, response_path="me", fetch_path=""}
                  ├─   0.492029s   0ms DEBUG adding output field 'reviews' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Review", field="product", leaf=false, list=false, response_path="me.reviews.@", fetch_path="reviews.@"}
                      ├─   0.492058s   0ms DEBUG adding output field 'product' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                        └─┐process_entity_move_edge{edge="Product/reviews -(🔑🧩{upc})- Product/inventory", parent_fetch_step_index=2}
                          ├─   0.492090s   0ms DEBUG created a new fetch step [3] subgraph(inventory) type(Product) requirement() key({upc}) in children of 2
                          ├─   0.492098s   0ms DEBUG adding input requirement '{upc}' to fetch step [3]
                          ├─   0.492107s   0ms DEBUG adding __typename field to output for type 'Product'
                          ├─   0.492115s   0ms DEBUG connecting fetch step to parent [2] -> [3]
                          └─┐connect{parent=2, child=3}
                          ┌─┘
                          └─┐process_requirements_for_fetch_steps{count=1}
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                                └─┐process_plain_field_edge{parent_fetch_step_index=2, requiring_fetch_step_index=3, type_name="Product", field="upc", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path="reviews.@.product"}
                                  ├─   0.492185s   0ms DEBUG connecting parent fetch step [2] to requiring fetch step [3]
                                  └─┐connect{parent=2, child=3}
                                  ┌─┘
                                  ├─   0.492214s   0ms DEBUG adding output field 'upc' to fetch step [2]
                                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            └─┐connect{parent=2, child=3}
                            ┌─┘
                          ┌─┘
                          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                            └─┐process_requires_field_edge{parent_fetch_step_index=3}
                              └─┐find_satisfiable_key{node="Product/inventory"}
                                └─┐can_satisfy_edge{path="Product/inventory", edge="upc"}
                                  ├─   0.492376s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/inventory", current_cost=0}
                                        ├─   0.492458s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                        └─┐can_satisfy_edge{path="Product/inventory", edge="upc"}
                                          ├─   0.492487s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.492524s   0ms DEBUG Advancing path Product/inventory with edge Product/inventory -(upc)- String/inventory
                                        ├─   0.492540s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(24)" }])
                                      ┌─┘
                                      ├─   0.492573s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(24)" }], [])))
                                    ┌─┘
                                    ├─   0.492595s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(24)" }], [])))
                                  ┌─┘
                                  ├─   0.492614s   0ms DEBUG Paths for upc
                                  ├─   0.492638s   0ms DEBUG   Path Product/inventory -(upc)- String/inventory is valid
                                  ├─   0.492650s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.492664s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                                  ├─   0.492673s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                                ┌─┘
                              ┌─┘
                              ├─   0.492708s   0ms DEBUG Key to re-enter: {upc}
                              ├─   0.492718s   0ms DEBUG Creating a fetch step for children of @requires
                              ├─   0.492732s   0ms DEBUG created a new fetch step [4] subgraph(inventory) type(Product) requirement({price weight}) in children of 2
                              ├─   0.492752s   0ms DEBUG Adding {price weight} to fetch([4]).input
                              ├─   0.492762s   0ms DEBUG Adding {upc} to fetch([4]).input
                              ├─   0.492770s   0ms DEBUG Creating a fetch step for requirement of @requires
                              ├─   0.492781s   0ms DEBUG Adding {upc} to fetch([5]).input
                              └─┐connect{parent=2, child=5}
                              ┌─┘
                              ├─   0.492821s   0ms DEBUG Processing requirements
                              └─┐process_noop_edge{}
                                └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                                  └─┐process_entity_move_edge{edge="Product/inventory -(🔑🧩{upc})- Product/products", parent_fetch_step_index=5}
                                    ├─   0.492868s   0ms DEBUG created a new fetch step [6] subgraph(products) type(Product) requirement() key({upc}) in children of 5
                                    ├─   0.492891s   0ms DEBUG adding input requirement '{upc}' to fetch step [6]
                                    ├─   0.492905s   0ms DEBUG adding __typename field to output for type 'Product'
                                    ├─   0.492915s   0ms DEBUG connecting fetch step to parent [5] -> [6]
                                    └─┐connect{parent=5, child=6}
                                    ┌─┘
                                    └─┐process_requirements_for_fetch_steps{count=1}
                                      └─┐process_noop_edge{}
                                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5, requiring_fetch_step_index=6}
                                          └─┐process_plain_field_edge{parent_fetch_step_index=5, requiring_fetch_step_index=6, type_name="Product", field="upc", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path=""}
                                            ├─   0.493015s   0ms DEBUG connecting parent fetch step [5] to requiring fetch step [6]
                                            └─┐connect{parent=5, child=6}
                                            ┌─┘
                                            ├─   0.493058s   0ms DEBUG adding output field 'upc' to fetch step [5]
                                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5, requiring_fetch_step_index=6}
                                            ┌─┘
                                          ┌─┘
                                        ┌─┘
                                      ┌─┘
                                      └─┐connect{parent=5, child=6}
                                      ┌─┘
                                    ┌─┘
                                    └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=6}
                                      └─┐process_plain_field_edge{parent_fetch_step_index=6, type_name="Product", field="price", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path=""}
                                        ├─   0.493185s   0ms DEBUG adding output field 'price' to fetch step [6]
                                        └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                                        ┌─┘
                                      ┌─┘
                                      └─┐process_plain_field_edge{parent_fetch_step_index=6, type_name="Product", field="weight", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path=""}
                                        ├─   0.493242s   0ms DEBUG adding output field 'weight' to fetch step [6]
                                        └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                                        ┌─┘
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                              ├─   0.493341s   1ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                              └─┐connect{parent=6, child=4}
                              ┌─┘
                              └─┐connect{parent=6, child=4}
                              ┌─┘
                              ├─   0.493393s   1ms DEBUG Processing children
                              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4}
                              ┌─┘
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.493526s   1ms DEBUG Done
├─   0.493535s   1ms DEBUG found roots
├─   0.493540s   1ms DEBUG print graph
├─   0.493544s   1ms DEBUG Nodes:
│ [1] Query/accounts {} → {me{__typename id}} at $.
│ [2] User/reviews {__typename id} → {reviews{product{__typename upc}}} at $.me
│ [3] Product/inventory {__typename upc} → {} at $.me.reviews.@.product
│ [4] Product/inventory {__typename price weight upc} → {shippingEstimate} at $.me.reviews.@.product
│ [5] Product/inventory {__typename upc} → {__typename upc} at $.me.reviews.@.product
│ [6] Product/products {__typename upc} → {price weight} at $.me.reviews.@.product
│ 
│ Tree:
│ [1]
│   [2]
│     [3]
│     [5]
│       [6]
│         [4]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.493609s   0ms DEBUG optimization found: merge parent [2] with a passthrough child [5]
    └─┐perform_passthrough_child_merge{}
      ├─   0.493626s   0ms DEBUG merging fetch steps [2] and [5]
      └─┐connect{parent=2, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.493715s   0ms DEBUG optimization found: remove 'Product/inventory {__typename upc} → {} at $.me.reviews.@.product'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="accounts"}
      └─┐execute{subgraph_name="accounts"}
        ├─   0.494130s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.495901s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"me": Object {"__typename": String("User"), "id": String("u1")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="reviews"}
        └─┐execute{subgraph_name="reviews"}
          ├─   0.496340s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.497778s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"me": Object {"__typename": String("User"), "id": String("u1"), "reviews": Array [Object {"product": Object {"__typename": String("Product"), "upc": String("p1")}}, Object {"product": Object {"__typename": String("Product"), "upc": String("p2")}}]}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "upc": String("p1")}, Object {"__typename": String("Product"), "upc": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="products"}
        └─┐execute{subgraph_name="products"}
          ├─   0.498327s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.500089s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"me": Object {"__typename": String("User"), "id": String("u1"), "reviews": Array [Object {"product": Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1)}}, Object {"product": Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2)}}]}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1)}, Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(11)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(1)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(22)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(2)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="inventory"}
        └─┐execute{subgraph_name="inventory"}
          ├─   0.500628s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.501904s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.502175s DEBUG execution result: ExecutionResult { data: Some(Object {"me": Object {"reviews": Array [Object {"product": Object {"shippingEstimate": Number(110)}}, Object {"product": Object {"shippingEstimate": Number(440)}}]}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("accounts"), "operationKind": String("query"), "operation": String("{me{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("me")], "node": Object {"kind": String("Fetch"), "serviceName": String("reviews"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{reviews{product{__typename upc}}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("me"), String("reviews"), String("@"), String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("products"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{price weight}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("upc")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("me"), String("reviews"), String("@"), String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("inventory"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{shippingEstimate}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("weight")}, Object {"kind": String("Field"), "name": String("upc")}]}]}}]}}}) }
   0.504414s DEBUG original document: query {
  me {
    reviews {
      product {
        shippingEstimate
        shippingEstimateTag
      }
    }
  }
}

   0.504491s DEBUG normalized document: query{me{reviews{product{shippingEstimate shippingEstimateTag}}}}

   0.504499s DEBUG executable operation: query{me{reviews{product{shippingEstimate shippingEstimateTag}}}}
┐walk_operation{}
├─   0.504828s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="me", leaf=false}
  ├─   0.504878s   0ms DEBUG Trying to advance to: me{reviews{product{shippingEstimate shippingEstimateTag}}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimateTag", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.504936s   0ms DEBUG checking edge Query/accounts -(me)- User/accounts
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts", edge="me"}
        ├─   0.504958s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.504979s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts with edge Query/accounts -(me)- User/accounts
      ├─   0.504991s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.505007s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimateTag", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts", current_cost=1000}
      ├─   0.505036s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.505043s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.505055s   0ms DEBUG Indirect paths found: 0
    ├─   0.505062s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts
  ┌─┘
  └─┐explore_path{path="root(Query) -(products)- Query/products"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimateTag", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.505092s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.505104s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "me", selections: SelectionSet { items: [SelectionItem::Field { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimateTag", selections: SelectionSet { items: [] } }] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(products)- Query/products", current_cost=1000}
      ├─   0.505120s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.505125s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.505136s   0ms DEBUG Indirect paths found: 0
    ├─   0.505142s   0ms WARN failed to advance: root(Query) -(products)- Query/products
  ┌─┘
  ├─   0.505157s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="reviews", leaf=false}
  ├─   0.505179s   0ms DEBUG Trying to advance to: reviews{product{shippingEstimate shippingEstimateTag}} through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimateTag", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.505207s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.505218s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimateTag", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
      ├─   0.505236s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
        ├─   0.505256s   0ms DEBUG checking requirements {id} for edge 'User/accounts -(🔑🧩{id})- User/reviews'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.505294s   0ms DEBUG checking edge User/accounts -(id)- ID/accounts
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", edge="id"}
                ├─   0.505314s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.505331s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts with edge User/accounts -(id)- ID/accounts
              ├─   0.505340s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts", current_cost=1001}
              ├─   0.505370s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/reviews
              ├─   0.505378s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"reviews"})
              ├─   0.505386s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
              ├─   0.505393s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.505400s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.505406s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.505424s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.505441s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.505455s   0ms DEBUG Paths for id
        ├─   0.505464s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(id)- ID/accounts is valid
        ├─   0.505471s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.505486s   0ms DEBUG path User/accounts -(id)- ID/accounts is valid
        ├─   0.505492s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.505507s   0ms DEBUG Advancing path to User/accounts -(🔑🧩{id})- User/reviews
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/accounts"}
        └─┐create_root_for_path_sequences{root_node="User/accounts", segments_count=1}
          ├─   0.505553s   0ms DEBUG Building root query tree node: User/accounts
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.505575s   0ms DEBUG Processing edge: User/accounts -(id)- ID/accounts
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.505614s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "reviews", selections: SelectionSet { items: [SelectionItem::Field { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimateTag", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", current_cost=2003}
        ├─   0.505675s   0ms DEBUG checking edge User/reviews -(reviews)- Review/reviews
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews", edge="reviews"}
          ├─   0.505695s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.505711s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews with edge User/reviews -(reviews)- Review/reviews
        ├─   0.505721s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13)" }])
      ┌─┘
      ├─   0.505737s   0ms DEBUG Found 1 direct paths to User/accounts -(🔑🧩{id})- User/reviews
      ├─   0.505746s   0ms DEBUG Exploring edge User/accounts -(🔑🧩{id})- User/accounts
      ├─   0.505752s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.505760s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.505765s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.505780s   0ms DEBUG Indirect paths found: 1
    ├─   0.505788s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts
  ┌─┘
  ├─   0.505799s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="product", leaf=false}
  ├─   0.505827s   0ms DEBUG Trying to advance to: product{shippingEstimate shippingEstimateTag} through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimateTag", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.505858s   0ms DEBUG checking edge Review/reviews -(product)- Product/reviews
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", edge="product"}
        ├─   0.505896s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.505930s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews with edge Review/reviews -(product)- Product/reviews
      ├─   0.505947s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.505962s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "shippingEstimate", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "shippingEstimateTag", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews", current_cost=2004}
      ├─   0.505988s   0ms DEBUG Exploring edge Review/reviews -(🔑🧩{id})- Review/reviews
      ├─   0.505994s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.506000s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.506006s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.506017s   0ms DEBUG Indirect paths found: 0
    ├─   0.506026s   0ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews
  ┌─┘
  ├─   0.506038s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="shippingEstimateTag", leaf=true}
  ├─   0.506058s   0ms DEBUG Trying to advance to: shippingEstimateTag through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimateTag", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.506089s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.506100s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "shippingEstimateTag", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.506119s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.506125s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.506131s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.506152s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.506188s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.506244s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.506272s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.506283s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.506320s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.506328s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.506335s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.506341s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
              ├─   0.506349s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.506371s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.506413s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.506436s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.506456s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.506466s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.506501s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.506509s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.506516s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.506523s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                      ├─   0.506560s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.506582s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                      ├─   0.506595s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.506602s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.506624s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.506645s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.506662s   0ms DEBUG Paths for upc
                ├─   0.506675s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.506682s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.506696s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.506702s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.506719s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.506749s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.506765s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.506789s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.506859s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.506891s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.506915s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.506926s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.506945s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.506957s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.506963s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.506981s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.507002s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.507018s   0ms DEBUG Paths for upc
        ├─   0.507028s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.507038s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.507045s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.507056s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.507062s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.507076s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.507101s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.507115s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.507136s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimateTag", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
        ├─   0.507197s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.507216s   1ms DEBUG No direct paths found
      ├─   0.507226s   1ms DEBUG going deeper
      ├─   0.507236s   1ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.507260s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.507295s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.507316s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.507334s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.507349s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.507385s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.507392s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.507399s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.507420s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.507462s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.507484s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.507505s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.507514s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.507549s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.507563s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.507570s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.507577s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                      ├─   0.507585s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.507592s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                      ├─   0.507601s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.507608s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.507626s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.507645s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.507661s   0ms DEBUG Paths for upc
                ├─   0.507671s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.507678s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.507690s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.507697s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.507713s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.507740s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.507756s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.507779s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
                ├─   0.507829s   0ms DEBUG checking edge Product/products -(upc)- String/products
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", edge="upc"}
                  ├─   0.507851s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.507871s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                ├─   0.507879s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
              ┌─┘
              ├─   0.507897s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.507906s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.507913s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.507922s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.507929s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
            ┌─┘
            ├─   0.507948s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
          ┌─┘
          ├─   0.507965s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
        ┌─┘
        ├─   0.507982s   0ms DEBUG Paths for upc
        ├─   0.507991s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.508001s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
        ├─   0.508008s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.508017s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.508023s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.508037s   1ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.508077s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.508095s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.508118s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimateTag", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
        ├─   0.508178s   0ms DEBUG checking edge Product/inventory -(shippingEstimateTag🧩{price weight})- String/inventory
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="shippingEstimateTag"}
          ├─   0.508199s   0ms DEBUG checking requirements {price weight} for edge 'Product/inventory -(shippingEstimateTag🧩{price weight})- String/inventory'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.508237s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.508289s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.508322s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.508367s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.508396s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.508421s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.508432s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.508471s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.508479s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                        ├─   0.508488s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.508516s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.508567s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.508597s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.508622s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.508632s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.508674s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.508683s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"products", "inventory", "reviews"})
                                ├─   0.508693s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.508701s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory", "reviews"})
                                ├─   0.508710s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.508718s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory", "reviews"})
                                ├─   0.508728s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.508736s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.508757s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.508778s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.508798s   0ms DEBUG Paths for upc
                          ├─   0.508811s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.508819s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.508833s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.508841s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.508860s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.508908s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.508933s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.508964s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                          ├─   0.509029s   0ms DEBUG checking edge Product/products -(upc)- String/products
                          └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="upc"}
                            ├─   0.509057s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.509080s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                          ├─   0.509091s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                        ┌─┘
                        ├─   0.509131s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.509146s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.509155s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                        ├─   0.509165s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.509173s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                      ┌─┘
                      ├─   0.509197s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                    ┌─┘
                    ├─   0.509218s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.509239s   0ms DEBUG Paths for upc
                  ├─   0.509251s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.509281s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
                  ├─   0.509293s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.509305s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.509313s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.509334s   1ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.509364s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.509383s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.509408s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                  ├─   0.509461s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.509476s   1ms DEBUG No direct paths found
                ├─   0.509485s   1ms DEBUG going deeper
                ├─   0.509494s   1ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.509535s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.509586s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.509623s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.509654s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.509666s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.509708s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.509735s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.509783s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.509812s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.509837s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.509849s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.509891s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.509901s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"products", "inventory", "reviews"})
                                ├─   0.509910s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.509918s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory", "reviews"})
                                ├─   0.509927s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.509935s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory", "reviews"})
                                ├─   0.509945s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.509953s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.509973s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.509994s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.510033s   0ms DEBUG Paths for upc
                          ├─   0.510050s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.510059s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.510073s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.510081s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.510100s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.510134s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.510152s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.510186s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                          ├─   0.510271s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                          └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", edge="upc"}
                            ├─   0.510303s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.510328s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                          ├─   0.510340s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                        ┌─┘
                        ├─   0.510362s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.510378s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.510386s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                        ├─   0.510394s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.510402s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                        ├─   0.510412s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.510434s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                      ┌─┘
                      ├─   0.510464s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                    ┌─┘
                    ├─   0.510485s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.510505s   1ms DEBUG Paths for upc
                  ├─   0.510518s   1ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.510530s   1ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
                  ├─   0.510549s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.510566s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.510573s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.510594s   2ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.510625s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.510641s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.510665s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                  ├─   0.510735s   0ms DEBUG checking edge Product/products -(price)- Int/products
                  └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="price"}
                    ├─   0.510769s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.510793s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(price)- Int/products
                  ├─   0.510805s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }])
                ┌─┘
                ├─   0.510825s   2ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                ├─   0.510835s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                ├─   0.510842s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
                ├─   0.510851s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                ├─   0.510857s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                ├─   0.510864s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                ├─   0.510873s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.510879s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                ├─   0.510885s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                ├─   0.510913s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.510922s   2ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }])
              ┌─┘
              ├─   0.510947s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }], [])))
            ┌─┘
            ├─   0.510964s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }], [])))
          ┌─┘
          ├─   0.510979s   2ms DEBUG Paths for price
          ├─   0.510993s   2ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(price)- Int/products is valid
          ├─   0.510999s   2ms DEBUG Found 1 best paths for this leaf requirement
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.511059s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.511105s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.511130s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.511171s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.511195s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.511218s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.511229s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.511267s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.511275s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                        ├─   0.511284s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.511308s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.511370s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.511410s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.511436s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.511448s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.511492s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.511501s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"products", "inventory", "reviews"})
                                ├─   0.511510s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.511518s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory", "reviews"})
                                ├─   0.511527s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.511535s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory", "reviews"})
                                ├─   0.511545s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.511553s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.511573s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.511594s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.511639s   0ms DEBUG Paths for upc
                          ├─   0.511654s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.511674s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.511693s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.511701s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.511724s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.511758s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.511776s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.511824s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                          ├─   0.511889s   0ms DEBUG checking edge Product/products -(upc)- String/products
                          └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="upc"}
                            ├─   0.511916s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.511939s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                          ├─   0.511956s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                        ┌─┘
                        ├─   0.511977s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.511988s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.511996s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                        ├─   0.512007s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.512014s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                      ┌─┘
                      ├─   0.512038s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                    ┌─┘
                    ├─   0.512059s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.512084s   0ms DEBUG Paths for upc
                  ├─   0.512096s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.512107s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
                  ├─   0.512115s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.512127s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.512134s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.512150s   1ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.512178s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.512196s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.512220s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                  ├─   0.512275s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.512289s   1ms DEBUG No direct paths found
                ├─   0.512298s   1ms DEBUG going deeper
                ├─   0.512307s   1ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.512331s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.512447s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.512478s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.512503s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.512514s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.512580s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.512608s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.512655s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.512685s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.512710s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.512722s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.512775s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.512785s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"products", "inventory", "reviews"})
                                ├─   0.512794s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.512802s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory", "reviews"})
                                ├─   0.512811s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.512821s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory", "reviews"})
                                ├─   0.512831s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.512839s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.512859s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.512880s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.512899s   0ms DEBUG Paths for upc
                          ├─   0.512912s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.512920s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.512933s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.512941s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.512959s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.512995s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.513013s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.513041s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                          ├─   0.513118s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                          └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", edge="upc"}
                            ├─   0.513155s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.513180s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                          ├─   0.513193s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                        ┌─┘
                        ├─   0.513215s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.513226s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.513234s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products", "inventory"})
                        ├─   0.513242s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.513249s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"products", "inventory"})
                        ├─   0.513259s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.513267s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                      ┌─┘
                      ├─   0.513288s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                    ┌─┘
                    ├─   0.513308s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.513328s   1ms DEBUG Paths for upc
                  ├─   0.513339s   1ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.513351s   1ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
                  ├─   0.513365s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.513377s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.513384s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.513400s   2ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.513428s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.513445s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.513469s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                  ├─   0.513521s   0ms DEBUG checking edge Product/products -(weight)- Int/products
                  └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="weight"}
                    ├─   0.513546s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.513567s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(weight)- Int/products
                  ├─   0.513577s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }])
                ┌─┘
                ├─   0.513595s   2ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                ├─   0.513604s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                ├─   0.513612s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
                ├─   0.513621s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                ├─   0.513627s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                ├─   0.513634s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                ├─   0.513643s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.513649s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                ├─   0.513656s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                ├─   0.513666s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.513672s   2ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }])
              ┌─┘
              ├─   0.513691s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }], [])))
            ┌─┘
            ├─   0.513707s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }], [])))
          ┌─┘
          ├─   0.513723s   5ms DEBUG Paths for weight
          ├─   0.513734s   5ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(weight)- Int/products is valid
          ├─   0.513740s   5ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.513751s   5ms DEBUG path Product/inventory -(🔑🧩{upc})- Product/products -(price)- Int/products is valid
          ├─   0.513759s   5ms DEBUG path Product/inventory -(🔑🧩{upc})- Product/products -(weight)- Int/products is valid
          ├─   0.513764s   5ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(29)" },  { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(26)" }]))
        ┌─┘
        ├─   0.513784s   5ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(shippingEstimateTag🧩{price weight})- String/inventory
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(29)" }, root_node="Product/inventory"}
          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=2}
            ├─   0.513810s   0ms DEBUG Building root query tree node: Product/inventory
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.513825s   0ms DEBUG Processing edge: Product/inventory -(🔑🧩{upc})- Product/products
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.513839s   0ms DEBUG Processing edge: Product/products -(price)- Int/products
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.513864s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.513877s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(26)" }, root_node="Product/inventory"}
          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=2}
            ├─   0.513918s   0ms DEBUG Building root query tree node: Product/inventory
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.513932s   0ms DEBUG Processing edge: Product/inventory -(🔑🧩{upc})- Product/products
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.513947s   0ms DEBUG Processing edge: Product/products -(weight)- Int/products
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.513968s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.513981s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐merge_trees{tree_count=2}
        ┌─┘
        ├─   0.514028s   5ms INFO return=Ok([ { cost: 3011, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(23)" }])
      ┌─┘
      ├─   0.514046s   7ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
      ├─   0.514055s   7ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      ├─   0.514061s   7ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.514067s   7ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.514073s   7ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
      ├─   0.514079s   7ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      ├─   0.514085s   7ms DEBUG Ignoring. Already visited similar edge
      ├─   0.514093s   7ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.514101s   7ms INFO return=Ok([ { cost: 3011, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(23)" }])
    ┌─┘
    ├─   0.514117s   8ms DEBUG Indirect paths found: 1
    ├─   0.514128s   8ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews
  ┌─┘
┌─┘
└─┐process_field{field_name="shippingEstimate", leaf=true}
  ├─   0.514159s   0ms DEBUG Trying to advance to: shippingEstimate through 1 possible paths
  └─┐explore_path{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.514190s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.514202s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
      ├─   0.514222s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
      ├─   0.514228s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.514233s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.514260s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.514295s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.514315s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.514333s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.514342s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.514375s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.514382s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.514388s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.514394s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
              ├─   0.514402s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.514423s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.514460s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.514482s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.514503s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.514512s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.514550s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.514558s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.514565s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.514584s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                      ├─   0.514610s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.514620s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                      ├─   0.514630s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.514637s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.514659s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.514679s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.514696s   0ms DEBUG Paths for upc
                ├─   0.514707s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.514714s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.514727s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.514738s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.514754s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.514783s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.514799s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.514822s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.514890s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.514922s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.514945s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                ├─   0.514954s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
              ┌─┘
              ├─   0.514973s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.514985s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.514991s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
            ┌─┘
            ├─   0.515009s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
          ┌─┘
          ├─   0.515027s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
        ┌─┘
        ├─   0.515043s   0ms DEBUG Paths for upc
        ├─   0.515053s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.515063s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
        ├─   0.515069s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.515080s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.515085s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.515099s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.515124s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.515138s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.515158s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
        ├─   0.515218s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.515237s   1ms DEBUG No direct paths found
      ├─   0.515246s   1ms DEBUG going deeper
      ├─   0.515255s   1ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
        ├─   0.515280s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/inventory'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.515315s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.515335s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.515353s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
              ├─   0.515362s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
              ├─   0.515395s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
              ├─   0.515402s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.515409s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
              └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                ├─   0.515429s   0ms DEBUG checking requirements {upc} for edge 'Product/reviews -(🔑🧩{upc})- Product/products'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.515470s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                      └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", edge="upc"}
                        ├─   0.515491s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.515511s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews with edge Product/reviews -(upc)- String/reviews
                      ├─   0.515520s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews", current_cost=2005}
                      ├─   0.515555s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                      ├─   0.515563s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.515570s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                      ├─   0.515577s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                      ├─   0.515585s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                      ├─   0.515592s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                      ├─   0.515601s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.515608s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.515625s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.515643s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" }], [])))
                ┌─┘
                ├─   0.515660s   0ms DEBUG Paths for upc
                ├─   0.515670s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
                ├─   0.515677s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.515690s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
                ├─   0.515696s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
              ┌─┘
              ├─   0.515712s   0ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/products
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
                └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
                  ├─   0.515739s   0ms DEBUG Building root query tree node: Product/reviews
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.515755s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.515778s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", current_cost=3007}
                ├─   0.515828s   0ms DEBUG checking edge Product/products -(upc)- String/products
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products", edge="upc"}
                  ├─   0.515850s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.515869s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                ├─   0.515877s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
              ┌─┘
              ├─   0.515895s   0ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/products
              ├─   0.515904s   0ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
              ├─   0.515911s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
              ├─   0.515920s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.515926s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }])
            ┌─┘
            ├─   0.515944s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
          ┌─┘
          ├─   0.515961s   0ms INFO return=Ok(Some(([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(32)" },  { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(45) --> EdgeIndex(27)" }], [])))
        ┌─┘
        ├─   0.515998s   0ms DEBUG Paths for upc
        ├─   0.516012s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(upc)- String/reviews is valid
        ├─   0.516029s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
        ├─   0.516036s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.516047s   0ms DEBUG path Product/reviews -(upc)- String/reviews is valid
        ├─   0.516052s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(32)" }]))
      ┌─┘
      ├─   0.516067s   1ms DEBUG Advancing path to Product/reviews -(🔑🧩{upc})- Product/inventory
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(32)" }, root_node="Product/reviews"}
        └─┐create_root_for_path_sequences{root_node="Product/reviews", segments_count=1}
          ├─   0.516094s   0ms DEBUG Building root query tree node: Product/reviews
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.516107s   0ms DEBUG Processing edge: Product/reviews -(upc)- String/reviews
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.516128s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "shippingEstimate", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
        ├─   0.516183s   0ms DEBUG checking edge Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="shippingEstimate"}
          ├─   0.516205s   0ms DEBUG checking requirements {price weight} for edge 'Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.516241s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.516274s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.516297s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.516337s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.516361s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.516383s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.516393s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.516431s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.516439s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                        ├─   0.516448s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.516473s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.516522s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.516551s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.516575s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.516587s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.516665s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.516676s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews", "products"})
                                ├─   0.516686s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.516694s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "reviews", "products"})
                                ├─   0.516702s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.516711s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews", "products"})
                                ├─   0.516721s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.516729s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.516762s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.516791s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.516811s   0ms DEBUG Paths for upc
                          ├─   0.516825s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.516833s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.516847s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.516857s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.516876s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.516909s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.516927s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.516976s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                          ├─   0.517062s   0ms DEBUG checking edge Product/products -(upc)- String/products
                          └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="upc"}
                            ├─   0.517099s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.517124s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                          ├─   0.517137s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                        ┌─┘
                        ├─   0.517158s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.517169s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.517178s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                        ├─   0.517189s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.517196s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                      ┌─┘
                      ├─   0.517217s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                    ┌─┘
                    ├─   0.517238s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.517258s   0ms DEBUG Paths for upc
                  ├─   0.517269s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.517281s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
                  ├─   0.517289s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.517314s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.517322s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.517343s   1ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.517374s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.517391s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.517415s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                  ├─   0.517469s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.517484s   1ms DEBUG No direct paths found
                ├─   0.517493s   1ms DEBUG going deeper
                ├─   0.517502s   1ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.517528s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.517569s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.517594s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.517616s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.517626s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.517665s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.517690s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.517740s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.517778s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.517805s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.517816s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.517859s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.517868s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "products", "reviews"})
                                ├─   0.517877s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.517886s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products", "reviews"})
                                ├─   0.517894s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.517903s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products", "reviews"})
                                ├─   0.517913s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.517921s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.517941s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.517973s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.517992s   0ms DEBUG Paths for upc
                          ├─   0.518004s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.518012s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.518025s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.518033s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.518051s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.518089s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.518108s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.518136s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                          ├─   0.518223s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                          └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", edge="upc"}
                            ├─   0.518265s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.518297s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                          ├─   0.518315s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                        ┌─┘
                        ├─   0.518337s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.518348s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.518357s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                        ├─   0.518365s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.518372s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                        ├─   0.518382s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.518390s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                      ┌─┘
                      ├─   0.518411s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                    ┌─┘
                    ├─   0.518432s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.518470s   0ms DEBUG Paths for upc
                  ├─   0.518486s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.518510s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
                  ├─   0.518522s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.518534s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.518541s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.518562s   2ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.518593s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.518609s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.518633s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "price", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                  ├─   0.518688s   0ms DEBUG checking edge Product/products -(price)- Int/products
                  └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="price"}
                    ├─   0.518714s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.518734s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(price)- Int/products
                  ├─   0.518752s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }])
                ┌─┘
                ├─   0.518771s   2ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                ├─   0.518780s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                ├─   0.518788s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
                ├─   0.518796s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                ├─   0.518802s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                ├─   0.518809s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                ├─   0.518817s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.518824s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                ├─   0.518830s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                ├─   0.518841s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.518847s   2ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }])
              ┌─┘
              ├─   0.518867s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }], [])))
            ┌─┘
            ├─   0.518883s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(29)" }], [])))
          ┌─┘
          ├─   0.518899s   2ms DEBUG Paths for price
          ├─   0.518910s   2ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(price)- Int/products is valid
          ├─   0.518916s   2ms DEBUG Found 1 best paths for this leaf requirement
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.518984s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                ├─   0.519019s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.519044s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.519109s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.519154s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.519181s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.519192s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.519235s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.519244s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                        ├─   0.519252s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.519282s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.519328s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.519370s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.519404s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.519418s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.519465s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.519475s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews", "products"})
                                ├─   0.519484s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.519492s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "reviews", "products"})
                                ├─   0.519501s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.519509s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews", "products"})
                                ├─   0.519519s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.519527s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.519547s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.519568s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.519587s   0ms DEBUG Paths for upc
                          ├─   0.519600s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.519608s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.519621s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.519629s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.519647s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.519689s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.519707s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.519735s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                          ├─   0.519794s   0ms DEBUG checking edge Product/products -(upc)- String/products
                          └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="upc"}
                            ├─   0.519822s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.519845s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(upc)- String/products
                          ├─   0.519857s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                        ┌─┘
                        ├─   0.519879s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.519890s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.519898s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                        ├─   0.519908s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.519933s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }])
                      ┌─┘
                      ├─   0.519963s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                    ┌─┘
                    ├─   0.519984s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(27)" }], [])))
                  ┌─┘
                  ├─   0.520004s   0ms DEBUG Paths for upc
                  ├─   0.520017s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.520042s   1ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(upc)- String/products is valid
                  ├─   0.520054s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.520066s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.520073s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.520093s   1ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.520141s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.520160s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.520186s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                  ├─   0.520287s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.520319s   1ms DEBUG No direct paths found
                ├─   0.520331s   1ms DEBUG going deeper
                ├─   0.520342s   1ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                  ├─   0.520371s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/products'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.520414s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.520452s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.520483s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                        ├─   0.520495s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                        ├─   0.520556s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                          ├─   0.520584s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.520630s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", edge="upc"}
                                  ├─   0.520659s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.520683s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(upc)- String/inventory
                                ├─   0.520703s   0ms INFO return=Ok([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory", current_cost=3007}
                                ├─   0.520745s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/reviews
                                ├─   0.520754s   0ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "products", "reviews"})
                                ├─   0.520764s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                                ├─   0.520772s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products", "reviews"})
                                ├─   0.520780s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                                ├─   0.520788s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products", "reviews"})
                                ├─   0.520798s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.520806s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.520827s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                            ┌─┘
                            ├─   0.520848s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" }], [])))
                          ┌─┘
                          ├─   0.520867s   0ms DEBUG Paths for upc
                          ├─   0.520888s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                          ├─   0.520896s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.520910s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                          ├─   0.520917s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                        ┌─┘
                        ├─   0.520935s   0ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/reviews
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                            ├─   0.520966s   0ms DEBUG Building root query tree node: Product/inventory
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.520985s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.521012s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", current_cost=4009}
                          ├─   0.521072s   0ms DEBUG checking edge Product/reviews -(upc)- String/reviews
                          └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews", edge="upc"}
                            ├─   0.521127s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.521160s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews with edge Product/reviews -(upc)- String/reviews
                          ├─   0.521176s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                        ┌─┘
                        ├─   0.521197s   0ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/reviews
                        ├─   0.521209s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/products
                        ├─   0.521217s   0ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"inventory", "products"})
                        ├─   0.521225s   0ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                        ├─   0.521233s   0ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "products"})
                        ├─   0.521243s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.521251s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }])
                      ┌─┘
                      ├─   0.521274s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                    ┌─┘
                    ├─   0.521294s   0ms INFO return=Ok(Some(([ { cost: 3008, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(24)" },  { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(40) --> EdgeIndex(32)" }], [])))
                  ┌─┘
                  ├─   0.521314s   0ms DEBUG Paths for upc
                  ├─   0.521326s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(upc)- String/inventory is valid
                  ├─   0.521337s   0ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/reviews -(upc)- String/reviews is valid
                  ├─   0.521344s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.521356s   1ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                  ├─   0.521363s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                ┌─┘
                ├─   0.521380s   2ms DEBUG Advancing path to Product/inventory -(🔑🧩{upc})- Product/products
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(24)" }, root_node="Product/inventory"}
                  └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=1}
                    ├─   0.521410s   0ms DEBUG Building root query tree node: Product/inventory
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.521426s   0ms DEBUG Processing edge: Product/inventory -(upc)- String/inventory
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.521450s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "weight", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", current_cost=4009}
                  ├─   0.521520s   0ms DEBUG checking edge Product/products -(weight)- Int/products
                  └─┐can_satisfy_edge{path="root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products", edge="weight"}
                    ├─   0.521555s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.521578s   0ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products with edge Product/products -(weight)- Int/products
                  ├─   0.521590s   0ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }])
                ┌─┘
                ├─   0.521609s   2ms DEBUG Found 1 direct paths to Product/inventory -(🔑🧩{upc})- Product/products
                ├─   0.521619s   2ms DEBUG Exploring edge Product/inventory -(🔑🧩{upc})- Product/inventory
                ├─   0.521627s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory"})
                ├─   0.521635s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/reviews
                ├─   0.521642s   2ms DEBUG Ignoring, graph is excluded and already visited (current: reviews, visited: {"inventory", "reviews"})
                ├─   0.521649s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/products
                ├─   0.521657s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.521664s   2ms DEBUG Exploring edge Product/reviews -(🔑🧩{upc})- Product/inventory
                ├─   0.521670s   2ms DEBUG Ignoring, graph is excluded and already visited (current: inventory, visited: {"inventory", "reviews"})
                ├─   0.521680s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.521701s   2ms INFO return=Ok([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }])
              ┌─┘
              ├─   0.521729s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }], [])))
            ┌─┘
            ├─   0.521747s   2ms INFO return=Ok(Some(([ { cost: 4010, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(39) --> EdgeIndex(26)" }], [])))
          ┌─┘
          ├─   0.521763s   5ms DEBUG Paths for weight
          ├─   0.521776s   5ms DEBUG   Path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory -(🔑🧩{upc})- Product/products -(weight)- Int/products is valid
          ├─   0.521783s   5ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.521796s   5ms DEBUG path Product/inventory -(🔑🧩{upc})- Product/products -(price)- Int/products is valid
          ├─   0.521803s   5ms DEBUG path Product/inventory -(🔑🧩{upc})- Product/products -(weight)- Int/products is valid
          ├─   0.521809s   5ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(29)" },  { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(26)" }]))
        ┌─┘
        ├─   0.521831s   5ms DEBUG Advancing path root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews -(🔑🧩{upc})- Product/inventory with edge Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(29)" }, root_node="Product/inventory"}
          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=2}
            ├─   0.521877s   0ms DEBUG Building root query tree node: Product/inventory
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.521908s   0ms DEBUG Processing edge: Product/inventory -(🔑🧩{upc})- Product/products
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.521924s   0ms DEBUG Processing edge: Product/products -(price)- Int/products
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.521948s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.521962s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(39) --> EdgeIndex(26)" }, root_node="Product/inventory"}
          └─┐create_root_for_path_sequences{root_node="Product/inventory", segments_count=2}
            ├─   0.522006s   0ms DEBUG Building root query tree node: Product/inventory
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.522021s   0ms DEBUG Processing edge: Product/inventory -(🔑🧩{upc})- Product/products
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.522035s   0ms DEBUG Processing edge: Product/products -(weight)- Int/products
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.522056s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.522068s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐merge_trees{tree_count=2}
        ┌─┘
        ├─   0.522120s   5ms INFO return=Ok([ { cost: 3011, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(21)" }])
      ┌─┘
      ├─   0.522139s   7ms DEBUG Found 1 direct paths to Product/reviews -(🔑🧩{upc})- Product/inventory
      ├─   0.522149s   7ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/reviews
      ├─   0.522156s   7ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.522162s   7ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/products
      ├─   0.522167s   7ms DEBUG Ignoring, graph is excluded and already visited (current: products, visited: {"products"})
      ├─   0.522173s   7ms DEBUG Exploring edge Product/products -(🔑🧩{upc})- Product/inventory
      ├─   0.522180s   7ms DEBUG Ignoring. Already visited similar edge
      ├─   0.522189s   7ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.522195s   7ms INFO return=Ok([ { cost: 3011, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(21)" }])
    ┌─┘
    ├─   0.522213s   8ms DEBUG Indirect paths found: 1
    ├─   0.522241s   8ms DEBUG advanced: root(Query) -(accounts)- Query/accounts -(me)- User/accounts -(🔑🧩{id})- User/reviews -(reviews)- Review/reviews -(product)- Product/reviews
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 3011, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(23)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=7}
  ├─   0.522324s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=7}
    ├─   0.522338s   0ms DEBUG Processing edge: root(Query) -(accounts)- Query/accounts
    └─┐from_path_segment_sequences{current_index=1, total_segments=7}
      ├─   0.522351s   0ms DEBUG Processing edge: Query/accounts -(me)- User/accounts
      └─┐from_path_segment_sequences{current_index=2, total_segments=7}
        ├─   0.522364s   0ms DEBUG Processing edge: User/accounts -(🔑🧩{id})- User/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=7}
          ├─   0.522379s   0ms DEBUG Processing edge: User/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=7}
            ├─   0.522392s   0ms DEBUG Processing edge: Review/reviews -(product)- Product/reviews
            └─┐from_path_segment_sequences{current_index=5, total_segments=7}
              ├─   0.522406s   0ms DEBUG Processing edge: Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path_segment_sequences{current_index=6, total_segments=7}
                ├─   0.522421s   0ms DEBUG Processing edge: Product/inventory -(shippingEstimateTag🧩{price weight})- String/inventory
                └─┐from_path_segment_sequences{current_index=7, total_segments=7}
                ┌─┘
                ├─   0.522445s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.522458s   0ms DEBUG Adding subsequent step as child
            ┌─┘
            ├─   0.522470s   0ms DEBUG Adding subsequent step as child
          ┌─┘
          ├─   0.522482s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.522493s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.522504s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.522514s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 3011, egdes: "EdgeIndex(0) --> EdgeIndex(15) --> EdgeIndex(35) --> EdgeIndex(13) --> EdgeIndex(4) --> EdgeIndex(44) --> EdgeIndex(21)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=7}
  ├─   0.522549s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=7}
    ├─   0.522561s   0ms DEBUG Processing edge: root(Query) -(accounts)- Query/accounts
    └─┐from_path_segment_sequences{current_index=1, total_segments=7}
      ├─   0.522573s   0ms DEBUG Processing edge: Query/accounts -(me)- User/accounts
      └─┐from_path_segment_sequences{current_index=2, total_segments=7}
        ├─   0.522585s   0ms DEBUG Processing edge: User/accounts -(🔑🧩{id})- User/reviews
        └─┐from_path_segment_sequences{current_index=3, total_segments=7}
          ├─   0.522597s   0ms DEBUG Processing edge: User/reviews -(reviews)- Review/reviews
          └─┐from_path_segment_sequences{current_index=4, total_segments=7}
            ├─   0.522610s   0ms DEBUG Processing edge: Review/reviews -(product)- Product/reviews
            └─┐from_path_segment_sequences{current_index=5, total_segments=7}
              ├─   0.522623s   0ms DEBUG Processing edge: Product/reviews -(🔑🧩{upc})- Product/inventory
              └─┐from_path_segment_sequences{current_index=6, total_segments=7}
                ├─   0.522638s   0ms DEBUG Processing edge: Product/inventory -(shippingEstimate🧩{price weight})- Int/inventory
                └─┐from_path_segment_sequences{current_index=7, total_segments=7}
                ┌─┘
                ├─   0.522660s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.522673s   0ms DEBUG Adding subsequent step as child
            ┌─┘
            ├─   0.522685s   0ms DEBUG Adding subsequent step as child
          ┌─┘
          ├─   0.522697s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.522708s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.522718s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.522729s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="accounts", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="me", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.522847s   0ms DEBUG adding output field 'me' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="User/accounts -(🔑🧩{id})- User/reviews", parent_fetch_step_index=1}
              ├─   0.522884s   0ms DEBUG created a new fetch step [2] subgraph(reviews) type(User) requirement() key({id}) in children of 1
              ├─   0.522892s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.522899s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.522907s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="me", fetch_path="me"}
                      ├─   0.522964s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.522988s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="reviews", leaf=false, list=true, response_path="me", fetch_path=""}
                  ├─   0.523078s   0ms DEBUG adding output field 'reviews' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Review", field="product", leaf=false, list=false, response_path="me.reviews.@", fetch_path="reviews.@"}
                      ├─   0.523107s   0ms DEBUG adding output field 'product' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                        └─┐process_entity_move_edge{edge="Product/reviews -(🔑🧩{upc})- Product/inventory", parent_fetch_step_index=2}
                          ├─   0.523165s   0ms DEBUG created a new fetch step [3] subgraph(inventory) type(Product) requirement() key({upc}) in children of 2
                          ├─   0.523176s   0ms DEBUG adding input requirement '{upc}' to fetch step [3]
                          ├─   0.523184s   0ms DEBUG adding __typename field to output for type 'Product'
                          ├─   0.523192s   0ms DEBUG connecting fetch step to parent [2] -> [3]
                          └─┐connect{parent=2, child=3}
                          ┌─┘
                          └─┐process_requirements_for_fetch_steps{count=1}
                            └─┐process_noop_edge{}
                              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                                └─┐process_plain_field_edge{parent_fetch_step_index=2, requiring_fetch_step_index=3, type_name="Product", field="upc", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path="reviews.@.product"}
                                  ├─   0.523279s   0ms DEBUG connecting parent fetch step [2] to requiring fetch step [3]
                                  └─┐connect{parent=2, child=3}
                                  ┌─┘
                                  ├─   0.523328s   0ms DEBUG adding output field 'upc' to fetch step [2]
                                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                            ┌─┘
                            └─┐connect{parent=2, child=3}
                            ┌─┘
                          ┌─┘
                          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=3}
                            └─┐process_requires_field_edge{parent_fetch_step_index=3}
                              └─┐find_satisfiable_key{node="Product/inventory"}
                                └─┐can_satisfy_edge{path="Product/inventory", edge="upc"}
                                  ├─   0.523504s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/inventory", current_cost=0}
                                        ├─   0.523568s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                        └─┐can_satisfy_edge{path="Product/inventory", edge="upc"}
                                          ├─   0.523600s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.523624s   0ms DEBUG Advancing path Product/inventory with edge Product/inventory -(upc)- String/inventory
                                        ├─   0.523637s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(24)" }])
                                      ┌─┘
                                      ├─   0.523671s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(24)" }], [])))
                                    ┌─┘
                                    ├─   0.523712s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(24)" }], [])))
                                  ┌─┘
                                  ├─   0.523735s   0ms DEBUG Paths for upc
                                  ├─   0.523747s   0ms DEBUG   Path Product/inventory -(upc)- String/inventory is valid
                                  ├─   0.523756s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.523770s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                                  ├─   0.523789s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                                ┌─┘
                              ┌─┘
                              ├─   0.523829s   0ms DEBUG Key to re-enter: {upc}
                              ├─   0.523839s   0ms DEBUG Creating a fetch step for children of @requires
                              ├─   0.523862s   0ms DEBUG created a new fetch step [4] subgraph(inventory) type(Product) requirement({price weight}) in children of 2
                              ├─   0.523873s   0ms DEBUG Adding {price weight} to fetch([4]).input
                              ├─   0.523883s   0ms DEBUG Adding {upc} to fetch([4]).input
                              ├─   0.523891s   0ms DEBUG Creating a fetch step for requirement of @requires
                              ├─   0.523900s   0ms DEBUG Adding {upc} to fetch([5]).input
                              └─┐connect{parent=2, child=5}
                              ┌─┘
                              ├─   0.523936s   0ms DEBUG Processing requirements
                              └─┐process_noop_edge{}
                                └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                                  └─┐process_entity_move_edge{edge="Product/inventory -(🔑🧩{upc})- Product/products", parent_fetch_step_index=5}
                                    ├─   0.523984s   0ms DEBUG created a new fetch step [6] subgraph(products) type(Product) requirement() key({upc}) in children of 5
                                    ├─   0.523994s   0ms DEBUG adding input requirement '{upc}' to fetch step [6]
                                    ├─   0.524003s   0ms DEBUG adding __typename field to output for type 'Product'
                                    ├─   0.524012s   0ms DEBUG connecting fetch step to parent [5] -> [6]
                                    └─┐connect{parent=5, child=6}
                                    ┌─┘
                                    └─┐process_requirements_for_fetch_steps{count=1}
                                      └─┐process_noop_edge{}
                                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5, requiring_fetch_step_index=6}
                                          └─┐process_plain_field_edge{parent_fetch_step_index=5, requiring_fetch_step_index=6, type_name="Product", field="upc", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path=""}
                                            ├─   0.524104s   0ms DEBUG connecting parent fetch step [5] to requiring fetch step [6]
                                            └─┐connect{parent=5, child=6}
                                            ┌─┘
                                            ├─   0.524145s   0ms DEBUG adding output field 'upc' to fetch step [5]
                                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5, requiring_fetch_step_index=6}
                                            ┌─┘
                                          ┌─┘
                                        ┌─┘
                                      ┌─┘
                                      └─┐connect{parent=5, child=6}
                                      ┌─┘
                                    ┌─┘
                                    └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=6}
                                      └─┐process_plain_field_edge{parent_fetch_step_index=6, type_name="Product", field="price", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path=""}
                                        ├─   0.524278s   0ms DEBUG adding output field 'price' to fetch step [6]
                                        └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                                        ┌─┘
                                      ┌─┘
                                      └─┐process_plain_field_edge{parent_fetch_step_index=6, type_name="Product", field="weight", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path=""}
                                        ├─   0.524363s   0ms DEBUG adding output field 'weight' to fetch step [6]
                                        └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                                        ┌─┘
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                              ├─   0.524445s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                              └─┐connect{parent=6, child=4}
                              ┌─┘
                              └─┐connect{parent=6, child=4}
                              ┌─┘
                              ├─   0.524496s   1ms DEBUG Processing children
                              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4}
                              ┌─┘
                            ┌─┘
                            └─┐process_requires_field_edge{parent_fetch_step_index=3}
                              └─┐find_satisfiable_key{node="Product/inventory"}
                                └─┐can_satisfy_edge{path="Product/inventory", edge="upc"}
                                  ├─   0.524582s   0ms DEBUG checking requirements {upc} for edge 'Product/inventory -(🔑🧩{upc})- Product/reviews'
                                  └─┐validate_field_requirement{}
                                    └─┐validate_field_requirement{}
                                      └─┐find_direct_paths{target=Field(FieldSelection { name: "upc", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="Product/inventory", current_cost=0}
                                        ├─   0.524628s   0ms DEBUG checking edge Product/inventory -(upc)- String/inventory
                                        └─┐can_satisfy_edge{path="Product/inventory", edge="upc"}
                                          ├─   0.524652s   0ms INFO return=Ok(Some([]))
                                        ┌─┘
                                        ├─   0.524674s   0ms DEBUG Advancing path Product/inventory with edge Product/inventory -(upc)- String/inventory
                                        ├─   0.524686s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(24)" }])
                                      ┌─┘
                                      ├─   0.524711s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(24)" }], [])))
                                    ┌─┘
                                    ├─   0.524733s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(24)" }], [])))
                                  ┌─┘
                                  ├─   0.524752s   0ms DEBUG Paths for upc
                                  ├─   0.524763s   0ms DEBUG   Path Product/inventory -(upc)- String/inventory is valid
                                  ├─   0.524773s   0ms DEBUG Found 1 best paths for this leaf requirement
                                  ├─   0.524786s   0ms DEBUG path Product/inventory -(upc)- String/inventory is valid
                                  ├─   0.524794s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(24)" }]))
                                ┌─┘
                              ┌─┘
                              ├─   0.524825s   0ms DEBUG Key to re-enter: {upc}
                              ├─   0.524834s   0ms DEBUG Creating a fetch step for children of @requires
                              ├─   0.524846s   0ms DEBUG created a new fetch step [7] subgraph(inventory) type(Product) requirement({price weight}) in children of 2
                              ├─   0.524856s   0ms DEBUG Adding {price weight} to fetch([7]).input
                              ├─   0.524865s   0ms DEBUG Adding {upc} to fetch([7]).input
                              ├─   0.524873s   0ms DEBUG Creating a fetch step for requirement of @requires
                              ├─   0.524882s   0ms DEBUG Adding {upc} to fetch([8]).input
                              └─┐connect{parent=2, child=8}
                              ┌─┘
                              ├─   0.524921s   0ms DEBUG Processing requirements
                              └─┐process_noop_edge{}
                                └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=8}
                                  └─┐process_entity_move_edge{edge="Product/inventory -(🔑🧩{upc})- Product/products", parent_fetch_step_index=8}
                                    ├─   0.524986s   0ms DEBUG created a new fetch step [9] subgraph(products) type(Product) requirement() key({upc}) in children of 8
                                    ├─   0.524999s   0ms DEBUG adding input requirement '{upc}' to fetch step [9]
                                    ├─   0.525008s   0ms DEBUG adding __typename field to output for type 'Product'
                                    ├─   0.525028s   0ms DEBUG connecting fetch step to parent [8] -> [9]
                                    └─┐connect{parent=8, child=9}
                                    ┌─┘
                                    └─┐process_requirements_for_fetch_steps{count=1}
                                      └─┐process_noop_edge{}
                                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=8, requiring_fetch_step_index=9}
                                          └─┐process_plain_field_edge{parent_fetch_step_index=8, requiring_fetch_step_index=9, type_name="Product", field="upc", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path=""}
                                            ├─   0.525116s   0ms DEBUG connecting parent fetch step [8] to requiring fetch step [9]
                                            └─┐connect{parent=8, child=9}
                                            ┌─┘
                                            ├─   0.525149s   0ms DEBUG adding output field 'upc' to fetch step [8]
                                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=8, requiring_fetch_step_index=9}
                                            ┌─┘
                                          ┌─┘
                                        ┌─┘
                                      ┌─┘
                                      └─┐connect{parent=8, child=9}
                                      ┌─┘
                                    ┌─┘
                                    └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=9}
                                      └─┐process_plain_field_edge{parent_fetch_step_index=9, type_name="Product", field="price", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path=""}
                                        ├─   0.525292s   0ms DEBUG adding output field 'price' to fetch step [9]
                                        └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=9}
                                        ┌─┘
                                      ┌─┘
                                      └─┐process_plain_field_edge{parent_fetch_step_index=9, type_name="Product", field="weight", leaf=true, list=false, response_path="me.reviews.@.product", fetch_path=""}
                                        ├─   0.525352s   0ms DEBUG adding output field 'weight' to fetch step [9]
                                        └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=9}
                                        ┌─┘
                                      ┌─┘
                                    ┌─┘
                                  ┌─┘
                                ┌─┘
                              ┌─┘
                              ├─   0.525431s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                              └─┐connect{parent=9, child=7}
                              ┌─┘
                              └─┐connect{parent=9, child=7}
                              ┌─┘
                              ├─   0.525498s   0ms DEBUG Processing children
                              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=7}
                              ┌─┘
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.525631s   2ms DEBUG Done
├─   0.525638s   2ms DEBUG found roots
├─   0.525643s   2ms DEBUG print graph
├─   0.525647s   2ms DEBUG Nodes:
│ [1] Query/accounts {} → {me{__typename id}} at $.
│ [2] User/reviews {__typename id} → {reviews{product{__typename upc}}} at $.me
│ [3] Product/inventory {__typename upc} → {} at $.me.reviews.@.product
│ [4] Product/inventory {__typename price weight upc} → {shippingEstimateTag} at $.me.reviews.@.product
│ [5] Product/inventory {__typename upc} → {__typename upc} at $.me.reviews.@.product
│ [6] Product/products {__typename upc} → {price weight} at $.me.reviews.@.product
│ [7] Product/inventory {__typename price weight upc} → {shippingEstimate} at $.me.reviews.@.product
│ [8] Product/inventory {__typename upc} → {__typename upc} at $.me.reviews.@.product
│ [9] Product/products {__typename upc} → {price weight} at $.me.reviews.@.product
│ 
│ Tree:
│ [1]
│   [2]
│     [3]
│     [5]
│       [6]
│         [4]
│     [8]
│       [9]
│         [7]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.525728s   0ms DEBUG optimization found: merge parent [2] with a passthrough child [8]
    ├─   0.525749s   0ms DEBUG optimization found: merge parent [2] with a passthrough child [5]
    └─┐perform_passthrough_child_merge{}
      ├─   0.525769s   0ms DEBUG merging fetch steps [2] and [8]
      └─┐connect{parent=2, child=9}
      ┌─┘
    ┌─┘
    └─┐perform_passthrough_child_merge{}
      ├─   0.525812s   0ms DEBUG merging fetch steps [2] and [5]
      └─┐connect{parent=2, child=6}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.525892s   0ms DEBUG Found optimization: 6 <- 9
    └─┐perform_fetch_step_merge{}
      ├─   0.525906s   0ms DEBUG merging fetch steps [6] and [9]
      └─┐connect{parent=6, child=7}
      ┌─┘
      └─┐connect{parent=2, child=6}
      ┌─┘
    ┌─┘
    ├─   0.525961s   0ms DEBUG Found optimization: 7 <- 4
    └─┐perform_fetch_step_merge{}
      ├─   0.525995s   0ms DEBUG merging fetch steps [7] and [4]
      └─┐connect{parent=6, child=7}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.526046s   0ms DEBUG optimization found: remove 'Product/inventory {__typename upc} → {} at $.me.reviews.@.product'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="accounts"}
      └─┐execute{subgraph_name="accounts"}
        ├─   0.526440s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.528180s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"me": Object {"__typename": String("User"), "id": String("u1")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="reviews"}
        └─┐execute{subgraph_name="reviews"}
          ├─   0.528636s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.530059s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"me": Object {"__typename": String("User"), "id": String("u1"), "reviews": Array [Object {"product": Object {"__typename": String("Product"), "upc": String("p1")}}, Object {"product": Object {"__typename": String("Product"), "upc": String("p2")}}]}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "upc": String("p1")}, Object {"__typename": String("Product"), "upc": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p1")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="products"}
        └─┐execute{subgraph_name="products"}
          ├─   0.530514s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.531662s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"me": Object {"__typename": String("User"), "id": String("u1"), "reviews": Array [Object {"product": Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1)}}, Object {"product": Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2)}}]}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1)}, Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2)}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p1"), "price": Number(11), "weight": Number(1)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(11)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(1)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2)}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "price", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "weight", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "upc", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "upc": String("p2"), "price": Number(22), "weight": Number(2)}}
          └─┐project_requires{requires_selections=[], entity=String("Product")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(22)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=Number(2)}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="inventory"}
        └─┐execute{subgraph_name="inventory"}
          ├─   0.532192s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.533615s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.533897s DEBUG execution result: ExecutionResult { data: Some(Object {"me": Object {"reviews": Array [Object {"product": Object {"shippingEstimate": Number(110), "shippingEstimateTag": String("#p1#110#")}}, Object {"product": Object {"shippingEstimate": Number(440), "shippingEstimateTag": String("#p2#440#")}}]}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("accounts"), "operationKind": String("query"), "operation": String("{me{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("me")], "node": Object {"kind": String("Fetch"), "serviceName": String("reviews"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{reviews{product{__typename upc}}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("me"), String("reviews"), String("@"), String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("products"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{price weight}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("upc")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("me"), String("reviews"), String("@"), String("product")], "node": Object {"kind": String("Fetch"), "serviceName": String("inventory"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{shippingEstimate shippingEstimateTag}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("price")}, Object {"kind": String("Field"), "name": String("weight")}, Object {"kind": String("Field"), "name": String("upc")}]}]}}]}}}) }
