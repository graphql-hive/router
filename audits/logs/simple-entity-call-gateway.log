generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.13s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=1}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="User"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="EMAIL"}
┌─┘
└─┐decompose_from_supergraph{graph_id="NICKNAME"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006952s   0ms DEBUG Building graph for supergraph with 14 definitions
  └─┐build_root_nodes{}
    ├─   0.006990s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.007042s   0ms INFO [x] Creating owned field move edge 'User.__typename/EMAIL' (type: String)
    ├─   0.007081s   0ms INFO [x] Creating field move edge 'User.email/EMAIL' (type: String)
    ├─   0.007094s   0ms INFO [x] Creating field move edge 'User.email/EMAIL' (type: String)
    ├─   0.007103s   0ms INFO [ ] Field 'User.nickname/EMAIL' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007109s   0ms INFO [x] Creating field move edge 'User.id/EMAIL' (type: ID)
    ├─   0.007116s   0ms INFO [x] Creating field move edge 'User.id/EMAIL' (type: ID)
    ├─   0.007122s   0ms INFO [x] Creating owned field move edge 'User.__typename/NICKNAME' (type: String)
    ├─   0.007131s   0ms INFO [ ] Field 'User.email/NICKNAME' is external, skipping edge creation
    ├─   0.007137s   0ms INFO [x] Creating field move edge 'User.nickname/NICKNAME' (type: String)
    ├─   0.007143s   0ms INFO [x] Creating field move edge 'User.nickname/NICKNAME' (type: String)
    ├─   0.007149s   0ms INFO [ ] Field 'User.id/NICKNAME' does is not available in the subgraph, skipping edge creation (type: ID)
    ├─   0.007156s   0ms INFO [x] Creating owned field move edge 'Query.__typename/EMAIL' (type: String)
    ├─   0.007163s   0ms INFO [x] Creating field move edge 'Query.user/EMAIL' (type: User)
    ├─   0.007169s   0ms INFO [x] Creating field move edge 'Query.user/EMAIL' (type: User)
    ├─   0.007175s   0ms INFO [x] Creating owned field move edge 'Query.__typename/NICKNAME' (type: String)
    ├─   0.007189s   0ms INFO [ ] Field 'Query.user/NICKNAME' does is not available in the subgraph, skipping edge creation (type: User)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.007348s   0ms INFO Creating self-referencing entity move edge in 'User/EMAIL' via key 'id'
    ├─   0.007394s   0ms INFO Creating entity move edge from 'User/EMAIL' to 'User/NICKNAME' via key 'email'
    ├─   0.007433s   0ms INFO Creating entity move edge from 'User/NICKNAME' to 'User/EMAIL' via key 'id'
    ├─   0.007508s   0ms INFO Creating self-referencing entity move edge in 'User/NICKNAME' via key 'email'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.074253s INFO Starting server on http://localhost:4000
   0.075875s INFO starting 16 workers
   0.075933s INFO Actix runtime found; starting in Actix runtime
   0.075943s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.236150s DEBUG original document: query ping {
  __typename
}

   0.236287s DEBUG normalized document: query ping {__typename}

   0.236309s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.236762s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.331291s DEBUG original document: query {
  user {
    id
    nickname
  }
}

   0.331447s DEBUG normalized document: query{user{id nickname}}

   0.331465s DEBUG executable operation: query{user{id nickname}}
┐walk_operation{}
├─   0.331983s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="user", leaf=false}
  ├─   0.332058s   0ms DEBUG Trying to advance to: user{id nickname} through 1 possible paths
  └─┐explore_path{path="root(Query) -(email)- Query/email"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "user", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(email)- Query/email", current_cost=1000}
      ├─   0.332167s   0ms DEBUG checking edge Query/email -(user)- User/email
      └─┐can_satisfy_edge{path="root(Query) -(email)- Query/email", edge="user"}
        ├─   0.332199s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.332235s   0ms DEBUG Advancing path root(Query) -(email)- Query/email with edge Query/email -(user)- User/email
      ├─   0.332255s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.332287s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "user", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(email)- Query/email", current_cost=1000}
      ├─   0.332348s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.332361s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.332404s   0ms DEBUG Indirect paths found: 0
    ├─   0.332424s   0ms DEBUG advanced: root(Query) -(email)- Query/email
  ┌─┘
  ├─   0.332451s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="nickname", leaf=true}
  ├─   0.332493s   0ms DEBUG Trying to advance to: nickname through 1 possible paths
  └─┐explore_path{path="root(Query) -(email)- Query/email -(user)- User/email"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(email)- Query/email -(user)- User/email", current_cost=1001}
      ├─   0.332559s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.332581s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(email)- Query/email -(user)- User/email", current_cost=1001}
      ├─   0.332618s   0ms DEBUG Exploring edge User/email -(🔑🧩{email})- User/nickname
      └─┐can_satisfy_edge{path="root(Query) -(email)- Query/email -(user)- User/email", edge="email"}
        ├─   0.332669s   0ms DEBUG checking requirements {email} for edge 'User/email -(🔑🧩{email})- User/nickname'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "email", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(email)- Query/email -(user)- User/email", current_cost=1001}
              ├─   0.332757s   0ms DEBUG checking edge User/email -(email)- String/email
              └─┐can_satisfy_edge{path="root(Query) -(email)- Query/email -(user)- User/email", edge="email"}
                ├─   0.332819s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.332859s   0ms DEBUG Advancing path root(Query) -(email)- Query/email -(user)- User/email with edge User/email -(email)- String/email
              ├─   0.332874s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "email", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(email)- Query/email -(user)- User/email", current_cost=1001}
              ├─   0.332951s   0ms DEBUG Exploring edge User/email -(🔑🧩{email})- User/nickname
              ├─   0.332972s   0ms DEBUG Ignoring, graph is excluded and already visited (current: nickname, visited: {"nickname"})
              ├─   0.332987s   0ms DEBUG Exploring edge User/email -(🔑🧩{id})- User/email
              ├─   0.332998s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.333011s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.333020s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.333056s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(2)" }], [])))
          ┌─┘
          ├─   0.333092s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(2)" }], [])))
        ┌─┘
        ├─   0.333115s   0ms DEBUG Paths for email
        ├─   0.333130s   0ms DEBUG   Path root(Query) -(email)- Query/email -(user)- User/email -(email)- String/email is valid
        ├─   0.333141s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.333167s   0ms DEBUG path User/email -(email)- String/email is valid
        ├─   0.333184s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.333216s   0ms DEBUG Advancing path to User/email -(🔑🧩{email})- User/nickname
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="User/email"}
        └─┐create_root_for_path_sequences{root_node="User/email", segments_count=1}
          ├─   0.333269s   0ms DEBUG Building root query tree node: User/email
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.333302s   0ms DEBUG Processing edge: User/email -(email)- String/email
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.333343s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(email)- Query/email -(user)- User/email -(🔑🧩{email})- User/nickname", current_cost=2003}
        ├─   0.333431s   0ms DEBUG checking edge User/nickname -(nickname)- String/nickname
        └─┐can_satisfy_edge{path="root(Query) -(email)- Query/email -(user)- User/email -(🔑🧩{email})- User/nickname", edge="nickname"}
          ├─   0.333477s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.333514s   0ms DEBUG Advancing path root(Query) -(email)- Query/email -(user)- User/email -(🔑🧩{email})- User/nickname with edge User/nickname -(nickname)- String/nickname
        ├─   0.333558s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(10) --> EdgeIndex(5)" }])
      ┌─┘
      ├─   0.333611s   1ms DEBUG Found 1 direct paths to User/email -(🔑🧩{email})- User/nickname
      ├─   0.333650s   1ms DEBUG Exploring edge User/email -(🔑🧩{id})- User/email
      ├─   0.333664s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.333676s   1ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.333684s   1ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(10) --> EdgeIndex(5)" }])
    ┌─┘
    ├─   0.333713s   1ms DEBUG Indirect paths found: 1
    ├─   0.333729s   1ms DEBUG advanced: root(Query) -(email)- Query/email -(user)- User/email
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.333778s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(email)- Query/email -(user)- User/email"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(email)- Query/email -(user)- User/email", current_cost=1001}
      ├─   0.333846s   0ms DEBUG checking edge User/email -(id)- ID/email
      └─┐can_satisfy_edge{path="root(Query) -(email)- Query/email -(user)- User/email", edge="id"}
        ├─   0.333905s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.333945s   0ms DEBUG Advancing path root(Query) -(email)- Query/email -(user)- User/email with edge User/email -(id)- ID/email
      ├─   0.333978s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.334015s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(email)- Query/email -(user)- User/email", current_cost=1001}
      ├─   0.334065s   0ms DEBUG Exploring edge User/email -(🔑🧩{email})- User/nickname
      └─┐can_satisfy_edge{path="root(Query) -(email)- Query/email -(user)- User/email", edge="email"}
        ├─   0.334098s   0ms DEBUG checking requirements {email} for edge 'User/email -(🔑🧩{email})- User/nickname'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "email", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(email)- Query/email -(user)- User/email", current_cost=1001}
              ├─   0.334150s   0ms DEBUG checking edge User/email -(email)- String/email
              └─┐can_satisfy_edge{path="root(Query) -(email)- Query/email -(user)- User/email", edge="email"}
                ├─   0.334183s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.334216s   0ms DEBUG Advancing path root(Query) -(email)- Query/email -(user)- User/email with edge User/email -(email)- String/email
              ├─   0.334232s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(2)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "email", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(email)- Query/email -(user)- User/email", current_cost=1001}
              ├─   0.334287s   0ms DEBUG Exploring edge User/email -(🔑🧩{email})- User/nickname
              ├─   0.334300s   0ms DEBUG Ignoring, graph is excluded and already visited (current: nickname, visited: {"nickname"})
              ├─   0.334311s   0ms DEBUG Exploring edge User/email -(🔑🧩{id})- User/email
              ├─   0.334321s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.334333s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.334343s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.334372s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(2)" }], [])))
          ┌─┘
          ├─   0.334398s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(2)" }], [])))
        ┌─┘
        ├─   0.334418s   0ms DEBUG Paths for email
        ├─   0.334432s   0ms DEBUG   Path root(Query) -(email)- Query/email -(user)- User/email -(email)- String/email is valid
        ├─   0.334462s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.334489s   0ms DEBUG path User/email -(email)- String/email is valid
        ├─   0.334508s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(2)" }]))
      ┌─┘
      ├─   0.334538s   0ms DEBUG Advancing path to User/email -(🔑🧩{email})- User/nickname
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(2)" }, root_node="User/email"}
        └─┐create_root_for_path_sequences{root_node="User/email", segments_count=1}
          ├─   0.334582s   0ms DEBUG Building root query tree node: User/email
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.334636s   0ms DEBUG Processing edge: User/email -(email)- String/email
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.334716s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(email)- Query/email -(user)- User/email -(🔑🧩{email})- User/nickname", current_cost=2003}
        ├─   0.334793s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.334815s   0ms DEBUG No direct paths found
      ├─   0.334832s   0ms DEBUG going deeper
      ├─   0.334845s   0ms DEBUG Exploring edge User/email -(🔑🧩{id})- User/email
      ├─   0.334853s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.334863s   0ms DEBUG Exploring edge User/nickname -(🔑🧩{email})- User/nickname
      ├─   0.334872s   0ms DEBUG Ignoring, graph is excluded and already visited (current: nickname, visited: {"nickname"})
      ├─   0.334882s   0ms DEBUG Exploring edge User/nickname -(🔑🧩{id})- User/email
      ├─   0.334891s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.334903s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.334911s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.334931s   1ms DEBUG Indirect paths found: 0
    ├─   0.334947s   1ms DEBUG advanced: root(Query) -(email)- Query/email -(user)- User/email
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(10) --> EdgeIndex(5)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.335022s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.335047s   0ms DEBUG Processing edge: root(Query) -(email)- Query/email
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.335067s   0ms DEBUG Processing edge: Query/email -(user)- User/email
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.335090s   0ms DEBUG Processing edge: User/email -(🔑🧩{email})- User/nickname
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.335112s   0ms DEBUG Processing edge: User/nickname -(nickname)- String/nickname
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.335145s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.335165s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.335183s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.335199s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.335266s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.335289s   0ms DEBUG Processing edge: root(Query) -(email)- Query/email
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.335311s   0ms DEBUG Processing edge: Query/email -(user)- User/email
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.335332s   0ms DEBUG Processing edge: User/email -(id)- ID/email
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.335366s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.335385s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.335402s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="email", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="user", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.335668s   0ms DEBUG adding output field 'user' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="User/email -(🔑🧩{email})- User/nickname", parent_fetch_step_index=1}
              ├─   0.335744s   0ms DEBUG created a new fetch step [2] subgraph(nickname) type(User) requirement() key({email}) in children of 1
              ├─   0.335759s   0ms DEBUG adding input requirement '{email}' to fetch step [2]
              ├─   0.335771s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.335785s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="User", field="email", leaf=true, list=false, response_path="user", fetch_path="user"}
                      ├─   0.335914s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.335991s   0ms DEBUG adding output field 'email' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="nickname", leaf=true, list=false, response_path="user", fetch_path=""}
                  ├─   0.336175s   0ms DEBUG adding output field 'nickname' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="user", fetch_path="user"}
              ├─   0.336274s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.336388s   0ms DEBUG Done
├─   0.336404s   0ms DEBUG found roots
├─   0.336412s   0ms DEBUG print graph
├─   0.336420s   0ms DEBUG Nodes:
│ [1] Query/email {} → {user{__typename email id}} at $.
│ [2] User/nickname {__typename email} → {nickname} at $.user
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="email"}
      └─┐execute{subgraph_name="email"}
        ├─   0.337251s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.337821s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.338377s   1ms DEBUG connected to 127.0.0.1:4200
        ├─   0.343064s   6ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"user": Object {"__typename": String("User"), "email": String("user1@gmail.com"), "id": String("1")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "email": String("user1@gmail.com"), "id": String("1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "email", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "email": String("user1@gmail.com"), "id": String("1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "email", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "email": String("user1@gmail.com"), "id": String("1")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("user1@gmail.com")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="nickname"}
        └─┐execute{subgraph_name="nickname"}
          ├─   0.343718s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.347618s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.348211s DEBUG execution result: ExecutionResult { data: Some(Object {"user": Object {"id": String("1"), "nickname": String("user1")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("email"), "operationKind": String("query"), "operation": String("{user{__typename email id}}")}, Object {"kind": String("Flatten"), "path": Array [String("user")], "node": Object {"kind": String("Fetch"), "serviceName": String("nickname"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{nickname}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("email")}]}]}}]}}}) }
