generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.12s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="User"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
└─┐decompose_from_supergraph{graph_id="C"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006195s   0ms DEBUG Building graph for supergraph with 14 definitions
  └─┐build_root_nodes{}
    ├─   0.006229s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006299s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006312s   0ms INFO [x] Creating field move edge 'Query.userInA/A' (type: User)
    ├─   0.006321s   0ms INFO [x] Creating field move edge 'Query.userInA/A' (type: User)
    ├─   0.006332s   0ms INFO [ ] Field 'Query.userInC/A' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006337s   0ms INFO [ ] Field 'Query.userInB/A' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006343s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006349s   0ms INFO [ ] Field 'Query.userInA/B' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006354s   0ms INFO [ ] Field 'Query.userInC/B' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006359s   0ms INFO [x] Creating field move edge 'Query.userInB/B' (type: User)
    ├─   0.006367s   0ms INFO [x] Creating field move edge 'Query.userInB/B' (type: User)
    ├─   0.006373s   0ms INFO [x] Creating owned field move edge 'Query.__typename/C' (type: String)
    ├─   0.006380s   0ms INFO [ ] Field 'Query.userInA/C' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006385s   0ms INFO [x] Creating field move edge 'Query.userInC/C' (type: User)
    ├─   0.006390s   0ms INFO [x] Creating field move edge 'Query.userInC/C' (type: User)
    ├─   0.006396s   0ms INFO [ ] Field 'Query.userInB/C' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006402s   0ms INFO [x] Creating owned field move edge 'User.__typename/A' (type: String)
    ├─   0.006408s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006414s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006421s   0ms INFO [ ] Field 'User.name/A' is external, skipping edge creation
    ├─   0.006497s   0ms INFO [x] Creating field move edge 'User.aName/A' (type: String)
    ├─   0.006527s   0ms INFO [x] Creating field move edge 'User.aName/A' (type: String)
    ├─   0.006540s   0ms INFO [ ] Field 'User.cName/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006547s   0ms INFO [x] Creating owned field move edge 'User.__typename/B' (type: String)
    ├─   0.006554s   0ms INFO [x] Creating field move edge 'User.id/B' (type: ID)
    ├─   0.006561s   0ms INFO [x] Creating field move edge 'User.id/B' (type: ID)
    ├─   0.006566s   0ms INFO [x] Creating field move edge 'User.name/B' (type: String)
    ├─   0.006572s   0ms INFO [x] Creating field move edge 'User.name/B' (type: String)
    ├─   0.006577s   0ms INFO [ ] Field 'User.aName/B' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006582s   0ms INFO [ ] Field 'User.cName/B' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006587s   0ms INFO [x] Creating owned field move edge 'User.__typename/C' (type: String)
    ├─   0.006593s   0ms INFO [x] Creating field move edge 'User.id/C' (type: ID)
    ├─   0.006599s   0ms INFO [x] Creating field move edge 'User.id/C' (type: ID)
    ├─   0.006605s   0ms INFO [ ] Field 'User.name/C' is external, skipping edge creation
    ├─   0.006610s   0ms INFO [ ] Field 'User.aName/C' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006657s   0ms INFO [x] Creating field move edge 'User.cName/C' (type: String)
    ├─   0.006667s   0ms INFO [x] Creating field move edge 'User.cName/C' (type: String)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006750s   0ms INFO Creating self-referencing entity move edge in 'User/A' via key 'id'
    ├─   0.006791s   0ms INFO Creating entity move edge from 'User/A' to 'User/B' via key 'id'
    ├─   0.006824s   0ms INFO Creating entity move edge from 'User/A' to 'User/C' via key 'id'
    ├─   0.006856s   0ms INFO Creating entity move edge from 'User/B' to 'User/A' via key 'id'
    ├─   0.006887s   0ms INFO Creating self-referencing entity move edge in 'User/B' via key 'id'
    ├─   0.006922s   0ms INFO Creating entity move edge from 'User/B' to 'User/C' via key 'id'
    ├─   0.006953s   0ms INFO Creating entity move edge from 'User/C' to 'User/A' via key 'id'
    ├─   0.006983s   0ms INFO Creating entity move edge from 'User/C' to 'User/B' via key 'id'
    ├─   0.007015s   0ms INFO Creating self-referencing entity move edge in 'User/C' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.062515s INFO Starting server on http://localhost:4000
   0.063842s INFO starting 16 workers
   0.063892s INFO Actix runtime found; starting in Actix runtime
   0.063901s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.283321s DEBUG original document: query ping {
  __typename
}

   0.283427s DEBUG normalized document: query ping {__typename}

   0.283454s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.283844s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.365070s DEBUG original document: {
  userInA {
    id
    name
    aName
    cName
  }
  userInB {
    id
    name
    aName
    cName
  }
  userInC {
    id
    name
    aName
    cName
  }
}

   0.365198s DEBUG normalized document: query{userInA{id name aName cName} userInB{id name aName cName} userInC{id name aName cName}}

   0.365216s DEBUG executable operation: query{userInA{id name aName cName} userInB{id name aName cName} userInC{id name aName cName}}
┐walk_operation{}
├─   0.365789s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="userInC", leaf=false}
  ├─   0.365841s   0ms DEBUG Trying to advance to: userInC{id name aName cName} through 3 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInC", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.365906s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.365929s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInC", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.365959s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.365966s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.365979s   0ms DEBUG Indirect paths found: 0
    ├─   0.365987s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInC", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.366021s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.366032s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInC", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.366048s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.366053s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.366064s   0ms DEBUG Indirect paths found: 0
    ├─   0.366071s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  └─┐explore_path{path="root(Query) -(c)- Query/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInC", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.366100s   0ms DEBUG checking edge Query/c -(userInC)- User/c
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c", edge="userInC"}
        ├─   0.366122s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.366138s   0ms DEBUG Advancing path root(Query) -(c)- Query/c with edge Query/c -(userInC)- User/c
      ├─   0.366148s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(2) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.366163s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInC", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.366189s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.366195s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.366206s   0ms DEBUG Indirect paths found: 0
    ├─   0.366214s   0ms DEBUG advanced: root(Query) -(c)- Query/c
  ┌─┘
  ├─   0.366228s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="cName", leaf=true}
  ├─   0.366250s   0ms DEBUG Trying to advance to: cName through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(userInC)- User/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
      ├─   0.366277s   0ms DEBUG checking edge User/c -(cName🧩{name})- String/c
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="cName"}
        ├─   0.366314s   0ms DEBUG checking requirements {name} for edge 'User/c -(cName🧩{name})- String/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.366361s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.366398s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.366407s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.366416s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.366437s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.366504s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.366528s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.366550s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.366560s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.366594s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.366602s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.366611s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      ├─   0.366618s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.366626s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.366651s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                              ├─   0.366701s   0ms DEBUG checking edge User/c -(id)- ID/c
                              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                                ├─   0.366745s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.366767s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                              ├─   0.366778s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                              ├─   0.366813s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                              ├─   0.366822s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "a", "c"})
                              ├─   0.366831s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                              ├─   0.366839s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a", "c"})
                              ├─   0.366847s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                              ├─   0.366855s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a", "c"})
                              ├─   0.366865s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.366873s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.366895s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                          ┌─┘
                          ├─   0.366916s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                        ┌─┘
                        ├─   0.366934s   0ms DEBUG Paths for id
                        ├─   0.366945s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                        ├─   0.366953s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.366971s   0ms DEBUG path User/c -(id)- ID/c is valid
                        ├─   0.366979s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                      ┌─┘
                      ├─   0.366998s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                          ├─   0.367032s   0ms DEBUG Building root query tree node: User/c
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.367058s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.367115s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                        ├─   0.367199s   0ms DEBUG checking edge User/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                          ├─   0.367232s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.367255s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                        ├─   0.367267s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                      ┌─┘
                      ├─   0.367289s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/a
                      ├─   0.367302s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.367310s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                    ┌─┘
                    ├─   0.367330s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.367348s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.367366s   0ms DEBUG Paths for id
                ├─   0.367375s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.367384s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
                ├─   0.367393s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.367404s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.367426s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.367452s   1ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.367498s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.367532s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.367561s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.367626s   0ms DEBUG checking edge User/b -(name)- String/b
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", edge="name"}
                  ├─   0.367647s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.367665s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
                ├─   0.367683s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(14)" }])
              ┌─┘
              ├─   0.367701s   1ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
              ├─   0.367711s   1ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.367731s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.367767s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.367786s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.367805s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.367814s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.367849s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.367858s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.367866s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.367886s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                              ├─   0.367925s   0ms DEBUG checking edge User/c -(id)- ID/c
                              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                                ├─   0.367949s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.367971s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                              ├─   0.367981s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                              ├─   0.368015s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                              ├─   0.368024s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "a", "c"})
                              ├─   0.368033s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                              ├─   0.368041s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a", "c"})
                              ├─   0.368050s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                              ├─   0.368058s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a", "c"})
                              ├─   0.368067s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.368077s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.368096s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                          ┌─┘
                          ├─   0.368116s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                        ┌─┘
                        ├─   0.368133s   0ms DEBUG Paths for id
                        ├─   0.368144s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                        ├─   0.368151s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.368164s   0ms DEBUG path User/c -(id)- ID/c is valid
                        ├─   0.368179s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                      ┌─┘
                      ├─   0.368197s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                          ├─   0.368227s   0ms DEBUG Building root query tree node: User/c
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.368244s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.368272s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
                        ├─   0.368331s   0ms DEBUG checking edge User/b -(id)- ID/b
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", edge="id"}
                          ├─   0.368354s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.368373s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                        ├─   0.368384s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.368403s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
                      ├─   0.368414s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      ├─   0.368421s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.368431s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.368439s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.368459s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.368477s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.368494s   0ms DEBUG Paths for id
                ├─   0.368503s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.368512s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b -(id)- ID/b is valid
                ├─   0.368519s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.368530s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.368536s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.368552s   2ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.368579s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.368595s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.368641s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.368698s   0ms INFO return=Ok([])
              ┌─┘
              ├─   0.368714s   2ms DEBUG No direct paths found
              ├─   0.368725s   2ms DEBUG going deeper
              ├─   0.368735s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              ├─   0.368742s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
              ├─   0.368750s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.368758s   2ms DEBUG Ignoring. Already visited similar edge
              ├─   0.368765s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.368771s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
              ├─   0.368782s   2ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.368789s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(14)" }])
            ┌─┘
            ├─   0.368808s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.368824s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.368838s   2ms DEBUG Paths for name
        ├─   0.368847s   2ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b -(name)- String/b is valid
        ├─   0.368870s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.368888s   2ms DEBUG path User/c -(🔑🧩{id})- User/b -(name)- String/b is valid
        ├─   0.368894s   2ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(25) --> EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.368916s   2ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(cName🧩{name})- String/c
      └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(25) --> EdgeIndex(14)" }, root_node="User/c"}
        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=2}
          ├─   0.368945s   0ms DEBUG Building root query tree node: User/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=2}
            ├─   0.368960s   0ms DEBUG Processing edge: User/c -(🔑🧩{id})- User/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=2}
              ├─   0.368974s   0ms DEBUG Processing edge: User/b -(name)- String/b
              └─┐from_path_segment_sequences{current_index=2, total_segments=2}
              ┌─┘
              ├─   0.368995s   0ms DEBUG No subsequent steps (leaf or end of path)
            ┌─┘
            ├─   0.369010s   0ms DEBUG Adding subsequent step as child
          ┌─┘
        ┌─┘
      ┌─┘
      ├─   0.369039s   2ms INFO return=Ok([ { cost: 1004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(17)" }])
    ┌─┘
    ├─   0.369054s   2ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
      ├─   0.369075s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
      ├─   0.369082s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.369088s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
        ├─   0.369105s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.369137s   0ms DEBUG checking edge User/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.369155s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.369172s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
              ├─   0.369180s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.369208s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.369215s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.369222s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              ├─   0.369228s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.369235s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.369253s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.369314s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.369336s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.369357s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.369368s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.369401s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.369409s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.369417s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      ├─   0.369424s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
                      ├─   0.369432s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      ├─   0.369439s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
                      ├─   0.369448s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.369455s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.369473s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.369490s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                ┌─┘
                ├─   0.369506s   0ms DEBUG Paths for id
                ├─   0.369515s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.369522s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.369534s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.369540s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.369556s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.369583s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.369599s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.369623s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.369670s   0ms DEBUG checking edge User/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                  ├─   0.369689s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.369707s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                ├─   0.369716s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.369733s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/a
              ├─   0.369744s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.369750s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.369767s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.369783s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.369799s   0ms DEBUG Paths for id
        ├─   0.369807s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
        ├─   0.369814s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
        ├─   0.369821s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.369830s   0ms DEBUG path User/c -(id)- ID/c is valid
        ├─   0.369836s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
      ┌─┘
      ├─   0.369850s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
          ├─   0.369873s   0ms DEBUG Building root query tree node: User/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.369887s   0ms DEBUG Processing edge: User/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.369907s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.369948s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.369961s   0ms DEBUG No direct paths found
      ├─   0.369968s   0ms DEBUG going deeper
      ├─   0.369975s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
        ├─   0.369992s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.370026s   0ms DEBUG checking edge User/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.370043s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.370060s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
              ├─   0.370069s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.370116s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.370126s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.370133s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.370157s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.370194s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.370213s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.370234s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.370244s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.370276s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.370283s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.370291s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      ├─   0.370299s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
                      ├─   0.370307s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      ├─   0.370314s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
                      ├─   0.370322s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.370341s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.370358s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.370376s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                ┌─┘
                ├─   0.370392s   0ms DEBUG Paths for id
                ├─   0.370401s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.370408s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.370419s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.370440s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.370466s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.370497s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.370513s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.370536s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.370590s   0ms DEBUG checking edge User/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", edge="id"}
                  ├─   0.370610s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.370628s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                ├─   0.370638s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.370655s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
              ├─   0.370665s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              ├─   0.370672s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.370681s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.370687s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.370704s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.370720s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.370736s   0ms DEBUG Paths for id
        ├─   0.370744s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
        ├─   0.370752s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b -(id)- ID/b is valid
        ├─   0.370758s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.370768s   0ms DEBUG path User/c -(id)- ID/c is valid
        ├─   0.370774s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
      ┌─┘
      ├─   0.370804s   1ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
          ├─   0.370838s   0ms DEBUG Building root query tree node: User/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.370852s   0ms DEBUG Processing edge: User/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.370873s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.370932s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.370951s   1ms DEBUG No direct paths found
      ├─   0.370961s   1ms DEBUG going deeper
      ├─   0.370970s   1ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
      ├─   0.370976s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.370982s   1ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      ├─   0.370988s   1ms DEBUG Ignoring. Already visited similar edge
      ├─   0.370994s   1ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.371000s   1ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.371008s   1ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
      ├─   0.371013s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.371019s   1ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.371024s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.371030s   1ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.371035s   1ms DEBUG Ignoring. Already visited similar edge
      ├─   0.371042s   1ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.371048s   1ms INFO return=Ok([])
    ┌─┘
    ├─   0.371060s   4ms DEBUG Indirect paths found: 0
    ├─   0.371072s   4ms DEBUG advanced: root(Query) -(c)- Query/c -(userInC)- User/c
  ┌─┘
┌─┘
└─┐process_field{field_name="aName", leaf=true}
  ├─   0.371111s   0ms DEBUG Trying to advance to: aName through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(userInC)- User/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
      ├─   0.371138s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.371150s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
      ├─   0.371167s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
      ├─   0.371172s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.371178s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
        ├─   0.371195s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.371226s   0ms DEBUG checking edge User/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.371243s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.371260s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
              ├─   0.371269s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.371297s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.371304s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.371311s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              ├─   0.371317s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.371324s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.371342s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.371378s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.371396s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.371415s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.371424s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.371454s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.371462s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.371470s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      ├─   0.371477s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.371484s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      ├─   0.371491s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.371500s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.371507s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.371524s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.371541s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                ┌─┘
                ├─   0.371557s   0ms DEBUG Paths for id
                ├─   0.371566s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.371572s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.371584s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.371591s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.371606s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.371633s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.371649s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.371672s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.371719s   0ms DEBUG checking edge User/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                  ├─   0.371742s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.371760s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                ├─   0.371769s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.371786s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/a
              ├─   0.371797s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.371803s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.371820s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.371836s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.371851s   0ms DEBUG Paths for id
        ├─   0.371859s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
        ├─   0.371867s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
        ├─   0.371873s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.371883s   0ms DEBUG path User/c -(id)- ID/c is valid
        ├─   0.371888s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
      ┌─┘
      ├─   0.371902s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
          ├─   0.371926s   0ms DEBUG Building root query tree node: User/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.371939s   0ms DEBUG Processing edge: User/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.371960s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.372003s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.372015s   0ms DEBUG No direct paths found
      ├─   0.372023s   0ms DEBUG going deeper
      ├─   0.372030s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
        ├─   0.372046s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.372077s   0ms DEBUG checking edge User/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.372094s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.372110s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
              ├─   0.372118s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.372147s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.372154s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.372160s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.372196s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.372235s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.372254s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.372275s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.372285s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.372317s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.372325s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.372333s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      ├─   0.372340s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.372348s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      ├─   0.372355s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.372364s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.372371s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.372388s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.372405s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                ┌─┘
                ├─   0.372421s   0ms DEBUG Paths for id
                ├─   0.372430s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.372437s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.372448s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.372455s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.372471s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.372498s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.372513s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.372537s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.372583s   0ms DEBUG checking edge User/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", edge="id"}
                  ├─   0.372603s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.372620s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                ├─   0.372630s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.372647s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
              ├─   0.372656s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              ├─   0.372663s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.372671s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.372678s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.372694s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.372710s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.372726s   0ms DEBUG Paths for id
        ├─   0.372733s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
        ├─   0.372741s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b -(id)- ID/b is valid
        ├─   0.372748s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.372757s   0ms DEBUG path User/c -(id)- ID/c is valid
        ├─   0.372763s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
      ┌─┘
      ├─   0.372776s   1ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
          ├─   0.372800s   0ms DEBUG Building root query tree node: User/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.372813s   0ms DEBUG Processing edge: User/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.372834s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.372876s   0ms DEBUG checking edge User/a -(aName🧩{name})- String/a
        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="aName"}
          ├─   0.372894s   0ms DEBUG checking requirements {name} for edge 'User/a -(aName🧩{name})- String/a'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.372928s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.372957s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                  ├─   0.373017s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                        ├─   0.373059s   0ms DEBUG checking edge User/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                          ├─   0.373080s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.373103s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                        ├─   0.373115s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                        ├─   0.373150s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                        ├─   0.373159s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                        ├─   0.373167s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                          ├─   0.373189s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                                ├─   0.373240s   0ms DEBUG checking edge User/a -(id)- ID/a
                                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                                  ├─   0.373282s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.373305s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                                ├─   0.373317s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                                ├─   0.373356s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                                ├─   0.373365s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "a", "c"})
                                ├─   0.373375s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                                ├─   0.373383s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a", "c"})
                                ├─   0.373391s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                                ├─   0.373399s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a", "c"})
                                ├─   0.373409s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.373418s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.373438s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                            ┌─┘
                            ├─   0.373459s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.373477s   0ms DEBUG Paths for id
                          ├─   0.373488s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
                          ├─   0.373496s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.373509s   0ms DEBUG path User/a -(id)- ID/a is valid
                          ├─   0.373517s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                        ┌─┘
                        ├─   0.373552s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                          └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                            ├─   0.373594s   0ms DEBUG Building root query tree node: User/a
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.373612s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.373643s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b", current_cost=3005}
                          ├─   0.373708s   0ms DEBUG checking edge User/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b", edge="id"}
                            ├─   0.373733s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.373754s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                          ├─   0.373764s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(19) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.373784s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
                        ├─   0.373795s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                        ├─   0.373803s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                        ├─   0.373814s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.373821s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(19) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.373841s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.373861s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.373879s   0ms DEBUG Paths for id
                  ├─   0.373889s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
                  ├─   0.373898s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b -(id)- ID/b is valid
                  ├─   0.373906s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.373917s   0ms DEBUG path User/a -(id)- ID/a is valid
                  ├─   0.373924s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
                ├─   0.373940s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                  └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                    ├─   0.373968s   0ms DEBUG Building root query tree node: User/a
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.373984s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.374008s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(🔑🧩{id})- User/c", current_cost=3005}
                  ├─   0.374058s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.374073s   1ms DEBUG No direct paths found
                ├─   0.374081s   1ms DEBUG going deeper
                ├─   0.374090s   1ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                  ├─   0.374112s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                        ├─   0.374150s   0ms DEBUG checking edge User/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                          ├─   0.374170s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.374190s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                        ├─   0.374200s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                        ├─   0.374235s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                          ├─   0.374258s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                                ├─   0.374300s   0ms DEBUG checking edge User/a -(id)- ID/a
                                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                                  ├─   0.374325s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.374347s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                                ├─   0.374358s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                                ├─   0.374396s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                                ├─   0.374406s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "b"})
                                ├─   0.374415s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                                ├─   0.374423s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "a", "b"})
                                ├─   0.374432s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                                ├─   0.374440s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "b"})
                                ├─   0.374449s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.374458s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.374478s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                            ┌─┘
                            ├─   0.374498s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.374516s   0ms DEBUG Paths for id
                          ├─   0.374527s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
                          ├─   0.374535s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.374547s   0ms DEBUG path User/a -(id)- ID/a is valid
                          ├─   0.374555s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                        ┌─┘
                        ├─   0.374573s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                          └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                            ├─   0.374604s   0ms DEBUG Building root query tree node: User/a
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.374622s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.374650s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(🔑🧩{id})- User/c", current_cost=3005}
                          ├─   0.374706s   0ms DEBUG checking edge User/c -(id)- ID/c
                          └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(🔑🧩{id})- User/c", edge="id"}
                            ├─   0.374730s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.374750s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                          ├─   0.374760s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                        ┌─┘
                        ├─   0.374780s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/c
                        ├─   0.374790s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                        ├─   0.374798s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                        ├─   0.374806s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                        ├─   0.374813s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                        ├─   0.374823s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.374830s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                      ┌─┘
                      ├─   0.374850s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                    ┌─┘
                    ├─   0.374869s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.374887s   0ms DEBUG Paths for id
                  ├─   0.374897s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
                  ├─   0.374906s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
                  ├─   0.374914s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.374924s   0ms DEBUG path User/a -(id)- ID/a is valid
                  ├─   0.374931s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
                ├─   0.374947s   2ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                  └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                    ├─   0.374974s   0ms DEBUG Building root query tree node: User/a
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.374990s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.375014s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b", current_cost=3005}
                  ├─   0.375064s   0ms DEBUG checking edge User/b -(name)- String/b
                  └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b", edge="name"}
                    ├─   0.375085s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.375103s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
                  ├─   0.375112s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(19) --> EdgeIndex(14)" }])
                ┌─┘
                ├─   0.375129s   2ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
                ├─   0.375161s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                ├─   0.375169s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
                ├─   0.375177s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                ├─   0.375183s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                ├─   0.375190s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                ├─   0.375198s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.375205s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                ├─   0.375211s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                ├─   0.375221s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.375227s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(19) --> EdgeIndex(14)" }])
              ┌─┘
              ├─   0.375252s   2ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
            ┌─┘
            ├─   0.375268s   2ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.375282s   2ms DEBUG Paths for name
          ├─   0.375293s   2ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b -(name)- String/b is valid
          ├─   0.375299s   2ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.375311s   2ms DEBUG path User/a -(🔑🧩{id})- User/b -(name)- String/b is valid
          ├─   0.375317s   2ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(19) --> EdgeIndex(14)" }]))
        ┌─┘
        ├─   0.375334s   2ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a with edge User/a -(aName🧩{name})- String/a
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(19) --> EdgeIndex(14)" }, root_node="User/a"}
          └─┐create_root_for_path_sequences{root_node="User/a", segments_count=2}
            ├─   0.375361s   0ms DEBUG Building root query tree node: User/a
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.375375s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/b
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.375390s   0ms DEBUG Processing edge: User/b -(name)- String/b
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.375411s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.375424s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.375454s   2ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.375483s   4ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/a
      ├─   0.375492s   4ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
      ├─   0.375498s   4ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.375503s   4ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.375509s   4ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.375515s   4ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.375521s   4ms DEBUG Ignoring. Already visited similar edge
      ├─   0.375529s   4ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.375535s   4ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.375549s   4ms DEBUG Indirect paths found: 1
    ├─   0.375558s   4ms DEBUG advanced: root(Query) -(c)- Query/c -(userInC)- User/c
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.375586s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(userInC)- User/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
      ├─   0.375611s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.375623s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
      ├─   0.375640s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
      ├─   0.375645s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.375651s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
        ├─   0.375667s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.375698s   0ms DEBUG checking edge User/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.375715s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.375732s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
              ├─   0.375740s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.375768s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.375775s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.375782s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              ├─   0.375788s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.375795s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.375813s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.375847s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.375865s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.375884s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.375893s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.375923s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.375930s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.375938s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      ├─   0.375945s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.375952s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      ├─   0.375959s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.375967s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.375974s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.375991s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.376008s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                ┌─┘
                ├─   0.376024s   0ms DEBUG Paths for id
                ├─   0.376033s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.376039s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.376051s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.376057s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.376073s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.376100s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.376115s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.376138s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.376184s   0ms DEBUG checking edge User/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                  ├─   0.376204s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.376221s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                ├─   0.376230s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.376247s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/a
              ├─   0.376257s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.376264s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.376280s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.376296s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.376311s   0ms DEBUG Paths for id
        ├─   0.376319s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
        ├─   0.376326s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
        ├─   0.376333s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.376342s   0ms DEBUG path User/c -(id)- ID/c is valid
        ├─   0.376347s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
      ┌─┘
      ├─   0.376361s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
          ├─   0.376384s   0ms DEBUG Building root query tree node: User/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.376398s   0ms DEBUG Processing edge: User/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.376418s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.376459s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.376476s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.376491s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.376500s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(14)" }])
      ┌─┘
      ├─   0.376515s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
      ├─   0.376523s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
        ├─   0.376539s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.376570s   0ms DEBUG checking edge User/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.376587s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.376603s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
              ├─   0.376611s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.376639s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.376646s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.376653s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.376670s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.376704s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.376722s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.376740s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.376749s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.376780s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.376787s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.376795s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      ├─   0.376802s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.376810s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      ├─   0.376816s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.376825s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.376832s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.376848s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.376866s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                ┌─┘
                ├─   0.376881s   0ms DEBUG Paths for id
                ├─   0.376890s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.376897s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.376907s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.376914s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.376929s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.376956s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.376971s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.376994s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.377040s   0ms DEBUG checking edge User/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", edge="id"}
                  ├─   0.377059s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.377076s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                ├─   0.377085s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.377102s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
              ├─   0.377111s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              ├─   0.377117s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.377126s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.377132s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.377149s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.377165s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.377180s   0ms DEBUG Paths for id
        ├─   0.377188s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
        ├─   0.377195s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b -(id)- ID/b is valid
        ├─   0.377202s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.377211s   0ms DEBUG path User/c -(id)- ID/c is valid
        ├─   0.377216s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
      ┌─┘
      ├─   0.377230s   1ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
          ├─   0.377254s   0ms DEBUG Building root query tree node: User/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.377267s   0ms DEBUG Processing edge: User/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.377287s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.377354s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.377368s   1ms DEBUG No direct paths found
      ├─   0.377376s   1ms DEBUG going deeper
      ├─   0.377384s   1ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
      ├─   0.377390s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.377396s   1ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      ├─   0.377402s   1ms DEBUG Ignoring. Already visited similar edge
      ├─   0.377408s   1ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.377413s   1ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.377423s   1ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.377428s   1ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.377443s   1ms DEBUG Indirect paths found: 1
    ├─   0.377452s   1ms DEBUG advanced: root(Query) -(c)- Query/c -(userInC)- User/c
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.377478s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(userInC)- User/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
      ├─   0.377502s   0ms DEBUG checking edge User/c -(id)- ID/c
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
        ├─   0.377518s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.377533s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
      ├─   0.377540s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
    ┌─┘
    ├─   0.377554s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
      ├─   0.377572s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
      ├─   0.377577s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.377583s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
        ├─   0.377598s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.377629s   0ms DEBUG checking edge User/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.377646s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.377662s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
              ├─   0.377670s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.377698s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.377705s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.377711s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              ├─   0.377717s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.377724s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.377742s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.377776s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.377794s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.377812s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.377821s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.377851s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.377859s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.377866s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      ├─   0.377873s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
                      ├─   0.377881s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      ├─   0.377888s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
                      ├─   0.377896s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.377903s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.377920s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.377937s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                ┌─┘
                ├─   0.377953s   0ms DEBUG Paths for id
                ├─   0.377962s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.377968s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.377980s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.377986s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.378002s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.378028s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.378044s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.378067s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.378113s   0ms DEBUG checking edge User/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                  ├─   0.378132s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.378150s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                ├─   0.378159s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.378176s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/a
              ├─   0.378186s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.378192s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.378209s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.378224s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.378240s   0ms DEBUG Paths for id
        ├─   0.378247s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
        ├─   0.378255s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
        ├─   0.378261s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.378271s   0ms DEBUG path User/c -(id)- ID/c is valid
        ├─   0.378276s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
      ┌─┘
      ├─   0.378290s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
          ├─   0.378313s   0ms DEBUG Building root query tree node: User/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.378327s   0ms DEBUG Processing edge: User/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.378347s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.378388s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.378405s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.378420s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.378428s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
      ┌─┘
      ├─   0.378443s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
      ├─   0.378451s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
        ├─   0.378467s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.378498s   0ms DEBUG checking edge User/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.378515s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.378531s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
              ├─   0.378539s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.378567s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.378574s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.378580s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.378597s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.378631s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.378650s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.378668s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.378677s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.378707s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.378714s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.378722s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      ├─   0.378729s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
                      ├─   0.378737s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      ├─   0.378744s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
                      ├─   0.378752s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.378759s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.378775s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.378792s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                ┌─┘
                ├─   0.378808s   0ms DEBUG Paths for id
                ├─   0.378817s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.378824s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.378834s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.378841s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.378857s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.378883s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.378898s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.378921s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.378967s   0ms DEBUG checking edge User/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", edge="id"}
                  ├─   0.378986s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.379003s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                ├─   0.379012s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.379029s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
              ├─   0.379038s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              ├─   0.379045s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.379053s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.379060s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.379076s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.379092s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.379107s   0ms DEBUG Paths for id
        ├─   0.379115s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
        ├─   0.379123s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b -(id)- ID/b is valid
        ├─   0.379129s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.379138s   0ms DEBUG path User/c -(id)- ID/c is valid
        ├─   0.379144s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
      ┌─┘
      ├─   0.379157s   1ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
          ├─   0.379181s   0ms DEBUG Building root query tree node: User/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.379194s   0ms DEBUG Processing edge: User/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.379214s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.379255s   0ms DEBUG checking edge User/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
          ├─   0.379273s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.379288s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
        ├─   0.379296s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
      ┌─┘
      ├─   0.379311s   1ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/a
      ├─   0.379323s   1ms DEBUG Finished finding indirect paths, found total of 2
      ├─   0.379329s   1ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.379344s   1ms DEBUG Indirect paths found: 2
    ├─   0.379351s   1ms DEBUG advanced: root(Query) -(c)- Query/c -(userInC)- User/c
  ┌─┘
┌─┘
└─┐process_field{field_name="userInB", leaf=false}
  ├─   0.379379s   0ms DEBUG Trying to advance to: userInB{id name aName cName} through 3 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInB", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.379405s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379417s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInB", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.379434s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.379439s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379450s   0ms DEBUG Indirect paths found: 0
    ├─   0.379457s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInB", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.379502s   0ms DEBUG checking edge Query/b -(userInB)- User/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="userInB"}
        ├─   0.379525s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.379541s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(userInB)- User/b
      ├─   0.379550s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.379564s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInB", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.379584s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.379590s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379601s   0ms DEBUG Indirect paths found: 0
    ├─   0.379608s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  └─┐explore_path{path="root(Query) -(c)- Query/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInB", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.379635s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379646s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInB", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.379662s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.379667s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379678s   0ms DEBUG Indirect paths found: 0
    ├─   0.379685s   0ms WARN failed to advance: root(Query) -(c)- Query/c
  ┌─┘
  ├─   0.379697s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="cName", leaf=true}
  ├─   0.379716s   0ms DEBUG Trying to advance to: cName through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userInB)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
      ├─   0.379739s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379750s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
      ├─   0.379766s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
        ├─   0.379783s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.379814s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.379831s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.379847s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
              ├─   0.379856s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.379884s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
              ├─   0.379891s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.379898s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.379904s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.379911s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.379928s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.379962s   0ms DEBUG checking edge User/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                        ├─   0.379981s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.379999s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
                      ├─   0.380008s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.380038s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
                      ├─   0.380046s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.380054s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
                      ├─   0.380061s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.380068s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
                      ├─   0.380075s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.380083s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.380090s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.380107s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.380124s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.380139s   0ms DEBUG Paths for id
                ├─   0.380148s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
                ├─   0.380155s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.380166s   0ms DEBUG path User/b -(id)- ID/b is valid
                ├─   0.380173s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
              ┌─┘
              ├─   0.380189s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
                └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
                  ├─   0.380215s   0ms DEBUG Building root query tree node: User/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.380231s   0ms DEBUG Processing edge: User/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.380254s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.380300s   0ms DEBUG checking edge User/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="id"}
                  ├─   0.380320s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.380337s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                ├─   0.380346s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.380363s   0ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/a
              ├─   0.380373s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.380379s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.380396s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.380412s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.380427s   0ms DEBUG Paths for id
        ├─   0.380435s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
        ├─   0.380443s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(id)- ID/a is valid
        ├─   0.380449s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.380458s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.380464s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
      ┌─┘
      ├─   0.380477s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.380500s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.380514s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.380553s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
        ├─   0.380607s   0ms DEBUG checking edge User/c -(cName🧩{name})- String/c
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="cName"}
          ├─   0.380626s   0ms DEBUG checking requirements {name} for edge 'User/c -(cName🧩{name})- String/c'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.380659s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.380689s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                ├─   0.380697s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
                ├─   0.380704s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.380724s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.380760s   0ms DEBUG checking edge User/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.380782s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.380802s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                        ├─   0.380813s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.380847s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                        ├─   0.380855s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                        ├─   0.380863s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                        ├─   0.380870s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                        ├─   0.380878s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.380900s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                                ├─   0.380949s   0ms DEBUG checking edge User/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="id"}
                                  ├─   0.380975s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.380997s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                                ├─   0.381008s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                                ├─   0.381046s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                                ├─   0.381056s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "a", "c"})
                                ├─   0.381065s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                                ├─   0.381073s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a", "c"})
                                ├─   0.381081s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                                ├─   0.381089s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a", "c"})
                                ├─   0.381099s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.381107s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.381128s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }], [])))
                            ┌─┘
                            ├─   0.381148s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }], [])))
                          ┌─┘
                          ├─   0.381167s   0ms DEBUG Paths for id
                          ├─   0.381177s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(id)- ID/c is valid
                          ├─   0.381185s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.381198s   0ms DEBUG path User/c -(id)- ID/c is valid
                          ├─   0.381206s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                        ┌─┘
                        ├─   0.381224s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                          └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                            ├─   0.381255s   0ms DEBUG Building root query tree node: User/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.381273s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.381301s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a", current_cost=3005}
                          ├─   0.381357s   0ms DEBUG checking edge User/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a", edge="id"}
                            ├─   0.381381s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.381401s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                          ├─   0.381411s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                        ┌─┘
                        ├─   0.381431s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/a
                        ├─   0.381442s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.381450s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                      ┌─┘
                      ├─   0.381469s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                    ┌─┘
                    ├─   0.381488s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.381506s   0ms DEBUG Paths for id
                  ├─   0.381516s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(id)- ID/c is valid
                  ├─   0.381525s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
                  ├─   0.381533s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.381543s   0ms DEBUG path User/c -(id)- ID/c is valid
                  ├─   0.381550s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                ┌─┘
                ├─   0.381566s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                  └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                    ├─   0.381593s   0ms DEBUG Building root query tree node: User/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.381609s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.381633s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b", current_cost=3005}
                  ├─   0.381708s   0ms DEBUG checking edge User/b -(name)- String/b
                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b", edge="name"}
                    ├─   0.381731s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.381751s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
                  ├─   0.381760s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(25) --> EdgeIndex(14)" }])
                ┌─┘
                ├─   0.381778s   1ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
                ├─   0.381788s   1ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.381809s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.381847s   0ms DEBUG checking edge User/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.381868s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.381887s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                        ├─   0.381897s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.381931s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                        ├─   0.381939s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                        ├─   0.381948s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.381969s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                                ├─   0.382012s   0ms DEBUG checking edge User/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="id"}
                                  ├─   0.382037s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.382058s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                                ├─   0.382069s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                                ├─   0.382107s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                                ├─   0.382116s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "a", "c"})
                                ├─   0.382125s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                                ├─   0.382133s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a", "c"})
                                ├─   0.382142s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                                ├─   0.382150s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a", "c"})
                                ├─   0.382159s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.382168s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.382188s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }], [])))
                            ┌─┘
                            ├─   0.382208s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }], [])))
                          ┌─┘
                          ├─   0.382227s   0ms DEBUG Paths for id
                          ├─   0.382238s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(id)- ID/c is valid
                          ├─   0.382246s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.382258s   0ms DEBUG path User/c -(id)- ID/c is valid
                          ├─   0.382266s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                        ┌─┘
                        ├─   0.382284s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                          └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                            ├─   0.382315s   0ms DEBUG Building root query tree node: User/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.382333s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.382361s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b", current_cost=3005}
                          ├─   0.382417s   0ms DEBUG checking edge User/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b", edge="id"}
                            ├─   0.382441s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.382461s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                          ├─   0.382471s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(25) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.382490s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
                        ├─   0.382500s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                        ├─   0.382508s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                        ├─   0.382518s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.382525s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(25) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.382545s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.382564s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.382582s   0ms DEBUG Paths for id
                  ├─   0.382591s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(id)- ID/c is valid
                  ├─   0.382601s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b -(id)- ID/b is valid
                  ├─   0.382608s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.382619s   0ms DEBUG path User/c -(id)- ID/c is valid
                  ├─   0.382626s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                ┌─┘
                ├─   0.382642s   1ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                  └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                    ├─   0.382669s   0ms DEBUG Building root query tree node: User/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.382685s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.382709s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a", current_cost=3005}
                  ├─   0.382758s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.382772s   2ms DEBUG No direct paths found
                ├─   0.382782s   2ms DEBUG going deeper
                ├─   0.382791s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                ├─   0.382798s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                ├─   0.382805s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                ├─   0.382813s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.382819s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                ├─   0.382826s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                ├─   0.382835s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.382842s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(25) --> EdgeIndex(14)" }])
              ┌─┘
              ├─   0.382861s   2ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
            ┌─┘
            ├─   0.382876s   2ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.382891s   2ms DEBUG Paths for name
          ├─   0.382901s   2ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b -(name)- String/b is valid
          ├─   0.382907s   2ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.382917s   2ms DEBUG path User/c -(🔑🧩{id})- User/b -(name)- String/b is valid
          ├─   0.382923s   2ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(25) --> EdgeIndex(14)" }]))
        ┌─┘
        ├─   0.382940s   2ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c with edge User/c -(cName🧩{name})- String/c
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(25) --> EdgeIndex(14)" }, root_node="User/c"}
          └─┐create_root_for_path_sequences{root_node="User/c", segments_count=2}
            ├─   0.382965s   0ms DEBUG Building root query tree node: User/c
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.382979s   0ms DEBUG Processing edge: User/c -(🔑🧩{id})- User/b
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.382993s   0ms DEBUG Processing edge: User/b -(name)- String/b
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.383015s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.383028s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.383057s   2ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(17)" }])
      ┌─┘
      ├─   0.383072s   3ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/c
      ├─   0.383080s   3ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.383086s   3ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.383091s   3ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
        ├─   0.383109s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.383141s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.383158s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.383174s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
              ├─   0.383182s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.383210s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.383228s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.383263s   0ms DEBUG checking edge User/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                        ├─   0.383281s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.383299s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
                      ├─   0.383308s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.383338s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
                      ├─   0.383346s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.383354s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
                      ├─   0.383361s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.383369s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
                      ├─   0.383375s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.383384s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.383391s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.383408s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.383425s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.383440s   0ms DEBUG Paths for id
                ├─   0.383449s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
                ├─   0.383456s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.383467s   0ms DEBUG path User/b -(id)- ID/b is valid
                ├─   0.383473s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
              ┌─┘
              ├─   0.383489s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
                └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
                  ├─   0.383515s   0ms DEBUG Building root query tree node: User/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.383530s   0ms DEBUG Processing edge: User/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.383553s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.383599s   0ms DEBUG checking edge User/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.383618s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.383636s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                ├─   0.383645s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.383662s   0ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/c
              ├─   0.383671s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.383677s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.383684s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.383690s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.383699s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.383705s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.383721s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.383737s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.383752s   0ms DEBUG Paths for id
        ├─   0.383760s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
        ├─   0.383768s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(id)- ID/c is valid
        ├─   0.383774s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.383783s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.383789s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
      ┌─┘
      ├─   0.383803s   4ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.383847s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.383872s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.383902s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.383950s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.383963s   4ms DEBUG No direct paths found
      ├─   0.383971s   4ms DEBUG going deeper
      ├─   0.383979s   4ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
      ├─   0.383986s   4ms DEBUG Ignoring. Already visited similar edge
      ├─   0.383992s   4ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      ├─   0.383997s   4ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.384003s   4ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.384008s   4ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.384018s   4ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.384024s   4ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(17)" }])
    ┌─┘
    ├─   0.384039s   4ms DEBUG Indirect paths found: 1
    ├─   0.384048s   4ms DEBUG advanced: root(Query) -(b)- Query/b -(userInB)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="aName", leaf=true}
  ├─   0.384076s   0ms DEBUG Trying to advance to: aName through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userInB)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
      ├─   0.384100s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.384112s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
      ├─   0.384128s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
        ├─   0.384145s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.384176s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.384194s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.384211s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
              ├─   0.384219s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.384248s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
              ├─   0.384255s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.384262s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.384268s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.384275s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.384293s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.384327s   0ms DEBUG checking edge User/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                        ├─   0.384345s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.384363s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
                      ├─   0.384372s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.384403s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
                      ├─   0.384411s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.384419s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
                      ├─   0.384426s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.384433s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
                      ├─   0.384440s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.384448s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.384456s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.384472s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.384490s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.384506s   0ms DEBUG Paths for id
                ├─   0.384515s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
                ├─   0.384522s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.384534s   0ms DEBUG path User/b -(id)- ID/b is valid
                ├─   0.384540s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
              ┌─┘
              ├─   0.384556s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
                └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
                  ├─   0.384583s   0ms DEBUG Building root query tree node: User/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.384598s   0ms DEBUG Processing edge: User/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.384622s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.384668s   0ms DEBUG checking edge User/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="id"}
                  ├─   0.384687s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.384705s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                ├─   0.384714s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.384731s   0ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/a
              ├─   0.384741s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.384747s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.384764s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.384780s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.384795s   0ms DEBUG Paths for id
        ├─   0.384803s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
        ├─   0.384811s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(id)- ID/a is valid
        ├─   0.384817s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.384826s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.384832s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
      ┌─┘
      ├─   0.384846s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.384869s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.384882s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.384902s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
        ├─   0.384943s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.384956s   0ms DEBUG No direct paths found
      ├─   0.384963s   0ms DEBUG going deeper
      ├─   0.384970s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.384975s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.384981s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
        ├─   0.384998s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.385029s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.385045s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.385061s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
              ├─   0.385069s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.385098s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.385116s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.385150s   0ms DEBUG checking edge User/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                        ├─   0.385168s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.385187s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
                      ├─   0.385195s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.385225s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
                      ├─   0.385233s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                      ├─   0.385241s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
                      ├─   0.385248s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.385256s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
                      ├─   0.385263s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                      ├─   0.385271s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.385278s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.385297s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.385314s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.385330s   0ms DEBUG Paths for id
                ├─   0.385339s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
                ├─   0.385345s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.385356s   0ms DEBUG path User/b -(id)- ID/b is valid
                ├─   0.385363s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
              ┌─┘
              ├─   0.385378s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
                └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
                  ├─   0.385444s   0ms DEBUG Building root query tree node: User/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.385462s   0ms DEBUG Processing edge: User/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.385488s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.385539s   0ms DEBUG checking edge User/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.385559s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.385585s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                ├─   0.385594s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.385612s   0ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/c
              ├─   0.385621s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.385629s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.385636s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.385642s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.385652s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.385658s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.385675s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.385691s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.385707s   0ms DEBUG Paths for id
        ├─   0.385715s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
        ├─   0.385722s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(id)- ID/c is valid
        ├─   0.385729s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.385739s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.385744s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
      ┌─┘
      ├─   0.385758s   1ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.385782s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.385796s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.385816s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.385859s   0ms DEBUG checking edge User/a -(aName🧩{name})- String/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="aName"}
          ├─   0.385878s   0ms DEBUG checking requirements {name} for edge 'User/a -(aName🧩{name})- String/a'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.385912s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.385942s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="id"}
                  ├─   0.385962s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                        ├─   0.385999s   0ms DEBUG checking edge User/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="id"}
                          ├─   0.386046s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.386069s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                        ├─   0.386081s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                        ├─   0.386118s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                        ├─   0.386126s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                        ├─   0.386135s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="id"}
                          ├─   0.386157s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                                ├─   0.386204s   0ms DEBUG checking edge User/a -(id)- ID/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="id"}
                                  ├─   0.386231s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.386253s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                                ├─   0.386264s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                                ├─   0.386303s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                                ├─   0.388275s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b", "a"})
                                ├─   0.388340s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                                ├─   0.388349s   2ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b", "a"})
                                ├─   0.388360s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                                ├─   0.388369s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "b", "a"})
                                ├─   0.388389s   2ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.388400s   2ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.388459s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }], [])))
                            ┌─┘
                            ├─   0.388498s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.388520s   2ms DEBUG Paths for id
                          ├─   0.388540s   2ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(id)- ID/a is valid
                          ├─   0.388550s   2ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.388575s   2ms DEBUG path User/a -(id)- ID/a is valid
                          ├─   0.388585s   2ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                        ┌─┘
                        ├─   0.388607s   2ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                          └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                            ├─   0.388655s   0ms DEBUG Building root query tree node: User/a
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.388676s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.388708s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b", current_cost=3005}
                          ├─   0.388785s   0ms DEBUG checking edge User/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b", edge="id"}
                            ├─   0.388814s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.388837s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                          ├─   0.388848s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(19) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.388869s   2ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
                        ├─   0.388884s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                        ├─   0.388893s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                        ├─   0.388907s   2ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.388916s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(19) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.388940s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.388975s   3ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.389001s   3ms DEBUG Paths for id
                  ├─   0.389015s   3ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(id)- ID/a is valid
                  ├─   0.389025s   3ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b -(id)- ID/b is valid
                  ├─   0.389035s   3ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.389048s   3ms DEBUG path User/a -(id)- ID/a is valid
                  ├─   0.389056s   3ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
                ├─   0.389077s   3ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                  └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                    ├─   0.389109s   0ms DEBUG Building root query tree node: User/a
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.389126s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.389151s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(🔑🧩{id})- User/c", current_cost=3005}
                  ├─   0.389207s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.389230s   3ms DEBUG No direct paths found
                ├─   0.389270s   3ms DEBUG going deeper
                ├─   0.389289s   3ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="id"}
                  ├─   0.389327s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                        ├─   0.389380s   0ms DEBUG checking edge User/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="id"}
                          ├─   0.389408s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.389437s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                        ├─   0.389450s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                        ├─   0.389499s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="id"}
                          ├─   0.389528s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                                ├─   0.389583s   0ms DEBUG checking edge User/a -(id)- ID/a
                                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="id"}
                                  ├─   0.389615s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.389643s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                                ├─   0.389657s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                                ├─   0.389710s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                                ├─   0.389722s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b", "a"})
                                ├─   0.389734s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                                ├─   0.389744s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b", "a"})
                                ├─   0.389755s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                                ├─   0.389766s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "b", "a"})
                                ├─   0.389778s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.389789s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.389818s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }], [])))
                            ┌─┘
                            ├─   0.389844s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.389868s   0ms DEBUG Paths for id
                          ├─   0.389908s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(id)- ID/a is valid
                          ├─   0.389923s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.389941s   0ms DEBUG path User/a -(id)- ID/a is valid
                          ├─   0.389951s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                        ┌─┘
                        ├─   0.389988s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                          └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                            ├─   0.390030s   0ms DEBUG Building root query tree node: User/a
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.390054s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.390091s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(🔑🧩{id})- User/c", current_cost=3005}
                          ├─   0.390167s   0ms DEBUG checking edge User/c -(id)- ID/c
                          └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(🔑🧩{id})- User/c", edge="id"}
                            ├─   0.390198s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.390225s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                          ├─   0.390238s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                        ┌─┘
                        ├─   0.390263s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/c
                        ├─   0.390280s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                        ├─   0.390292s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
                        ├─   0.390301s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                        ├─   0.390308s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
                        ├─   0.390319s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.390382s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                      ┌─┘
                      ├─   0.390415s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                    ┌─┘
                    ├─   0.390436s   1ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" },  { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.390456s   1ms DEBUG Paths for id
                  ├─   0.390469s   1ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(id)- ID/a is valid
                  ├─   0.390479s   1ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
                  ├─   0.390488s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.390501s   1ms DEBUG path User/a -(id)- ID/a is valid
                  ├─   0.390508s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
                ├─   0.390548s   4ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                  └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                    ├─   0.390584s   0ms DEBUG Building root query tree node: User/a
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.390602s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.390630s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b", current_cost=3005}
                  ├─   0.390687s   0ms DEBUG checking edge User/b -(name)- String/b
                  └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b", edge="name"}
                    ├─   0.390712s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.390733s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
                  ├─   0.390743s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(19) --> EdgeIndex(14)" }])
                ┌─┘
                ├─   0.390762s   4ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
                ├─   0.390772s   4ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                ├─   0.390780s   4ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
                ├─   0.390789s   4ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                ├─   0.390796s   4ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                ├─   0.390803s   4ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                ├─   0.390812s   4ms DEBUG Ignoring. Already visited similar edge
                ├─   0.390820s   4ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                ├─   0.390827s   4ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                ├─   0.390838s   4ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.390845s   4ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(19) --> EdgeIndex(14)" }])
              ┌─┘
              ├─   0.390872s   4ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
            ┌─┘
            ├─   0.390889s   5ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.390905s   5ms DEBUG Paths for name
          ├─   0.390916s   5ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(🔑🧩{id})- User/b -(name)- String/b is valid
          ├─   0.390923s   5ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.390935s   5ms DEBUG path User/a -(🔑🧩{id})- User/b -(name)- String/b is valid
          ├─   0.390942s   5ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(19) --> EdgeIndex(14)" }]))
        ┌─┘
        ├─   0.390962s   5ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a with edge User/a -(aName🧩{name})- String/a
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(19) --> EdgeIndex(14)" }, root_node="User/a"}
          └─┐create_root_for_path_sequences{root_node="User/a", segments_count=2}
            ├─   0.390991s   0ms DEBUG Building root query tree node: User/a
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.391006s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/b
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.391022s   0ms DEBUG Processing edge: User/b -(name)- String/b
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.391045s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.391059s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.391091s   5ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.391110s   6ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/a
      ├─   0.391121s   7ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
      ├─   0.391127s   7ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.391155s   7ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
      ├─   0.391165s   7ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.391172s   7ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
      ├─   0.391179s   7ms DEBUG Ignoring. Already visited similar edge
      ├─   0.391189s   7ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.391195s   7ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.391219s   7ms DEBUG Indirect paths found: 1
    ├─   0.391230s   7ms DEBUG advanced: root(Query) -(b)- Query/b -(userInB)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.391266s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userInB)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
      ├─   0.391320s   0ms DEBUG checking edge User/b -(name)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="name"}
        ├─   0.391340s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.391358s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(name)- String/b
      ├─   0.391367s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.391383s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
      ├─   0.391404s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
        ├─   0.391437s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.391507s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.391528s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.391548s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
              ├─   0.391558s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.391590s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
              ├─   0.391598s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.391609s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.391616s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.391639s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.391669s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.391708s   0ms DEBUG checking edge User/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                        ├─   0.391728s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.391751s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
                      ├─   0.391761s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.391826s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
                      ├─   0.391837s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                      ├─   0.391862s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
                      ├─   0.391873s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.391881s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
                      ├─   0.391888s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                      ├─   0.391899s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.391919s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.391944s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.391965s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.391982s   0ms DEBUG Paths for id
                ├─   0.391993s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
                ├─   0.392017s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.392035s   0ms DEBUG path User/b -(id)- ID/b is valid
                ├─   0.392043s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
              ┌─┘
              ├─   0.392064s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
                └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
                  ├─   0.392095s   0ms DEBUG Building root query tree node: User/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.392112s   0ms DEBUG Processing edge: User/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.392137s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.392222s   0ms DEBUG checking edge User/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="id"}
                  ├─   0.392245s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.392265s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                ├─   0.392275s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.392294s   0ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/a
              ├─   0.392306s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.392313s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.392331s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.392348s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.392365s   0ms DEBUG Paths for id
        ├─   0.392373s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
        ├─   0.392381s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(id)- ID/a is valid
        ├─   0.392388s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.392399s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.392405s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
      ┌─┘
      ├─   0.392420s   1ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.392474s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.392493s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.392532s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
        ├─   0.392583s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.392597s   1ms DEBUG No direct paths found
      ├─   0.392605s   1ms DEBUG going deeper
      ├─   0.392614s   1ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.392619s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.392626s   1ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
        ├─   0.392644s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.392677s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.392695s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.392713s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
              ├─   0.392721s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.392752s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.392771s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.392836s   0ms DEBUG checking edge User/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                        ├─   0.392859s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.392882s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
                      ├─   0.392892s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.392927s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
                      ├─   0.392936s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                      ├─   0.392944s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
                      ├─   0.392952s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.392960s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
                      ├─   0.392967s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                      ├─   0.392976s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.392984s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.393002s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.393020s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.393037s   0ms DEBUG Paths for id
                ├─   0.393056s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
                ├─   0.393063s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.393075s   0ms DEBUG path User/b -(id)- ID/b is valid
                ├─   0.393082s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
              ┌─┘
              ├─   0.393098s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
                └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
                  ├─   0.393126s   0ms DEBUG Building root query tree node: User/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.393143s   0ms DEBUG Processing edge: User/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.393168s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.393219s   0ms DEBUG checking edge User/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.393240s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.393258s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                ├─   0.393268s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.393286s   0ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/c
              ├─   0.393296s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.393303s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.393309s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.393316s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.393325s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.393333s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.393350s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.393367s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.393407s   0ms DEBUG Paths for id
        ├─   0.393421s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
        ├─   0.393430s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(id)- ID/c is valid
        ├─   0.393438s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.393449s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.393464s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
      ┌─┘
      ├─   0.393479s   2ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.393509s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.393523s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.393545s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.393641s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.393656s   2ms DEBUG No direct paths found
      ├─   0.393664s   2ms DEBUG going deeper
      ├─   0.393673s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
      ├─   0.393680s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.393686s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      ├─   0.393692s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.393698s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.393703s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.393712s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
      ├─   0.393718s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.393723s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
      ├─   0.393729s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.393735s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
      ├─   0.393741s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.393749s   2ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.393755s   2ms INFO return=Ok([])
    ┌─┘
    ├─   0.393767s   2ms DEBUG Indirect paths found: 0
    ├─   0.393775s   2ms DEBUG advanced: root(Query) -(b)- Query/b -(userInB)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.393805s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userInB)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
      ├─   0.393831s   0ms DEBUG checking edge User/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
        ├─   0.393848s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.393863s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
      ├─   0.393871s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.393885s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
      ├─   0.393905s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
        ├─   0.393922s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.393954s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.393972s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.393989s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
              ├─   0.393997s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.394026s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
              ├─   0.394033s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.394041s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.394047s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.394054s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.394072s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.394112s   0ms DEBUG checking edge User/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                        ├─   0.394169s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.394192s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
                      ├─   0.394204s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.394249s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
                      ├─   0.394257s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.394265s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
                      ├─   0.394273s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.394281s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
                      ├─   0.394288s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.394297s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.394304s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.394323s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.394341s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.394357s   0ms DEBUG Paths for id
                ├─   0.394367s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
                ├─   0.394374s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.394386s   0ms DEBUG path User/b -(id)- ID/b is valid
                ├─   0.394393s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
              ┌─┘
              ├─   0.394433s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
                └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
                  ├─   0.394468s   0ms DEBUG Building root query tree node: User/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.394484s   0ms DEBUG Processing edge: User/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.394509s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.394561s   0ms DEBUG checking edge User/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="id"}
                  ├─   0.394582s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.394600s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                ├─   0.394610s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.394629s   0ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/a
              ├─   0.394640s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.394647s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.394665s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.394683s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.394698s   0ms DEBUG Paths for id
        ├─   0.394707s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
        ├─   0.394715s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a -(id)- ID/a is valid
        ├─   0.394721s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.394731s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.394737s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
      ┌─┘
      ├─   0.394752s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.394777s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.394791s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.394812s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
        ├─   0.394855s   0ms DEBUG checking edge User/c -(id)- ID/c
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="id"}
          ├─   0.394873s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.394889s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
        ├─   0.394898s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
      ┌─┘
      ├─   0.394913s   1ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/c
      ├─   0.394922s   1ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.394927s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.394933s   1ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
        ├─   0.394950s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.394983s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.395001s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.395018s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
              ├─   0.395026s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
              ├─   0.395056s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                ├─   0.395075s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.395120s   0ms DEBUG checking edge User/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b", edge="id"}
                        ├─   0.395139s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.395157s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b with edge User/b -(id)- ID/b
                      ├─   0.395197s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b", current_cost=1001}
                      ├─   0.395253s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
                      ├─   0.395261s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.395270s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
                      ├─   0.395277s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.395285s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
                      ├─   0.395292s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.395302s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.395309s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.395327s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.395345s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.395361s   0ms DEBUG Paths for id
                ├─   0.395371s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
                ├─   0.395378s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.395390s   0ms DEBUG path User/b -(id)- ID/b is valid
                ├─   0.395399s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
              ┌─┘
              ├─   0.395445s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
                └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
                  ├─   0.395480s   0ms DEBUG Building root query tree node: User/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.395497s   0ms DEBUG Processing edge: User/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.395542s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.395601s   0ms DEBUG checking edge User/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.395622s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.395641s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                ├─   0.395652s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.395670s   0ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/c
              ├─   0.395681s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.395688s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.395695s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.395702s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.395711s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.395718s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.395735s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.395752s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.395786s   0ms DEBUG Paths for id
        ├─   0.395800s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(id)- ID/b is valid
        ├─   0.395809s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/c -(id)- ID/c is valid
        ├─   0.395816s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.395828s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.395833s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(13)" }]))
      ┌─┘
      ├─   0.395852s   1ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(13)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.395879s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.395893s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.395918s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.395965s   0ms DEBUG checking edge User/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a", edge="id"}
          ├─   0.395984s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.396000s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userInB)- User/b -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
        ├─   0.396028s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" }])
      ┌─┘
      ├─   0.396055s   2ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/a
      ├─   0.396070s   2ms DEBUG Finished finding indirect paths, found total of 2
      ├─   0.396076s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(16)" }])
    ┌─┘
    ├─   0.396092s   2ms DEBUG Indirect paths found: 2
    ├─   0.396101s   2ms DEBUG advanced: root(Query) -(b)- Query/b -(userInB)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="userInA", leaf=false}
  ├─   0.396133s   0ms DEBUG Trying to advance to: userInA{id name aName cName} through 3 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.396163s   0ms DEBUG checking edge Query/a -(userInA)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="userInA"}
        ├─   0.396190s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.396204s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(userInA)- User/a
      ├─   0.396212s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.396225s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.396245s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.396251s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.396263s   0ms DEBUG Indirect paths found: 0
    ├─   0.396270s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.396299s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.396310s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.396326s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.396332s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.396343s   0ms DEBUG Indirect paths found: 0
    ├─   0.396354s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  └─┐explore_path{path="root(Query) -(c)- Query/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.396414s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.396428s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.396447s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.396453s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.396464s   0ms DEBUG Indirect paths found: 0
    ├─   0.396471s   0ms WARN failed to advance: root(Query) -(c)- Query/c
  ┌─┘
  ├─   0.396484s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="cName", leaf=true}
  ├─   0.396504s   0ms DEBUG Trying to advance to: cName through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(userInA)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
      ├─   0.396528s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.396540s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
      ├─   0.396557s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
        ├─   0.396575s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.396607s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.396644s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.396671s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
              ├─   0.396683s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.396742s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              ├─   0.396751s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.396758s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.396778s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.396815s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.396834s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.396853s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.396863s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.396895s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.396903s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.396911s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.396918s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.396926s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.396933s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.396941s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.396949s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.396966s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.396984s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.397021s   0ms DEBUG Paths for id
                ├─   0.397035s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.397043s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.397055s   0ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.397062s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.397080s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.397114s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.397130s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.397155s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.397223s   0ms DEBUG checking edge User/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", edge="id"}
                  ├─   0.397253s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.397274s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                ├─   0.397300s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.397328s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
              ├─   0.397349s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.397356s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.397365s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.397371s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.397389s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.397407s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.397422s   0ms DEBUG Paths for id
        ├─   0.397432s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
        ├─   0.397440s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b -(id)- ID/b is valid
        ├─   0.397447s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.397475s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.397484s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.397504s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.397555s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.397571s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.397594s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
        ├─   0.397658s   0ms DEBUG checking edge User/c -(cName🧩{name})- String/c
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="cName"}
          ├─   0.397678s   0ms DEBUG checking requirements {name} for edge 'User/c -(cName🧩{name})- String/c'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.397713s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.397744s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                ├─   0.397753s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
                ├─   0.397761s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.397782s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.397820s   0ms DEBUG checking edge User/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.397841s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.397863s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                        ├─   0.397875s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.397942s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                        ├─   0.397953s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                        ├─   0.397977s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                        ├─   0.397988s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                        ├─   0.397997s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.398041s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                                ├─   0.398105s   0ms DEBUG checking edge User/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                                  ├─   0.398132s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.398158s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                                ├─   0.398170s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                                ├─   0.398212s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                                ├─   0.398222s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "b"})
                                ├─   0.398231s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                                ├─   0.398240s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "a", "b"})
                                ├─   0.398249s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                                ├─   0.398257s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "b"})
                                ├─   0.398268s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.398277s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.398297s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                            ┌─┘
                            ├─   0.398341s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                          ┌─┘
                          ├─   0.398364s   0ms DEBUG Paths for id
                          ├─   0.398378s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
                          ├─   0.398387s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.398401s   0ms DEBUG path User/c -(id)- ID/c is valid
                          ├─   0.398409s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                        ┌─┘
                        ├─   0.398429s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                          └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                            ├─   0.398463s   0ms DEBUG Building root query tree node: User/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.398482s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.398511s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a", current_cost=3005}
                          ├─   0.398598s   0ms DEBUG checking edge User/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a", edge="id"}
                            ├─   0.398625s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.398647s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                          ├─   0.398658s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                        ┌─┘
                        ├─   0.398679s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/a
                        ├─   0.398692s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.398700s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                      ┌─┘
                      ├─   0.398721s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                    ┌─┘
                    ├─   0.398741s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.398760s   0ms DEBUG Paths for id
                  ├─   0.398770s   1ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
                  ├─   0.398802s   1ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
                  ├─   0.398814s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.398826s   1ms DEBUG path User/c -(id)- ID/c is valid
                  ├─   0.398834s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                ┌─┘
                ├─   0.398856s   1ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                  └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                    ├─   0.398887s   0ms DEBUG Building root query tree node: User/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.398904s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.398930s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b", current_cost=3005}
                  ├─   0.399004s   0ms DEBUG checking edge User/b -(name)- String/b
                  └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b", edge="name"}
                    ├─   0.399036s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.399059s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
                  ├─   0.399070s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(14)" }])
                ┌─┘
                ├─   0.399110s   1ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
                ├─   0.399123s   1ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.399151s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.399210s   0ms DEBUG checking edge User/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.399241s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.399264s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                        ├─   0.399276s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.399341s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                        ├─   0.399351s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                        ├─   0.399361s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.399409s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                                ├─   0.399457s   0ms DEBUG checking edge User/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                                  ├─   0.399509s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.399556s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                                ├─   0.399571s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                                ├─   0.399639s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                                ├─   0.399651s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "b"})
                                ├─   0.399661s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                                ├─   0.399669s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "a", "b"})
                                ├─   0.399678s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                                ├─   0.399687s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "b"})
                                ├─   0.399697s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.399706s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.399731s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                            ┌─┘
                            ├─   0.399753s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                          ┌─┘
                          ├─   0.399772s   0ms DEBUG Paths for id
                          ├─   0.399784s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
                          ├─   0.399792s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.399806s   0ms DEBUG path User/c -(id)- ID/c is valid
                          ├─   0.399814s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                        ┌─┘
                        ├─   0.399832s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                          └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                            ├─   0.399865s   0ms DEBUG Building root query tree node: User/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.399883s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.399912s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b", current_cost=3005}
                          ├─   0.399971s   0ms DEBUG checking edge User/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b", edge="id"}
                            ├─   0.399996s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.400017s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                          ├─   0.400027s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.400047s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
                        ├─   0.400057s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                        ├─   0.400065s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                        ├─   0.400075s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.400083s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.400103s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.400133s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.400151s   1ms DEBUG Paths for id
                  ├─   0.400161s   1ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
                  ├─   0.400171s   1ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b -(id)- ID/b is valid
                  ├─   0.400179s   1ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.400190s   1ms DEBUG path User/c -(id)- ID/c is valid
                  ├─   0.400197s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                ┌─┘
                ├─   0.400213s   2ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                  └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                    ├─   0.400245s   0ms DEBUG Building root query tree node: User/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.400262s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.400287s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a", current_cost=3005}
                  ├─   0.400359s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.400381s   2ms DEBUG No direct paths found
                ├─   0.400393s   2ms DEBUG going deeper
                ├─   0.400404s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                ├─   0.400418s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                ├─   0.400426s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                ├─   0.400434s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.400457s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                ├─   0.400467s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                ├─   0.400479s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.400486s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(14)" }])
              ┌─┘
              ├─   0.400512s   2ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
            ┌─┘
            ├─   0.400529s   2ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.400544s   2ms DEBUG Paths for name
          ├─   0.400555s   2ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b -(name)- String/b is valid
          ├─   0.400562s   2ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.400574s   2ms DEBUG path User/c -(🔑🧩{id})- User/b -(name)- String/b is valid
          ├─   0.400580s   2ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(25) --> EdgeIndex(14)" }]))
        ┌─┘
        ├─   0.400599s   2ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(cName🧩{name})- String/c
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(25) --> EdgeIndex(14)" }, root_node="User/c"}
          └─┐create_root_for_path_sequences{root_node="User/c", segments_count=2}
            ├─   0.400628s   0ms DEBUG Building root query tree node: User/c
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.400643s   0ms DEBUG Processing edge: User/c -(🔑🧩{id})- User/b
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.400658s   0ms DEBUG Processing edge: User/b -(name)- String/b
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.400740s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.400775s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.400810s   3ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(17)" }])
      ┌─┘
      ├─   0.400864s   4ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/c
      ├─   0.400876s   4ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
        ├─   0.400908s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.400942s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.400961s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.400978s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
              ├─   0.400987s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.401019s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.401057s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.401103s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.401127s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.401149s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.401159s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.401199s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.401208s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.401217s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.401224s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.401232s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.401249s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.401257s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.401265s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.401282s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.401300s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.401317s   0ms DEBUG Paths for id
                ├─   0.401326s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.401333s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.401345s   0ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.401352s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.401370s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.401398s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.401414s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.401438s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.401507s   0ms DEBUG checking edge User/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.401553s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.401581s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                ├─   0.401593s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.401611s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/c
              ├─   0.401640s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.401650s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.401658s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.401664s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.401673s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.401680s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.401703s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.401721s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.401756s   0ms DEBUG Paths for id
        ├─   0.401769s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
        ├─   0.401778s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
        ├─   0.401795s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.401824s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.401833s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.401853s   5ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.401880s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.401895s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.401916s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.401980s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.401999s   5ms DEBUG No direct paths found
      ├─   0.402008s   5ms DEBUG going deeper
      ├─   0.402018s   5ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.402024s   5ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.402031s   5ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
      ├─   0.402038s   5ms DEBUG Ignoring. Already visited similar edge
      ├─   0.402044s   5ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.402050s   5ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.402057s   5ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.402062s   5ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.402072s   5ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.402078s   5ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(17)" }])
    ┌─┘
    ├─   0.402096s   5ms DEBUG Indirect paths found: 1
    ├─   0.402105s   5ms DEBUG advanced: root(Query) -(a)- Query/a -(userInA)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="aName", leaf=true}
  ├─   0.402135s   0ms DEBUG Trying to advance to: aName through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(userInA)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
      ├─   0.402162s   0ms DEBUG checking edge User/a -(aName🧩{name})- String/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="aName"}
        ├─   0.402179s   0ms DEBUG checking requirements {name} for edge 'User/a -(aName🧩{name})- String/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.402221s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.402249s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.402268s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.402333s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.402356s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.402398s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.402411s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.402450s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.402459s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.402467s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.402489s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                              ├─   0.402531s   0ms DEBUG checking edge User/a -(id)- ID/a
                              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                                ├─   0.402555s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.402577s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                              ├─   0.402588s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                              ├─   0.402623s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                              ├─   0.402632s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "b", "c"})
                              ├─   0.402641s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                              ├─   0.402650s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "c"})
                              ├─   0.402658s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                              ├─   0.402666s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "c"})
                              ├─   0.402676s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.402685s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.402705s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.402725s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                        ┌─┘
                        ├─   0.402743s   0ms DEBUG Paths for id
                        ├─   0.402773s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                        ├─   0.402785s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.402799s   0ms DEBUG path User/a -(id)- ID/a is valid
                        ├─   0.402816s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                      ┌─┘
                      ├─   0.402839s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                          ├─   0.402885s   0ms DEBUG Building root query tree node: User/a
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.402917s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.402964s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
                        ├─   0.403029s   0ms DEBUG checking edge User/b -(id)- ID/b
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", edge="id"}
                          ├─   0.403053s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.403077s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                        ├─   0.403105s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.403135s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
                      ├─   0.403146s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.403155s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.403181s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.403192s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.403231s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.403257s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.403275s   1ms DEBUG Paths for id
                ├─   0.403287s   1ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.403296s   1ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b -(id)- ID/b is valid
                ├─   0.403322s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.403339s   1ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.403346s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.403368s   1ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.403398s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.403426s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.403451s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.403503s   0ms INFO return=Ok([])
              ┌─┘
              ├─   0.403543s   1ms DEBUG No direct paths found
              ├─   0.403555s   1ms DEBUG going deeper
              ├─   0.403566s   1ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.403591s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.403632s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.403652s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.403672s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.403682s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.403721s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.403747s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                              ├─   0.403788s   0ms DEBUG checking edge User/a -(id)- ID/a
                              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                                ├─   0.403812s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.403834s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                              ├─   0.403844s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                              ├─   0.403881s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                              ├─   0.403890s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "b", "c"})
                              ├─   0.403899s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                              ├─   0.403908s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b", "c"})
                              ├─   0.403916s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                              ├─   0.403925s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b", "c"})
                              ├─   0.403935s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.403943s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.403979s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.404004s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                        ┌─┘
                        ├─   0.404022s   0ms DEBUG Paths for id
                        ├─   0.404035s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                        ├─   0.404043s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.404056s   0ms DEBUG path User/a -(id)- ID/a is valid
                        ├─   0.404064s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                      ┌─┘
                      ├─   0.404083s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                          ├─   0.404116s   0ms DEBUG Building root query tree node: User/a
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.404140s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.404168s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.404244s   0ms DEBUG checking edge User/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.404278s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.404309s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                        ├─   0.404321s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                      ┌─┘
                      ├─   0.404342s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/c
                      ├─   0.404353s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.404361s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.404369s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.404377s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.404387s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.404394s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                    ┌─┘
                    ├─   0.404414s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.404441s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                ┌─┘
                ├─   0.404459s   0ms DEBUG Paths for id
                ├─   0.404468s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.404477s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
                ├─   0.404485s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.404496s   0ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.404503s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.404521s   2ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.404550s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.404585s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.404618s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.404694s   0ms DEBUG checking edge User/b -(name)- String/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", edge="name"}
                  ├─   0.404717s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.404736s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
                ├─   0.404746s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(14)" }])
              ┌─┘
              ├─   0.404764s   2ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
              ├─   0.404774s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.404781s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.404789s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.404795s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
              ├─   0.404802s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              ├─   0.404810s   2ms DEBUG Ignoring. Already visited similar edge
              ├─   0.404817s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              ├─   0.404823s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
              ├─   0.404833s   2ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.404839s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(14)" }])
            ┌─┘
            ├─   0.404857s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.404873s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.404887s   2ms DEBUG Paths for name
        ├─   0.404896s   2ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b -(name)- String/b is valid
        ├─   0.404903s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.404914s   2ms DEBUG path User/a -(🔑🧩{id})- User/b -(name)- String/b is valid
        ├─   0.404920s   2ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(19) --> EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.404936s   2ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(aName🧩{name})- String/a
      └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(19) --> EdgeIndex(14)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=2}
          ├─   0.404963s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=2}
            ├─   0.404977s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=2}
              ├─   0.404991s   0ms DEBUG Processing edge: User/b -(name)- String/b
              └─┐from_path_segment_sequences{current_index=2, total_segments=2}
              ┌─┘
              ├─   0.405013s   0ms DEBUG No subsequent steps (leaf or end of path)
            ┌─┘
            ├─   0.405026s   0ms DEBUG Adding subsequent step as child
          ┌─┘
        ┌─┘
      ┌─┘
      ├─   0.405081s   2ms INFO return=Ok([ { cost: 1004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.405100s   2ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
      ├─   0.405126s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
        ├─   0.405145s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.405178s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.405196s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.405214s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
              ├─   0.405222s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.405252s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              ├─   0.405259s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.405267s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.405285s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.405321s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.405340s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.405359s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.405368s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.405400s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.405408s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.405423s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.405431s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.405458s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.405469s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.405478s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.405485s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.405508s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.405532s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.405549s   0ms DEBUG Paths for id
                ├─   0.405559s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.405566s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.405578s   0ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.405588s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.405604s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.405640s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.405657s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.405681s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.405731s   0ms DEBUG checking edge User/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", edge="id"}
                  ├─   0.405752s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.405770s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                ├─   0.405787s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.405804s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
              ├─   0.405814s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.405821s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.405830s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.405837s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.405855s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.405871s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.405887s   0ms DEBUG Paths for id
        ├─   0.405895s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
        ├─   0.405904s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b -(id)- ID/b is valid
        ├─   0.405911s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.405920s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.405926s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.405941s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.405966s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.405980s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.406001s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
        ├─   0.406065s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.406085s   0ms DEBUG No direct paths found
      ├─   0.406094s   0ms DEBUG going deeper
      ├─   0.406103s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
        ├─   0.406126s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.406168s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.406186s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.406203s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
              ├─   0.406213s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.406265s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.406289s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.406332s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.406352s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.406373s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.406384s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.406417s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.406425s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.406452s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.406463s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.406471s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.406478s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.406488s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.406495s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.406517s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.406537s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.406554s   0ms DEBUG Paths for id
                ├─   0.406564s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.406571s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.406584s   0ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.406591s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.406607s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.406637s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.406655s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.406734s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.406796s   0ms DEBUG checking edge User/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.406817s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.406836s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                ├─   0.406846s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.406865s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/c
              ├─   0.406875s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.406882s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.406890s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.406896s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.406906s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.406912s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.406930s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.406948s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.406964s   0ms DEBUG Paths for id
        ├─   0.406972s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
        ├─   0.407002s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
        ├─   0.407013s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.407024s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.407030s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.407049s   1ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.407076s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.407111s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.407137s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.407186s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.407218s   2ms DEBUG No direct paths found
      ├─   0.407229s   2ms DEBUG going deeper
      ├─   0.407239s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.407245s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.407251s   2ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
      ├─   0.407258s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.407264s   2ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.407270s   2ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.407276s   2ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.407282s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.407306s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
      ├─   0.407315s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.407321s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
      ├─   0.407328s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.407334s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
      ├─   0.407339s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.407347s   2ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.407352s   2ms INFO return=Ok([])
    ┌─┘
    ├─   0.407368s   5ms DEBUG Indirect paths found: 0
    ├─   0.407378s   5ms DEBUG advanced: root(Query) -(a)- Query/a -(userInA)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.407431s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(userInA)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
      ├─   0.407481s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.407497s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
      ├─   0.407516s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
        ├─   0.407552s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.407598s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.407616s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.407636s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
              ├─   0.407646s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.407706s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              ├─   0.407715s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.407723s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.407778s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.407823s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.407860s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.407889s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.407908s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.407946s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.407970s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.407982s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.407990s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.407998s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.408005s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.408014s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.408021s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.408070s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.408095s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.408112s   0ms DEBUG Paths for id
                ├─   0.408123s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.408131s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.408143s   0ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.408151s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.408167s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.408199s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.408215s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.408240s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.408291s   0ms DEBUG checking edge User/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", edge="id"}
                  ├─   0.408339s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.408363s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                ├─   0.408390s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.408418s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
              ├─   0.408429s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.408436s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.408445s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.408468s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.408494s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.408512s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.408529s   1ms DEBUG Paths for id
        ├─   0.408539s   1ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
        ├─   0.408548s   1ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b -(id)- ID/b is valid
        ├─   0.408555s   1ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.408566s   1ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.408572s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.408586s   1ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.408631s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.408652s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.408676s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
        ├─   0.408725s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.408738s   1ms DEBUG No direct paths found
      ├─   0.408746s   1ms DEBUG going deeper
      ├─   0.408757s   1ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
        ├─   0.408776s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.408847s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.408874s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.408894s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
              ├─   0.408904s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.408942s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.408962s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.409000s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.409044s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.409077s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.409088s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.409123s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.409148s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.409160s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.409167s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.409175s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.409196s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.409209s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.409216s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.409238s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.409258s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.409275s   0ms DEBUG Paths for id
                ├─   0.409285s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.409292s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.409305s   0ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.409312s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.409329s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.409359s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.409377s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.409434s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.409513s   0ms DEBUG checking edge User/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.409536s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.409555s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                ├─   0.409566s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.409607s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/c
              ├─   0.409620s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.409627s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.409635s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.409641s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.409651s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.409658s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.409678s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.409704s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.409720s   0ms DEBUG Paths for id
        ├─   0.409729s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
        ├─   0.409738s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
        ├─   0.409745s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.409756s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.409761s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.409776s   2ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.409803s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.409817s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.409839s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.409889s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.409908s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.409924s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.409933s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(14)" }])
      ┌─┘
      ├─   0.409949s   2ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.409957s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.409963s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.409970s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
      ├─   0.409975s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.409982s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
      ├─   0.409989s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.409995s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
      ├─   0.410000s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.410008s   2ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.410014s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.410028s   2ms DEBUG Indirect paths found: 1
    ├─   0.410036s   2ms DEBUG advanced: root(Query) -(a)- Query/a -(userInA)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.410065s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(userInA)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
      ├─   0.410090s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
        ├─   0.410107s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.410122s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
      ├─   0.410129s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.410143s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
      ├─   0.410162s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
        ├─   0.410199s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.410243s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.410262s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.410301s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
              ├─   0.410314s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.410365s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              ├─   0.410376s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.410384s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.410409s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.410469s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.410507s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.410530s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.410541s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.410577s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.410593s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.410601s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.410608s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.410615s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.410623s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.410632s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.410639s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.410657s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.410675s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.410691s   0ms DEBUG Paths for id
                ├─   0.410701s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.410708s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.410720s   0ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.410727s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.410744s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.410772s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.410789s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.410813s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.410882s   0ms DEBUG checking edge User/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", edge="id"}
                  ├─   0.410913s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.410935s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                ├─   0.410946s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.410964s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
              ├─   0.410974s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.410981s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.411008s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.411018s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.411042s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.411059s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.411076s   0ms DEBUG Paths for id
        ├─   0.411086s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
        ├─   0.411095s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b -(id)- ID/b is valid
        ├─   0.411105s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.411115s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.411121s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.411136s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.411164s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.411178s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.411200s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
        ├─   0.411253s   0ms DEBUG checking edge User/c -(id)- ID/c
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
          ├─   0.411271s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.411288s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
        ├─   0.411297s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
      ┌─┘
      ├─   0.411313s   1ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/c
      ├─   0.411321s   1ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
        ├─   0.411339s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.411371s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.411389s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.411406s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
              ├─   0.411414s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.411444s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.411463s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.411499s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.411518s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.411537s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.411547s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.411606s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.411616s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.411625s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.411632s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.411640s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.411647s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.411657s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.411664s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.411683s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.411702s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.411718s   0ms DEBUG Paths for id
                ├─   0.411728s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.411735s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.411748s   0ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.411755s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.411772s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.411800s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.411816s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.411840s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.411910s   0ms DEBUG checking edge User/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.411941s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.411962s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                ├─   0.411975s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.411993s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/c
              ├─   0.412004s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.412011s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.412018s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.412025s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.412034s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.412041s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.412058s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.412075s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.412091s   0ms DEBUG Paths for id
        ├─   0.412099s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
        ├─   0.412108s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
        ├─   0.412115s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.412125s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.412131s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.412145s   1ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.412171s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.412185s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.412207s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.412271s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.412299s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.412318s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.412344s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
      ┌─┘
      ├─   0.412370s   2ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.412380s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.412386s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.412394s   2ms DEBUG Finished finding indirect paths, found total of 2
      ├─   0.412400s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
    ┌─┘
    ├─   0.412417s   2ms DEBUG Indirect paths found: 2
    ├─   0.412426s   2ms DEBUG advanced: root(Query) -(a)- Query/a -(userInA)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(17)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.412474s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.412487s   0ms DEBUG Processing edge: root(Query) -(c)- Query/c
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.412500s   0ms DEBUG Processing edge: Query/c -(userInC)- User/c
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.412537s   0ms DEBUG Processing edge: User/c -(cName🧩{name})- String/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.412560s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.412572s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.412584s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.412624s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.412636s   0ms DEBUG Processing edge: root(Query) -(c)- Query/c
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.412660s   0ms DEBUG Processing edge: Query/c -(userInC)- User/c
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.412678s   0ms DEBUG Processing edge: User/c -(🔑🧩{id})- User/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.412692s   0ms DEBUG Processing edge: User/a -(aName🧩{name})- String/a
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.412715s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.412727s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.412739s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.412750s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(14)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.412789s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.412800s   0ms DEBUG Processing edge: root(Query) -(c)- Query/c
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.412813s   0ms DEBUG Processing edge: Query/c -(userInC)- User/c
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.412826s   0ms DEBUG Processing edge: User/c -(🔑🧩{id})- User/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.412839s   0ms DEBUG Processing edge: User/b -(name)- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.412859s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.412871s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.412883s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.412894s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.412930s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.412942s   0ms DEBUG Processing edge: root(Query) -(c)- Query/c
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.412953s   0ms DEBUG Processing edge: Query/c -(userInC)- User/c
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.412966s   0ms DEBUG Processing edge: User/c -(id)- ID/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.412985s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.412998s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.413008s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(23) --> EdgeIndex(17)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.413044s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.413055s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.413067s   0ms DEBUG Processing edge: Query/b -(userInB)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.413080s   0ms DEBUG Processing edge: User/b -(🔑🧩{id})- User/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.413094s   0ms DEBUG Processing edge: User/c -(cName🧩{name})- String/c
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.413114s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.413125s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.413138s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.413160s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.413215s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.413228s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.413241s   0ms DEBUG Processing edge: Query/b -(userInB)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.413254s   0ms DEBUG Processing edge: User/b -(🔑🧩{id})- User/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.413267s   0ms DEBUG Processing edge: User/a -(aName🧩{name})- String/a
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.413288s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.413300s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.413313s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.413325s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(14)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.413360s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.413371s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.413383s   0ms DEBUG Processing edge: Query/b -(userInB)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.413396s   0ms DEBUG Processing edge: User/b -(name)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.413415s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.413427s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.413438s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.413473s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.413484s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.413496s   0ms DEBUG Processing edge: Query/b -(userInB)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.413509s   0ms DEBUG Processing edge: User/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.413528s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.413540s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.413551s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(17)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.413586s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.413597s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.413609s   0ms DEBUG Processing edge: Query/a -(userInA)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.413622s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.413635s   0ms DEBUG Processing edge: User/c -(cName🧩{name})- String/c
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.413655s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.413667s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.413679s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.413691s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.413725s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.413768s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.413786s   0ms DEBUG Processing edge: Query/a -(userInA)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.413800s   0ms DEBUG Processing edge: User/a -(aName🧩{name})- String/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.413824s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.413836s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.413848s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(14)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.413890s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.413902s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.413915s   0ms DEBUG Processing edge: Query/a -(userInA)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.413928s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.413941s   0ms DEBUG Processing edge: User/b -(name)- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.413961s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.413973s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.413984s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.413998s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.414033s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.414045s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.414058s   0ms DEBUG Processing edge: Query/a -(userInA)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.414070s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.414089s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.414101s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.414111s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=12}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=3}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="c", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="userInC", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.414257s   0ms DEBUG adding output field 'userInC' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=4, parent_fetch_step_index=1}
            └─┐process_requires_field_edge{parent_fetch_step_index=1}
              └─┐find_satisfiable_key{node="User/c"}
                └─┐can_satisfy_edge{path="User/c", edge="id"}
                  ├─   0.414317s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="User/c", current_cost=0}
                        ├─   0.414356s   0ms DEBUG checking edge User/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="User/c", edge="id"}
                          ├─   0.414376s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.414418s   0ms DEBUG Advancing path User/c with edge User/c -(id)- ID/c
                        ├─   0.414433s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(16)" }])
                      ┌─┘
                      ├─   0.414457s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(16)" }], [])))
                    ┌─┘
                    ├─   0.414493s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.414514s   0ms DEBUG Paths for id
                  ├─   0.414524s   0ms DEBUG   Path User/c -(id)- ID/c is valid
                  ├─   0.414532s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.414545s   0ms DEBUG path User/c -(id)- ID/c is valid
                  ├─   0.414552s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                ┌─┘
              ┌─┘
              ├─   0.414579s   0ms DEBUG Key to re-enter: {id}
              ├─   0.414588s   0ms DEBUG Creating a fetch step for children of @requires
              ├─   0.414598s   0ms DEBUG created a new fetch step [2] subgraph(c) type(User) requirement({name}) in children of 1
              ├─   0.414608s   0ms DEBUG Adding {name} to fetch([2]).input
              ├─   0.414617s   0ms DEBUG Adding {id} to fetch([2]).input
              ├─   0.414624s   0ms DEBUG Creating a fetch step for requirement of @requires
              ├─   0.414631s   0ms DEBUG Adding {id} to fetch([3]).input
              └─┐connect{parent=1, child=3}
              ┌─┘
              ├─   0.414663s   0ms DEBUG Processing requirements
              └─┐process_noop_edge{}
                └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                  └─┐process_entity_move_edge{edge="User/c -(🔑🧩{id})- User/b", parent_fetch_step_index=3}
                    ├─   0.414709s   0ms DEBUG created a new fetch step [4] subgraph(b) type(User) requirement() key({id}) in children of 3
                    ├─   0.414739s   0ms DEBUG adding input requirement '{id}' to fetch step [4]
                    ├─   0.414751s   0ms DEBUG adding __typename field to output for type 'User'
                    ├─   0.414761s   0ms DEBUG connecting fetch step to parent [3] -> [4]
                    └─┐connect{parent=3, child=4}
                    ┌─┘
                    └─┐process_requirements_for_fetch_steps{count=1}
                      └─┐process_noop_edge{}
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3, requiring_fetch_step_index=4}
                          └─┐process_plain_field_edge{parent_fetch_step_index=3, requiring_fetch_step_index=4, type_name="User", field="id", leaf=true, list=false, response_path="userInC", fetch_path=""}
                            ├─   0.414859s   0ms DEBUG connecting parent fetch step [3] to requiring fetch step [4]
                            └─┐connect{parent=3, child=4}
                            ┌─┘
                            ├─   0.414896s   0ms DEBUG adding output field 'id' to fetch step [3]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3, requiring_fetch_step_index=4}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐connect{parent=3, child=4}
                      ┌─┘
                    ┌─┘
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_plain_field_edge{parent_fetch_step_index=4, type_name="User", field="name", leaf=true, list=false, response_path="userInC", fetch_path=""}
                        ├─   0.415028s   0ms DEBUG adding output field 'name' to fetch step [4]
                        └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4}
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
              ├─   0.415116s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
              └─┐connect{parent=4, child=2}
              ┌─┘
              ├─   0.415162s   0ms DEBUG Processing children
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
              ┌─┘
            ┌─┘
            └─┐process_entity_move_edge{edge="User/c -(🔑🧩{id})- User/a", parent_fetch_step_index=1}
              ├─   0.415257s   0ms DEBUG created a new fetch step [5] subgraph(a) type(User) requirement() key({id}) in children of 1
              ├─   0.415267s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
              ├─   0.415274s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.415282s   0ms DEBUG connecting fetch step to parent [1] -> [5]
              └─┐connect{parent=1, child=5}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=5}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=5, type_name="User", field="id", leaf=true, list=false, response_path="userInC", fetch_path="userInC"}
                      ├─   0.415344s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [5]
                      └─┐connect{parent=1, child=5}
                      ┌─┘
                      ├─   0.415386s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=5}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=5}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                └─┐process_requires_field_edge{parent_fetch_step_index=5}
                  └─┐find_satisfiable_key{node="User/a"}
                    └─┐can_satisfy_edge{path="User/a", edge="id"}
                      ├─   0.415575s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="User/a", current_cost=0}
                            ├─   0.415618s   0ms DEBUG checking edge User/a -(id)- ID/a
                            └─┐can_satisfy_edge{path="User/a", edge="id"}
                              ├─   0.415642s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.415664s   0ms DEBUG Advancing path User/a with edge User/a -(id)- ID/a
                            ├─   0.415676s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(10)" }])
                          ┌─┘
                          ├─   0.415699s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                        ┌─┘
                        ├─   0.415718s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                      ┌─┘
                      ├─   0.415735s   0ms DEBUG Paths for id
                      ├─   0.415766s   0ms DEBUG   Path User/a -(id)- ID/a is valid
                      ├─   0.415798s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.415816s   0ms DEBUG path User/a -(id)- ID/a is valid
                      ├─   0.415824s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.415870s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.415882s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.415893s   0ms DEBUG created a new fetch step [6] subgraph(a) type(User) requirement({name}) in children of 1
                  ├─   0.415902s   0ms DEBUG Adding {name} to fetch([6]).input
                  ├─   0.415910s   0ms DEBUG Adding {id} to fetch([6]).input
                  ├─   0.415931s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.415941s   0ms DEBUG Adding {id} to fetch([7]).input
                  └─┐connect{parent=1, child=7}
                  ┌─┘
                  ├─   0.415978s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7}
                      └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/b", parent_fetch_step_index=7}
                        ├─   0.416025s   0ms DEBUG created a new fetch step [8] subgraph(b) type(User) requirement() key({id}) in children of 7
                        ├─   0.416049s   0ms DEBUG adding input requirement '{id}' to fetch step [8]
                        ├─   0.416061s   0ms DEBUG adding __typename field to output for type 'User'
                        ├─   0.416070s   0ms DEBUG connecting fetch step to parent [7] -> [8]
                        └─┐connect{parent=7, child=8}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                              └─┐process_plain_field_edge{parent_fetch_step_index=7, requiring_fetch_step_index=8, type_name="User", field="id", leaf=true, list=false, response_path="userInC", fetch_path=""}
                                ├─   0.416151s   0ms DEBUG connecting parent fetch step [7] to requiring fetch step [8]
                                └─┐connect{parent=7, child=8}
                                ┌─┘
                                ├─   0.416182s   0ms DEBUG adding output field 'id' to fetch step [7]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=7, requiring_fetch_step_index=8}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=7, child=8}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=8}
                          └─┐process_plain_field_edge{parent_fetch_step_index=8, type_name="User", field="name", leaf=true, list=false, response_path="userInC", fetch_path=""}
                            ├─   0.416334s   0ms DEBUG adding output field 'name' to fetch step [8]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=8}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.416430s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=8, child=6}
                  ┌─┘
                  ├─   0.416460s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=6}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_entity_move_edge{edge="User/c -(🔑🧩{id})- User/b", parent_fetch_step_index=1}
              ├─   0.416522s   0ms DEBUG created a new fetch step [9] subgraph(b) type(User) requirement() key({id}) in children of 1
              ├─   0.416529s   0ms DEBUG adding input requirement '{id}' to fetch step [9]
              ├─   0.416536s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.416544s   0ms DEBUG connecting fetch step to parent [1] -> [9]
              └─┐connect{parent=1, child=9}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=9}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=9, type_name="User", field="id", leaf=true, list=false, response_path="userInC", fetch_path="userInC"}
                      ├─   0.416603s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [9]
                      └─┐connect{parent=1, child=9}
                      ┌─┘
                      ├─   0.416628s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=9}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=9}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=9}
                └─┐process_plain_field_edge{parent_fetch_step_index=9, type_name="User", field="name", leaf=true, list=false, response_path="userInC", fetch_path=""}
                  ├─   0.416720s   0ms DEBUG adding output field 'name' to fetch step [9]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=9}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="userInC", fetch_path="userInC"}
              ├─   0.416795s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=10}
      ┌─┘
      └─┐connect{parent=0, child=10}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=10}
        └─┐process_plain_field_edge{parent_fetch_step_index=10, type_name="Query", field="userInB", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.416913s   0ms DEBUG adding output field 'userInB' to fetch step [10]
          └─┐process_children_for_fetch_steps{count=4, parent_fetch_step_index=10}
            └─┐process_entity_move_edge{edge="User/b -(🔑🧩{id})- User/c", parent_fetch_step_index=10}
              ├─   0.416943s   0ms DEBUG created a new fetch step [11] subgraph(c) type(User) requirement() key({id}) in children of 10
              ├─   0.416950s   0ms DEBUG adding input requirement '{id}' to fetch step [11]
              ├─   0.416957s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.416964s   0ms DEBUG connecting fetch step to parent [10] -> [11]
              └─┐connect{parent=10, child=11}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=10, requiring_fetch_step_index=11}
                    └─┐process_plain_field_edge{parent_fetch_step_index=10, requiring_fetch_step_index=11, type_name="User", field="id", leaf=true, list=false, response_path="userInB", fetch_path="userInB"}
                      ├─   0.417025s   0ms DEBUG connecting parent fetch step [10] to requiring fetch step [11]
                      └─┐connect{parent=10, child=11}
                      ┌─┘
                      ├─   0.417050s   0ms DEBUG adding output field 'id' to fetch step [10]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=10, requiring_fetch_step_index=11}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=10, child=11}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=11}
                └─┐process_requires_field_edge{parent_fetch_step_index=11}
                  └─┐find_satisfiable_key{node="User/c"}
                    └─┐can_satisfy_edge{path="User/c", edge="id"}
                      ├─   0.417168s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/c'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="User/c", current_cost=0}
                            ├─   0.417209s   0ms DEBUG checking edge User/c -(id)- ID/c
                            └─┐can_satisfy_edge{path="User/c", edge="id"}
                              ├─   0.417233s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.417254s   0ms DEBUG Advancing path User/c with edge User/c -(id)- ID/c
                            ├─   0.417266s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(16)" }])
                          ┌─┘
                          ├─   0.417289s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(16)" }], [])))
                        ┌─┘
                        ├─   0.417308s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(16)" }], [])))
                      ┌─┘
                      ├─   0.417425s   0ms DEBUG Paths for id
                      ├─   0.417456s   0ms DEBUG   Path User/c -(id)- ID/c is valid
                      ├─   0.417466s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.417484s   0ms DEBUG path User/c -(id)- ID/c is valid
                      ├─   0.417493s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.417554s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.417571s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.417581s   0ms DEBUG created a new fetch step [12] subgraph(c) type(User) requirement({name}) in children of 10
                  ├─   0.417590s   0ms DEBUG Adding {name} to fetch([12]).input
                  ├─   0.417598s   0ms DEBUG Adding {id} to fetch([12]).input
                  ├─   0.417608s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.417634s   0ms DEBUG Adding {id} to fetch([13]).input
                  └─┐connect{parent=10, child=13}
                  ┌─┘
                  ├─   0.417689s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=13}
                      └─┐process_entity_move_edge{edge="User/c -(🔑🧩{id})- User/b", parent_fetch_step_index=13}
                        ├─   0.417733s   0ms DEBUG created a new fetch step [14] subgraph(b) type(User) requirement() key({id}) in children of 13
                        ├─   0.417741s   0ms DEBUG adding input requirement '{id}' to fetch step [14]
                        ├─   0.417750s   0ms DEBUG adding __typename field to output for type 'User'
                        ├─   0.417758s   0ms DEBUG connecting fetch step to parent [13] -> [14]
                        └─┐connect{parent=13, child=14}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=13, requiring_fetch_step_index=14}
                              └─┐process_plain_field_edge{parent_fetch_step_index=13, requiring_fetch_step_index=14, type_name="User", field="id", leaf=true, list=false, response_path="userInB", fetch_path=""}
                                ├─   0.417838s   0ms DEBUG connecting parent fetch step [13] to requiring fetch step [14]
                                └─┐connect{parent=13, child=14}
                                ┌─┘
                                ├─   0.417868s   0ms DEBUG adding output field 'id' to fetch step [13]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=13, requiring_fetch_step_index=14}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=13, child=14}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=14}
                          └─┐process_plain_field_edge{parent_fetch_step_index=14, type_name="User", field="name", leaf=true, list=false, response_path="userInB", fetch_path=""}
                            ├─   0.417979s   0ms DEBUG adding output field 'name' to fetch step [14]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=14}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.418050s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=14, child=12}
                  ┌─┘
                  ├─   0.418096s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=12}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_entity_move_edge{edge="User/b -(🔑🧩{id})- User/a", parent_fetch_step_index=10}
              ├─   0.418163s   0ms DEBUG created a new fetch step [15] subgraph(a) type(User) requirement() key({id}) in children of 10
              ├─   0.418170s   0ms DEBUG adding input requirement '{id}' to fetch step [15]
              ├─   0.418178s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.418185s   0ms DEBUG connecting fetch step to parent [10] -> [15]
              └─┐connect{parent=10, child=15}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=10, requiring_fetch_step_index=15}
                    └─┐process_plain_field_edge{parent_fetch_step_index=10, requiring_fetch_step_index=15, type_name="User", field="id", leaf=true, list=false, response_path="userInB", fetch_path="userInB"}
                      ├─   0.418246s   0ms DEBUG connecting parent fetch step [10] to requiring fetch step [15]
                      └─┐connect{parent=10, child=15}
                      ┌─┘
                      ├─   0.418271s   0ms DEBUG adding output field 'id' to fetch step [10]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=10, requiring_fetch_step_index=15}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=10, child=15}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=15}
                └─┐process_requires_field_edge{parent_fetch_step_index=15}
                  └─┐find_satisfiable_key{node="User/a"}
                    └─┐can_satisfy_edge{path="User/a", edge="id"}
                      ├─   0.418389s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="User/a", current_cost=0}
                            ├─   0.418456s   0ms DEBUG checking edge User/a -(id)- ID/a
                            └─┐can_satisfy_edge{path="User/a", edge="id"}
                              ├─   0.418478s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.418500s   0ms DEBUG Advancing path User/a with edge User/a -(id)- ID/a
                            ├─   0.418512s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(10)" }])
                          ┌─┘
                          ├─   0.418535s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                        ┌─┘
                        ├─   0.418554s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                      ┌─┘
                      ├─   0.418580s   0ms DEBUG Paths for id
                      ├─   0.418590s   0ms DEBUG   Path User/a -(id)- ID/a is valid
                      ├─   0.418598s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.418611s   0ms DEBUG path User/a -(id)- ID/a is valid
                      ├─   0.418618s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.418644s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.418652s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.418668s   0ms DEBUG created a new fetch step [16] subgraph(a) type(User) requirement({name}) in children of 10
                  ├─   0.418678s   0ms DEBUG Adding {name} to fetch([16]).input
                  ├─   0.418685s   0ms DEBUG Adding {id} to fetch([16]).input
                  ├─   0.418693s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.418700s   0ms DEBUG Adding {id} to fetch([17]).input
                  └─┐connect{parent=10, child=17}
                  ┌─┘
                  ├─   0.418732s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=17}
                      └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/b", parent_fetch_step_index=17}
                        ├─   0.418800s   0ms DEBUG created a new fetch step [18] subgraph(b) type(User) requirement() key({id}) in children of 17
                        ├─   0.418810s   0ms DEBUG adding input requirement '{id}' to fetch step [18]
                        ├─   0.418820s   0ms DEBUG adding __typename field to output for type 'User'
                        ├─   0.418829s   0ms DEBUG connecting fetch step to parent [17] -> [18]
                        └─┐connect{parent=17, child=18}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=17, requiring_fetch_step_index=18}
                              └─┐process_plain_field_edge{parent_fetch_step_index=17, requiring_fetch_step_index=18, type_name="User", field="id", leaf=true, list=false, response_path="userInB", fetch_path=""}
                                ├─   0.418910s   0ms DEBUG connecting parent fetch step [17] to requiring fetch step [18]
                                └─┐connect{parent=17, child=18}
                                ┌─┘
                                ├─   0.418940s   0ms DEBUG adding output field 'id' to fetch step [17]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=17, requiring_fetch_step_index=18}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=17, child=18}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=18}
                          └─┐process_plain_field_edge{parent_fetch_step_index=18, type_name="User", field="name", leaf=true, list=false, response_path="userInB", fetch_path=""}
                            ├─   0.419049s   0ms DEBUG adding output field 'name' to fetch step [18]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=18}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.419119s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=18, child=16}
                  ┌─┘
                  ├─   0.419142s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=16}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=10, type_name="User", field="name", leaf=true, list=false, response_path="userInB", fetch_path="userInB"}
              ├─   0.419197s   0ms DEBUG adding output field 'name' to fetch step [10]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=10}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=10, type_name="User", field="id", leaf=true, list=false, response_path="userInB", fetch_path="userInB"}
              ├─   0.419238s   0ms DEBUG adding output field 'id' to fetch step [10]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=10}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=19}
      ┌─┘
      └─┐connect{parent=0, child=19}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=19}
        └─┐process_plain_field_edge{parent_fetch_step_index=19, type_name="Query", field="userInA", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.419343s   0ms DEBUG adding output field 'userInA' to fetch step [19]
          └─┐process_children_for_fetch_steps{count=4, parent_fetch_step_index=19}
            └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/c", parent_fetch_step_index=19}
              ├─   0.419371s   0ms DEBUG created a new fetch step [20] subgraph(c) type(User) requirement() key({id}) in children of 19
              ├─   0.419378s   0ms DEBUG adding input requirement '{id}' to fetch step [20]
              ├─   0.419385s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.419392s   0ms DEBUG connecting fetch step to parent [19] -> [20]
              └─┐connect{parent=19, child=20}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=19, requiring_fetch_step_index=20}
                    └─┐process_plain_field_edge{parent_fetch_step_index=19, requiring_fetch_step_index=20, type_name="User", field="id", leaf=true, list=false, response_path="userInA", fetch_path="userInA"}
                      ├─   0.419450s   0ms DEBUG connecting parent fetch step [19] to requiring fetch step [20]
                      └─┐connect{parent=19, child=20}
                      ┌─┘
                      ├─   0.419475s   0ms DEBUG adding output field 'id' to fetch step [19]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=19, requiring_fetch_step_index=20}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=19, child=20}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=20}
                └─┐process_requires_field_edge{parent_fetch_step_index=20}
                  └─┐find_satisfiable_key{node="User/c"}
                    └─┐can_satisfy_edge{path="User/c", edge="id"}
                      ├─   0.419615s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/c'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="User/c", current_cost=0}
                            ├─   0.419657s   0ms DEBUG checking edge User/c -(id)- ID/c
                            └─┐can_satisfy_edge{path="User/c", edge="id"}
                              ├─   0.419679s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.419699s   0ms DEBUG Advancing path User/c with edge User/c -(id)- ID/c
                            ├─   0.419711s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(16)" }])
                          ┌─┘
                          ├─   0.419738s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(16)" }], [])))
                        ┌─┘
                        ├─   0.419757s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(16)" }], [])))
                      ┌─┘
                      ├─   0.419774s   0ms DEBUG Paths for id
                      ├─   0.419804s   0ms DEBUG   Path User/c -(id)- ID/c is valid
                      ├─   0.419815s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.419828s   0ms DEBUG path User/c -(id)- ID/c is valid
                      ├─   0.419836s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.419884s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.419894s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.419904s   0ms DEBUG created a new fetch step [21] subgraph(c) type(User) requirement({name}) in children of 19
                  ├─   0.419920s   0ms DEBUG Adding {name} to fetch([21]).input
                  ├─   0.419928s   0ms DEBUG Adding {id} to fetch([21]).input
                  ├─   0.419935s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.419942s   0ms DEBUG Adding {id} to fetch([22]).input
                  └─┐connect{parent=19, child=22}
                  ┌─┘
                  ├─   0.419975s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=22}
                      └─┐process_entity_move_edge{edge="User/c -(🔑🧩{id})- User/b", parent_fetch_step_index=22}
                        ├─   0.420016s   0ms DEBUG created a new fetch step [23] subgraph(b) type(User) requirement() key({id}) in children of 22
                        ├─   0.420028s   0ms DEBUG adding input requirement '{id}' to fetch step [23]
                        ├─   0.420036s   0ms DEBUG adding __typename field to output for type 'User'
                        ├─   0.420044s   0ms DEBUG connecting fetch step to parent [22] -> [23]
                        └─┐connect{parent=22, child=23}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=22, requiring_fetch_step_index=23}
                              └─┐process_plain_field_edge{parent_fetch_step_index=22, requiring_fetch_step_index=23, type_name="User", field="id", leaf=true, list=false, response_path="userInA", fetch_path=""}
                                ├─   0.420135s   0ms DEBUG connecting parent fetch step [22] to requiring fetch step [23]
                                └─┐connect{parent=22, child=23}
                                ┌─┘
                                ├─   0.420167s   0ms DEBUG adding output field 'id' to fetch step [22]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=22, requiring_fetch_step_index=23}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=22, child=23}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=23}
                          └─┐process_plain_field_edge{parent_fetch_step_index=23, type_name="User", field="name", leaf=true, list=false, response_path="userInA", fetch_path=""}
                            ├─   0.420282s   0ms DEBUG adding output field 'name' to fetch step [23]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=23}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.420353s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=23, child=21}
                  ┌─┘
                  ├─   0.420377s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=21}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_requires_field_edge{parent_fetch_step_index=19}
              └─┐find_satisfiable_key{node="User/a"}
                └─┐can_satisfy_edge{path="User/a", edge="id"}
                  ├─   0.420454s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="User/a", current_cost=0}
                        ├─   0.420492s   0ms DEBUG checking edge User/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="User/a", edge="id"}
                          ├─   0.420512s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.420531s   0ms DEBUG Advancing path User/a with edge User/a -(id)- ID/a
                        ├─   0.420542s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(10)" }])
                      ┌─┘
                      ├─   0.420564s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                    ┌─┘
                    ├─   0.420618s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.420639s   0ms DEBUG Paths for id
                  ├─   0.420649s   0ms DEBUG   Path User/a -(id)- ID/a is valid
                  ├─   0.420670s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.420688s   0ms DEBUG path User/a -(id)- ID/a is valid
                  ├─   0.420695s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
              ┌─┘
              ├─   0.420739s   0ms DEBUG Key to re-enter: {id}
              ├─   0.420750s   0ms DEBUG Creating a fetch step for children of @requires
              ├─   0.420759s   0ms DEBUG created a new fetch step [24] subgraph(a) type(User) requirement({name}) in children of 19
              ├─   0.420768s   0ms DEBUG Adding {name} to fetch([24]).input
              ├─   0.420775s   0ms DEBUG Adding {id} to fetch([24]).input
              ├─   0.420782s   0ms DEBUG Creating a fetch step for requirement of @requires
              ├─   0.420789s   0ms DEBUG Adding {id} to fetch([25]).input
              └─┐connect{parent=19, child=25}
              ┌─┘
              ├─   0.420821s   0ms DEBUG Processing requirements
              └─┐process_noop_edge{}
                └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=25}
                  └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/b", parent_fetch_step_index=25}
                    ├─   0.420859s   0ms DEBUG created a new fetch step [26] subgraph(b) type(User) requirement() key({id}) in children of 25
                    ├─   0.420868s   0ms DEBUG adding input requirement '{id}' to fetch step [26]
                    ├─   0.420876s   0ms DEBUG adding __typename field to output for type 'User'
                    ├─   0.420884s   0ms DEBUG connecting fetch step to parent [25] -> [26]
                    └─┐connect{parent=25, child=26}
                    ┌─┘
                    └─┐process_requirements_for_fetch_steps{count=1}
                      └─┐process_noop_edge{}
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=25, requiring_fetch_step_index=26}
                          └─┐process_plain_field_edge{parent_fetch_step_index=25, requiring_fetch_step_index=26, type_name="User", field="id", leaf=true, list=false, response_path="userInA", fetch_path=""}
                            ├─   0.420955s   0ms DEBUG connecting parent fetch step [25] to requiring fetch step [26]
                            └─┐connect{parent=25, child=26}
                            ┌─┘
                            ├─   0.420983s   0ms DEBUG adding output field 'id' to fetch step [25]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=25, requiring_fetch_step_index=26}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐connect{parent=25, child=26}
                      ┌─┘
                    ┌─┘
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=26}
                      └─┐process_plain_field_edge{parent_fetch_step_index=26, type_name="User", field="name", leaf=true, list=false, response_path="userInA", fetch_path=""}
                        ├─   0.421084s   0ms DEBUG adding output field 'name' to fetch step [26]
                        └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=26}
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
              ├─   0.421155s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
              └─┐connect{parent=26, child=24}
              ┌─┘
              ├─   0.421177s   0ms DEBUG Processing children
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=24}
              ┌─┘
            ┌─┘
            └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/b", parent_fetch_step_index=19}
              ├─   0.421220s   0ms DEBUG created a new fetch step [27] subgraph(b) type(User) requirement() key({id}) in children of 19
              ├─   0.421227s   0ms DEBUG adding input requirement '{id}' to fetch step [27]
              ├─   0.421234s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.421240s   0ms DEBUG connecting fetch step to parent [19] -> [27]
              └─┐connect{parent=19, child=27}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=19, requiring_fetch_step_index=27}
                    └─┐process_plain_field_edge{parent_fetch_step_index=19, requiring_fetch_step_index=27, type_name="User", field="id", leaf=true, list=false, response_path="userInA", fetch_path="userInA"}
                      ├─   0.421297s   0ms DEBUG connecting parent fetch step [19] to requiring fetch step [27]
                      └─┐connect{parent=19, child=27}
                      ┌─┘
                      ├─   0.421322s   0ms DEBUG adding output field 'id' to fetch step [19]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=19, requiring_fetch_step_index=27}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=19, child=27}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=27}
                └─┐process_plain_field_edge{parent_fetch_step_index=27, type_name="User", field="name", leaf=true, list=false, response_path="userInA", fetch_path=""}
                  ├─   0.421412s   0ms DEBUG adding output field 'name' to fetch step [27]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=27}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=19, type_name="User", field="id", leaf=true, list=false, response_path="userInA", fetch_path="userInA"}
              ├─   0.421469s   0ms DEBUG adding output field 'id' to fetch step [19]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=19}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.421536s   7ms DEBUG Done
├─   0.421545s   7ms DEBUG found roots
├─   0.421550s   7ms DEBUG print graph
├─   0.421555s   7ms DEBUG Nodes:
│ [1] Query/c {} → {userInC{__typename id}} at $.
│ [2] User/c {__typename name id} → {cName} at $.userInC
│ [3] User/c {__typename id} → {__typename id} at $.userInC
│ [4] User/b {__typename id} → {name} at $.userInC
│ [5] User/a {__typename id} → {} at $.userInC
│ [6] User/a {__typename name id} → {aName} at $.userInC
│ [7] User/a {__typename id} → {__typename id} at $.userInC
│ [8] User/b {__typename id} → {name} at $.userInC
│ [9] User/b {__typename id} → {name} at $.userInC
│ [10] Query/b {} → {userInB{__typename id name}} at $.
│ [11] User/c {__typename id} → {} at $.userInB
│ [12] User/c {__typename name id} → {cName} at $.userInB
│ [13] User/c {__typename id} → {__typename id} at $.userInB
│ [14] User/b {__typename id} → {name} at $.userInB
│ [15] User/a {__typename id} → {} at $.userInB
│ [16] User/a {__typename name id} → {aName} at $.userInB
│ [17] User/a {__typename id} → {__typename id} at $.userInB
│ [18] User/b {__typename id} → {name} at $.userInB
│ [19] Query/a {} → {userInA{__typename id}} at $.
│ [20] User/c {__typename id} → {} at $.userInA
│ [21] User/c {__typename name id} → {cName} at $.userInA
│ [22] User/c {__typename id} → {__typename id} at $.userInA
│ [23] User/b {__typename id} → {name} at $.userInA
│ [24] User/a {__typename name id} → {aName} at $.userInA
│ [25] User/a {__typename id} → {__typename id} at $.userInA
│ [26] User/b {__typename id} → {name} at $.userInA
│ [27] User/b {__typename id} → {name} at $.userInA
│ 
│ Tree:
│ [19]
│   [20]
│   [22]
│     [23]
│       [21]
│   [25]
│     [26]
│       [24]
│   [27]
│ [10]
│   [11]
│   [13]
│     [14]
│       [12]
│   [15]
│   [17]
│     [18]
│       [16]
│ [1]
│   [3]
│     [4]
│       [2]
│   [5]
│   [7]
│     [8]
│       [6]
│   [9]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.421668s   0ms DEBUG optimization found: merge parent [19] with a passthrough child [25]
    ├─   0.421694s   0ms DEBUG optimization found: merge parent [19] with a passthrough child [22]
    └─┐perform_passthrough_child_merge{}
      ├─   0.421717s   0ms DEBUG merging fetch steps [19] and [25]
      └─┐connect{parent=19, child=26}
      ┌─┘
    ┌─┘
    └─┐perform_passthrough_child_merge{}
      ├─   0.421780s   0ms DEBUG merging fetch steps [19] and [22]
      └─┐connect{parent=19, child=23}
      ┌─┘
    ┌─┘
    ├─   0.421814s   0ms DEBUG optimization found: merge parent [10] with a passthrough child [17]
    ├─   0.421821s   0ms DEBUG optimization found: merge parent [10] with a passthrough child [13]
    └─┐perform_passthrough_child_merge{}
      ├─   0.421837s   0ms DEBUG merging fetch steps [10] and [17]
      └─┐connect{parent=10, child=18}
      ┌─┘
    ┌─┘
    └─┐perform_passthrough_child_merge{}
      ├─   0.421892s   0ms DEBUG merging fetch steps [10] and [13]
      └─┐connect{parent=10, child=14}
      ┌─┘
    ┌─┘
    ├─   0.421949s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [7]
    ├─   0.421972s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [3]
    └─┐perform_passthrough_child_merge{}
      ├─   0.421990s   0ms DEBUG merging fetch steps [1] and [7]
      └─┐connect{parent=1, child=8}
      ┌─┘
    ┌─┘
    └─┐perform_passthrough_child_merge{}
      ├─   0.422040s   0ms DEBUG merging fetch steps [1] and [3]
      └─┐connect{parent=1, child=4}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.422171s   0ms DEBUG optimization found: merge parent [10] with child [14]
    ├─   0.422188s   0ms DEBUG optimization found: merge parent [10] with child [18]
    └─┐perform_fetch_step_merge{}
      ├─   0.422203s   0ms DEBUG merging fetch steps [10] and [14]
      └─┐connect{parent=10, child=12}
      ┌─┘
    ┌─┘
    └─┐perform_fetch_step_merge{}
      ├─   0.422247s   0ms DEBUG merging fetch steps [10] and [18]
      └─┐connect{parent=10, child=16}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.422336s   0ms DEBUG Found optimization: 23 <- 26
    ├─   0.422346s   0ms DEBUG Found optimization: 26 <- 27
    └─┐perform_fetch_step_merge{}
      ├─   0.422360s   0ms DEBUG merging fetch steps [23] and [26]
      └─┐connect{parent=23, child=24}
      ┌─┘
      └─┐connect{parent=19, child=23}
      ┌─┘
    ┌─┘
    └─┐perform_fetch_step_merge{}
      ├─   0.422433s   0ms DEBUG merging fetch steps [23] and [27]
      └─┐connect{parent=19, child=23}
      ┌─┘
    ┌─┘
    ├─   0.422466s   0ms DEBUG Found optimization: 16 <- 15
    ├─   0.422489s   0ms DEBUG Found optimization: 12 <- 11
    └─┐perform_fetch_step_merge{}
      ├─   0.422509s   0ms DEBUG merging fetch steps [16] and [15]
      └─┐connect{parent=10, child=16}
      ┌─┘
    ┌─┘
    └─┐perform_fetch_step_merge{}
      ├─   0.422567s   0ms DEBUG merging fetch steps [12] and [11]
      └─┐connect{parent=10, child=12}
      ┌─┘
    ┌─┘
    ├─   0.422604s   0ms DEBUG Found optimization: 4 <- 8
    ├─   0.422626s   0ms DEBUG Found optimization: 8 <- 9
    └─┐perform_fetch_step_merge{}
      ├─   0.422645s   0ms DEBUG merging fetch steps [4] and [8]
      └─┐connect{parent=4, child=6}
      ┌─┘
      └─┐connect{parent=1, child=4}
      ┌─┘
    ┌─┘
    └─┐perform_fetch_step_merge{}
      ├─   0.422709s   0ms DEBUG merging fetch steps [4] and [9]
      └─┐connect{parent=1, child=4}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.422880s   0ms DEBUG optimization found: remove 'User/a {__typename id} → {} at $.userInC'
    ├─   0.422895s   0ms DEBUG optimization found: remove 'User/c {__typename id} → {} at $.userInA'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐ParallelNode::execute{data=Null, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[]}
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.423408s   0ms DEBUG starting new connection: http://localhost:4200/
    └─┐FetchNode::execute{data=Null, representations=[]}
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.423699s   0ms DEBUG starting new connection: http://localhost:4200/
    └─┐FetchNode::execute{data=Null, representations=[]}
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.423961s   0ms DEBUG starting new connection: http://localhost:4200/
          ├─   0.424105s   0ms DEBUG connecting to 127.0.0.1:4200
          ├─   0.424229s   0ms DEBUG connecting to 127.0.0.1:4200
          ├─   0.424304s   0ms DEBUG connecting to 127.0.0.1:4200
          ├─   0.424685s   1ms DEBUG connected to 127.0.0.1:4200
          ├─   0.424819s   1ms DEBUG connected to 127.0.0.1:4200
          ├─   0.424997s   1ms DEBUG connected to 127.0.0.1:4200
          ├─   0.430117s   6ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
          ├─   0.431857s   8ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
          ├─   0.434104s  10ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐ParallelNode::execute{data=Object {"userInA": Object {"__typename": String("User"), "id": String("u1")}, "userInB": Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}, "userInC": Object {"__typename": String("User"), "id": String("u3")}}, representations=[]}
    └─┐FlattenNode::execute{data=Object {"userInA": Object {"__typename": String("User"), "id": String("u1")}, "userInB": Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}, "userInC": Object {"__typename": String("User"), "id": String("u3")}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1")}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
            └─┐project_requires{requires_selections=[], entity=String("User")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u1")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="b"}
          └─┐execute{subgraph_name="b"}
            ├─   0.434565s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
    └─┐FlattenNode::execute{data=Object {"userInA": Object {"__typename": String("User"), "id": String("u1")}, "userInB": Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}, "userInC": Object {"__typename": String("User"), "id": String("u3")}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}}
            └─┐project_requires{requires_selections=[], entity=String("User")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u2-name")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u2")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="a"}
          └─┐execute{subgraph_name="a"}
            ├─   0.434954s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
    └─┐FlattenNode::execute{data=Object {"userInA": Object {"__typename": String("User"), "id": String("u1")}, "userInB": Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}, "userInC": Object {"__typename": String("User"), "id": String("u3")}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}}
            └─┐project_requires{requires_selections=[], entity=String("User")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u2-name")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u2")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="c"}
          └─┐execute{subgraph_name="c"}
            ├─   0.435244s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
    └─┐FlattenNode::execute{data=Object {"userInA": Object {"__typename": String("User"), "id": String("u1")}, "userInB": Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}, "userInC": Object {"__typename": String("User"), "id": String("u3")}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u3")}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u3")}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u3")}}
            └─┐project_requires{requires_selections=[], entity=String("User")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u3")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="b"}
          └─┐execute{subgraph_name="b"}
            ├─   0.435540s   0ms DEBUG starting new connection: http://localhost:4200/
            ├─   0.435755s   0ms DEBUG connecting to 127.0.0.1:4200
            ├─   0.436053s   0ms DEBUG connected to 127.0.0.1:4200
            ├─   0.437130s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
            ├─   0.437921s   3ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
            ├─   0.438947s   3ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
            ├─   0.439584s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐ParallelNode::execute{data=Object {"userInA": Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}, "userInB": Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name"), "aName": String("a__u2-name"), "cName": String("c__u2-name")}, "userInC": Object {"__typename": String("User"), "id": String("u3"), "name": String("u3-name")}}, representations=[]}
    └─┐FlattenNode::execute{data=Object {"userInA": Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}, "userInB": Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name"), "aName": String("a__u2-name"), "cName": String("c__u2-name")}, "userInC": Object {"__typename": String("User"), "id": String("u3"), "name": String("u3-name")}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}}
            └─┐project_requires{requires_selections=[], entity=String("User")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u1-name")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u1")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="a"}
          └─┐execute{subgraph_name="a"}
            ├─   0.440096s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
    └─┐FlattenNode::execute{data=Object {"userInA": Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}, "userInB": Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name"), "aName": String("a__u2-name"), "cName": String("c__u2-name")}, "userInC": Object {"__typename": String("User"), "id": String("u3"), "name": String("u3-name")}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}}
            └─┐project_requires{requires_selections=[], entity=String("User")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u1-name")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u1")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="c"}
          └─┐execute{subgraph_name="c"}
            ├─   0.440400s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
    └─┐FlattenNode::execute{data=Object {"userInA": Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}, "userInB": Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name"), "aName": String("a__u2-name"), "cName": String("c__u2-name")}, "userInC": Object {"__typename": String("User"), "id": String("u3"), "name": String("u3-name")}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u3"), "name": String("u3-name")}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u3"), "name": String("u3-name")}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u3"), "name": String("u3-name")}}
            └─┐project_requires{requires_selections=[], entity=String("User")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u3-name")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u3")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="a"}
          └─┐execute{subgraph_name="a"}
            ├─   0.440668s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
    └─┐FlattenNode::execute{data=Object {"userInA": Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}, "userInB": Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name"), "aName": String("a__u2-name"), "cName": String("c__u2-name")}, "userInC": Object {"__typename": String("User"), "id": String("u3"), "name": String("u3-name")}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u3"), "name": String("u3-name")}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u3"), "name": String("u3-name")}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u3"), "name": String("u3-name")}}
            └─┐project_requires{requires_selections=[], entity=String("User")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u3-name")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("u3")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="c"}
          └─┐execute{subgraph_name="c"}
            ├─   0.440987s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
            ├─   0.442101s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
            ├─   0.442679s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
            ├─   0.443298s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
            ├─   0.443889s   3ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.444327s DEBUG execution result: ExecutionResult { data: Some(Object {"userInA": Object {"id": String("u1"), "name": String("u1-name"), "aName": String("a__u1-name"), "cName": String("c__u1-name")}, "userInB": Object {"id": String("u2"), "name": String("u2-name"), "aName": String("a__u2-name"), "cName": String("c__u2-name")}, "userInC": Object {"id": String("u3"), "name": String("u3-name"), "aName": String("a__u3-name"), "cName": String("c__u3-name")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Parallel"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{userInA{__typename id}}")}, Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{userInB{__typename id name}}")}, Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("{userInC{__typename id}}")}]}, Object {"kind": String("Parallel"), "nodes": Array [Object {"kind": String("Flatten"), "path": Array [String("userInA")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("userInB")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{aName}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("name")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("userInB")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{cName}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("name")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("userInC")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}, Object {"kind": String("Parallel"), "nodes": Array [Object {"kind": String("Flatten"), "path": Array [String("userInA")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{aName}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("name")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("userInA")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{cName}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("name")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("userInC")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{aName}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("name")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("userInC")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{cName}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("name")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}]}}}) }
   0.451935s DEBUG original document: query {
  userInC {
    cName
  }
}

   0.452045s DEBUG normalized document: query{userInC{cName}}

   0.452058s DEBUG executable operation: query{userInC{cName}}
┐walk_operation{}
├─   0.452395s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="userInC", leaf=false}
  ├─   0.452455s   0ms DEBUG Trying to advance to: userInC{cName} through 3 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInC", selections: SelectionSet { items: [SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.452529s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.452553s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInC", selections: SelectionSet { items: [SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.452581s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.452587s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.452599s   0ms DEBUG Indirect paths found: 0
    ├─   0.452606s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInC", selections: SelectionSet { items: [SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.452635s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.452646s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInC", selections: SelectionSet { items: [SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.452662s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.452667s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.452678s   0ms DEBUG Indirect paths found: 0
    ├─   0.452685s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  └─┐explore_path{path="root(Query) -(c)- Query/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInC", selections: SelectionSet { items: [SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.452713s   0ms DEBUG checking edge Query/c -(userInC)- User/c
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c", edge="userInC"}
        ├─   0.452731s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.452745s   0ms DEBUG Advancing path root(Query) -(c)- Query/c with edge Query/c -(userInC)- User/c
      ├─   0.452755s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(2) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.452770s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInC", selections: SelectionSet { items: [SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.452794s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.452799s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.452811s   0ms DEBUG Indirect paths found: 0
    ├─   0.452817s   0ms DEBUG advanced: root(Query) -(c)- Query/c
  ┌─┘
  ├─   0.452831s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="cName", leaf=true}
  ├─   0.452868s   0ms DEBUG Trying to advance to: cName through 1 possible paths
  └─┐explore_path{path="root(Query) -(c)- Query/c -(userInC)- User/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
      ├─   0.452905s   0ms DEBUG checking edge User/c -(cName🧩{name})- String/c
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="cName"}
        ├─   0.452923s   0ms DEBUG checking requirements {name} for edge 'User/c -(cName🧩{name})- String/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.452959s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.452991s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.453000s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.453008s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.453031s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.453072s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.453095s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.453116s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.453126s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.453159s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.453183s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.453196s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      ├─   0.453203s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.453212s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.453247s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                              ├─   0.453317s   0ms DEBUG checking edge User/c -(id)- ID/c
                              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                                ├─   0.453373s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.453400s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                              ├─   0.453413s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                              ├─   0.453451s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                              ├─   0.453467s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "b"})
                              ├─   0.453476s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                              ├─   0.453485s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "c", "b"})
                              ├─   0.453493s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                              ├─   0.453501s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "b"})
                              ├─   0.453511s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.453519s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.453540s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                          ┌─┘
                          ├─   0.453561s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                        ┌─┘
                        ├─   0.453579s   0ms DEBUG Paths for id
                        ├─   0.453589s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                        ├─   0.453597s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.453615s   0ms DEBUG path User/c -(id)- ID/c is valid
                        ├─   0.453622s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                      ┌─┘
                      ├─   0.453641s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                          ├─   0.453674s   0ms DEBUG Building root query tree node: User/c
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.453693s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.453743s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                        ├─   0.453805s   0ms DEBUG checking edge User/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                          ├─   0.453829s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.453855s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                        ├─   0.453867s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                      ┌─┘
                      ├─   0.453887s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/a
                      ├─   0.453900s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.453907s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                    ┌─┘
                    ├─   0.453927s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.453945s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.453963s   0ms DEBUG Paths for id
                ├─   0.453972s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.453981s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
                ├─   0.453990s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.454001s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.454008s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.454024s   1ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.454052s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.454068s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.454091s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.454139s   0ms DEBUG checking edge User/b -(name)- String/b
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", edge="name"}
                  ├─   0.454159s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.454177s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
                ├─   0.454186s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(14)" }])
              ┌─┘
              ├─   0.454208s   1ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
              ├─   0.454217s   1ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.454237s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.454273s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.454292s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.454310s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.454319s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.454352s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.454360s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.454368s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.454388s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                              ├─   0.454428s   0ms DEBUG checking edge User/c -(id)- ID/c
                              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                                ├─   0.454451s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.454472s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                              ├─   0.454482s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                              ├─   0.454516s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                              ├─   0.454525s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c", "b"})
                              ├─   0.454534s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                              ├─   0.454542s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "c", "b"})
                              ├─   0.454550s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                              ├─   0.454558s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c", "b"})
                              ├─   0.454568s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.454576s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.454595s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                          ┌─┘
                          ├─   0.454614s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                        ┌─┘
                        ├─   0.454632s   0ms DEBUG Paths for id
                        ├─   0.454642s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                        ├─   0.454650s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.454682s   0ms DEBUG path User/c -(id)- ID/c is valid
                        ├─   0.454693s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                      ┌─┘
                      ├─   0.454717s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                          ├─   0.454765s   0ms DEBUG Building root query tree node: User/c
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.454787s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.454815s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
                        ├─   0.454873s   0ms DEBUG checking edge User/b -(id)- ID/b
                        └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", edge="id"}
                          ├─   0.454896s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.454916s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                        ├─   0.454927s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.454947s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
                      ├─   0.454959s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      ├─   0.454967s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.454977s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.454985s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.455022s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.455060s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.455082s   0ms DEBUG Paths for id
                ├─   0.455093s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.455103s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b -(id)- ID/b is valid
                ├─   0.455111s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.455123s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.455130s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.455146s   2ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.455176s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.455193s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.455217s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.455266s   0ms INFO return=Ok([])
              ┌─┘
              ├─   0.455281s   2ms DEBUG No direct paths found
              ├─   0.455291s   2ms DEBUG going deeper
              ├─   0.455300s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              ├─   0.455307s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
              ├─   0.455315s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.455323s   2ms DEBUG Ignoring. Already visited similar edge
              ├─   0.455330s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.455336s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
              ├─   0.455346s   2ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.455353s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(14)" }])
            ┌─┘
            ├─   0.455372s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.455387s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.455409s   2ms DEBUG Paths for name
        ├─   0.455419s   2ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b -(name)- String/b is valid
        ├─   0.455426s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.455441s   2ms DEBUG path User/c -(🔑🧩{id})- User/b -(name)- String/b is valid
        ├─   0.455447s   2ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(25) --> EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.455482s   2ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(cName🧩{name})- String/c
      └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(25) --> EdgeIndex(14)" }, root_node="User/c"}
        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=2}
          ├─   0.455541s   0ms DEBUG Building root query tree node: User/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=2}
            ├─   0.455558s   0ms DEBUG Processing edge: User/c -(🔑🧩{id})- User/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=2}
              ├─   0.455573s   0ms DEBUG Processing edge: User/b -(name)- String/b
              └─┐from_path_segment_sequences{current_index=2, total_segments=2}
              ┌─┘
              ├─   0.455596s   0ms DEBUG No subsequent steps (leaf or end of path)
            ┌─┘
            ├─   0.455609s   0ms DEBUG Adding subsequent step as child
          ┌─┘
        ┌─┘
      ┌─┘
      ├─   0.455639s   2ms INFO return=Ok([ { cost: 1004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(17)" }])
    ┌─┘
    ├─   0.455672s   2ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
      ├─   0.455713s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
      ├─   0.455722s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.455728s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
        ├─   0.455751s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.455795s   0ms DEBUG checking edge User/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.455812s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.455849s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
              ├─   0.455863s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.455900s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.455907s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.455914s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              ├─   0.455928s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.455935s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.455969s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.456015s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.456035s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.456057s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.456067s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.456109s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.456117s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.456125s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      ├─   0.456132s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.456140s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      ├─   0.456147s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.456156s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.456163s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.456181s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.456199s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                ┌─┘
                ├─   0.456216s   0ms DEBUG Paths for id
                ├─   0.456225s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.456232s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.456244s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.456250s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.456266s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.456293s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.456309s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.456333s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
                ├─   0.456398s   0ms DEBUG checking edge User/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", edge="id"}
                  ├─   0.456431s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.456459s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                ├─   0.456470s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
              ┌─┘
              ├─   0.456488s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/a
              ├─   0.456514s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.456524s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }])
            ┌─┘
            ├─   0.456559s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
          ┌─┘
          ├─   0.456582s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
        ┌─┘
        ├─   0.456607s   0ms DEBUG Paths for id
        ├─   0.456617s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
        ├─   0.456625s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
        ├─   0.456641s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.456652s   0ms DEBUG path User/c -(id)- ID/c is valid
        ├─   0.456658s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
      ┌─┘
      ├─   0.456672s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
          ├─   0.456698s   0ms DEBUG Building root query tree node: User/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.456713s   0ms DEBUG Processing edge: User/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.456733s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.456792s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.456811s   1ms DEBUG No direct paths found
      ├─   0.456820s   1ms DEBUG going deeper
      ├─   0.456829s   1ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
        ├─   0.456856s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.456904s   0ms DEBUG checking edge User/c -(id)- ID/c
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.456930s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.456949s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
              ├─   0.456959s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
              ├─   0.457013s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.457022s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.457028s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                ├─   0.457047s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.457084s   0ms DEBUG checking edge User/c -(id)- ID/c
                      └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c", edge="id"}
                        ├─   0.457103s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.457122s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c with edge User/c -(id)- ID/c
                      ├─   0.457133s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c", current_cost=1001}
                      ├─   0.457191s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                      ├─   0.457201s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.457209s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                      ├─   0.457216s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.457224s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                      ├─   0.457231s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.457241s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.457248s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.457266s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.457284s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" }], [])))
                ┌─┘
                ├─   0.457305s   0ms DEBUG Paths for id
                ├─   0.457314s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
                ├─   0.457321s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.457333s   0ms DEBUG path User/c -(id)- ID/c is valid
                ├─   0.457340s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
              ┌─┘
              ├─   0.457356s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                  ├─   0.457391s   0ms DEBUG Building root query tree node: User/c
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.457407s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.457431s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.457506s   0ms DEBUG checking edge User/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b", edge="id"}
                  ├─   0.457529s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.457547s   0ms DEBUG Advancing path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                ├─   0.457557s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.457577s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
              ├─   0.457587s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              ├─   0.457594s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.457617s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.457627s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.457651s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.457667s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.457710s   0ms DEBUG Paths for id
        ├─   0.457723s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(id)- ID/c is valid
        ├─   0.457732s   0ms DEBUG   Path root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/b -(id)- ID/b is valid
        ├─   0.457739s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.457759s   0ms DEBUG path User/c -(id)- ID/c is valid
        ├─   0.457765s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
      ┌─┘
      ├─   0.457780s   2ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
        └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
          ├─   0.457807s   0ms DEBUG Building root query tree node: User/c
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.457838s   0ms DEBUG Processing edge: User/c -(id)- ID/c
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.457870s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c -(userInC)- User/c -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.457930s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.457949s   2ms DEBUG No direct paths found
      ├─   0.457958s   2ms DEBUG going deeper
      ├─   0.457975s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
      ├─   0.457981s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.457987s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      ├─   0.457993s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.457999s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.458005s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.458013s   2ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
      ├─   0.458026s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.458032s   2ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.458037s   2ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.458043s   2ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.458049s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.458056s   2ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.458062s   2ms INFO return=Ok([])
    ┌─┘
    ├─   0.458074s   5ms DEBUG Indirect paths found: 0
    ├─   0.458085s   5ms DEBUG advanced: root(Query) -(c)- Query/c -(userInC)- User/c
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1004, egdes: "EdgeIndex(2) --> EdgeIndex(8) --> EdgeIndex(17)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.458138s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.458151s   0ms DEBUG Processing edge: root(Query) -(c)- Query/c
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.458163s   0ms DEBUG Processing edge: Query/c -(userInC)- User/c
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.458175s   0ms DEBUG Processing edge: User/c -(cName🧩{name})- String/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.458194s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.458206s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.458216s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="c", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="userInC", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.458342s   0ms DEBUG adding output field 'userInC' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_requires_field_edge{parent_fetch_step_index=1}
              └─┐find_satisfiable_key{node="User/c"}
                └─┐can_satisfy_edge{path="User/c", edge="id"}
                  ├─   0.458412s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="User/c", current_cost=0}
                        ├─   0.458457s   0ms DEBUG checking edge User/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="User/c", edge="id"}
                          ├─   0.458476s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.458497s   0ms DEBUG Advancing path User/c with edge User/c -(id)- ID/c
                        ├─   0.458508s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(16)" }])
                      ┌─┘
                      ├─   0.458529s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(16)" }], [])))
                    ┌─┘
                    ├─   0.458546s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.458562s   0ms DEBUG Paths for id
                  ├─   0.458575s   0ms DEBUG   Path User/c -(id)- ID/c is valid
                  ├─   0.458582s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.458594s   0ms DEBUG path User/c -(id)- ID/c is valid
                  ├─   0.458601s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                ┌─┘
              ┌─┘
              ├─   0.458625s   0ms DEBUG Key to re-enter: {id}
              ├─   0.458632s   0ms DEBUG Creating a fetch step for children of @requires
              ├─   0.458641s   0ms DEBUG created a new fetch step [2] subgraph(c) type(User) requirement({name}) in children of 1
              ├─   0.458659s   0ms DEBUG Adding {name} to fetch([2]).input
              ├─   0.458670s   0ms DEBUG Adding {id} to fetch([2]).input
              ├─   0.458677s   0ms DEBUG Creating a fetch step for requirement of @requires
              ├─   0.458684s   0ms DEBUG Adding {id} to fetch([3]).input
              └─┐connect{parent=1, child=3}
              ┌─┘
              ├─   0.458712s   0ms DEBUG Processing requirements
              └─┐process_noop_edge{}
                └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                  └─┐process_entity_move_edge{edge="User/c -(🔑🧩{id})- User/b", parent_fetch_step_index=3}
                    ├─   0.458775s   0ms DEBUG created a new fetch step [4] subgraph(b) type(User) requirement() key({id}) in children of 3
                    ├─   0.458785s   0ms DEBUG adding input requirement '{id}' to fetch step [4]
                    ├─   0.458794s   0ms DEBUG adding __typename field to output for type 'User'
                    ├─   0.458802s   0ms DEBUG connecting fetch step to parent [3] -> [4]
                    └─┐connect{parent=3, child=4}
                    ┌─┘
                    └─┐process_requirements_for_fetch_steps{count=1}
                      └─┐process_noop_edge{}
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3, requiring_fetch_step_index=4}
                          └─┐process_plain_field_edge{parent_fetch_step_index=3, requiring_fetch_step_index=4, type_name="User", field="id", leaf=true, list=false, response_path="userInC", fetch_path=""}
                            ├─   0.458893s   0ms DEBUG connecting parent fetch step [3] to requiring fetch step [4]
                            └─┐connect{parent=3, child=4}
                            ┌─┘
                            ├─   0.458924s   0ms DEBUG adding output field 'id' to fetch step [3]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3, requiring_fetch_step_index=4}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐connect{parent=3, child=4}
                      ┌─┘
                    ┌─┘
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_plain_field_edge{parent_fetch_step_index=4, type_name="User", field="name", leaf=true, list=false, response_path="userInC", fetch_path=""}
                        ├─   0.459059s   0ms DEBUG adding output field 'name' to fetch step [4]
                        └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4}
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
              ├─   0.459128s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
              └─┐connect{parent=4, child=2}
              ┌─┘
              ├─   0.459151s   0ms DEBUG Processing children
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.459213s   0ms DEBUG Done
├─   0.459220s   0ms DEBUG found roots
├─   0.459224s   0ms DEBUG print graph
├─   0.459229s   0ms DEBUG Nodes:
│ [1] Query/c {} → {userInC{id}} at $.
│ [2] User/c {__typename name id} → {cName} at $.userInC
│ [3] User/c {__typename id} → {__typename id} at $.userInC
│ [4] User/b {__typename id} → {name} at $.userInC
│ 
│ Tree:
│ [1]
│   [3]
│     [4]
│       [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.459268s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [3]
    └─┐perform_passthrough_child_merge{}
      ├─   0.459281s   0ms DEBUG merging fetch steps [1] and [3]
      └─┐connect{parent=1, child=4}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="c"}
      └─┐execute{subgraph_name="c"}
        ├─   0.459795s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.461782s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"userInC": Object {"id": String("u3"), "__typename": String("User")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"id": String("u3"), "__typename": String("User")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"id": String("u3"), "__typename": String("User")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"id": String("u3"), "__typename": String("User")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u3")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.462264s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.463422s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"userInC": Object {"id": String("u3"), "__typename": String("User"), "name": String("u3-name")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"id": String("u3"), "__typename": String("User"), "name": String("u3-name")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"id": String("u3"), "__typename": String("User"), "name": String("u3-name")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"id": String("u3"), "__typename": String("User"), "name": String("u3-name")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u3-name")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u3")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.463859s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.464956s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.465205s DEBUG execution result: ExecutionResult { data: Some(Object {"userInC": Object {"cName": String("c__u3-name")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("{userInC{id __typename}}")}, Object {"kind": String("Flatten"), "path": Array [String("userInC")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("userInC")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{cName}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("name")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.468596s DEBUG original document: query {
  userInA {
    cName
  }
}

   0.468705s DEBUG normalized document: query{userInA{cName}}

   0.468719s DEBUG executable operation: query{userInA{cName}}
┐walk_operation{}
├─   0.469078s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="userInA", leaf=false}
  ├─   0.469140s   0ms DEBUG Trying to advance to: userInA{cName} through 3 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.469207s   0ms DEBUG checking edge Query/a -(userInA)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="userInA"}
        ├─   0.469238s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.469269s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(userInA)- User/a
      ├─   0.469284s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.469335s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.469402s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.469427s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.469446s   0ms DEBUG Indirect paths found: 0
    ├─   0.469456s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.469490s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.469502s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.469519s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.469538s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.469556s   0ms DEBUG Indirect paths found: 0
    ├─   0.469565s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  └─┐explore_path{path="root(Query) -(c)- Query/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.469598s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.469610s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "cName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.469627s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.469633s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.469644s   0ms DEBUG Indirect paths found: 0
    ├─   0.469650s   0ms WARN failed to advance: root(Query) -(c)- Query/c
  ┌─┘
  ├─   0.469664s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="cName", leaf=true}
  ├─   0.469706s   0ms DEBUG Trying to advance to: cName through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(userInA)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
      ├─   0.469737s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.469751s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
      ├─   0.469769s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
        ├─   0.469789s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.469831s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.469850s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.469867s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
              ├─   0.469876s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.469907s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              ├─   0.469916s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.469924s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.469943s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.469985s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.470006s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.470024s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.470034s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.470065s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.470096s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.470110s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.470117s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.470125s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.470133s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.470142s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.470149s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.470172s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.470194s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.470211s   0ms DEBUG Paths for id
                ├─   0.470221s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.470228s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.470245s   0ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.470252s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.470269s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.470322s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.470341s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.470383s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.470440s   0ms DEBUG checking edge User/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", edge="id"}
                  ├─   0.470461s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.470479s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                ├─   0.470491s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.470527s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
              ├─   0.470541s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.470548s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.470557s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.470563s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.470583s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.470615s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.470635s   0ms DEBUG Paths for id
        ├─   0.470645s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
        ├─   0.470653s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b -(id)- ID/b is valid
        ├─   0.470668s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.470679s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.470684s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.470715s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.470752s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.470766s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.470787s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
        ├─   0.470833s   0ms DEBUG checking edge User/c -(cName🧩{name})- String/c
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="cName"}
          ├─   0.470867s   0ms DEBUG checking requirements {name} for edge 'User/c -(cName🧩{name})- String/c'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.470911s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.470945s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                ├─   0.470953s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
                ├─   0.470961s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.470982s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.471025s   0ms DEBUG checking edge User/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.471048s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.471069s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                        ├─   0.471080s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.471120s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                        ├─   0.471128s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                        ├─   0.471136s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                        ├─   0.471149s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                        ├─   0.471157s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.471183s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                                ├─   0.471232s   0ms DEBUG checking edge User/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                                  ├─   0.471259s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.471281s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                                ├─   0.471292s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                                ├─   0.471333s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                                ├─   0.471342s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b", "a"})
                                ├─   0.471351s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                                ├─   0.471359s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b", "a"})
                                ├─   0.471368s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                                ├─   0.471376s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "b", "a"})
                                ├─   0.471386s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.471409s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.471437s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                            ┌─┘
                            ├─   0.471474s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                          ┌─┘
                          ├─   0.471496s   0ms DEBUG Paths for id
                          ├─   0.471510s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
                          ├─   0.471518s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.471532s   0ms DEBUG path User/c -(id)- ID/c is valid
                          ├─   0.471539s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                        ┌─┘
                        ├─   0.471563s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                          └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                            ├─   0.471610s   0ms DEBUG Building root query tree node: User/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.471635s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.471677s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a", current_cost=3005}
                          ├─   0.471755s   0ms DEBUG checking edge User/a -(id)- ID/a
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a", edge="id"}
                            ├─   0.471781s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.471802s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
                          ├─   0.471813s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                        ┌─┘
                        ├─   0.471834s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/a
                        ├─   0.471847s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.471854s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(24) --> EdgeIndex(10)" }])
                      ┌─┘
                      ├─   0.471875s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                    ┌─┘
                    ├─   0.471894s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(24) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.471932s   0ms DEBUG Paths for id
                  ├─   0.471947s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
                  ├─   0.471957s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a -(id)- ID/a is valid
                  ├─   0.471966s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.471977s   1ms DEBUG path User/c -(id)- ID/c is valid
                  ├─   0.471985s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                ┌─┘
                ├─   0.472002s   1ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                  └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                    ├─   0.472037s   0ms DEBUG Building root query tree node: User/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.472054s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.472078s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b", current_cost=3005}
                  ├─   0.472131s   0ms DEBUG checking edge User/b -(name)- String/b
                  └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b", edge="name"}
                    ├─   0.472153s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.472195s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
                  ├─   0.472207s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(14)" }])
                ┌─┘
                ├─   0.472226s   1ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
                ├─   0.472237s   1ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.472278s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.472324s   0ms DEBUG checking edge User/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.472347s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.472370s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                        ├─   0.472381s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.472417s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                        ├─   0.472426s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                        ├─   0.472434s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.472457s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/b'
                          └─┐validate_field_requirement{}
                            └─┐validate_field_requirement{}
                              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                                ├─   0.472501s   0ms DEBUG checking edge User/c -(id)- ID/c
                                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                                  ├─   0.472527s   0ms INFO return=Ok(Some([]))
                                ┌─┘
                                ├─   0.472549s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                                ├─   0.472561s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                              ┌─┘
                              └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                                ├─   0.472599s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
                                ├─   0.472610s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "b"})
                                ├─   0.472620s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
                                ├─   0.472628s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "a", "b"})
                                ├─   0.472636s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                                ├─   0.472645s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "b"})
                                ├─   0.472655s   0ms DEBUG Finished finding indirect paths, found total of 0
                                ├─   0.472663s   0ms INFO return=Ok([])
                              ┌─┘
                              ├─   0.472684s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                            ┌─┘
                            ├─   0.472704s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                          ┌─┘
                          ├─   0.472723s   0ms DEBUG Paths for id
                          ├─   0.472734s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
                          ├─   0.472757s   0ms DEBUG Found 1 best paths for this leaf requirement
                          ├─   0.472776s   0ms DEBUG path User/c -(id)- ID/c is valid
                          ├─   0.472784s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                        ┌─┘
                        ├─   0.472808s   0ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/b
                        └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                          └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                            ├─   0.472841s   0ms DEBUG Building root query tree node: User/c
                            └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                              ├─   0.472860s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                              └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                              ┌─┘
                              ├─   0.472889s   0ms DEBUG No subsequent steps (leaf or end of path)
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b", current_cost=3005}
                          ├─   0.472953s   0ms DEBUG checking edge User/b -(id)- ID/b
                          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b", edge="id"}
                            ├─   0.472978s   0ms INFO return=Ok(Some([]))
                          ┌─┘
                          ├─   0.472999s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                          ├─   0.473009s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(13)" }])
                        ┌─┘
                        ├─   0.473050s   0ms DEBUG Found 1 direct paths to User/c -(🔑🧩{id})- User/b
                        ├─   0.473063s   0ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
                        ├─   0.473072s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                        ├─   0.473082s   0ms DEBUG Finished finding indirect paths, found total of 1
                        ├─   0.473090s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.473113s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
                    ┌─┘
                    ├─   0.473133s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" },  { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.473151s   0ms DEBUG Paths for id
                  ├─   0.473162s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
                  ├─   0.473172s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b -(id)- ID/b is valid
                  ├─   0.473180s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.473191s   0ms DEBUG path User/c -(id)- ID/c is valid
                  ├─   0.473198s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                ┌─┘
                ├─   0.473215s   2ms DEBUG Advancing path to User/c -(🔑🧩{id})- User/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(16)" }, root_node="User/c"}
                  └─┐create_root_for_path_sequences{root_node="User/c", segments_count=1}
                    ├─   0.473245s   0ms DEBUG Building root query tree node: User/c
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.473261s   0ms DEBUG Processing edge: User/c -(id)- ID/c
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.473286s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/a", current_cost=3005}
                  ├─   0.473338s   0ms INFO return=Ok([])
                ┌─┘
                ├─   0.473353s   2ms DEBUG No direct paths found
                ├─   0.473364s   2ms DEBUG going deeper
                ├─   0.473373s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                ├─   0.473380s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                ├─   0.473388s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                ├─   0.473396s   2ms DEBUG Ignoring. Already visited similar edge
                ├─   0.473403s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                ├─   0.473410s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                ├─   0.473420s   2ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.473427s   2ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(14)" }])
              ┌─┘
              ├─   0.473446s   2ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
            ┌─┘
            ├─   0.473462s   2ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(25) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.473477s   2ms DEBUG Paths for name
          ├─   0.473487s   2ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(🔑🧩{id})- User/b -(name)- String/b is valid
          ├─   0.473493s   2ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.473504s   2ms DEBUG path User/c -(🔑🧩{id})- User/b -(name)- String/b is valid
          ├─   0.473510s   2ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(25) --> EdgeIndex(14)" }]))
        ┌─┘
        ├─   0.473528s   2ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(cName🧩{name})- String/c
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(25) --> EdgeIndex(14)" }, root_node="User/c"}
          └─┐create_root_for_path_sequences{root_node="User/c", segments_count=2}
            ├─   0.473554s   0ms DEBUG Building root query tree node: User/c
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.473568s   0ms DEBUG Processing edge: User/c -(🔑🧩{id})- User/b
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.473583s   0ms DEBUG Processing edge: User/b -(name)- String/b
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.473605s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.473618s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.473648s   2ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(17)" }])
      ┌─┘
      ├─   0.473664s   3ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/c
      ├─   0.473672s   3ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
        ├─   0.473690s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.473723s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.473740s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.473758s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
              ├─   0.473766s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.473801s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.473819s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.473881s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.473903s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.473925s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.473935s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.473968s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.473990s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.474002s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.474009s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.474017s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.474024s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.474033s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.474041s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.474062s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.474083s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.474099s   0ms DEBUG Paths for id
                ├─   0.474122s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.474132s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.474144s   0ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.474151s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.474172s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.474201s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.474217s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.474241s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.474320s   0ms DEBUG checking edge User/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.474342s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.474360s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                ├─   0.474370s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.474404s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/c
              ├─   0.474417s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.474426s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.474455s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.474465s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.474474s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.474482s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.474507s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.474523s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.474539s   0ms DEBUG Paths for id
        ├─   0.474548s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
        ├─   0.474556s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
        ├─   0.474563s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.474574s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.474580s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.474594s   4ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.474620s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.474634s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.474655s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "cName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.474713s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.474733s   4ms DEBUG No direct paths found
      ├─   0.474741s   4ms DEBUG going deeper
      ├─   0.474751s   4ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.474756s   4ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.474763s   5ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
      ├─   0.474769s   5ms DEBUG Ignoring. Already visited similar edge
      ├─   0.474776s   5ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.474781s   5ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.474788s   5ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.474793s   5ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.474802s   5ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.474808s   5ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(17)" }])
    ┌─┘
    ├─   0.474825s   5ms DEBUG Indirect paths found: 1
    ├─   0.474834s   5ms DEBUG advanced: root(Query) -(a)- Query/a -(userInA)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(17)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.474879s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.474892s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.474904s   0ms DEBUG Processing edge: Query/a -(userInA)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.474917s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.474930s   0ms DEBUG Processing edge: User/c -(cName🧩{name})- String/c
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.474949s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.474961s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.474972s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.474983s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="userInA", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.475096s   0ms DEBUG adding output field 'userInA' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/c", parent_fetch_step_index=1}
              ├─   0.475155s   0ms DEBUG created a new fetch step [2] subgraph(c) type(User) requirement() key({id}) in children of 1
              ├─   0.475172s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.475179s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.475187s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="userInA", fetch_path="userInA"}
                      ├─   0.475268s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.475298s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="User/c"}
                    └─┐can_satisfy_edge{path="User/c", edge="id"}
                      ├─   0.475445s   0ms DEBUG checking requirements {id} for edge 'User/c -(🔑🧩{id})- User/c'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="User/c", current_cost=0}
                            ├─   0.475491s   0ms DEBUG checking edge User/c -(id)- ID/c
                            └─┐can_satisfy_edge{path="User/c", edge="id"}
                              ├─   0.475512s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.475534s   0ms DEBUG Advancing path User/c with edge User/c -(id)- ID/c
                            ├─   0.475545s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(16)" }])
                          ┌─┘
                          ├─   0.475574s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(16)" }], [])))
                        ┌─┘
                        ├─   0.475591s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(16)" }], [])))
                      ┌─┘
                      ├─   0.475608s   0ms DEBUG Paths for id
                      ├─   0.475618s   0ms DEBUG   Path User/c -(id)- ID/c is valid
                      ├─   0.475625s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.475637s   0ms DEBUG path User/c -(id)- ID/c is valid
                      ├─   0.475649s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(16)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.475675s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.475684s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.475695s   0ms DEBUG created a new fetch step [3] subgraph(c) type(User) requirement({name}) in children of 1
                  ├─   0.475704s   0ms DEBUG Adding {name} to fetch([3]).input
                  ├─   0.475712s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.475719s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.475728s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.475759s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="User/c -(🔑🧩{id})- User/b", parent_fetch_step_index=4}
                        ├─   0.475806s   0ms DEBUG created a new fetch step [5] subgraph(b) type(User) requirement() key({id}) in children of 4
                        ├─   0.475814s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                        ├─   0.475822s   0ms DEBUG adding __typename field to output for type 'User'
                        ├─   0.475830s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="User", field="id", leaf=true, list=false, response_path="userInA", fetch_path=""}
                                ├─   0.475899s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.475928s   0ms DEBUG adding output field 'id' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="User", field="name", leaf=true, list=false, response_path="userInA", fetch_path=""}
                            ├─   0.476060s   0ms DEBUG adding output field 'name' to fetch step [5]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.476139s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  ├─   0.476162s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.476240s   1ms DEBUG Done
├─   0.476247s   1ms DEBUG found roots
├─   0.476252s   1ms DEBUG print graph
├─   0.476257s   1ms DEBUG Nodes:
│ [1] Query/a {} → {userInA{__typename id}} at $.
│ [2] User/c {__typename id} → {} at $.userInA
│ [3] User/c {__typename name id} → {cName} at $.userInA
│ [4] User/c {__typename id} → {__typename id} at $.userInA
│ [5] User/b {__typename id} → {name} at $.userInA
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│       [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.476299s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.476328s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
    ├─   0.476424s   0ms DEBUG optimization found: remove 'User/c {__typename id} → {} at $.userInA'
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.476810s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.478595s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"userInA": Object {"__typename": String("User"), "id": String("u1")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.479030s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.480058s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"userInA": Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1-name")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.480407s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.481346s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.481568s DEBUG execution result: ExecutionResult { data: Some(Object {"userInA": Object {"cName": String("c__u1-name")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{userInA{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("userInA")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("userInA")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{cName}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("name")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.484137s DEBUG original document: query {
  userInA {
    aName
  }
}

   0.484222s DEBUG normalized document: query{userInA{aName}}

   0.484233s DEBUG executable operation: query{userInA{aName}}
┐walk_operation{}
├─   0.484565s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="userInA", leaf=false}
  ├─   0.484612s   0ms DEBUG Trying to advance to: userInA{aName} through 3 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.484680s   0ms DEBUG checking edge Query/a -(userInA)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="userInA"}
        ├─   0.484703s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.484725s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(userInA)- User/a
      ├─   0.484750s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.484774s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.484807s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.484819s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.484831s   0ms DEBUG Indirect paths found: 0
    ├─   0.484838s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.484868s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.484879s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.484895s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.484900s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.484911s   0ms DEBUG Indirect paths found: 0
    ├─   0.484917s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  └─┐explore_path{path="root(Query) -(c)- Query/c"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.484945s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.484961s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userInA", selections: SelectionSet { items: [SelectionItem::Field { name: "aName", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(c)- Query/c", current_cost=1000}
      ├─   0.484983s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.484989s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.485001s   0ms DEBUG Indirect paths found: 0
    ├─   0.485007s   0ms WARN failed to advance: root(Query) -(c)- Query/c
  ┌─┘
  ├─   0.485022s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="aName", leaf=true}
  ├─   0.485044s   0ms DEBUG Trying to advance to: aName through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(userInA)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
      ├─   0.485071s   0ms DEBUG checking edge User/a -(aName🧩{name})- String/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="aName"}
        ├─   0.485088s   0ms DEBUG checking requirements {name} for edge 'User/a -(aName🧩{name})- String/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.485128s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.485157s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.485178s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.485218s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.485240s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.485260s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.485269s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.485305s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.485314s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.485324s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.485346s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                              ├─   0.485388s   0ms DEBUG checking edge User/a -(id)- ID/a
                              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                                ├─   0.485431s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.485453s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                              ├─   0.485464s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                              ├─   0.485547s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                              ├─   0.485558s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "a", "c"})
                              ├─   0.485568s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                              ├─   0.485576s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a", "c"})
                              ├─   0.485601s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                              ├─   0.485610s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a", "c"})
                              ├─   0.485637s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.485649s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.485674s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.485698s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                        ┌─┘
                        ├─   0.485717s   0ms DEBUG Paths for id
                        ├─   0.485729s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                        ├─   0.485747s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.485765s   0ms DEBUG path User/a -(id)- ID/a is valid
                        ├─   0.485773s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                      ┌─┘
                      ├─   0.485793s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                          ├─   0.485829s   0ms DEBUG Building root query tree node: User/a
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.485849s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.485879s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
                        ├─   0.485942s   0ms DEBUG checking edge User/b -(id)- ID/b
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", edge="id"}
                          ├─   0.485994s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.486019s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                        ├─   0.486031s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
                      ┌─┘
                      ├─   0.486053s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
                      ├─   0.486066s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.486074s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.486099s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.486111s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
                    ┌─┘
                    ├─   0.486138s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
                  ┌─┘
                  ├─   0.486157s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
                ┌─┘
                ├─   0.486176s   1ms DEBUG Paths for id
                ├─   0.486187s   1ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.486197s   1ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b -(id)- ID/b is valid
                ├─   0.486206s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.486218s   1ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.486226s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.486244s   1ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.486274s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.486291s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.486315s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.486389s   0ms INFO return=Ok([])
              ┌─┘
              ├─   0.486404s   1ms DEBUG No direct paths found
              ├─   0.486416s   1ms DEBUG going deeper
              ├─   0.486425s   1ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.486445s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.486482s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.486518s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.486546s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.486557s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.486609s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.486640s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                        └─┐validate_field_requirement{}
                          └─┐validate_field_requirement{}
                            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                              ├─   0.486706s   0ms DEBUG checking edge User/a -(id)- ID/a
                              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                                ├─   0.486739s   0ms INFO return=Ok(Some([]))
                              ┌─┘
                              ├─   0.486763s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                              ├─   0.486775s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                            ┌─┘
                            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                              ├─   0.486817s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                              ├─   0.486827s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a", "b"})
                              ├─   0.486836s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                              ├─   0.486844s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "a", "b"})
                              ├─   0.486852s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                              ├─   0.486860s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a", "b"})
                              ├─   0.486870s   0ms DEBUG Finished finding indirect paths, found total of 0
                              ├─   0.486878s   0ms INFO return=Ok([])
                            ┌─┘
                            ├─   0.486897s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                          ┌─┘
                          ├─   0.486937s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                        ┌─┘
                        ├─   0.486959s   0ms DEBUG Paths for id
                        ├─   0.486971s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                        ├─   0.486979s   0ms DEBUG Found 1 best paths for this leaf requirement
                        ├─   0.486992s   0ms DEBUG path User/a -(id)- ID/a is valid
                        ├─   0.487001s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                      ┌─┘
                      ├─   0.487021s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
                      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                          ├─   0.487054s   0ms DEBUG Building root query tree node: User/a
                          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                            ├─   0.487075s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                            ┌─┘
                            ├─   0.487102s   0ms DEBUG No subsequent steps (leaf or end of path)
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                        ├─   0.487184s   0ms DEBUG checking edge User/c -(id)- ID/c
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                          ├─   0.487219s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.487239s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                        ├─   0.487250s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                      ┌─┘
                      ├─   0.487290s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/c
                      ├─   0.487304s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.487313s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.487321s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.487328s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.487338s   0ms DEBUG Finished finding indirect paths, found total of 1
                      ├─   0.487346s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
                    ┌─┘
                    ├─   0.487385s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                  ┌─┘
                  ├─   0.487408s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
                ┌─┘
                ├─   0.487426s   0ms DEBUG Paths for id
                ├─   0.487439s   1ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.487448s   1ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
                ├─   0.487457s   1ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.487469s   1ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.487487s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.487513s   2ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.487559s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.487588s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.487620s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.487684s   0ms DEBUG checking edge User/b -(name)- String/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", edge="name"}
                  ├─   0.487704s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.487722s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
                ├─   0.487732s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(14)" }])
              ┌─┘
              ├─   0.487750s   2ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
              ├─   0.487785s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.487793s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.487801s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
              ├─   0.487807s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
              ├─   0.487814s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
              ├─   0.487823s   2ms DEBUG Ignoring. Already visited similar edge
              ├─   0.487830s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
              ├─   0.487836s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
              ├─   0.487847s   2ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.487854s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(14)" }])
            ┌─┘
            ├─   0.487879s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.487894s   2ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.487909s   2ms DEBUG Paths for name
        ├─   0.487919s   2ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b -(name)- String/b is valid
        ├─   0.487925s   2ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.487936s   2ms DEBUG path User/a -(🔑🧩{id})- User/b -(name)- String/b is valid
        ├─   0.487943s   2ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(19) --> EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.488026s   2ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(aName🧩{name})- String/a
      └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(19) --> EdgeIndex(14)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=2}
          ├─   0.488058s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=2}
            ├─   0.488073s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=2}
              ├─   0.488087s   0ms DEBUG Processing edge: User/b -(name)- String/b
              └─┐from_path_segment_sequences{current_index=2, total_segments=2}
              ┌─┘
              ├─   0.488109s   0ms DEBUG No subsequent steps (leaf or end of path)
            ┌─┘
            ├─   0.488122s   0ms DEBUG Adding subsequent step as child
          ┌─┘
        ┌─┘
      ┌─┘
      ├─   0.488152s   3ms INFO return=Ok([ { cost: 1004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.488168s   3ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
      ├─   0.488189s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
        ├─   0.488207s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.488240s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.488258s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.488275s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
              ├─   0.488301s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.488355s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              ├─   0.488363s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.488370s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.488389s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.488449s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.488471s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.488494s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.488504s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.488538s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.488546s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"b", "c"})
                      ├─   0.488554s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.488561s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "c"})
                      ├─   0.488569s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.488590s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.488603s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.488610s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.488632s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.488652s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.488668s   0ms DEBUG Paths for id
                ├─   0.488678s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.488685s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.488697s   0ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.488704s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.488721s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.488750s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.488765s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.488789s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
                ├─   0.488839s   0ms DEBUG checking edge User/b -(id)- ID/b
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", edge="id"}
                  ├─   0.488859s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.488879s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
                ├─   0.488889s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
              ┌─┘
              ├─   0.488906s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
              ├─   0.488932s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.488942s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.488951s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.488959s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }])
            ┌─┘
            ├─   0.488995s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
          ┌─┘
          ├─   0.489017s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(19) --> EdgeIndex(13)" }], [])))
        ┌─┘
        ├─   0.489032s   0ms DEBUG Paths for id
        ├─   0.489043s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
        ├─   0.489063s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b -(id)- ID/b is valid
        ├─   0.489073s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.489084s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.489090s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.489108s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.489141s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.489155s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.489175s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
        ├─   0.489219s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.489232s   1ms DEBUG No direct paths found
      ├─   0.489241s   1ms DEBUG going deeper
      ├─   0.489248s   1ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
        ├─   0.489282s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.489334s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.489359s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.489381s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
              ├─   0.489391s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
              ├─   0.489423s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                ├─   0.489456s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.489501s   0ms DEBUG checking edge User/a -(id)- ID/a
                      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a", edge="id"}
                        ├─   0.489521s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.489542s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a with edge User/a -(id)- ID/a
                      ├─   0.489553s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a", current_cost=1001}
                      ├─   0.489586s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/c
                      ├─   0.489594s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "b"})
                      ├─   0.489602s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
                      ├─   0.489609s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"c", "b"})
                      ├─   0.489616s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
                      ├─   0.489624s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.489632s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.489641s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.489658s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.489694s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" }], [])))
                ┌─┘
                ├─   0.489714s   0ms DEBUG Paths for id
                ├─   0.489725s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
                ├─   0.489732s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.489744s   0ms DEBUG path User/a -(id)- ID/a is valid
                ├─   0.489762s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
              ┌─┘
              ├─   0.489787s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
                └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
                  ├─   0.489833s   0ms DEBUG Building root query tree node: User/a
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.489851s   0ms DEBUG Processing edge: User/a -(id)- ID/a
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.489891s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", current_cost=2003}
                ├─   0.489961s   0ms DEBUG checking edge User/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c", edge="id"}
                  ├─   0.489983s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.490004s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c with edge User/c -(id)- ID/c
                ├─   0.490014s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.490033s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/c
              ├─   0.490043s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.490050s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.490058s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.490064s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.490073s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.490080s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.490097s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.490117s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(10)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(20) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.490132s   0ms DEBUG Paths for id
        ├─   0.490141s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(id)- ID/a is valid
        ├─   0.490149s   0ms DEBUG   Path root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/c -(id)- ID/c is valid
        ├─   0.490158s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.490169s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.490175s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
      ┌─┘
      ├─   0.490189s   2ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(10)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.490215s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.490229s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.490250s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "aName", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(userInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.490293s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.490306s   2ms DEBUG No direct paths found
      ├─   0.490315s   2ms DEBUG going deeper
      ├─   0.490324s   2ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.490331s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.490337s   2ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/c
      ├─   0.490344s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.490350s   2ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.490356s   2ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.490362s   2ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.490367s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.490375s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/c
      ├─   0.490380s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.490386s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/b
      ├─   0.490392s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.490398s   2ms DEBUG Exploring edge User/c -(🔑🧩{id})- User/a
      ├─   0.490403s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.490410s   2ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.490416s   2ms INFO return=Ok([])
    ┌─┘
    ├─   0.490429s   5ms DEBUG Indirect paths found: 0
    ├─   0.490437s   5ms DEBUG advanced: root(Query) -(a)- Query/a -(userInA)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.490491s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.490503s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.490515s   0ms DEBUG Processing edge: Query/a -(userInA)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.490528s   0ms DEBUG Processing edge: User/a -(aName🧩{name})- String/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.490548s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.490559s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.490570s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="userInA", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.490687s   0ms DEBUG adding output field 'userInA' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_requires_field_edge{parent_fetch_step_index=1}
              └─┐find_satisfiable_key{node="User/a"}
                └─┐can_satisfy_edge{path="User/a", edge="id"}
                  ├─   0.490746s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/c'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="User/a", current_cost=0}
                        ├─   0.490783s   0ms DEBUG checking edge User/a -(id)- ID/a
                        └─┐can_satisfy_edge{path="User/a", edge="id"}
                          ├─   0.490803s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.490821s   0ms DEBUG Advancing path User/a with edge User/a -(id)- ID/a
                        ├─   0.490832s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(10)" }])
                      ┌─┘
                      ├─   0.490853s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                    ┌─┘
                    ├─   0.490870s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(10)" }], [])))
                  ┌─┘
                  ├─   0.490885s   0ms DEBUG Paths for id
                  ├─   0.490894s   0ms DEBUG   Path User/a -(id)- ID/a is valid
                  ├─   0.490901s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.490913s   0ms DEBUG path User/a -(id)- ID/a is valid
                  ├─   0.490920s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(10)" }]))
                ┌─┘
              ┌─┘
              ├─   0.490944s   0ms DEBUG Key to re-enter: {id}
              ├─   0.490952s   0ms DEBUG Creating a fetch step for children of @requires
              ├─   0.490961s   0ms DEBUG created a new fetch step [2] subgraph(a) type(User) requirement({name}) in children of 1
              ├─   0.490970s   0ms DEBUG Adding {name} to fetch([2]).input
              ├─   0.490978s   0ms DEBUG Adding {id} to fetch([2]).input
              ├─   0.490985s   0ms DEBUG Creating a fetch step for requirement of @requires
              ├─   0.490992s   0ms DEBUG Adding {id} to fetch([3]).input
              └─┐connect{parent=1, child=3}
              ┌─┘
              ├─   0.491020s   0ms DEBUG Processing requirements
              └─┐process_noop_edge{}
                └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                  └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/b", parent_fetch_step_index=3}
                    ├─   0.491070s   0ms DEBUG created a new fetch step [4] subgraph(b) type(User) requirement() key({id}) in children of 3
                    ├─   0.491079s   0ms DEBUG adding input requirement '{id}' to fetch step [4]
                    ├─   0.491087s   0ms DEBUG adding __typename field to output for type 'User'
                    ├─   0.491096s   0ms DEBUG connecting fetch step to parent [3] -> [4]
                    └─┐connect{parent=3, child=4}
                    ┌─┘
                    └─┐process_requirements_for_fetch_steps{count=1}
                      └─┐process_noop_edge{}
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3, requiring_fetch_step_index=4}
                          └─┐process_plain_field_edge{parent_fetch_step_index=3, requiring_fetch_step_index=4, type_name="User", field="id", leaf=true, list=false, response_path="userInA", fetch_path=""}
                            ├─   0.491161s   0ms DEBUG connecting parent fetch step [3] to requiring fetch step [4]
                            └─┐connect{parent=3, child=4}
                            ┌─┘
                            ├─   0.491189s   0ms DEBUG adding output field 'id' to fetch step [3]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3, requiring_fetch_step_index=4}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐connect{parent=3, child=4}
                      ┌─┘
                    ┌─┘
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_plain_field_edge{parent_fetch_step_index=4, type_name="User", field="name", leaf=true, list=false, response_path="userInA", fetch_path=""}
                        ├─   0.491290s   0ms DEBUG adding output field 'name' to fetch step [4]
                        └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4}
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
              ├─   0.491355s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
              └─┐connect{parent=4, child=2}
              ┌─┘
              ├─   0.491376s   0ms DEBUG Processing children
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.491450s   0ms DEBUG Done
├─   0.491465s   0ms DEBUG found roots
├─   0.491470s   0ms DEBUG print graph
├─   0.491475s   0ms DEBUG Nodes:
│ [1] Query/a {} → {userInA{id}} at $.
│ [2] User/a {__typename name id} → {aName} at $.userInA
│ [3] User/a {__typename id} → {__typename id} at $.userInA
│ [4] User/b {__typename id} → {name} at $.userInA
│ 
│ Tree:
│ [1]
│   [3]
│     [4]
│       [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.491524s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [3]
    └─┐perform_passthrough_child_merge{}
      ├─   0.491538s   0ms DEBUG merging fetch steps [1] and [3]
      └─┐connect{parent=1, child=4}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.492016s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.494145s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"userInA": Object {"id": String("u1"), "__typename": String("User")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"id": String("u1"), "__typename": String("User")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"id": String("u1"), "__typename": String("User")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"id": String("u1"), "__typename": String("User")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.494594s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.495833s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"userInA": Object {"id": String("u1"), "__typename": String("User"), "name": String("u1-name")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"id": String("u1"), "__typename": String("User"), "name": String("u1-name")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"id": String("u1"), "__typename": String("User"), "name": String("u1-name")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"id": String("u1"), "__typename": String("User"), "name": String("u1-name")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1-name")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.496221s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.497453s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.497735s DEBUG execution result: ExecutionResult { data: Some(Object {"userInA": Object {"aName": String("a__u1-name")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{userInA{id __typename}}")}, Object {"kind": String("Flatten"), "path": Array [String("userInA")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("userInA")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{aName}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("name")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
