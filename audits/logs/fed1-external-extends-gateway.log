generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.12s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="User"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006129s   0ms DEBUG Building graph for supergraph with 14 definitions
  └─┐build_root_nodes{}
    ├─   0.006179s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006239s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006253s   0ms INFO [x] Creating field move edge 'Query.providedRandomUser/A' (type: User)
    ├─   0.006261s   0ms INFO [x] Creating field move edge 'Query.providedRandomUser/A' (type: User)
    ├─   0.006268s   0ms INFO [ ] Field 'Query.userById/A' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006274s   0ms INFO [x] Creating field move edge 'Query.randomUser/A' (type: User)
    ├─   0.006280s   0ms INFO [x] Creating field move edge 'Query.randomUser/A' (type: User)
    ├─   0.006286s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006293s   0ms INFO [ ] Field 'Query.providedRandomUser/B' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006298s   0ms INFO [x] Creating field move edge 'Query.userById/B' (type: User)
    ├─   0.006304s   0ms INFO [x] Creating field move edge 'Query.userById/B' (type: User)
    ├─   0.006309s   0ms INFO [ ] Field 'Query.randomUser/B' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006315s   0ms INFO [x] Creating owned field move edge 'User.__typename/A' (type: String)
    ├─   0.006321s   0ms INFO [x] Creating field move edge 'User.rid/A' (type: ID)
    ├─   0.006329s   0ms INFO [x] Creating field move edge 'User.rid/A' (type: ID)
    ├─   0.006334s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006340s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006347s   0ms INFO [ ] Field 'User.name/A' is external, skipping edge creation
    ├─   0.006352s   0ms INFO [ ] Field 'User.nickname/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006356s   0ms INFO [x] Creating owned field move edge 'User.__typename/B' (type: String)
    ├─   0.006363s   0ms INFO [ ] Field 'User.rid/B' does is not available in the subgraph, skipping edge creation (type: ID)
    ├─   0.006374s   0ms INFO [x] Creating field move edge 'User.id/B' (type: ID)
    ├─   0.006380s   0ms INFO [x] Creating field move edge 'User.id/B' (type: ID)
    ├─   0.006385s   0ms INFO [x] Creating field move edge 'User.name/B' (type: String)
    ├─   0.006391s   0ms INFO [x] Creating field move edge 'User.name/B' (type: String)
    ├─   0.006399s   0ms INFO [x] Creating field move edge 'User.nickname/B' (type: String)
    ├─   0.006405s   0ms INFO [x] Creating field move edge 'User.nickname/B' (type: String)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006506s   0ms INFO Creating self-referencing entity move edge in 'User/A' via key 'id'
    ├─   0.006580s   0ms INFO Creating entity move edge from 'User/A' to 'User/B' via key 'id'
    ├─   0.006621s   0ms INFO Creating entity move edge from 'User/B' to 'User/A' via key 'id'
    ├─   0.006692s   0ms INFO Creating self-referencing entity move edge in 'User/B' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
    ├─   0.006792s   0ms INFO Creating viewed (#1) link for provided field 'Query.providedRandomUser/"A"' (type: User)
    └─┐handle_viewed_selection_set{graph_id="A", view_id=1, parent_type_name="User"}
      ├─   0.006822s   0ms INFO Upserting graph viewed node for 'String.A'
      ├─   0.006829s   0ms INFO Creating viewed (#1) field edge for 'User.name' (type: String)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.064080s INFO Starting server on http://localhost:4000
   0.065041s INFO starting 16 workers
   0.065084s INFO Actix runtime found; starting in Actix runtime
   0.065095s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.303846s DEBUG original document: query ping {
  __typename
}

   0.303955s DEBUG normalized document: query ping {__typename}

   0.303985s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.304377s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.377920s DEBUG original document: query {
  randomUser {
    id
    name
  }
  userById(id: "u2") {
    id
    name
    nickname
  }
}

   0.378053s DEBUG normalized document: query{randomUser{id name} userById(id: "u2"){id name nickname}}

   0.378086s DEBUG executable operation: query{randomUser{id name} userById(id: "u2"){id name nickname}}
┐walk_operation{}
├─   0.378577s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="userById", leaf=false}
  ├─   0.378636s   0ms DEBUG Trying to advance to: userById(id: "u2"){id name nickname} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.378715s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.378739s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.378774s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.378780s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.378793s   0ms DEBUG Indirect paths found: 0
    ├─   0.378800s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.378921s   0ms DEBUG checking edge Query/b -(userById)- User/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="userById"}
        ├─   0.378950s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.378967s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(userById)- User/b
      ├─   0.378978s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.379010s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "userById", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nickname", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("u2")} }), skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.379043s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.379059s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379076s   0ms DEBUG Indirect paths found: 0
    ├─   0.379087s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.379102s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="nickname", leaf=true}
  ├─   0.379125s   0ms DEBUG Trying to advance to: nickname through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userById)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.379151s   0ms DEBUG checking edge User/b -(nickname)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="nickname"}
        ├─   0.379169s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.379183s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(nickname)- String/b
      ├─   0.379192s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.379205s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.379226s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.379233s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.379238s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.379256s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.379314s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
                ├─   0.379344s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.379363s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
              ├─   0.379373s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.379403s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.379411s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.379432s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.379444s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.379453s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.379459s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.379479s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.379497s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.379517s   0ms DEBUG Paths for id
        ├─   0.379527s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userById)- User/b -(id)- ID/b is valid
        ├─   0.379533s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.379548s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.379554s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.379568s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.379596s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.379616s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.379637s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "nickname", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.379683s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.379697s   0ms DEBUG No direct paths found
      ├─   0.379707s   0ms DEBUG going deeper
      ├─   0.379715s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      ├─   0.379721s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.379727s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.379733s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.379741s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.379747s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379759s   0ms DEBUG Indirect paths found: 0
    ├─   0.379767s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(userById)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.379795s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userById)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.379820s   0ms DEBUG checking edge User/b -(name)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="name"}
        ├─   0.379836s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.379851s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(name)- String/b
      ├─   0.379858s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.379872s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.379891s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.379897s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.379903s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.379919s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.379978s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
                ├─   0.379998s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.380018s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
              ├─   0.380027s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.380058s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.380065s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.380072s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.380079s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.380087s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.380093s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.380108s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.380124s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.380143s   0ms DEBUG Paths for id
        ├─   0.380151s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userById)- User/b -(id)- ID/b is valid
        ├─   0.380157s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.380168s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.380174s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.380188s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.380212s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.380226s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.380247s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.380306s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.380325s   0ms DEBUG No direct paths found
      ├─   0.380340s   0ms DEBUG going deeper
      ├─   0.380350s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      ├─   0.380356s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.380362s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.380367s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.380376s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.380381s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.380393s   0ms DEBUG Indirect paths found: 0
    ├─   0.380403s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(userById)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.380432s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(userById)- User/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.380457s   0ms DEBUG checking edge User/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.380473s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.380488s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
      ├─   0.380496s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.380510s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
      ├─   0.380529s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.380535s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.380541s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
        ├─   0.380557s   0ms DEBUG checking requirements {id} for edge 'User/b -(🔑🧩{id})- User/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.380588s   0ms DEBUG checking edge User/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b", edge="id"}
                ├─   0.380606s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.380623s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b with edge User/b -(id)- ID/b
              ├─   0.380631s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b", current_cost=1001}
              ├─   0.380659s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
              ├─   0.380666s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.380673s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
              ├─   0.380679s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.380687s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.380693s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.380708s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.380728s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.380742s   0ms DEBUG Paths for id
        ├─   0.380750s   0ms DEBUG   Path root(Query) -(b)- Query/b -(userById)- User/b -(id)- ID/b is valid
        ├─   0.380756s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.380767s   0ms DEBUG path User/b -(id)- ID/b is valid
        ├─   0.380773s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.380800s   0ms DEBUG Advancing path to User/b -(🔑🧩{id})- User/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="User/b"}
        └─┐create_root_for_path_sequences{root_node="User/b", segments_count=1}
          ├─   0.380835s   0ms DEBUG Building root query tree node: User/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.380849s   0ms DEBUG Processing edge: User/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.380870s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", current_cost=2003}
        ├─   0.380919s   0ms DEBUG checking edge User/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a", edge="id"}
          ├─   0.380938s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.380954s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(userById)- User/b -(🔑🧩{id})- User/a with edge User/a -(id)- ID/a
        ├─   0.380963s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(16) --> EdgeIndex(9)" }])
      ┌─┘
      ├─   0.380981s   0ms DEBUG Found 1 direct paths to User/b -(🔑🧩{id})- User/a
      ├─   0.380992s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.380997s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(16) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.381011s   0ms DEBUG Indirect paths found: 1
    ├─   0.381021s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(userById)- User/b
  ┌─┘
┌─┘
└─┐process_field{field_name="randomUser", leaf=false}
  ├─   0.381082s   0ms DEBUG Trying to advance to: randomUser{id name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.381118s   0ms DEBUG checking edge Query/a -(randomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="randomUser"}
        ├─   0.381134s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.381149s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(randomUser)- User/a
      ├─   0.381158s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.381189s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.381220s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.381226s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.381237s   0ms DEBUG Indirect paths found: 0
    ├─   0.381244s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.381280s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.381291s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.381307s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.381312s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.381325s   0ms DEBUG Indirect paths found: 0
    ├─   0.381332s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.381344s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.381363s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.381390s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.381402s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.381419s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.381436s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.381484s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.381507s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.381526s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.381536s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.381573s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.381580s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.381588s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.381594s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.381602s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.381608s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.381623s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
          ┌─┘
          ├─   0.381639s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
        ┌─┘
        ├─   0.381672s   0ms DEBUG Paths for id
        ├─   0.381685s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.381693s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.381704s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.381710s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(9)" }]))
      ┌─┘
      ├─   0.381725s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(9)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.381751s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.381765s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.381786s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.381845s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.381872s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.381890s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.381900s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(12)" }])
      ┌─┘
      ├─   0.381916s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.381925s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.381931s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.382004s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.382034s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.382065s   0ms DEBUG Indirect paths found: 1
    ├─   0.382078s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.382111s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.382147s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.382165s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.382199s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.382213s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.382243s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.382272s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.382291s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.382383s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.382415s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.382436s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.382447s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.382495s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.382506s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.382513s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.382529s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.382540s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.382547s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.382576s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
          ┌─┘
          ├─   0.382598s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
        ┌─┘
        ├─   0.382612s   0ms DEBUG Paths for id
        ├─   0.382622s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.382638s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.382655s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.382661s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(9)" }]))
      ┌─┘
      ├─   0.382698s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(9)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.382730s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.382757s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.382785s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.382838s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.382857s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.382874s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.382883s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.382899s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.382908s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.382914s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.382922s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.382927s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.382941s   0ms DEBUG Indirect paths found: 1
    ├─   0.382950s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(13)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.382993s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.383006s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.383017s   0ms DEBUG Processing edge: Query/b -(userById)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.383030s   0ms DEBUG Processing edge: User/b -(nickname)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.383049s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.383062s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.383073s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(12)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.383106s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.383118s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.383129s   0ms DEBUG Processing edge: Query/b -(userById)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.383142s   0ms DEBUG Processing edge: User/b -(name)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.383160s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.383172s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.383182s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(6) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.383234s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.383252s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.383264s   0ms DEBUG Processing edge: Query/b -(userById)- User/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.383277s   0ms DEBUG Processing edge: User/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.383297s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.383323s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.383336s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(12)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.383388s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.383406s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.383418s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.383430s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.383443s   0ms DEBUG Processing edge: User/b -(name)- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.383466s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.383478s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.383489s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.383501s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.383550s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.383568s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.383580s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.383592s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.383612s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.383623s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.383634s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=5}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=2}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="userById", arguments="id: \"u2\"", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.383800s   0ms DEBUG adding output field 'userById' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="nickname", leaf=true, list=false, response_path="userById", fetch_path="userById"}
              ├─   0.383878s   0ms DEBUG adding output field 'nickname' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="name", leaf=true, list=false, response_path="userById", fetch_path="userById"}
              ├─   0.383948s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="userById", fetch_path="userById"}
              ├─   0.384000s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=2}
      ┌─┘
      └─┐connect{parent=0, child=2}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
        └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Query", field="randomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.384128s   0ms DEBUG adding output field 'randomUser' to fetch step [2]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=2}
            └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/b", parent_fetch_step_index=2}
              ├─   0.384168s   0ms DEBUG created a new fetch step [3] subgraph(b) type(User) requirement() key({id}) in children of 2
              ├─   0.384176s   0ms DEBUG adding input requirement '{id}' to fetch step [3]
              ├─   0.384184s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.384192s   0ms DEBUG connecting fetch step to parent [2] -> [3]
              └─┐connect{parent=2, child=3}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, requiring_fetch_step_index=3, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
                      ├─   0.384284s   0ms DEBUG connecting parent fetch step [2] to requiring fetch step [3]
                      └─┐connect{parent=2, child=3}
                      ┌─┘
                      ├─   0.384327s   0ms DEBUG adding output field 'id' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=2, child=3}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                └─┐process_plain_field_edge{parent_fetch_step_index=3, type_name="User", field="name", leaf=true, list=false, response_path="randomUser", fetch_path=""}
                  ├─   0.384452s   0ms DEBUG adding output field 'name' to fetch step [3]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.384512s   0ms DEBUG adding output field 'id' to fetch step [2]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.384576s   0ms DEBUG Done
├─   0.384584s   0ms DEBUG found roots
├─   0.384589s   0ms DEBUG print graph
├─   0.384594s   0ms DEBUG Nodes:
│ [1] Query/b {} → {userById(id: "u2"){nickname name id}} at $.
│ [2] Query/a {} → {randomUser{__typename id}} at $.
│ [3] User/b {__typename id} → {name} at $.randomUser
│ 
│ Tree:
│ [2]
│   [3]
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐ParallelNode::execute{data=Null, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[]}
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.385170s   0ms DEBUG starting new connection: http://localhost:4200/
    └─┐FetchNode::execute{data=Null, representations=[]}
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.385447s   0ms DEBUG starting new connection: http://localhost:4200/
          ├─   0.385580s   0ms DEBUG connecting to 127.0.0.1:4200
          ├─   0.385685s   0ms DEBUG connecting to 127.0.0.1:4200
          ├─   0.385950s   1ms DEBUG connected to 127.0.0.1:4200
          ├─   0.386113s   0ms DEBUG connected to 127.0.0.1:4200
          ├─   0.389837s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
          ├─   0.391978s   6ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"randomUser": Object {"__typename": String("User"), "id": String("u1")}, "userById": Object {"nickname": String("u2-nickname"), "name": String("u2-name"), "id": String("u2")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.392620s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.394288s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.394600s DEBUG execution result: ExecutionResult { data: Some(Object {"randomUser": Object {"id": String("u1"), "name": String("u1-name")}, "userById": Object {"id": String("u2"), "name": String("u2-name"), "nickname": String("u2-nickname")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Parallel"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{randomUser{__typename id}}")}, Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{userById(id: \"u2\"){nickname name id}}")}]}, Object {"kind": String("Flatten"), "path": Array [String("randomUser")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.405365s DEBUG original document: query {
  randomUser {
    id
    rid
  }
}

   0.405477s DEBUG normalized document: query{randomUser{id rid}}

   0.405501s DEBUG executable operation: query{randomUser{id rid}}
┐walk_operation{}
├─   0.405861s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="randomUser", leaf=false}
  ├─   0.405912s   0ms DEBUG Trying to advance to: randomUser{id rid} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.405974s   0ms DEBUG checking edge Query/a -(randomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="randomUser"}
        ├─   0.405996s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.406022s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(randomUser)- User/a
      ├─   0.406040s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.406056s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.406086s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.406107s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.406127s   0ms DEBUG Indirect paths found: 0
    ├─   0.406138s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.406171s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.406186s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.406204s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.406209s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.406221s   0ms DEBUG Indirect paths found: 0
    ├─   0.406228s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.406243s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="rid", leaf=true}
  ├─   0.406271s   0ms DEBUG Trying to advance to: rid through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.406319s   0ms DEBUG checking edge User/a -(rid)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="rid"}
        ├─   0.406344s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.406362s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(rid)- ID/a
      ├─   0.406372s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.406387s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.406411s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.406430s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.406468s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.406487s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.406505s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.406513s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.406543s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.406552s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.406561s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.406567s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.406575s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.406582s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.406599s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
          ┌─┘
          ├─   0.406616s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
        ┌─┘
        ├─   0.406630s   0ms DEBUG Paths for id
        ├─   0.406639s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.406645s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.406661s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.406669s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(9)" }]))
      ┌─┘
      ├─   0.406684s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(9)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.406712s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.406727s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.406748s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.406830s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.406845s   0ms DEBUG No direct paths found
      ├─   0.406855s   0ms DEBUG going deeper
      ├─   0.406863s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.406869s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.406876s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.406881s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.406888s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.406893s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.406902s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.406907s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.406919s   0ms DEBUG Indirect paths found: 0
    ├─   0.406927s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.406956s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.406982s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.406999s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.407013s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.407021s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.407036s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.407055s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.407072s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.407103s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.407121s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.407138s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.407146s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.407176s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.407183s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.407190s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.407198s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.407206s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.407212s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.407227s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
          ┌─┘
          ├─   0.407243s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
        ┌─┘
        ├─   0.407257s   0ms DEBUG Paths for id
        ├─   0.407266s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.407272s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.407283s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.407289s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(9)" }]))
      ┌─┘
      ├─   0.407303s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(9)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.407329s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.407343s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.407364s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.407407s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.407443s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.407470s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.407492s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.407517s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.407527s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.407533s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.407541s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.407546s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.407562s   0ms DEBUG Indirect paths found: 1
    ├─   0.407574s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.407621s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.407634s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.407646s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.407658s   0ms DEBUG Processing edge: User/a -(rid)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.407677s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.407689s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.407699s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.407733s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.407745s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.407756s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.407768s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.407788s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.407800s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.407810s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="randomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.407926s   0ms DEBUG adding output field 'randomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="rid", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.407960s   0ms DEBUG adding output field 'rid' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.408002s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.408065s   0ms DEBUG Done
├─   0.408088s   0ms DEBUG found roots
├─   0.408096s   0ms DEBUG print graph
├─   0.408101s   0ms DEBUG Nodes:
│ [1] Query/a {} → {randomUser{rid id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.408535s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.410700s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.410942s DEBUG execution result: ExecutionResult { data: Some(Object {"randomUser": Object {"id": String("u1"), "rid": String("u1-rid")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{randomUser{rid id}}")}}}) }
   0.414102s DEBUG original document: query {
  randomUser {
    id
    rid
    name
  }
}

   0.414182s DEBUG normalized document: query{randomUser{id rid name}}

   0.414190s DEBUG executable operation: query{randomUser{id rid name}}
┐walk_operation{}
├─   0.414498s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="randomUser", leaf=false}
  ├─   0.414561s   0ms DEBUG Trying to advance to: randomUser{id rid name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.414624s   0ms DEBUG checking edge Query/a -(randomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="randomUser"}
        ├─   0.414664s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.414689s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(randomUser)- User/a
      ├─   0.414703s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.414719s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.414771s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.414780s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.414794s   0ms DEBUG Indirect paths found: 0
    ├─   0.414802s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.414833s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.414845s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "randomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.414862s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.414867s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.414878s   0ms DEBUG Indirect paths found: 0
    ├─   0.414885s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.414899s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.414921s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.414947s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.414958s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.414978s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.414998s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.415042s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.415061s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.415078s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.415090s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.415121s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.415130s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.415139s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.415145s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.415155s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.415162s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.415179s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
          ┌─┘
          ├─   0.415196s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
        ┌─┘
        ├─   0.415210s   0ms DEBUG Paths for id
        ├─   0.415219s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.415226s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.415243s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.415249s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(9)" }]))
      ┌─┘
      ├─   0.415264s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(9)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.415291s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.415309s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.415331s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.415376s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.415395s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.415411s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.415420s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(12)" }])
      ┌─┘
      ├─   0.415436s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.415445s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.415450s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.415458s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.415463s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.415477s   0ms DEBUG Indirect paths found: 1
    ├─   0.415485s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="rid", leaf=true}
  ├─   0.415511s   0ms DEBUG Trying to advance to: rid through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.415538s   0ms DEBUG checking edge User/a -(rid)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="rid"}
        ├─   0.415554s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.415570s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(rid)- ID/a
      ├─   0.415578s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.415591s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.415640s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.415664s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.415697s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.415715s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.415734s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.415744s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.415775s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.415783s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.415790s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.415797s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.415804s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.415810s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.415826s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
          ┌─┘
          ├─   0.415842s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
        ┌─┘
        ├─   0.415855s   0ms DEBUG Paths for id
        ├─   0.415864s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.415870s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.415881s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.415887s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(9)" }]))
      ┌─┘
      ├─   0.415901s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(9)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.415925s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.415940s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.415963s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.416006s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.416020s   0ms DEBUG No direct paths found
      ├─   0.416030s   0ms DEBUG going deeper
      ├─   0.416038s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.416044s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.416051s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.416056s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.416062s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.416068s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.416076s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.416081s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.416093s   0ms DEBUG Indirect paths found: 0
    ├─   0.416101s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.416129s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(randomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.416154s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.416172s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.416187s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.416194s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.416208s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
      ├─   0.416227s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
        ├─   0.416244s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.416275s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a", edge="id"}
                ├─   0.416292s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.416309s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.416317s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a", current_cost=1001}
              ├─   0.416346s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.416353s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.416362s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.416368s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.416375s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.416381s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.416396s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
          ┌─┘
          ├─   0.416412s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }], [])))
        ┌─┘
        ├─   0.416426s   0ms DEBUG Paths for id
        ├─   0.416434s   0ms DEBUG   Path root(Query) -(a)- Query/a -(randomUser)- User/a -(id)- ID/a is valid
        ├─   0.416440s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.416453s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.416459s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(9)" }]))
      ┌─┘
      ├─   0.416475s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(9)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.416499s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.416513s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.416535s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.416578s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.416596s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.416612s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(randomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.416621s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.416636s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.416644s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.416650s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.416658s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.416663s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.416677s   0ms DEBUG Indirect paths found: 1
    ├─   0.416686s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(randomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(15) --> EdgeIndex(12)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.416736s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.416749s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.416761s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.416774s   0ms DEBUG Processing edge: User/a -(🔑🧩{id})- User/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.416786s   0ms DEBUG Processing edge: User/b -(name)- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.416806s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.416818s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.416829s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.416840s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.416874s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.416886s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.416898s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.416910s   0ms DEBUG Processing edge: User/a -(rid)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.416929s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.416940s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.416950s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(4) --> EdgeIndex(9)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.416984s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.416996s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.417008s   0ms DEBUG Processing edge: Query/a -(randomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.417019s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.417037s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.417049s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.417059s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="randomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.417174s   0ms DEBUG adding output field 'randomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="User/a -(🔑🧩{id})- User/b", parent_fetch_step_index=1}
              ├─   0.417209s   0ms DEBUG created a new fetch step [2] subgraph(b) type(User) requirement() key({id}) in children of 1
              ├─   0.417220s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.417228s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.417236s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
                      ├─   0.417336s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.417375s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="name", leaf=true, list=false, response_path="randomUser", fetch_path=""}
                  ├─   0.417499s   0ms DEBUG adding output field 'name' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="rid", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.417581s   0ms DEBUG adding output field 'rid' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="randomUser", fetch_path="randomUser"}
              ├─   0.417637s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.417702s   0ms DEBUG Done
├─   0.417710s   0ms DEBUG found roots
├─   0.417715s   0ms DEBUG print graph
├─   0.417720s   0ms DEBUG Nodes:
│ [1] Query/a {} → {randomUser{__typename id rid}} at $.
│ [2] User/b {__typename id} → {name} at $.randomUser
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.418174s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.420436s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"randomUser": Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "rid": String("u1-rid")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.420985s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.422615s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.422960s DEBUG execution result: ExecutionResult { data: Some(Object {"randomUser": Object {"id": String("u1"), "rid": String("u1-rid"), "name": String("u1-name")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{randomUser{__typename id rid}}")}, Object {"kind": String("Flatten"), "path": Array [String("randomUser")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.425909s DEBUG original document: query {
  providedRandomUser {
    id
    rid
    name
  }
}

   0.426001s DEBUG normalized document: query{providedRandomUser{id rid name}}

   0.426023s DEBUG executable operation: query{providedRandomUser{id rid name}}
┐walk_operation{}
├─   0.426325s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="providedRandomUser", leaf=false}
  ├─   0.426383s   0ms DEBUG Trying to advance to: providedRandomUser{id rid name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.426442s   0ms DEBUG checking edge Query/a -(providedRandomUser)- User/a/1
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="providedRandomUser"}
        ├─   0.426463s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.426485s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(providedRandomUser)- User/a/1
      ├─   0.426498s   0ms DEBUG checking edge Query/a -(providedRandomUser)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="providedRandomUser"}
        ├─   0.426514s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.426528s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(providedRandomUser)- User/a
      ├─   0.426535s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(18)" },  { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.426553s   0ms DEBUG Direct paths found: 2
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.426583s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.426590s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.426602s   0ms DEBUG Indirect paths found: 0
    ├─   0.426609s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.426639s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.426650s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "providedRandomUser", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "rid", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.426684s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.426693s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.426708s   0ms DEBUG Indirect paths found: 0
    ├─   0.426719s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.426750s   0ms DEBUG Found 2 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.426790s   0ms DEBUG Trying to advance to: name through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.426841s   0ms DEBUG checking edge User/a/1 -(name)- String/a/1
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", edge="name"}
        ├─   0.426860s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.426878s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1 with edge User/a/1 -(name)- String/a/1
      ├─   0.426895s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(18) --> EdgeIndex(19)" }])
    ┌─┘
    ├─   0.426910s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.426945s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.426954s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.426969s   0ms DEBUG Indirect paths found: 0
    ├─   0.426979s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.427013s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.427026s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.427045s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.427085s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.427131s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
                ├─   0.427150s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.427169s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.427179s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.427234s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.427255s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.427268s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.427275s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.427283s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.427289s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.427310s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }], [])))
          ┌─┘
          ├─   0.427344s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }], [])))
        ┌─┘
        ├─   0.427362s   0ms DEBUG Paths for id
        ├─   0.427373s   0ms DEBUG   Path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(id)- ID/a is valid
        ├─   0.427380s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.427409s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.427418s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(9)" }]))
      ┌─┘
      ├─   0.427439s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(9)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.427474s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.427503s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.427532s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.427583s   0ms DEBUG checking edge User/b -(name)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", edge="name"}
          ├─   0.427603s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.427620s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(name)- String/b
        ├─   0.427629s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(12)" }])
      ┌─┘
      ├─   0.427646s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.427655s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.427661s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.427668s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.427674s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.427688s   0ms DEBUG Indirect paths found: 1
    ├─   0.427697s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="rid", leaf=true}
  ├─   0.427741s   0ms DEBUG Trying to advance to: rid through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.427797s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.427817s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.427842s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.427849s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.427860s   0ms DEBUG Indirect paths found: 0
    ├─   0.427868s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.427898s   0ms DEBUG checking edge User/a -(rid)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="rid"}
        ├─   0.427916s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.427930s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(rid)- ID/a
      ├─   0.427940s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.427954s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.427976s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.427993s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.428030s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
                ├─   0.428064s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.428090s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.428100s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.428134s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.428141s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.428151s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.428157s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.428165s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.428171s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.428187s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }], [])))
          ┌─┘
          ├─   0.428203s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }], [])))
        ┌─┘
        ├─   0.428217s   0ms DEBUG Paths for id
        ├─   0.428226s   0ms DEBUG   Path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(id)- ID/a is valid
        ├─   0.428233s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.428245s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.428251s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(9)" }]))
      ┌─┘
      ├─   0.428266s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(9)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.428297s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.428311s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.428332s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "rid", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.428375s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.428388s   0ms DEBUG No direct paths found
      ├─   0.428398s   0ms DEBUG going deeper
      ├─   0.428405s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.428411s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.428417s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/b
      ├─   0.428423s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.428429s   0ms DEBUG Exploring edge User/b -(🔑🧩{id})- User/a
      ├─   0.428437s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.428445s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.428450s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.428461s   0ms DEBUG Indirect paths found: 0
    ├─   0.428470s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.428499s   0ms DEBUG Trying to advance to: id through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.428525s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.428537s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1", current_cost=1001}
      ├─   0.428554s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.428569s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.428580s   0ms DEBUG Indirect paths found: 0
    ├─   0.428599s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(providedRandomUser)- User/a/1
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.428647s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.428664s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.428679s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
      ├─   0.428688s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.428701s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
      ├─   0.428721s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
        ├─   0.428738s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.428770s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", edge="id"}
                ├─   0.428787s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.428804s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a with edge User/a -(id)- ID/a
              ├─   0.428812s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a", current_cost=1001}
              ├─   0.428840s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.428848s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.428855s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.428862s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.428869s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.428875s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.428891s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }], [])))
          ┌─┘
          ├─   0.428906s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }], [])))
        ┌─┘
        ├─   0.428920s   0ms DEBUG Paths for id
        ├─   0.428928s   0ms DEBUG   Path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(id)- ID/a is valid
        ├─   0.428934s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.428946s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.428951s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(9)" }]))
      ┌─┘
      ├─   0.428965s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(9)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.428989s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.429003s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.429023s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.429066s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.429084s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.429100s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(providedRandomUser)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.429109s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.429124s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.429132s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.429138s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.429145s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.429150s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(15) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.429164s   0ms DEBUG Indirect paths found: 1
    ├─   0.429172s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(providedRandomUser)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(18) --> EdgeIndex(19)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.429215s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.429227s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.429239s   0ms DEBUG Processing edge: Query/a -(providedRandomUser)- User/a/1
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.429251s   0ms DEBUG Processing edge: User/a/1 -(name)- String/a/1
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.429270s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.429281s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.429292s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.429325s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.429336s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.429347s   0ms DEBUG Processing edge: Query/a -(providedRandomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.429359s   0ms DEBUG Processing edge: User/a -(rid)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.429377s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.429389s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.429399s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(9)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.429431s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.429442s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.429454s   0ms DEBUG Processing edge: Query/a -(providedRandomUser)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.429466s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.429484s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.429495s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.429506s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="providedRandomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.429640s   0ms DEBUG adding output field 'providedRandomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="name", leaf=false, list=false, response_path="providedRandomUser", fetch_path="providedRandomUser"}
              ├─   0.429675s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="providedRandomUser", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.429728s   0ms DEBUG adding output field 'providedRandomUser' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="rid", leaf=true, list=false, response_path="providedRandomUser", fetch_path="providedRandomUser"}
              ├─   0.429752s   0ms DEBUG adding output field 'rid' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="providedRandomUser", fetch_path="providedRandomUser"}
              ├─   0.429790s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.429855s   0ms DEBUG Done
├─   0.429862s   0ms DEBUG found roots
├─   0.429868s   0ms DEBUG print graph
├─   0.429872s   0ms DEBUG Nodes:
│ [1] Query/a {} → {providedRandomUser{name rid id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.430265s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.432509s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.432785s DEBUG execution result: ExecutionResult { data: Some(Object {"providedRandomUser": Object {"id": String("u1"), "rid": String("u1-rid"), "name": String("u1-name")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{providedRandomUser{name rid id}}")}}}) }
