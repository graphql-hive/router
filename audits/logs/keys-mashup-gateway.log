generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.11s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_object_type{name="A"}
    └─┐build_fields{fields_count=5}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="B"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="CompositeID"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=1}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006548s   0ms DEBUG Building graph for supergraph with 16 definitions
  └─┐build_root_nodes{}
    ├─   0.006585s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006633s   0ms INFO [x] Creating owned field move edge 'CompositeID.__typename/A' (type: String)
    ├─   0.006647s   0ms INFO [x] Creating field move edge 'CompositeID.one/A' (type: ID)
    ├─   0.006656s   0ms INFO [x] Creating field move edge 'CompositeID.one/A' (type: ID)
    ├─   0.006662s   0ms INFO [x] Creating field move edge 'CompositeID.three/A' (type: ID)
    ├─   0.006668s   0ms INFO [x] Creating field move edge 'CompositeID.three/A' (type: ID)
    ├─   0.006674s   0ms INFO [x] Creating field move edge 'CompositeID.two/A' (type: ID)
    ├─   0.006680s   0ms INFO [x] Creating field move edge 'CompositeID.two/A' (type: ID)
    ├─   0.006686s   0ms INFO [x] Creating owned field move edge 'CompositeID.__typename/B' (type: String)
    ├─   0.006693s   0ms INFO [x] Creating field move edge 'CompositeID.one/B' (type: ID)
    ├─   0.006701s   0ms INFO [x] Creating field move edge 'CompositeID.one/B' (type: ID)
    ├─   0.006706s   0ms INFO [x] Creating field move edge 'CompositeID.three/B' (type: ID)
    ├─   0.006712s   0ms INFO [x] Creating field move edge 'CompositeID.three/B' (type: ID)
    ├─   0.006717s   0ms INFO [x] Creating field move edge 'CompositeID.two/B' (type: ID)
    ├─   0.006723s   0ms INFO [x] Creating field move edge 'CompositeID.two/B' (type: ID)
    ├─   0.006729s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006737s   0ms INFO [ ] Field 'Query.b/A' does is not available in the subgraph, skipping edge creation (type: B)
    ├─   0.006742s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006749s   0ms INFO [x] Creating field move edge 'Query.b/B' (type: B)
    ├─   0.006755s   0ms INFO [x] Creating field move edge 'Query.b/B' (type: B)
    ├─   0.006762s   0ms INFO [x] Creating owned field move edge 'A.__typename/A' (type: String)
    ├─   0.006769s   0ms INFO [x] Creating field move edge 'A.id/A' (type: ID)
    ├─   0.006775s   0ms INFO [x] Creating field move edge 'A.id/A' (type: ID)
    ├─   0.006780s   0ms INFO [x] Creating field move edge 'A.pId/A' (type: ID)
    ├─   0.006786s   0ms INFO [x] Creating field move edge 'A.pId/A' (type: ID)
    ├─   0.006792s   0ms INFO [ ] Field 'A.nameInB/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006797s   0ms INFO [x] Creating field move edge 'A.compositeId/A' (type: CompositeID)
    ├─   0.006803s   0ms INFO [x] Creating field move edge 'A.compositeId/A' (type: CompositeID)
    ├─   0.006808s   0ms INFO [x] Creating field move edge 'A.name/A' (type: String)
    ├─   0.006814s   0ms INFO [x] Creating field move edge 'A.name/A' (type: String)
    ├─   0.006820s   0ms INFO [x] Creating owned field move edge 'A.__typename/A' (type: String)
    ├─   0.006827s   0ms INFO [x] Creating field move edge 'A.id/A' (type: ID)
    ├─   0.006833s   0ms INFO [x] Creating field move edge 'A.id/A' (type: ID)
    ├─   0.006838s   0ms INFO [x] Creating field move edge 'A.pId/A' (type: ID)
    ├─   0.006844s   0ms INFO [x] Creating field move edge 'A.pId/A' (type: ID)
    ├─   0.006849s   0ms INFO [ ] Field 'A.nameInB/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006854s   0ms INFO [x] Creating field move edge 'A.compositeId/A' (type: CompositeID)
    ├─   0.006860s   0ms INFO [x] Creating field move edge 'A.compositeId/A' (type: CompositeID)
    ├─   0.006865s   0ms INFO [x] Creating field move edge 'A.name/A' (type: String)
    ├─   0.006871s   0ms INFO [x] Creating field move edge 'A.name/A' (type: String)
    ├─   0.006877s   0ms INFO [x] Creating owned field move edge 'A.__typename/A' (type: String)
    ├─   0.006883s   0ms INFO [x] Creating field move edge 'A.id/A' (type: ID)
    ├─   0.006889s   0ms INFO [x] Creating field move edge 'A.id/A' (type: ID)
    ├─   0.006894s   0ms INFO [x] Creating field move edge 'A.pId/A' (type: ID)
    ├─   0.006900s   0ms INFO [x] Creating field move edge 'A.pId/A' (type: ID)
    ├─   0.006905s   0ms INFO [ ] Field 'A.nameInB/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006910s   0ms INFO [x] Creating field move edge 'A.compositeId/A' (type: CompositeID)
    ├─   0.006916s   0ms INFO [x] Creating field move edge 'A.compositeId/A' (type: CompositeID)
    ├─   0.006921s   0ms INFO [x] Creating field move edge 'A.name/A' (type: String)
    ├─   0.006927s   0ms INFO [x] Creating field move edge 'A.name/A' (type: String)
    ├─   0.006933s   0ms INFO [x] Creating owned field move edge 'A.__typename/A' (type: String)
    ├─   0.006939s   0ms INFO [x] Creating field move edge 'A.id/A' (type: ID)
    ├─   0.006945s   0ms INFO [x] Creating field move edge 'A.id/A' (type: ID)
    ├─   0.006950s   0ms INFO [x] Creating field move edge 'A.pId/A' (type: ID)
    ├─   0.006956s   0ms INFO [x] Creating field move edge 'A.pId/A' (type: ID)
    ├─   0.006961s   0ms INFO [ ] Field 'A.nameInB/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006966s   0ms INFO [x] Creating field move edge 'A.compositeId/A' (type: CompositeID)
    ├─   0.006972s   0ms INFO [x] Creating field move edge 'A.compositeId/A' (type: CompositeID)
    ├─   0.006977s   0ms INFO [x] Creating field move edge 'A.name/A' (type: String)
    ├─   0.006983s   0ms INFO [x] Creating field move edge 'A.name/A' (type: String)
    ├─   0.006988s   0ms INFO [x] Creating owned field move edge 'A.__typename/B' (type: String)
    ├─   0.006995s   0ms INFO [x] Creating field move edge 'A.id/B' (type: ID)
    ├─   0.007001s   0ms INFO [x] Creating field move edge 'A.id/B' (type: ID)
    ├─   0.007006s   0ms INFO [x] Creating field move edge 'A.pId/B' (type: ID)
    ├─   0.007012s   0ms INFO [x] Creating field move edge 'A.pId/B' (type: ID)
    ├─   0.007090s   0ms INFO [x] Creating field move edge 'A.nameInB/B' (type: String)
    ├─   0.007120s   0ms INFO [x] Creating field move edge 'A.nameInB/B' (type: String)
    ├─   0.007132s   0ms INFO [x] Creating field move edge 'A.compositeId/B' (type: CompositeID)
    ├─   0.007139s   0ms INFO [x] Creating field move edge 'A.compositeId/B' (type: CompositeID)
    ├─   0.007148s   0ms INFO [ ] Field 'A.name/B' is external, skipping edge creation
    ├─   0.007154s   0ms INFO [x] Creating owned field move edge 'A.__typename/B' (type: String)
    ├─   0.007162s   0ms INFO [x] Creating field move edge 'A.id/B' (type: ID)
    ├─   0.007167s   0ms INFO [x] Creating field move edge 'A.id/B' (type: ID)
    ├─   0.007173s   0ms INFO [x] Creating field move edge 'A.pId/B' (type: ID)
    ├─   0.007179s   0ms INFO [x] Creating field move edge 'A.pId/B' (type: ID)
    ├─   0.007229s   0ms INFO [x] Creating field move edge 'A.nameInB/B' (type: String)
    ├─   0.007240s   0ms INFO [x] Creating field move edge 'A.nameInB/B' (type: String)
    ├─   0.007248s   0ms INFO [x] Creating field move edge 'A.compositeId/B' (type: CompositeID)
    ├─   0.007254s   0ms INFO [x] Creating field move edge 'A.compositeId/B' (type: CompositeID)
    ├─   0.007260s   0ms INFO [ ] Field 'A.name/B' is external, skipping edge creation
    ├─   0.007266s   0ms INFO [x] Creating owned field move edge 'A.__typename/B' (type: String)
    ├─   0.007273s   0ms INFO [x] Creating field move edge 'A.id/B' (type: ID)
    ├─   0.007279s   0ms INFO [x] Creating field move edge 'A.id/B' (type: ID)
    ├─   0.007284s   0ms INFO [x] Creating field move edge 'A.pId/B' (type: ID)
    ├─   0.007290s   0ms INFO [x] Creating field move edge 'A.pId/B' (type: ID)
    ├─   0.007323s   0ms INFO [x] Creating field move edge 'A.nameInB/B' (type: String)
    ├─   0.007349s   0ms INFO [x] Creating field move edge 'A.nameInB/B' (type: String)
    ├─   0.007362s   0ms INFO [x] Creating field move edge 'A.compositeId/B' (type: CompositeID)
    ├─   0.007368s   0ms INFO [x] Creating field move edge 'A.compositeId/B' (type: CompositeID)
    ├─   0.007374s   0ms INFO [ ] Field 'A.name/B' is external, skipping edge creation
    ├─   0.007380s   0ms INFO [x] Creating owned field move edge 'A.__typename/B' (type: String)
    ├─   0.007387s   0ms INFO [x] Creating field move edge 'A.id/B' (type: ID)
    ├─   0.007393s   0ms INFO [x] Creating field move edge 'A.id/B' (type: ID)
    ├─   0.007399s   0ms INFO [x] Creating field move edge 'A.pId/B' (type: ID)
    ├─   0.007404s   0ms INFO [x] Creating field move edge 'A.pId/B' (type: ID)
    ├─   0.007451s   0ms INFO [x] Creating field move edge 'A.nameInB/B' (type: String)
    ├─   0.007477s   0ms INFO [x] Creating field move edge 'A.nameInB/B' (type: String)
    ├─   0.007490s   0ms INFO [x] Creating field move edge 'A.compositeId/B' (type: CompositeID)
    ├─   0.007496s   0ms INFO [x] Creating field move edge 'A.compositeId/B' (type: CompositeID)
    ├─   0.007502s   0ms INFO [ ] Field 'A.name/B' is external, skipping edge creation
    ├─   0.007508s   0ms INFO [x] Creating owned field move edge 'B.__typename/B' (type: String)
    ├─   0.007515s   0ms INFO [x] Creating field move edge 'B.id/B' (type: ID)
    ├─   0.007521s   0ms INFO [x] Creating field move edge 'B.id/B' (type: ID)
    ├─   0.007527s   0ms INFO [x] Creating field move edge 'B.a/B' (type: A)
    ├─   0.007532s   0ms INFO [x] Creating field move edge 'B.a/B' (type: A)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.007627s   0ms INFO Creating self-referencing entity move edge in 'A/A' via key 'id'
    ├─   0.007698s   0ms INFO Creating self-referencing entity move edge in 'A/A' via key 'id'
    ├─   0.007736s   0ms INFO Creating self-referencing entity move edge in 'A/A' via key 'id'
    ├─   0.007801s   0ms INFO Creating self-referencing entity move edge in 'A/A' via key 'id'
    ├─   0.007858s   0ms INFO Creating entity move edge from 'A/A' to 'A/B' via key 'id compositeId { two three }'
    ├─   0.007950s   0ms INFO Creating entity move edge from 'A/A' to 'A/B' via key 'id compositeId { two three }'
    ├─   0.008050s   0ms INFO Creating entity move edge from 'A/A' to 'A/B' via key 'id compositeId { two three }'
    ├─   0.008138s   0ms INFO Creating entity move edge from 'A/A' to 'A/B' via key 'id compositeId { two three }'
    ├─   0.008208s   0ms INFO Creating entity move edge from 'A/B' to 'A/A' via key 'id'
    ├─   0.008289s   0ms INFO Creating entity move edge from 'A/B' to 'A/A' via key 'id'
    ├─   0.008381s   0ms INFO Creating self-referencing entity move edge in 'A/B' via key 'id compositeId { two three }'
    ├─   0.008463s   0ms INFO Creating self-referencing entity move edge in 'A/B' via key 'id compositeId { two three }'
    ├─   0.008545s   0ms INFO Creating self-referencing entity move edge in 'A/B' via key 'id compositeId { two three }'
    ├─   0.008627s   1ms INFO Creating self-referencing entity move edge in 'A/B' via key 'id compositeId { two three }'
    ├─   0.008695s   1ms INFO Creating entity move edge from 'A/B' to 'A/A' via key 'id'
    ├─   0.008766s   1ms INFO Creating entity move edge from 'A/B' to 'A/A' via key 'id'
    ├─   0.008837s   1ms INFO Creating self-referencing entity move edge in 'B/B' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.066277s INFO Starting server on http://localhost:4000
   0.067474s INFO starting 16 workers
   0.067515s INFO Actix runtime found; starting in Actix runtime
   0.067526s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.232240s DEBUG original document: query ping {
  __typename
}

   0.232345s DEBUG normalized document: query ping {__typename}

   0.232375s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.232764s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.305922s DEBUG original document: query {
  b {
    id
    a {
      id
      name
      nameInB
    }
  }
}

   0.306049s DEBUG normalized document: query{b{id a{id name nameInB}}}

   0.306075s DEBUG executable operation: query{b{id a{id name nameInB}}}
┐walk_operation{}
├─   0.306502s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="b", leaf=false}
  ├─   0.306567s   0ms DEBUG Trying to advance to: b{id a{id name nameInB}} through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "b", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "a", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nameInB", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.306642s   0ms DEBUG checking edge Query/b -(b)- B/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="b"}
        ├─   0.306666s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.306694s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(b)- B/b
      ├─   0.306707s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.306726s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "b", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "a", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nameInB", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.306759s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.306766s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.306780s   0ms DEBUG Indirect paths found: 0
    ├─   0.306788s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.306804s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="a", leaf=false}
  ├─   0.306832s   0ms DEBUG Trying to advance to: a{id name nameInB} through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(b)- B/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "a", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nameInB", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b", current_cost=1001}
      ├─   0.306875s   0ms DEBUG checking edge B/b -(a)- A/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b", edge="a"}
        ├─   0.306893s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.306910s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- B/b with edge B/b -(a)- A/b
      ├─   0.306919s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24)" }])
    ┌─┘
    ├─   0.306934s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "a", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "nameInB", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b", current_cost=1001}
      ├─   0.306958s   0ms DEBUG Exploring edge B/b -(🔑🧩{id})- B/b
      ├─   0.306966s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.306973s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.306979s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.306992s   0ms DEBUG Indirect paths found: 0
    ├─   0.307000s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(b)- B/b
  ┌─┘
  ├─   0.307013s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="nameInB", leaf=true}
  ├─   0.307036s   0ms DEBUG Trying to advance to: nameInB through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "nameInB", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
      ├─   0.307065s   0ms DEBUG checking edge A/b -(nameInB🧩{name})- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", edge="nameInB"}
        ├─   0.307089s   0ms DEBUG checking requirements {name} for edge 'A/b -(nameInB🧩{name})- String/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
              ├─   0.307130s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
              ├─   0.307163s   0ms DEBUG Exploring edge A/b -(🔑🧩{compositeId{three two} id})- A/b
              ├─   0.307177s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.307187s   0ms DEBUG Exploring edge A/b -(🔑🧩{id})- A/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", edge="id"}
                ├─   0.307212s   0ms DEBUG checking requirements {id} for edge 'A/b -(🔑🧩{id})- A/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
                      ├─   0.307252s   0ms DEBUG checking edge A/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", edge="id"}
                        ├─   0.307275s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.307297s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b with edge A/b -(id)- ID/b
                      ├─   0.307324s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
                      ├─   0.307383s   0ms DEBUG Exploring edge A/b -(🔑🧩{compositeId{three two} id})- A/b
                      ├─   0.307393s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.307402s   0ms DEBUG Exploring edge A/b -(🔑🧩{id})- A/a
                      ├─   0.307410s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.307420s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.307428s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.307450s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }], [])))
                  ┌─┘
                  ├─   0.307472s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }], [])))
                ┌─┘
                ├─   0.307490s   0ms DEBUG Paths for id
                ├─   0.307502s   0ms DEBUG   Path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(id)- ID/b is valid
                ├─   0.307510s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.307529s   0ms DEBUG path A/b -(id)- ID/b is valid
                ├─   0.307537s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(18)" }]))
              ┌─┘
              ├─   0.307557s   0ms DEBUG Advancing path to A/b -(🔑🧩{id})- A/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(18)" }, root_node="A/b"}
                └─┐create_root_for_path_sequences{root_node="A/b", segments_count=1}
                  ├─   0.307593s   0ms DEBUG Building root query tree node: A/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.307613s   0ms DEBUG Processing edge: A/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.307640s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(🔑🧩{id})- A/a", current_cost=2004}
                ├─   0.307699s   0ms DEBUG checking edge A/a -(name)- String/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(🔑🧩{id})- A/a", edge="name"}
                  ├─   0.307722s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.307743s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(🔑🧩{id})- A/a with edge A/a -(name)- String/a
                ├─   0.307753s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(27) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.307774s   0ms DEBUG Found 1 direct paths to A/b -(🔑🧩{id})- A/a
              ├─   0.307787s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.307794s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(27) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.307813s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(27) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.307831s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(27) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.307847s   0ms DEBUG Paths for name
        ├─   0.307857s   0ms DEBUG   Path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(🔑🧩{id})- A/a -(name)- String/a is valid
        ├─   0.307864s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.307876s   0ms DEBUG path A/b -(🔑🧩{id})- A/a -(name)- String/a is valid
        ├─   0.307883s   0ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(27) --> EdgeIndex(16)" }]))
      ┌─┘
      ├─   0.307901s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b with edge A/b -(nameInB🧩{name})- String/b
      └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(27) --> EdgeIndex(16)" }, root_node="A/b"}
        └─┐create_root_for_path_sequences{root_node="A/b", segments_count=2}
          ├─   0.307928s   0ms DEBUG Building root query tree node: A/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=2}
            ├─   0.307951s   0ms DEBUG Processing edge: A/b -(🔑🧩{id})- A/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=2}
              ├─   0.307967s   0ms DEBUG Processing edge: A/a -(name)- String/a
              └─┐from_path_segment_sequences{current_index=2, total_segments=2}
              ┌─┘
              ├─   0.307991s   0ms DEBUG No subsequent steps (leaf or end of path)
            ┌─┘
            ├─   0.308006s   0ms DEBUG Adding subsequent step as child
          ┌─┘
        ┌─┘
      ┌─┘
      ├─   0.308038s   0ms INFO return=Ok([ { cost: 1005, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(20)" }])
    ┌─┘
    ├─   0.308058s   1ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "nameInB", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
      ├─   0.308082s   0ms DEBUG Exploring edge A/b -(🔑🧩{compositeId{three two} id})- A/b
      ├─   0.308088s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.308094s   0ms DEBUG Exploring edge A/b -(🔑🧩{id})- A/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", edge="id"}
        ├─   0.308114s   0ms DEBUG checking requirements {id} for edge 'A/b -(🔑🧩{id})- A/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
              ├─   0.308150s   0ms DEBUG checking edge A/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", edge="id"}
                ├─   0.308174s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.308193s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b with edge A/b -(id)- ID/b
              ├─   0.308204s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
              ├─   0.308242s   0ms DEBUG Exploring edge A/b -(🔑🧩{compositeId{three two} id})- A/b
              ├─   0.308250s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.308257s   0ms DEBUG Exploring edge A/b -(🔑🧩{id})- A/a
              ├─   0.308265s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.308274s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.308281s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.308303s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }], [])))
          ┌─┘
          ├─   0.308317s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }], [])))
        ┌─┘
        ├─   0.308330s   0ms DEBUG Paths for id
        ├─   0.308337s   0ms DEBUG   Path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(id)- ID/b is valid
        ├─   0.308343s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.308352s   0ms DEBUG path A/b -(id)- ID/b is valid
        ├─   0.308358s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(18)" }]))
      ┌─┘
      ├─   0.308371s   0ms DEBUG Advancing path to A/b -(🔑🧩{id})- A/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(18)" }, root_node="A/b"}
        └─┐create_root_for_path_sequences{root_node="A/b", segments_count=1}
          ├─   0.308392s   0ms DEBUG Building root query tree node: A/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.308404s   0ms DEBUG Processing edge: A/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.308422s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "nameInB", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(🔑🧩{id})- A/a", current_cost=2004}
        ├─   0.308477s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.308496s   0ms DEBUG No direct paths found
      ├─   0.308508s   0ms DEBUG going deeper
      ├─   0.308518s   0ms DEBUG Exploring edge A/a -(🔑🧩{compositeId{three two} id})- A/b
      ├─   0.308523s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.308529s   0ms DEBUG Exploring edge A/a -(🔑🧩{id})- A/a
      ├─   0.308534s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.308542s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.308547s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.308558s   1ms DEBUG Indirect paths found: 0
    ├─   0.308567s   1ms DEBUG advanced: root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.308596s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
      ├─   0.308620s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.308631s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
      ├─   0.308647s   0ms DEBUG Exploring edge A/b -(🔑🧩{compositeId{three two} id})- A/b
      ├─   0.308652s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.308657s   0ms DEBUG Exploring edge A/b -(🔑🧩{id})- A/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", edge="id"}
        ├─   0.308673s   0ms DEBUG checking requirements {id} for edge 'A/b -(🔑🧩{id})- A/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
              ├─   0.308702s   0ms DEBUG checking edge A/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", edge="id"}
                ├─   0.308718s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.308733s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b with edge A/b -(id)- ID/b
              ├─   0.308743s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
              ├─   0.308770s   0ms DEBUG Exploring edge A/b -(🔑🧩{compositeId{three two} id})- A/b
              ├─   0.308777s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.308782s   0ms DEBUG Exploring edge A/b -(🔑🧩{id})- A/a
              ├─   0.308788s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.308795s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.308801s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.308814s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }], [])))
          ┌─┘
          ├─   0.308829s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }], [])))
        ┌─┘
        ├─   0.308842s   0ms DEBUG Paths for id
        ├─   0.308849s   0ms DEBUG   Path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(id)- ID/b is valid
        ├─   0.308855s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.308865s   0ms DEBUG path A/b -(id)- ID/b is valid
        ├─   0.308870s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(18)" }]))
      ┌─┘
      ├─   0.308883s   0ms DEBUG Advancing path to A/b -(🔑🧩{id})- A/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(18)" }, root_node="A/b"}
        └─┐create_root_for_path_sequences{root_node="A/b", segments_count=1}
          ├─   0.308904s   0ms DEBUG Building root query tree node: A/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.308916s   0ms DEBUG Processing edge: A/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.308935s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(🔑🧩{id})- A/a", current_cost=2004}
        ├─   0.308974s   0ms DEBUG checking edge A/a -(name)- String/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(🔑🧩{id})- A/a", edge="name"}
          ├─   0.308991s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.309005s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(🔑🧩{id})- A/a with edge A/a -(name)- String/a
        ├─   0.309012s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(27) --> EdgeIndex(16)" }])
      ┌─┘
      ├─   0.309026s   0ms DEBUG Found 1 direct paths to A/b -(🔑🧩{id})- A/a
      ├─   0.309035s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.309039s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(27) --> EdgeIndex(16)" }])
    ┌─┘
    ├─   0.309052s   0ms DEBUG Indirect paths found: 1
    ├─   0.309059s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.309082s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
      ├─   0.309105s   0ms DEBUG checking edge A/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", edge="id"}
        ├─   0.309119s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.309132s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b with edge A/b -(id)- ID/b
      ├─   0.309140s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.309152s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
      ├─   0.309170s   0ms DEBUG Exploring edge A/b -(🔑🧩{compositeId{three two} id})- A/b
      ├─   0.309175s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.309180s   0ms DEBUG Exploring edge A/b -(🔑🧩{id})- A/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", edge="id"}
        ├─   0.309195s   0ms DEBUG checking requirements {id} for edge 'A/b -(🔑🧩{id})- A/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
              ├─   0.309223s   0ms DEBUG checking edge A/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", edge="id"}
                ├─   0.309239s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.309257s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b with edge A/b -(id)- ID/b
              ├─   0.309265s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b", current_cost=1002}
              ├─   0.309293s   0ms DEBUG Exploring edge A/b -(🔑🧩{compositeId{three two} id})- A/b
              ├─   0.309299s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.309305s   0ms DEBUG Exploring edge A/b -(🔑🧩{id})- A/a
              ├─   0.309311s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.309318s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.309323s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.309337s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }], [])))
          ┌─┘
          ├─   0.309351s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }], [])))
        ┌─┘
        ├─   0.309364s   0ms DEBUG Paths for id
        ├─   0.309371s   0ms DEBUG   Path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(id)- ID/b is valid
        ├─   0.309377s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.309388s   0ms DEBUG path A/b -(id)- ID/b is valid
        ├─   0.309396s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(18)" }]))
      ┌─┘
      ├─   0.309409s   0ms DEBUG Advancing path to A/b -(🔑🧩{id})- A/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(18)" }, root_node="A/b"}
        └─┐create_root_for_path_sequences{root_node="A/b", segments_count=1}
          ├─   0.309430s   0ms DEBUG Building root query tree node: A/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.309443s   0ms DEBUG Processing edge: A/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.309461s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(🔑🧩{id})- A/a", current_cost=2004}
        ├─   0.309522s   0ms DEBUG checking edge A/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(🔑🧩{id})- A/a", edge="id"}
          ├─   0.309541s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.309556s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b -(🔑🧩{id})- A/a with edge A/a -(id)- ID/a
        ├─   0.309564s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(27) --> EdgeIndex(13)" }])
      ┌─┘
      ├─   0.309578s   0ms DEBUG Found 1 direct paths to A/b -(🔑🧩{id})- A/a
      ├─   0.309588s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.309593s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(27) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.309606s   0ms DEBUG Indirect paths found: 1
    ├─   0.309615s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(b)- B/b -(a)- A/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.309640s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(b)- B/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b", current_cost=1001}
      ├─   0.309662s   0ms DEBUG checking edge B/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- B/b", edge="id"}
        ├─   0.309676s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.309689s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- B/b with edge B/b -(id)- ID/b
      ├─   0.309696s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(23)" }])
    ┌─┘
    ├─   0.309709s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- B/b", current_cost=1001}
      ├─   0.309733s   0ms DEBUG Exploring edge B/b -(🔑🧩{id})- B/b
      ├─   0.309738s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.309744s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.309748s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.309759s   0ms DEBUG Indirect paths found: 0
    ├─   0.309765s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(b)- B/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1005, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(20)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.309802s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.309813s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.309823s   0ms DEBUG Processing edge: Query/b -(b)- B/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.309834s   0ms DEBUG Processing edge: B/b -(a)- A/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.309846s   0ms DEBUG Processing edge: A/b -(nameInB🧩{name})- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.309864s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.309874s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.309884s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.309893s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(27) --> EdgeIndex(16)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.309925s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.309935s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.309945s   0ms DEBUG Processing edge: Query/b -(b)- B/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.309956s   0ms DEBUG Processing edge: B/b -(a)- A/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.309967s   0ms DEBUG Processing edge: A/b -(🔑🧩{id})- A/a
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.309979s   0ms DEBUG Processing edge: A/a -(name)- String/a
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.309997s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.310008s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.310018s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.310028s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.310037s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1003, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(24) --> EdgeIndex(18)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.310067s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.310078s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.310088s   0ms DEBUG Processing edge: Query/b -(b)- B/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.310099s   0ms DEBUG Processing edge: B/b -(a)- A/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.310110s   0ms DEBUG Processing edge: A/b -(id)- ID/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.310127s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.310137s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.310147s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.310156s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(11) --> EdgeIndex(23)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.310189s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.310199s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.310209s   0ms DEBUG Processing edge: Query/b -(b)- B/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.310220s   0ms DEBUG Processing edge: B/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.310236s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.310246s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.310256s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=4}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="b", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.310369s   0ms DEBUG adding output field 'b' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="B", field="a", leaf=false, list=true, response_path="b", fetch_path="b"}
              ├─   0.310396s   0ms DEBUG adding output field 'a' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
                └─┐process_requires_field_edge{parent_fetch_step_index=1}
                  └─┐find_satisfiable_key{node="A/b"}
                    └─┐can_satisfy_edge{path="A/b", edge="id compositeId { two three }"}
                      ├─   0.310457s   0ms DEBUG checking requirements {compositeId{three two} id} for edge 'A/b -(🔑🧩{compositeId{three two} id})- A/b'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "compositeId", selections: SelectionSet { items: [SelectionItem::Field { name: "three", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "two", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="A/b", current_cost=0}
                            ├─   0.310507s   0ms DEBUG checking edge A/b -(compositeId)- CompositeID/b
                            └─┐can_satisfy_edge{path="A/b", edge="compositeId"}
                              ├─   0.310527s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.310547s   0ms DEBUG Advancing path A/b with edge A/b -(compositeId)- CompositeID/b
                            ├─   0.310557s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(21)" }])
                          ┌─┘
                          ├─   0.310579s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(21)" }], [MoveRequirement { paths: [ { cost: 1, egdes: "EdgeIndex(21)" }], selection: SelectionItem::Field { name: "three", selections: SelectionSet { items: [] } } }, MoveRequirement { paths: [ { cost: 1, egdes: "EdgeIndex(21)" }], selection: SelectionItem::Field { name: "two", selections: SelectionSet { items: [] } } }])))
                        ┌─┘
                        ├─   0.310601s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(21)" }], [MoveRequirement { paths: [ { cost: 1, egdes: "EdgeIndex(21)" }], selection: SelectionItem::Field { name: "three", selections: SelectionSet { items: [] } } }, MoveRequirement { paths: [ { cost: 1, egdes: "EdgeIndex(21)" }], selection: SelectionItem::Field { name: "two", selections: SelectionSet { items: [] } } }])))
                      ┌─┘
                      ├─   0.310619s   0ms DEBUG Paths for compositeId{three two}
                      ├─   0.310628s   0ms DEBUG   Path A/b -(compositeId)- CompositeID/b is valid
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="A/b", current_cost=0}
                            ├─   0.310664s   0ms DEBUG checking edge A/b -(id)- ID/b
                            └─┐can_satisfy_edge{path="A/b", edge="id"}
                              ├─   0.310682s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.310699s   0ms DEBUG Advancing path A/b with edge A/b -(id)- ID/b
                            ├─   0.310708s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(18)" }])
                          ┌─┘
                          ├─   0.310726s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(18)" }], [])))
                        ┌─┘
                        ├─   0.310741s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(18)" }], [])))
                      ┌─┘
                      ├─   0.310756s   0ms DEBUG Paths for id
                      ├─   0.310764s   0ms DEBUG   Path A/b -(id)- ID/b is valid
                      ├─   0.310771s   0ms DEBUG Found 1 best paths for this leaf requirement
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "two", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="A/b -(compositeId)- CompositeID/b", current_cost=1}
                            ├─   0.310810s   0ms DEBUG checking edge CompositeID/b -(two)- ID/b
                            └─┐can_satisfy_edge{path="A/b -(compositeId)- CompositeID/b", edge="two"}
                              ├─   0.310828s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.310846s   0ms DEBUG Advancing path A/b -(compositeId)- CompositeID/b with edge CompositeID/b -(two)- ID/b
                            ├─   0.310856s   0ms INFO return=Ok([ { cost: 2, egdes: "EdgeIndex(21) --> EdgeIndex(8)" }])
                          ┌─┘
                          ├─   0.310874s   0ms INFO return=Ok(Some(([ { cost: 2, egdes: "EdgeIndex(21) --> EdgeIndex(8)" }], [])))
                        ┌─┘
                        ├─   0.310890s   0ms INFO return=Ok(Some(([ { cost: 2, egdes: "EdgeIndex(21) --> EdgeIndex(8)" }], [])))
                      ┌─┘
                      ├─   0.310905s   0ms DEBUG Paths for two
                      ├─   0.310913s   0ms DEBUG   Path A/b -(compositeId)- CompositeID/b -(two)- ID/b is valid
                      ├─   0.310920s   0ms DEBUG Found 1 best paths for this leaf requirement
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "three", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="A/b -(compositeId)- CompositeID/b", current_cost=1}
                            ├─   0.310957s   0ms DEBUG checking edge CompositeID/b -(three)- ID/b
                            └─┐can_satisfy_edge{path="A/b -(compositeId)- CompositeID/b", edge="three"}
                              ├─   0.310976s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.310993s   0ms DEBUG Advancing path A/b -(compositeId)- CompositeID/b with edge CompositeID/b -(three)- ID/b
                            ├─   0.311002s   0ms INFO return=Ok([ { cost: 2, egdes: "EdgeIndex(21) --> EdgeIndex(7)" }])
                          ┌─┘
                          ├─   0.311020s   0ms INFO return=Ok(Some(([ { cost: 2, egdes: "EdgeIndex(21) --> EdgeIndex(7)" }], [])))
                        ┌─┘
                        ├─   0.311036s   0ms INFO return=Ok(Some(([ { cost: 2, egdes: "EdgeIndex(21) --> EdgeIndex(7)" }], [])))
                      ┌─┘
                      ├─   0.311051s   0ms DEBUG Paths for three
                      ├─   0.311059s   0ms DEBUG   Path A/b -(compositeId)- CompositeID/b -(three)- ID/b is valid
                      ├─   0.311066s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.311076s   0ms DEBUG path A/b -(id)- ID/b is valid
                      ├─   0.311084s   0ms DEBUG path A/b -(compositeId)- CompositeID/b -(two)- ID/b is valid
                      ├─   0.311091s   0ms DEBUG path A/b -(compositeId)- CompositeID/b -(three)- ID/b is valid
                      ├─   0.311098s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(18)" },  { cost: 2, egdes: "EdgeIndex(21) --> EdgeIndex(8)" },  { cost: 2, egdes: "EdgeIndex(21) --> EdgeIndex(7)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.311124s   0ms DEBUG Key to re-enter: {compositeId{three two} id}
                  ├─   0.311133s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.311142s   0ms DEBUG created a new fetch step [2] subgraph(b) type(A) requirement({name}) in children of 1
                  ├─   0.311151s   0ms DEBUG Adding {name} to fetch([2]).input
                  ├─   0.311161s   0ms DEBUG Adding {compositeId{three two} id} to fetch([2]).input
                  ├─   0.311169s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.311176s   0ms DEBUG Adding {compositeId{three two} id} to fetch([3]).input
                  └─┐connect{parent=1, child=3}
                  ┌─┘
                  ├─   0.311205s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                      └─┐process_entity_move_edge{edge="A/b -(🔑🧩{id})- A/a", parent_fetch_step_index=3}
                        ├─   0.311245s   0ms DEBUG created a new fetch step [4] subgraph(a) type(A) requirement() key({id}) in children of 3
                        ├─   0.311253s   0ms DEBUG adding input requirement '{id}' to fetch step [4]
                        ├─   0.311261s   0ms DEBUG adding __typename field to output for type 'A'
                        ├─   0.311270s   0ms DEBUG connecting fetch step to parent [3] -> [4]
                        └─┐connect{parent=3, child=4}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3, requiring_fetch_step_index=4}
                              └─┐process_plain_field_edge{parent_fetch_step_index=3, requiring_fetch_step_index=4, type_name="A", field="id", leaf=true, list=false, response_path="b.a.@", fetch_path=""}
                                ├─   0.311336s   0ms DEBUG connecting parent fetch step [3] to requiring fetch step [4]
                                └─┐connect{parent=3, child=4}
                                ┌─┘
                                ├─   0.311363s   0ms DEBUG adding output field 'id' to fetch step [3]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3, requiring_fetch_step_index=4}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=3, child=4}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                          └─┐process_plain_field_edge{parent_fetch_step_index=4, type_name="A", field="name", leaf=true, list=false, response_path="b.a.@", fetch_path=""}
                            ├─   0.311463s   0ms DEBUG adding output field 'name' to fetch step [4]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.311526s   1ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=4, child=2}
                  ┌─┘
                  ├─   0.311553s   1ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
                └─┐process_entity_move_edge{edge="A/b -(🔑🧩{id})- A/a", parent_fetch_step_index=1}
                  ├─   0.311593s   0ms DEBUG created a new fetch step [5] subgraph(a) type(A) requirement() key({id}) in children of 1
                  ├─   0.311599s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                  ├─   0.311606s   0ms DEBUG adding __typename field to output for type 'A'
                  ├─   0.311613s   0ms DEBUG connecting fetch step to parent [1] -> [5]
                  └─┐connect{parent=1, child=5}
                  ┌─┘
                  └─┐process_requirements_for_fetch_steps{count=1}
                    └─┐process_noop_edge{}
                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=5}
                        └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=5, type_name="A", field="id", leaf=true, list=false, response_path="b.a.@", fetch_path="b.a.@"}
                          ├─   0.311698s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [5]
                          └─┐connect{parent=1, child=5}
                          ┌─┘
                          ├─   0.311727s   0ms DEBUG adding output field 'id' to fetch step [1]
                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=5}
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                    └─┐connect{parent=1, child=5}
                    ┌─┘
                  ┌─┘
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                    └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="A", field="name", leaf=true, list=false, response_path="b.a.@", fetch_path=""}
                      ├─   0.311816s   0ms DEBUG adding output field 'name' to fetch step [5]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="A", field="id", leaf=true, list=false, response_path="b.a.@", fetch_path="b.a.@"}
                  ├─   0.311957s   0ms DEBUG adding output field 'id' to fetch step [1]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="B", field="id", leaf=true, list=false, response_path="b", fetch_path="b"}
              ├─   0.312013s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.312074s   1ms DEBUG Done
├─   0.312081s   1ms DEBUG found roots
├─   0.312085s   1ms DEBUG print graph
├─   0.312090s   1ms DEBUG Nodes:
│ [1] Query/b {} → {b{a{__typename compositeId{three two} id} id}} at $.
│ [2] A/b {__typename name compositeId{three two} id} → {nameInB} at $.b.a.@
│ [3] A/b {__typename compositeId{three two} id} → {__typename id} at $.b.a.@
│ [4] A/a {__typename id} → {name} at $.b.a.@
│ [5] A/a {__typename id} → {name} at $.b.a.@
│ 
│ Tree:
│ [1]
│   [3]
│     [4]
│       [2]
│   [5]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.312153s   0ms DEBUG optimization found: merge parent [1] with child [3]
    └─┐perform_fetch_step_merge{}
      ├─   0.312167s   0ms DEBUG merging fetch steps [1] and [3]
      └─┐connect{parent=1, child=4}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.312214s   0ms DEBUG Found optimization: 4 <- 5
    └─┐perform_fetch_step_merge{}
      ├─   0.312226s   0ms DEBUG merging fetch steps [4] and [5]
      └─┐connect{parent=1, child=4}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="b"}
      └─┐execute{subgraph_name="b"}
        ├─   0.312649s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.312982s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.313467s   1ms DEBUG connected to 127.0.0.1:4200
        ├─   0.318284s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"b": Object {"a": Array [Object {"__typename": String("A"), "compositeId": Object {"three": String("a.1.compositeId.three"), "two": String("a.1.compositeId.two")}, "id": String("1")}], "id": String("100")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("A"), "compositeId": Object {"three": String("a.1.compositeId.three"), "two": String("a.1.compositeId.two")}, "id": String("1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "A", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("A"), "compositeId": Object {"three": String("a.1.compositeId.three"), "two": String("a.1.compositeId.two")}, "id": String("1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="A", type_condition="A"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("A"), "compositeId": Object {"three": String("a.1.compositeId.three"), "two": String("a.1.compositeId.two")}, "id": String("1")}}
          └─┐project_requires{requires_selections=[], entity=String("A")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.318834s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.322358s   3ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"b": Object {"a": Array [Object {"__typename": String("A"), "compositeId": Object {"three": String("a.1.compositeId.three"), "two": String("a.1.compositeId.two")}, "id": String("1"), "name": String("a.1")}], "id": String("100")}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("A"), "compositeId": Object {"three": String("a.1.compositeId.three"), "two": String("a.1.compositeId.two")}, "id": String("1"), "name": String("a.1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "A", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "compositeId", selections: SelectionSet { items: [SelectionItem::Field { name: "three", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "two", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("A"), "compositeId": Object {"three": String("a.1.compositeId.three"), "two": String("a.1.compositeId.two")}, "id": String("1"), "name": String("a.1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="A", type_condition="A"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "compositeId", selections: SelectionSet { items: [SelectionItem::Field { name: "three", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "two", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("A"), "compositeId": Object {"three": String("a.1.compositeId.three"), "two": String("a.1.compositeId.two")}, "id": String("1"), "name": String("a.1")}}
          └─┐project_requires{requires_selections=[], entity=String("A")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("a.1")}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "three", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "two", selections: SelectionSet { items: [] } }], entity=Object {"three": String("a.1.compositeId.three"), "two": String("a.1.compositeId.two")}}
            └─┐project_requires{requires_selections=[], entity=String("a.1.compositeId.three")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("a.1.compositeId.two")}
            ┌─┘
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.322790s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.324188s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.324424s DEBUG execution result: ExecutionResult { data: Some(Object {"b": Object {"id": String("100"), "a": Array [Object {"id": String("1"), "name": String("a.1"), "nameInB": String("b.a.nameInB a.1")}]}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{b{a{__typename compositeId{three two} id} id}}")}, Object {"kind": String("Flatten"), "path": Array [String("b"), String("a"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on A{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("A"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("b"), String("a"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on A{nameInB}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("A"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("name")}, Object {"kind": String("Field"), "name": String("compositeId"), "selections": Array [Object {"kind": String("Field"), "name": String("three")}, Object {"kind": String("Field"), "name": String("two")}]}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
