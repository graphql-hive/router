generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.11s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="User"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
  └─┐build_input_object_type{name="UsersFilter"}
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006096s   0ms DEBUG Building graph for supergraph with 15 definitions
  └─┐build_root_nodes{}
    ├─   0.006134s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006183s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006195s   0ms INFO [ ] Field 'Query.usersInB/A' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006201s   0ms INFO [x] Creating field move edge 'Query.usersInA/A' (type: User)
    ├─   0.006209s   0ms INFO [x] Creating field move edge 'Query.usersInA/A' (type: User)
    ├─   0.006217s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006224s   0ms INFO [x] Creating field move edge 'Query.usersInB/B' (type: User)
    ├─   0.006230s   0ms INFO [x] Creating field move edge 'Query.usersInB/B' (type: User)
    ├─   0.006236s   0ms INFO [ ] Field 'Query.usersInA/B' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.006242s   0ms INFO [x] Creating owned field move edge 'User.__typename/A' (type: String)
    ├─   0.006248s   0ms INFO [x] Creating field move edge 'User.name/A' (type: String)
    ├─   0.006254s   0ms INFO [x] Creating field move edge 'User.name/A' (type: String)
    ├─   0.006260s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006268s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006274s   0ms INFO [x] Creating owned field move edge 'User.__typename/B' (type: String)
    ├─   0.006280s   0ms INFO [x] Creating field move edge 'User.name/B' (type: String)
    ├─   0.006286s   0ms INFO [x] Creating field move edge 'User.name/B' (type: String)
    ├─   0.006291s   0ms INFO [x] Creating field move edge 'User.id/B' (type: ID)
    ├─   0.006297s   0ms INFO [x] Creating field move edge 'User.id/B' (type: ID)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006407s   0ms INFO Creating self-referencing entity move edge in 'User/A' via key 'id'
    ├─   0.006484s   0ms INFO Creating entity move edge from 'User/A' to 'User/B' via key 'id'
    ├─   0.006526s   0ms INFO Creating entity move edge from 'User/B' to 'User/A' via key 'id'
    ├─   0.006566s   0ms INFO Creating self-referencing entity move edge in 'User/B' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.062308s INFO Starting server on http://localhost:4000
   0.063207s INFO starting 16 workers
   0.063246s INFO Actix runtime found; starting in Actix runtime
   0.063254s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.308157s DEBUG original document: query ping {
  __typename
}

   0.308264s DEBUG normalized document: query ping {__typename}

   0.308292s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.308678s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.384663s DEBUG original document: query {
  usersInA(filter: {first: 1}) {
    id
  }
}

   0.384774s DEBUG normalized document: query{usersInA(filter: {"first": 1}){id}}

   0.384814s DEBUG executable operation: query{usersInA(filter: {"first": 1}){id}}
┐walk_operation{}
├─   0.385325s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="usersInA", leaf=false}
  ├─   0.385374s   0ms DEBUG Trying to advance to: usersInA(filter: {"first": 1}){id} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "usersInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"filter": Object({"first": Int(1)})} }), skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.385430s   0ms DEBUG checking edge Query/a -(usersInA)- User/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="usersInA"}
        ├─   0.385453s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.385479s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(usersInA)- User/a
      ├─   0.385491s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.385514s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "usersInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"filter": Object({"first": Int(1)})} }), skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.385546s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.385553s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.385565s   0ms DEBUG Indirect paths found: 0
    ├─   0.385573s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "usersInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"filter": Object({"first": Int(1)})} }), skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.385602s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.385613s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "usersInA", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"filter": Object({"first": Int(1)})} }), skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.385630s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.385635s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.385646s   0ms DEBUG Indirect paths found: 0
    ├─   0.385653s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.385670s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.385691s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(usersInA)- User/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(usersInA)- User/a", current_cost=1001}
      ├─   0.385715s   0ms DEBUG checking edge User/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(usersInA)- User/a", edge="id"}
        ├─   0.385731s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.385746s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(usersInA)- User/a with edge User/a -(id)- ID/a
      ├─   0.385754s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.385767s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(usersInA)- User/a", current_cost=1001}
      ├─   0.385787s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(usersInA)- User/a", edge="id"}
        ├─   0.385806s   0ms DEBUG checking requirements {id} for edge 'User/a -(🔑🧩{id})- User/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(usersInA)- User/a", current_cost=1001}
              ├─   0.385844s   0ms DEBUG checking edge User/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(usersInA)- User/a", edge="id"}
                ├─   0.385862s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.385879s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(usersInA)- User/a with edge User/a -(id)- ID/a
              ├─   0.385888s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(usersInA)- User/a", current_cost=1001}
              ├─   0.385916s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/b
              ├─   0.385925s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.385934s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
              ├─   0.385941s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.385948s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.385954s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.385971s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.385988s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.386002s   0ms DEBUG Paths for id
        ├─   0.386011s   0ms DEBUG   Path root(Query) -(a)- Query/a -(usersInA)- User/a -(id)- ID/a is valid
        ├─   0.386018s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.386052s   0ms DEBUG path User/a -(id)- ID/a is valid
        ├─   0.386068s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.386088s   0ms DEBUG Advancing path to User/a -(🔑🧩{id})- User/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="User/a"}
        └─┐create_root_for_path_sequences{root_node="User/a", segments_count=1}
          ├─   0.386118s   0ms DEBUG Building root query tree node: User/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.386134s   0ms DEBUG Processing edge: User/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.386156s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(usersInA)- User/a -(🔑🧩{id})- User/b", current_cost=2003}
        ├─   0.386219s   0ms DEBUG checking edge User/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(usersInA)- User/a -(🔑🧩{id})- User/b", edge="id"}
          ├─   0.386247s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.386266s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(usersInA)- User/a -(🔑🧩{id})- User/b with edge User/b -(id)- ID/b
        ├─   0.386277s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(13) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.386294s   0ms DEBUG Found 1 direct paths to User/a -(🔑🧩{id})- User/b
      ├─   0.386304s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
      ├─   0.386309s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.386317s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.386322s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(13) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.386336s   0ms DEBUG Indirect paths found: 1
    ├─   0.386346s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(usersInA)- User/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(3) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.386389s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.386401s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.386413s   0ms DEBUG Processing edge: Query/a -(usersInA)- User/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.386426s   0ms DEBUG Processing edge: User/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.386444s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.386456s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.386467s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="usersInA", arguments="filter: {\"first\": 1}", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.386593s   0ms DEBUG adding output field 'usersInA' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="usersInA.@", fetch_path="usersInA.@"}
              ├─   0.386627s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.386694s   0ms DEBUG Done
├─   0.386702s   0ms DEBUG found roots
├─   0.386707s   0ms DEBUG print graph
├─   0.386712s   0ms DEBUG Nodes:
│ [1] Query/a {} → {usersInA(filter: {"first": 1}){id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.387134s   0ms DEBUG starting new connection: http://localhost:4200/
      ├─   0.387468s   0ms DEBUG connecting to 127.0.0.1:4200
      ├─   0.387853s   0ms DEBUG connected to 127.0.0.1:4200
      ├─   0.392918s   6ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.393169s DEBUG execution result: ExecutionResult { data: Some(Null), errors: Some([GraphQLError { message: "Syntax Error: Expected Name, found String \"first\".", locations: Some([GraphQLErrorLocation { line: 1, column: 20 }]), path: None, extensions: Some({"code": String("GRAPHQL_PARSE_FAILED")}) }]), extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{usersInA(filter: {\"first\": 1}){id}}")}}}) }
   0.406298s DEBUG original document: query {
  usersInA(filter: {first: 1, offset: 2}) {
    id
  }
}

   0.406429s DEBUG normalized document: query{usersInA(filter: {"first": 1, "offset": 2}){id}}

   0.406463s DEBUG executable operation: query{usersInA(filter: {"first": 1, "offset": 2}){id}}
   0.409356s DEBUG original document: query {
  usersInB(filter: {first: 1, offset: 2}) {
    id
  }
}

   0.409419s DEBUG normalized document: query{usersInB(filter: {"first": 1, "offset": 2}){id}}

   0.409433s DEBUG executable operation: query{usersInB(filter: {"first": 1, "offset": 2}){id}}
