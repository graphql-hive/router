generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.12s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Post"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006163s   0ms DEBUG Building graph for supergraph with 14 definitions
  └─┐build_root_nodes{}
    ├─   0.006220s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006309s   0ms INFO [x] Creating owned field move edge 'Post.__typename/A' (type: String)
    ├─   0.006324s   0ms INFO [ ] Field 'Post.createdAt/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006331s   0ms INFO [x] Creating field move edge 'Post.id/A' (type: ID)
    ├─   0.006339s   0ms INFO [x] Creating field move edge 'Post.id/A' (type: ID)
    ├─   0.006345s   0ms INFO [x] Creating owned field move edge 'Post.__typename/B' (type: String)
    ├─   0.006354s   0ms INFO [x] Creating field move edge 'Post.createdAt/B' (type: String)
    ├─   0.006360s   0ms INFO [x] Creating field move edge 'Post.createdAt/B' (type: String)
    ├─   0.006367s   0ms INFO [x] Creating field move edge 'Post.id/B' (type: ID)
    ├─   0.006373s   0ms INFO [x] Creating field move edge 'Post.id/B' (type: ID)
    ├─   0.006379s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006386s   0ms INFO [ ] Field 'Query.bFeed/A' does is not available in the subgraph, skipping edge creation (type: Post)
    ├─   0.006391s   0ms INFO [x] Creating field move edge 'Query.feed/A' (type: Post)
    ├─   0.006397s   0ms INFO [x] Creating field move edge 'Query.feed/A' (type: Post)
    ├─   0.006403s   0ms INFO [x] Creating field move edge 'Query.aFeed/A' (type: Post)
    ├─   0.006410s   0ms INFO [x] Creating field move edge 'Query.aFeed/A' (type: Post)
    ├─   0.006416s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006423s   0ms INFO [x] Creating field move edge 'Query.bFeed/B' (type: Post)
    ├─   0.006429s   0ms INFO [x] Creating field move edge 'Query.bFeed/B' (type: Post)
    ├─   0.006434s   0ms INFO [x] Creating field move edge 'Query.feed/B' (type: Post)
    ├─   0.006440s   0ms INFO [x] Creating field move edge 'Query.feed/B' (type: Post)
    ├─   0.006445s   0ms INFO [ ] Field 'Query.aFeed/B' does is not available in the subgraph, skipping edge creation (type: Post)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006554s   0ms INFO Creating self-referencing entity move edge in 'Post/A' via key 'id'
    ├─   0.006631s   0ms INFO Creating entity move edge from 'Post/A' to 'Post/B' via key 'id'
    ├─   0.006671s   0ms INFO Creating entity move edge from 'Post/B' to 'Post/A' via key 'id'
    ├─   0.006704s   0ms INFO Creating self-referencing entity move edge in 'Post/B' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.067568s INFO Starting server on http://localhost:4000
   0.068816s INFO starting 16 workers
   0.068905s INFO Actix runtime found; starting in Actix runtime
   0.068918s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.329465s DEBUG original document: query ping {
  __typename
}

   0.329578s DEBUG normalized document: query ping {__typename}

   0.329597s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.330001s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.409069s DEBUG original document: query {
  feed {
    createdAt
  }
}

   0.409182s DEBUG normalized document: query{feed{createdAt}}

   0.409195s DEBUG executable operation: query{feed{createdAt}}
┐walk_operation{}
├─   0.409608s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="feed", leaf=false}
  ├─   0.409661s   0ms DEBUG Trying to advance to: feed{createdAt} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "createdAt", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.409740s   0ms DEBUG checking edge Query/a -(feed)- Post/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="feed"}
        ├─   0.409765s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.409790s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(feed)- Post/a
      ├─   0.409802s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.409839s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "createdAt", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.409881s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.409888s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.409901s   0ms DEBUG Indirect paths found: 0
    ├─   0.409909s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "createdAt", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.409938s   0ms DEBUG checking edge Query/b -(feed)- Post/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="feed"}
        ├─   0.409963s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.409977s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(feed)- Post/b
      ├─   0.409985s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.409998s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "feed", selections: SelectionSet { items: [SelectionItem::Field { name: "createdAt", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.410017s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.410023s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.410034s   0ms DEBUG Indirect paths found: 0
    ├─   0.410040s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.410055s   0ms DEBUG Found 2 paths
┌─┘
└─┐process_field{field_name="createdAt", leaf=true}
  ├─   0.410077s   0ms DEBUG Trying to advance to: createdAt through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(feed)- Post/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "createdAt", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(feed)- Post/a", current_cost=1001}
      ├─   0.410119s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.410137s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "createdAt", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(feed)- Post/a", current_cost=1001}
      ├─   0.410163s   0ms DEBUG Exploring edge Post/a -(🔑🧩{id})- Post/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(feed)- Post/a", edge="id"}
        ├─   0.410182s   0ms DEBUG checking requirements {id} for edge 'Post/a -(🔑🧩{id})- Post/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(feed)- Post/a", current_cost=1001}
              ├─   0.410221s   0ms DEBUG checking edge Post/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(feed)- Post/a", edge="id"}
                ├─   0.410241s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.410259s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(feed)- Post/a with edge Post/a -(id)- ID/a
              ├─   0.410268s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(8) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(feed)- Post/a", current_cost=1001}
              ├─   0.410298s   0ms DEBUG Exploring edge Post/a -(🔑🧩{id})- Post/b
              ├─   0.410307s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.410316s   0ms DEBUG Exploring edge Post/a -(🔑🧩{id})- Post/a
              ├─   0.410323s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.410331s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.410337s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.410354s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(8) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.410370s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(8) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.410384s   0ms DEBUG Paths for id
        ├─   0.410393s   0ms DEBUG   Path root(Query) -(a)- Query/a -(feed)- Post/a -(id)- ID/a is valid
        ├─   0.410400s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.410417s   0ms DEBUG path Post/a -(id)- ID/a is valid
        ├─   0.410422s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.410438s   0ms DEBUG Advancing path to Post/a -(🔑🧩{id})- Post/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="Post/a"}
        └─┐create_root_for_path_sequences{root_node="Post/a", segments_count=1}
          ├─   0.410465s   0ms DEBUG Building root query tree node: Post/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.410481s   0ms DEBUG Processing edge: Post/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.410524s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "createdAt", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(feed)- Post/a -(🔑🧩{id})- Post/b", current_cost=2003}
        ├─   0.410576s   0ms DEBUG checking edge Post/b -(createdAt)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(feed)- Post/a -(🔑🧩{id})- Post/b", edge="createdAt"}
          ├─   0.410595s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.410611s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(feed)- Post/a -(🔑🧩{id})- Post/b with edge Post/b -(createdAt)- String/b
        ├─   0.410620s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(8) --> EdgeIndex(14) --> EdgeIndex(5)" }])
      ┌─┘
      ├─   0.410637s   0ms DEBUG Found 1 direct paths to Post/a -(🔑🧩{id})- Post/b
      ├─   0.410646s   0ms DEBUG Exploring edge Post/a -(🔑🧩{id})- Post/a
      ├─   0.410652s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.410659s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.410664s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(8) --> EdgeIndex(14) --> EdgeIndex(5)" }])
    ┌─┘
    ├─   0.410678s   0ms DEBUG Indirect paths found: 1
    ├─   0.410686s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(feed)- Post/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b -(feed)- Post/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "createdAt", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(feed)- Post/b", current_cost=1001}
      ├─   0.410716s   0ms DEBUG checking edge Post/b -(createdAt)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(feed)- Post/b", edge="createdAt"}
        ├─   0.410732s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.410746s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(feed)- Post/b with edge Post/b -(createdAt)- String/b
      ├─   0.410752s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(5)" }])
    ┌─┘
    ├─   0.410765s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "createdAt", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(feed)- Post/b", current_cost=1001}
      ├─   0.410785s   0ms DEBUG Exploring edge Post/b -(🔑🧩{id})- Post/b
      ├─   0.410791s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.410796s   0ms DEBUG Exploring edge Post/b -(🔑🧩{id})- Post/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(feed)- Post/b", edge="id"}
        ├─   0.410812s   0ms DEBUG checking requirements {id} for edge 'Post/b -(🔑🧩{id})- Post/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(feed)- Post/b", current_cost=1001}
              ├─   0.410843s   0ms DEBUG checking edge Post/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(feed)- Post/b", edge="id"}
                ├─   0.410859s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.410876s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(feed)- Post/b with edge Post/b -(id)- ID/b
              ├─   0.410885s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(feed)- Post/b", current_cost=1001}
              ├─   0.410912s   0ms DEBUG Exploring edge Post/b -(🔑🧩{id})- Post/b
              ├─   0.410919s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.410925s   0ms DEBUG Exploring edge Post/b -(🔑🧩{id})- Post/a
              ├─   0.410932s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.410939s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.410945s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.410960s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.410975s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }], [])))
        ┌─┘
        ├─   0.410989s   0ms DEBUG Paths for id
        ├─   0.410996s   0ms DEBUG   Path root(Query) -(b)- Query/b -(feed)- Post/b -(id)- ID/b is valid
        ├─   0.411002s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.411013s   0ms DEBUG path Post/b -(id)- ID/b is valid
        ├─   0.411019s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.411033s   0ms DEBUG Advancing path to Post/b -(🔑🧩{id})- Post/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Post/b"}
        └─┐create_root_for_path_sequences{root_node="Post/b", segments_count=1}
          ├─   0.411056s   0ms DEBUG Building root query tree node: Post/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.411070s   0ms DEBUG Processing edge: Post/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.411090s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "createdAt", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(feed)- Post/b -(🔑🧩{id})- Post/a", current_cost=2003}
        ├─   0.411130s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.411144s   0ms DEBUG No direct paths found
      ├─   0.411154s   0ms DEBUG going deeper
      ├─   0.411162s   0ms DEBUG Exploring edge Post/a -(🔑🧩{id})- Post/b
      ├─   0.411167s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.411173s   0ms DEBUG Exploring edge Post/a -(🔑🧩{id})- Post/a
      ├─   0.411178s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.411186s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.411191s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.411203s   0ms DEBUG Indirect paths found: 0
    ├─   0.411210s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(feed)- Post/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(5)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.411252s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.411264s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.411275s   0ms DEBUG Processing edge: Query/b -(feed)- Post/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.411287s   0ms DEBUG Processing edge: Post/b -(createdAt)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.411305s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.411317s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.411327s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="feed", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.411443s   0ms DEBUG adding output field 'feed' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Post", field="createdAt", leaf=true, list=false, response_path="feed.@", fetch_path="feed.@"}
              ├─   0.411475s   0ms DEBUG adding output field 'createdAt' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.411540s   0ms DEBUG Done
├─   0.411548s   0ms DEBUG found roots
├─   0.411553s   0ms DEBUG print graph
├─   0.411558s   0ms DEBUG Nodes:
│ [1] Query/b {} → {feed{createdAt}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="b"}
    └─┐execute{subgraph_name="b"}
      ├─   0.411978s   0ms DEBUG starting new connection: http://localhost:4200/
      ├─   0.412415s   0ms DEBUG connecting to 127.0.0.1:4200
      ├─   0.412744s   1ms DEBUG connected to 127.0.0.1:4200
      ├─   0.418173s   6ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.418452s DEBUG execution result: ExecutionResult { data: Some(Object {"feed": Array [Object {"createdAt": String("p1-createdAt")}, Object {"createdAt": String("p2-createdAt")}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{feed{createdAt}}")}}}) }
   0.425772s DEBUG original document: query {
  aFeed {
    createdAt
  }
  bFeed {
    createdAt
  }
}

   0.425895s DEBUG normalized document: query{aFeed{createdAt} bFeed{createdAt}}

   0.425909s DEBUG executable operation: query{aFeed{createdAt} bFeed{createdAt}}
┐walk_operation{}
├─   0.426298s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="bFeed", leaf=false}
  ├─   0.426351s   0ms DEBUG Trying to advance to: bFeed{createdAt} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "bFeed", selections: SelectionSet { items: [SelectionItem::Field { name: "createdAt", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.426422s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.426450s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "bFeed", selections: SelectionSet { items: [SelectionItem::Field { name: "createdAt", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.426501s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.426520s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.426538s   0ms DEBUG Indirect paths found: 0
    ├─   0.426552s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "bFeed", selections: SelectionSet { items: [SelectionItem::Field { name: "createdAt", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.426593s   0ms DEBUG checking edge Query/b -(bFeed)- Post/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="bFeed"}
        ├─   0.426614s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.426628s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(bFeed)- Post/b
      ├─   0.426639s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.426654s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "bFeed", selections: SelectionSet { items: [SelectionItem::Field { name: "createdAt", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.426676s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.426682s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.426693s   0ms DEBUG Indirect paths found: 0
    ├─   0.426700s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.426713s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="createdAt", leaf=true}
  ├─   0.426734s   0ms DEBUG Trying to advance to: createdAt through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(bFeed)- Post/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "createdAt", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(bFeed)- Post/b", current_cost=1001}
      ├─   0.426759s   0ms DEBUG checking edge Post/b -(createdAt)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(bFeed)- Post/b", edge="createdAt"}
        ├─   0.426775s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.426789s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(bFeed)- Post/b with edge Post/b -(createdAt)- String/b
      ├─   0.426797s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(11) --> EdgeIndex(5)" }])
    ┌─┘
    ├─   0.426810s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "createdAt", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(bFeed)- Post/b", current_cost=1001}
      ├─   0.426829s   0ms DEBUG Exploring edge Post/b -(🔑🧩{id})- Post/b
      ├─   0.426836s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.426842s   0ms DEBUG Exploring edge Post/b -(🔑🧩{id})- Post/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(bFeed)- Post/b", edge="id"}
        ├─   0.426862s   0ms DEBUG checking requirements {id} for edge 'Post/b -(🔑🧩{id})- Post/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(bFeed)- Post/b", current_cost=1001}
              ├─   0.426909s   0ms DEBUG checking edge Post/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(bFeed)- Post/b", edge="id"}
                ├─   0.426927s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.426943s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(bFeed)- Post/b with edge Post/b -(id)- ID/b
              ├─   0.426952s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(11) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(bFeed)- Post/b", current_cost=1001}
              ├─   0.426983s   0ms DEBUG Exploring edge Post/b -(🔑🧩{id})- Post/b
              ├─   0.426990s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.426997s   0ms DEBUG Exploring edge Post/b -(🔑🧩{id})- Post/a
              ├─   0.427004s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.427013s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.427019s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.427035s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(11) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.427052s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(11) --> EdgeIndex(6)" }], [])))
        ┌─┘
        ├─   0.427066s   0ms DEBUG Paths for id
        ├─   0.427075s   0ms DEBUG   Path root(Query) -(b)- Query/b -(bFeed)- Post/b -(id)- ID/b is valid
        ├─   0.427082s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.427098s   0ms DEBUG path Post/b -(id)- ID/b is valid
        ├─   0.427104s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.427119s   0ms DEBUG Advancing path to Post/b -(🔑🧩{id})- Post/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="Post/b"}
        └─┐create_root_for_path_sequences{root_node="Post/b", segments_count=1}
          ├─   0.427145s   0ms DEBUG Building root query tree node: Post/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.427161s   0ms DEBUG Processing edge: Post/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.427208s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "createdAt", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(bFeed)- Post/b -(🔑🧩{id})- Post/a", current_cost=2003}
        ├─   0.427261s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.427275s   0ms DEBUG No direct paths found
      ├─   0.427285s   0ms DEBUG going deeper
      ├─   0.427294s   0ms DEBUG Exploring edge Post/a -(🔑🧩{id})- Post/b
      ├─   0.427299s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.427305s   0ms DEBUG Exploring edge Post/a -(🔑🧩{id})- Post/a
      ├─   0.427311s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.427320s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.427325s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.427337s   0ms DEBUG Indirect paths found: 0
    ├─   0.427347s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(bFeed)- Post/b
  ┌─┘
┌─┘
└─┐process_field{field_name="aFeed", leaf=false}
  ├─   0.427374s   0ms DEBUG Trying to advance to: aFeed{createdAt} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "aFeed", selections: SelectionSet { items: [SelectionItem::Field { name: "createdAt", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.427399s   0ms DEBUG checking edge Query/a -(aFeed)- Post/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="aFeed"}
        ├─   0.427415s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.427429s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(aFeed)- Post/a
      ├─   0.427437s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.427450s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "aFeed", selections: SelectionSet { items: [SelectionItem::Field { name: "createdAt", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.427469s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.427474s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.427485s   0ms DEBUG Indirect paths found: 0
    ├─   0.427492s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "aFeed", selections: SelectionSet { items: [SelectionItem::Field { name: "createdAt", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.427519s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.427530s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "aFeed", selections: SelectionSet { items: [SelectionItem::Field { name: "createdAt", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.427545s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.427550s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.427561s   0ms DEBUG Indirect paths found: 0
    ├─   0.427567s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.427579s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="createdAt", leaf=true}
  ├─   0.427597s   0ms DEBUG Trying to advance to: createdAt through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(aFeed)- Post/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "createdAt", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(aFeed)- Post/a", current_cost=1001}
      ├─   0.427620s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.427632s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "createdAt", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(aFeed)- Post/a", current_cost=1001}
      ├─   0.427648s   0ms DEBUG Exploring edge Post/a -(🔑🧩{id})- Post/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(aFeed)- Post/a", edge="id"}
        ├─   0.427692s   0ms DEBUG checking requirements {id} for edge 'Post/a -(🔑🧩{id})- Post/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(aFeed)- Post/a", current_cost=1001}
              ├─   0.427736s   0ms DEBUG checking edge Post/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(aFeed)- Post/a", edge="id"}
                ├─   0.427753s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.427773s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(aFeed)- Post/a with edge Post/a -(id)- ID/a
              ├─   0.427782s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(9) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(aFeed)- Post/a", current_cost=1001}
              ├─   0.427812s   0ms DEBUG Exploring edge Post/a -(🔑🧩{id})- Post/b
              ├─   0.427828s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.427835s   0ms DEBUG Exploring edge Post/a -(🔑🧩{id})- Post/a
              ├─   0.427841s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.427848s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.427854s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.427870s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(9) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.427887s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(9) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.427900s   0ms DEBUG Paths for id
        ├─   0.427909s   0ms DEBUG   Path root(Query) -(a)- Query/a -(aFeed)- Post/a -(id)- ID/a is valid
        ├─   0.427930s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.427947s   0ms DEBUG path Post/a -(id)- ID/a is valid
        ├─   0.427953s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.427973s   0ms DEBUG Advancing path to Post/a -(🔑🧩{id})- Post/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="Post/a"}
        └─┐create_root_for_path_sequences{root_node="Post/a", segments_count=1}
          ├─   0.427999s   0ms DEBUG Building root query tree node: Post/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.428013s   0ms DEBUG Processing edge: Post/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.428034s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "createdAt", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(aFeed)- Post/a -(🔑🧩{id})- Post/b", current_cost=2003}
        ├─   0.428078s   0ms DEBUG checking edge Post/b -(createdAt)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(aFeed)- Post/a -(🔑🧩{id})- Post/b", edge="createdAt"}
          ├─   0.428103s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.428118s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(aFeed)- Post/a -(🔑🧩{id})- Post/b with edge Post/b -(createdAt)- String/b
        ├─   0.428127s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(9) --> EdgeIndex(14) --> EdgeIndex(5)" }])
      ┌─┘
      ├─   0.428143s   0ms DEBUG Found 1 direct paths to Post/a -(🔑🧩{id})- Post/b
      ├─   0.428151s   0ms DEBUG Exploring edge Post/a -(🔑🧩{id})- Post/a
      ├─   0.428157s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.428164s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.428169s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(9) --> EdgeIndex(14) --> EdgeIndex(5)" }])
    ┌─┘
    ├─   0.428183s   0ms DEBUG Indirect paths found: 1
    ├─   0.428191s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(aFeed)- Post/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(11) --> EdgeIndex(5)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.428231s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.428245s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.428257s   0ms DEBUG Processing edge: Query/b -(bFeed)- Post/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.428269s   0ms DEBUG Processing edge: Post/b -(createdAt)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.428287s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.428298s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.428308s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(9) --> EdgeIndex(14) --> EdgeIndex(5)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.428342s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.428353s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.428365s   0ms DEBUG Processing edge: Query/a -(aFeed)- Post/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.428376s   0ms DEBUG Processing edge: Post/a -(🔑🧩{id})- Post/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.428389s   0ms DEBUG Processing edge: Post/b -(createdAt)- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.428407s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.428420s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.428431s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.428441s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=2}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="bFeed", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.428551s   0ms DEBUG adding output field 'bFeed' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Post", field="createdAt", leaf=true, list=false, response_path="bFeed.@", fetch_path="bFeed.@"}
              ├─   0.428585s   0ms DEBUG adding output field 'createdAt' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=2}
      ┌─┘
      └─┐connect{parent=0, child=2}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
        └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Query", field="aFeed", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.428691s   0ms DEBUG adding output field 'aFeed' to fetch step [2]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
            └─┐process_entity_move_edge{edge="Post/a -(🔑🧩{id})- Post/b", parent_fetch_step_index=2}
              ├─   0.428730s   0ms DEBUG created a new fetch step [3] subgraph(b) type(Post) requirement() key({id}) in children of 2
              ├─   0.428738s   0ms DEBUG adding input requirement '{id}' to fetch step [3]
              ├─   0.428746s   0ms DEBUG adding __typename field to output for type 'Post'
              ├─   0.428754s   0ms DEBUG connecting fetch step to parent [2] -> [3]
              └─┐connect{parent=2, child=3}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, requiring_fetch_step_index=3, type_name="Post", field="id", leaf=true, list=false, response_path="aFeed.@", fetch_path="aFeed.@"}
                      ├─   0.428815s   0ms DEBUG connecting parent fetch step [2] to requiring fetch step [3]
                      └─┐connect{parent=2, child=3}
                      ┌─┘
                      ├─   0.428840s   0ms DEBUG adding output field 'id' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2, requiring_fetch_step_index=3}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=2, child=3}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                └─┐process_plain_field_edge{parent_fetch_step_index=3, type_name="Post", field="createdAt", leaf=true, list=false, response_path="aFeed.@", fetch_path=""}
                  ├─   0.428930s   0ms DEBUG adding output field 'createdAt' to fetch step [3]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.429008s   0ms DEBUG Done
├─   0.429015s   0ms DEBUG found roots
├─   0.429020s   0ms DEBUG print graph
├─   0.429024s   0ms DEBUG Nodes:
│ [1] Query/b {} → {bFeed{createdAt}} at $.
│ [2] Query/a {} → {aFeed{__typename id}} at $.
│ [3] Post/b {__typename id} → {createdAt} at $.aFeed.@
│ 
│ Tree:
│ [2]
│   [3]
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐ParallelNode::execute{data=Null, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[]}
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.429501s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
    └─┐FetchNode::execute{data=Null, representations=[]}
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.429692s   0ms DEBUG starting new connection: http://localhost:4200/
          ├─   0.430011s   0ms DEBUG connecting to 127.0.0.1:4200
          ├─   0.430393s   0ms DEBUG connected to 127.0.0.1:4200
          ├─   0.433566s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
          ├─   0.434560s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"aFeed": Array [Object {"__typename": String("Post"), "id": String("p2")}], "bFeed": Array [Object {"createdAt": String("p1-createdAt")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Post"), "id": String("p2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Post", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Post", type_condition="Post"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Post"), "id": String("p2")}}
          └─┐project_requires{requires_selections=[], entity=String("Post")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("p2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.435017s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.436912s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.437193s DEBUG execution result: ExecutionResult { data: Some(Object {"aFeed": Array [Object {"createdAt": String("p2-createdAt")}], "bFeed": Array [Object {"createdAt": String("p1-createdAt")}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Parallel"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{aFeed{__typename id}}")}, Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{bFeed{createdAt}}")}]}, Object {"kind": String("Flatten"), "path": Array [String("aFeed"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Post{createdAt}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Post"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
