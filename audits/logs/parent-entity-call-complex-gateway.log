generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.12s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_object_type{name="Category"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Product"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=1}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
└─┐decompose_from_supergraph{graph_id="C"}
┌─┘
└─┐decompose_from_supergraph{graph_id="D"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006468s   0ms DEBUG Building graph for supergraph with 15 definitions
  └─┐build_root_nodes{}
    ├─   0.006504s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006555s   0ms INFO [x] Creating owned field move edge 'Category.__typename/A' (type: String)
    ├─   0.006568s   0ms INFO [x] Creating field move edge 'Category.details/A' (type: String)
    ├─   0.006576s   0ms INFO [x] Creating field move edge 'Category.details/A' (type: String)
    ├─   0.006588s   0ms INFO [ ] Field 'Category.id/A' does is not available in the subgraph, skipping edge creation (type: ID)
    ├─   0.006594s   0ms INFO [ ] Field 'Category.name/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006599s   0ms INFO [x] Creating owned field move edge 'Category.__typename/B' (type: String)
    ├─   0.006607s   0ms INFO [ ] Field 'Category.details/B' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006612s   0ms INFO [x] Creating field move edge 'Category.id/B' (type: ID)
    ├─   0.006619s   0ms INFO [x] Creating field move edge 'Category.id/B' (type: ID)
    ├─   0.006624s   0ms INFO [ ] Field 'Category.name/B' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006630s   0ms INFO [x] Creating owned field move edge 'Category.__typename/C' (type: String)
    ├─   0.006638s   0ms INFO [ ] Field 'Category.details/C' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006644s   0ms INFO [x] Creating field move edge 'Category.id/C' (type: ID)
    ├─   0.006650s   0ms INFO [x] Creating field move edge 'Category.id/C' (type: ID)
    ├─   0.006655s   0ms INFO [x] Creating field move edge 'Category.name/C' (type: String)
    ├─   0.006661s   0ms INFO [x] Creating field move edge 'Category.name/C' (type: String)
    ├─   0.006668s   0ms INFO [x] Creating owned field move edge 'Product.__typename/A' (type: String)
    ├─   0.006675s   0ms INFO [x] Creating field move edge 'Product.category/A' (type: Category)
    ├─   0.006681s   0ms INFO [x] Creating field move edge 'Product.category/A' (type: Category)
    ├─   0.006687s   0ms INFO [ ] Field 'Product.name/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006693s   0ms INFO [ ] Field 'Product.id/A' is external, skipping edge creation
    ├─   0.006698s   0ms INFO [x] Creating owned field move edge 'Product.__typename/B' (type: String)
    ├─   0.006705s   0ms INFO [x] Creating field move edge 'Product.category/B' (type: Category)
    ├─   0.006711s   0ms INFO [x] Creating field move edge 'Product.category/B' (type: Category)
    ├─   0.006717s   0ms INFO [ ] Field 'Product.name/B' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006722s   0ms INFO [ ] Field 'Product.id/B' is external, skipping edge creation
    ├─   0.006727s   0ms INFO [x] Creating owned field move edge 'Product.__typename/D' (type: String)
    ├─   0.006734s   0ms INFO [ ] Field 'Product.category/D' does is not available in the subgraph, skipping edge creation (type: Category)
    ├─   0.006739s   0ms INFO [x] Creating field move edge 'Product.name/D' (type: String)
    ├─   0.006745s   0ms INFO [x] Creating field move edge 'Product.name/D' (type: String)
    ├─   0.006750s   0ms INFO [x] Creating field move edge 'Product.id/D' (type: ID)
    ├─   0.006759s   0ms INFO [x] Creating field move edge 'Product.id/D' (type: ID)
    ├─   0.006765s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006772s   0ms INFO [ ] Field 'Query.productFromD/A' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006778s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006785s   0ms INFO [ ] Field 'Query.productFromD/B' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006790s   0ms INFO [x] Creating owned field move edge 'Query.__typename/C' (type: String)
    ├─   0.006797s   0ms INFO [ ] Field 'Query.productFromD/C' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006802s   0ms INFO [x] Creating owned field move edge 'Query.__typename/D' (type: String)
    ├─   0.006809s   0ms INFO [x] Creating field move edge 'Query.productFromD/D' (type: Product)
    ├─   0.006815s   0ms INFO [x] Creating field move edge 'Query.productFromD/D' (type: Product)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006913s   0ms INFO Creating entity move edge from 'Category/A' to 'Category/C' via key 'id'
    ├─   0.006990s   0ms INFO Creating entity move edge from 'Category/B' to 'Category/C' via key 'id'
    ├─   0.007031s   0ms INFO Creating self-referencing entity move edge in 'Category/C' via key 'id'
    ├─   0.007065s   0ms INFO Creating self-referencing entity move edge in 'Product/A' via key 'id'
    ├─   0.007096s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/B' via key 'id'
    ├─   0.007133s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/D' via key 'id'
    ├─   0.007165s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/A' via key 'id'
    ├─   0.007195s   0ms INFO Creating self-referencing entity move edge in 'Product/B' via key 'id'
    ├─   0.007227s   0ms INFO Creating entity move edge from 'Product/B' to 'Product/D' via key 'id'
    ├─   0.007263s   0ms INFO Creating entity move edge from 'Product/D' to 'Product/A' via key 'id'
    ├─   0.007294s   0ms INFO Creating entity move edge from 'Product/D' to 'Product/B' via key 'id'
    ├─   0.007325s   0ms INFO Creating self-referencing entity move edge in 'Product/D' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.065673s INFO Starting server on http://localhost:4000
   0.066545s INFO starting 16 workers
   0.066580s INFO Actix runtime found; starting in Actix runtime
   0.066589s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.301068s DEBUG original document: query ping {
  __typename
}

   0.301185s DEBUG normalized document: query ping {__typename}

   0.301224s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.301677s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.375576s DEBUG original document: query {
  productFromD(id: "1") {
    id
    name
    category {
      id
      name
      details
    }
  }
}

   0.375709s DEBUG normalized document: query{productFromD(id: "1"){id name category{id name details}}}

   0.375741s DEBUG executable operation: query{productFromD(id: "1"){id name category{id name details}}}
┐walk_operation{}
├─   0.376235s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="productFromD", leaf=false}
  ├─   0.376280s   0ms DEBUG Trying to advance to: productFromD(id: "1"){id name category{id name details}} through 1 possible paths
  └─┐explore_path{path="root(Query) -(d)- Query/d"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "productFromD", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "category", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "details", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("1")} }), skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d", current_cost=1000}
      ├─   0.376368s   0ms DEBUG checking edge Query/d -(productFromD)- Product/d
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d", edge="productFromD"}
        ├─   0.376392s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.376418s   0ms DEBUG Advancing path root(Query) -(d)- Query/d with edge Query/d -(productFromD)- Product/d
      ├─   0.376431s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(19)" }])
    ┌─┘
    ├─   0.376447s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "productFromD", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "category", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "details", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: Some(ArgumentsMap { arguments_map: {"id": String("1")} }), skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d", current_cost=1000}
      ├─   0.376479s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.376485s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.376497s   0ms DEBUG Indirect paths found: 0
    ├─   0.376505s   0ms DEBUG advanced: root(Query) -(d)- Query/d
  ┌─┘
  ├─   0.376519s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="category", leaf=false}
  ├─   0.376539s   0ms DEBUG Trying to advance to: category{id name details} through 1 possible paths
  └─┐explore_path{path="root(Query) -(d)- Query/d -(productFromD)- Product/d"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "category", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "details", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
      ├─   0.376566s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.376577s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "category", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "details", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
      ├─   0.376594s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
      ├─   0.376601s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.376607s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
        ├─   0.376625s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
              ├─   0.376661s   0ms DEBUG checking edge Product/d -(id)- ID/d
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                ├─   0.376681s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.376697s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(id)- ID/d
              ├─   0.376705s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
              ├─   0.376752s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
              ├─   0.376763s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.376770s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
              ├─   0.376778s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.376786s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                ├─   0.376822s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
                      ├─   0.376867s   0ms DEBUG checking edge Product/d -(id)- ID/d
                      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                        ├─   0.376887s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.376908s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(id)- ID/d
                      ├─   0.376930s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
                      ├─   0.376974s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                      ├─   0.376995s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.377006s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                      ├─   0.377022s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.377034s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                      ├─   0.377040s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.377049s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.377056s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.377082s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                  ┌─┘
                  ├─   0.377105s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                ┌─┘
                ├─   0.377121s   0ms DEBUG Paths for id
                ├─   0.377132s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(id)- ID/d is valid
                ├─   0.377140s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.377157s   0ms DEBUG path Product/d -(id)- ID/d is valid
                ├─   0.377173s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
              ┌─┘
              ├─   0.377190s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/d"}
                └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                  ├─   0.377223s   0ms DEBUG Building root query tree node: Product/d
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.377241s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.377265s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.377319s   0ms INFO return=Ok([])
              ┌─┘
              ├─   0.377335s   0ms DEBUG No direct paths found
              ├─   0.377346s   0ms DEBUG going deeper
              ├─   0.377355s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
              ├─   0.377362s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.377369s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.377375s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
              ├─   0.377383s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.377389s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
              ├─   0.377398s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.377404s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.377419s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.377436s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.377449s   0ms DEBUG Paths for id
        ├─   0.377458s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(id)- ID/d is valid
        ├─   0.377463s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.377473s   0ms DEBUG path Product/d -(id)- ID/d is valid
        ├─   0.377479s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.377493s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/d"}
        └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
          ├─   0.377517s   0ms DEBUG Building root query tree node: Product/d
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.377531s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.377551s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "category", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "details", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.377598s   0ms DEBUG checking edge Product/b -(category)- Category/b
        └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b", edge="category"}
          ├─   0.377634s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.377660s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b with edge Product/b -(category)- Category/b
        ├─   0.377670s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.377688s   1ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/b
      ├─   0.377698s   1ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
        ├─   0.377719s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
              ├─   0.377752s   0ms DEBUG checking edge Product/d -(id)- ID/d
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                ├─   0.377769s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.377786s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(id)- ID/d
              ├─   0.377794s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
              ├─   0.377851s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
              ├─   0.377871s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.377877s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                ├─   0.377896s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
                      ├─   0.377932s   0ms DEBUG checking edge Product/d -(id)- ID/d
                      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                        ├─   0.377951s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.377970s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(id)- ID/d
                      ├─   0.377981s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
                      ├─   0.378013s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                      ├─   0.378020s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.378028s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                      ├─   0.378036s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.378045s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                      ├─   0.378051s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.378060s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.378067s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.378085s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                  ┌─┘
                  ├─   0.378102s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                ┌─┘
                ├─   0.378118s   0ms DEBUG Paths for id
                ├─   0.378127s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(id)- ID/d is valid
                ├─   0.378135s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.378147s   0ms DEBUG path Product/d -(id)- ID/d is valid
                ├─   0.378168s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
              ┌─┘
              ├─   0.378188s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/d"}
                └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                  ├─   0.378215s   0ms DEBUG Building root query tree node: Product/d
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.378231s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.378254s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.378318s   0ms INFO return=Ok([])
              ┌─┘
              ├─   0.378339s   0ms DEBUG No direct paths found
              ├─   0.378349s   0ms DEBUG going deeper
              ├─   0.378361s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
              ├─   0.378368s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.378376s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              ├─   0.378383s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.378390s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.378396s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
              ├─   0.378403s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              ├─   0.378409s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
              ├─   0.378419s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.378425s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.378441s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.378475s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.378494s   0ms DEBUG Paths for id
        ├─   0.378504s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(id)- ID/d is valid
        ├─   0.378510s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.378521s   0ms DEBUG path Product/d -(id)- ID/d is valid
        ├─   0.378527s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.378542s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/d"}
        └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
          ├─   0.378568s   0ms DEBUG Building root query tree node: Product/d
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.378582s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.378606s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "category", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "details", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a", current_cost=2003}
        ├─   0.378651s   0ms DEBUG checking edge Product/a -(category)- Category/a
        └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a", edge="category"}
          ├─   0.378669s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.378685s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a with edge Product/a -(category)- Category/a
        ├─   0.378694s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(29) --> EdgeIndex(9)" }])
      ┌─┘
      ├─   0.378710s   2ms DEBUG Found 1 direct paths to Product/d -(🔑🧩{id})- Product/a
      ├─   0.378724s   2ms DEBUG Finished finding indirect paths, found total of 2
      ├─   0.378730s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(29) --> EdgeIndex(9)" },  { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.378746s   2ms DEBUG Indirect paths found: 2
    ├─   0.378754s   2ms DEBUG advanced: root(Query) -(d)- Query/d -(productFromD)- Product/d
  ┌─┘
  ├─   0.378765s   2ms DEBUG Found 2 paths
┌─┘
└─┐process_field{field_name="details", leaf=true}
  ├─   0.378788s   0ms DEBUG Trying to advance to: details through 2 possible paths
  └─┐explore_path{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "details", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", current_cost=2004}
      ├─   0.378839s   0ms DEBUG checking edge Category/a -(details)- String/a
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", edge="details"}
        ├─   0.378867s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.378886s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a with edge Category/a -(details)- String/a
      ├─   0.378895s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(29) --> EdgeIndex(9) --> EdgeIndex(2)" }])
    ┌─┘
    ├─   0.378911s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "details", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", current_cost=2004}
      ├─   0.378934s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/c
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", edge="id"}
        ├─   0.378953s   0ms DEBUG checking requirements {id} for edge 'Category/a -(🔑🧩{id})- Category/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", current_cost=2004}
              ├─   0.378989s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", current_cost=2004}
              ├─   0.379018s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/c
              ├─   0.379027s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.379035s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.379041s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.379057s   0ms INFO return=Ok(None)
          ┌─┘
          ├─   0.379069s   0ms INFO return=Ok(None)
        ┌─┘
        ├─   0.379082s   0ms INFO return=Ok(None)
      ┌─┘
      ├─   0.379113s   0ms DEBUG Requirements not satisfied, continue look up...
      ├─   0.379122s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.379127s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379139s   0ms DEBUG Indirect paths found: 0
    ├─   0.379151s   0ms DEBUG advanced: root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "details", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", current_cost=2004}
      ├─   0.379189s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379201s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "details", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", current_cost=2004}
      ├─   0.379221s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/c
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", edge="id"}
        ├─   0.379257s   0ms DEBUG checking requirements {id} for edge 'Category/b -(🔑🧩{id})- Category/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", current_cost=2004}
              ├─   0.379300s   0ms DEBUG checking edge Category/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", edge="id"}
                ├─   0.379321s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.379342s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b with edge Category/b -(id)- ID/b
              ├─   0.379351s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", current_cost=2004}
              ├─   0.379384s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/c
              ├─   0.379391s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.379400s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.379408s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.379424s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.379441s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.379455s   0ms DEBUG Paths for id
        ├─   0.379464s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b -(id)- ID/b is valid
        ├─   0.379471s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.379483s   0ms DEBUG path Category/b -(id)- ID/b is valid
        ├─   0.379489s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.379504s   0ms DEBUG Advancing path to Category/b -(🔑🧩{id})- Category/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="Category/b"}
        └─┐create_root_for_path_sequences{root_node="Category/b", segments_count=1}
          ├─   0.379531s   0ms DEBUG Building root query tree node: Category/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.379545s   0ms DEBUG Processing edge: Category/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.379566s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "details", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b -(🔑🧩{id})- Category/c", current_cost=3006}
        ├─   0.379612s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.379625s   0ms DEBUG No direct paths found
      ├─   0.379633s   0ms DEBUG going deeper
      ├─   0.379641s   0ms DEBUG Exploring edge Category/c -(🔑🧩{id})- Category/c
      ├─   0.379646s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.379655s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.379660s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379671s   0ms DEBUG Indirect paths found: 0
    ├─   0.379682s   0ms WARN failed to advance: root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.379714s   0ms DEBUG Trying to advance to: name through 2 possible paths
  └─┐explore_path{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", current_cost=2004}
      ├─   0.379742s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379754s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", current_cost=2004}
      ├─   0.379773s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/c
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", edge="id"}
        ├─   0.379795s   0ms DEBUG checking requirements {id} for edge 'Category/a -(🔑🧩{id})- Category/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", current_cost=2004}
              ├─   0.379827s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", current_cost=2004}
              ├─   0.379857s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/c
              ├─   0.379866s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.379874s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.379880s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.379895s   0ms INFO return=Ok(None)
          ┌─┘
          ├─   0.379909s   0ms INFO return=Ok(None)
        ┌─┘
        ├─   0.379921s   0ms INFO return=Ok(None)
      ┌─┘
      ├─   0.379933s   0ms DEBUG Requirements not satisfied, continue look up...
      ├─   0.379938s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.379943s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.379954s   0ms DEBUG Indirect paths found: 0
    ├─   0.379964s   0ms WARN failed to advance: root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", current_cost=2004}
      ├─   0.379997s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.380009s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", current_cost=2004}
      ├─   0.380027s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/c
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", edge="id"}
        ├─   0.380063s   0ms DEBUG checking requirements {id} for edge 'Category/b -(🔑🧩{id})- Category/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", current_cost=2004}
              ├─   0.380106s   0ms DEBUG checking edge Category/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", edge="id"}
                ├─   0.380126s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.380155s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b with edge Category/b -(id)- ID/b
              ├─   0.380180s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", current_cost=2004}
              ├─   0.380227s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/c
              ├─   0.380235s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.380243s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.380250s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.380265s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.380282s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.380296s   0ms DEBUG Paths for id
        ├─   0.380306s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b -(id)- ID/b is valid
        ├─   0.380312s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.380323s   0ms DEBUG path Category/b -(id)- ID/b is valid
        ├─   0.380330s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.380344s   0ms DEBUG Advancing path to Category/b -(🔑🧩{id})- Category/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="Category/b"}
        └─┐create_root_for_path_sequences{root_node="Category/b", segments_count=1}
          ├─   0.380378s   0ms DEBUG Building root query tree node: Category/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.380392s   0ms DEBUG Processing edge: Category/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.380412s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b -(🔑🧩{id})- Category/c", current_cost=3006}
        ├─   0.380456s   0ms DEBUG checking edge Category/c -(name)- String/c
        └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b -(🔑🧩{id})- Category/c", edge="name"}
          ├─   0.380476s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.380493s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b -(🔑🧩{id})- Category/c with edge Category/c -(name)- String/c
        ├─   0.380501s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(21) --> EdgeIndex(7)" }])
      ┌─┘
      ├─   0.380517s   0ms DEBUG Found 1 direct paths to Category/b -(🔑🧩{id})- Category/c
      ├─   0.380527s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.380532s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(21) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.380547s   0ms DEBUG Indirect paths found: 1
    ├─   0.380555s   0ms DEBUG advanced: root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.380581s   0ms DEBUG Trying to advance to: id through 2 possible paths
  └─┐explore_path{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", current_cost=2004}
      ├─   0.380635s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.380652s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", current_cost=2004}
      ├─   0.380672s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/c
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", edge="id"}
        ├─   0.380697s   0ms DEBUG checking requirements {id} for edge 'Category/a -(🔑🧩{id})- Category/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", current_cost=2004}
              ├─   0.380729s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a", current_cost=2004}
              ├─   0.380759s   0ms DEBUG Exploring edge Category/a -(🔑🧩{id})- Category/c
              ├─   0.380766s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.380775s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.380781s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.380796s   0ms INFO return=Ok(None)
          ┌─┘
          ├─   0.380808s   0ms INFO return=Ok(None)
        ┌─┘
        ├─   0.380821s   0ms INFO return=Ok(None)
      ┌─┘
      ├─   0.380832s   0ms DEBUG Requirements not satisfied, continue look up...
      ├─   0.380856s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.380861s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.380872s   0ms DEBUG Indirect paths found: 0
    ├─   0.380883s   0ms WARN failed to advance: root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a -(category)- Category/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", current_cost=2004}
      ├─   0.380943s   0ms DEBUG checking edge Category/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", edge="id"}
        ├─   0.380964s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.380982s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b with edge Category/b -(id)- ID/b
      ├─   0.380991s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(4)" }])
    ┌─┘
    ├─   0.381006s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", current_cost=2004}
      ├─   0.381027s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/c
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", edge="id"}
        ├─   0.381046s   0ms DEBUG checking requirements {id} for edge 'Category/b -(🔑🧩{id})- Category/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", current_cost=2004}
              ├─   0.381078s   0ms DEBUG checking edge Category/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", edge="id"}
                ├─   0.381097s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.381115s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b with edge Category/b -(id)- ID/b
              ├─   0.381124s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(4)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b", current_cost=2004}
              ├─   0.381155s   0ms DEBUG Exploring edge Category/b -(🔑🧩{id})- Category/c
              ├─   0.381162s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.381170s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.381176s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.381193s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
          ┌─┘
          ├─   0.381229s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(4)" }], [])))
        ┌─┘
        ├─   0.381247s   0ms DEBUG Paths for id
        ├─   0.381268s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b -(id)- ID/b is valid
        ├─   0.381278s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.381292s   0ms DEBUG path Category/b -(id)- ID/b is valid
        ├─   0.381298s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(4)" }]))
      ┌─┘
      ├─   0.381316s   0ms DEBUG Advancing path to Category/b -(🔑🧩{id})- Category/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(4)" }, root_node="Category/b"}
        └─┐create_root_for_path_sequences{root_node="Category/b", segments_count=1}
          ├─   0.381343s   0ms DEBUG Building root query tree node: Category/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.381357s   0ms DEBUG Processing edge: Category/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.381378s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b -(🔑🧩{id})- Category/c", current_cost=3006}
        ├─   0.381427s   0ms DEBUG checking edge Category/c -(id)- ID/c
        └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b -(🔑🧩{id})- Category/c", edge="id"}
          ├─   0.381447s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.381464s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b -(🔑🧩{id})- Category/c with edge Category/c -(id)- ID/c
        ├─   0.381472s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(21) --> EdgeIndex(6)" }])
      ┌─┘
      ├─   0.381488s   0ms DEBUG Found 1 direct paths to Category/b -(🔑🧩{id})- Category/c
      ├─   0.381498s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.381504s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(21) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.381518s   0ms DEBUG Indirect paths found: 1
    ├─   0.381528s   0ms DEBUG advanced: root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b -(category)- Category/b
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.381572s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(d)- Query/d -(productFromD)- Product/d"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
      ├─   0.381607s   0ms DEBUG checking edge Product/d -(name)- String/d
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="name"}
        ├─   0.381624s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.381641s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(name)- String/d
      ├─   0.381650s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.381664s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
      ├─   0.381683s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
      ├─   0.381689s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.381695s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
        ├─   0.381711s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
              ├─   0.381742s   0ms DEBUG checking edge Product/d -(id)- ID/d
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                ├─   0.381759s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.381776s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(id)- ID/d
              ├─   0.381784s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
              ├─   0.381812s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
              ├─   0.381820s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.381826s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
              ├─   0.381833s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.381840s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                ├─   0.381858s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
                      ├─   0.381893s   0ms DEBUG checking edge Product/d -(id)- ID/d
                      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                        ├─   0.381911s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.381930s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(id)- ID/d
                      ├─   0.381940s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
                      ├─   0.382000s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                      ├─   0.382010s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.382017s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                      ├─   0.382024s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
                      ├─   0.382032s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                      ├─   0.382039s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
                      ├─   0.382048s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.382056s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.382074s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                  ┌─┘
                  ├─   0.382093s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                ┌─┘
                ├─   0.382109s   0ms DEBUG Paths for id
                ├─   0.382119s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(id)- ID/d is valid
                ├─   0.382126s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.382138s   0ms DEBUG path Product/d -(id)- ID/d is valid
                ├─   0.382158s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
              ┌─┘
              ├─   0.382184s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/d"}
                └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                  ├─   0.382215s   0ms DEBUG Building root query tree node: Product/d
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.382231s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.382255s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.382304s   0ms INFO return=Ok([])
              ┌─┘
              ├─   0.382319s   0ms DEBUG No direct paths found
              ├─   0.382328s   0ms DEBUG going deeper
              ├─   0.382337s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
              ├─   0.382344s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.382351s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.382358s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
              ├─   0.382365s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.382371s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
              ├─   0.382380s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.382386s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.382401s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.382417s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.382431s   0ms DEBUG Paths for id
        ├─   0.382439s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(id)- ID/d is valid
        ├─   0.382445s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.382455s   0ms DEBUG path Product/d -(id)- ID/d is valid
        ├─   0.382461s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.382475s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/d"}
        └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
          ├─   0.382498s   0ms DEBUG Building root query tree node: Product/d
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.382512s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.382532s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.382573s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.382585s   0ms DEBUG No direct paths found
      ├─   0.382593s   0ms DEBUG going deeper
      ├─   0.382600s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
        ├─   0.382617s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
              ├─   0.382649s   0ms DEBUG checking edge Product/d -(id)- ID/d
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                ├─   0.382666s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.382682s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(id)- ID/d
              ├─   0.382690s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
              ├─   0.382719s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
              ├─   0.382727s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.382733s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                ├─   0.382751s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
                      ├─   0.382785s   0ms DEBUG checking edge Product/d -(id)- ID/d
                      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                        ├─   0.382804s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.382823s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(id)- ID/d
                      ├─   0.382832s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
                      ├─   0.382863s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                      ├─   0.382871s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.382878s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                      ├─   0.382885s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                      ├─   0.382893s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                      ├─   0.382900s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                      ├─   0.382909s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.382916s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.382932s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                  ┌─┘
                  ├─   0.382949s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                ┌─┘
                ├─   0.382965s   0ms DEBUG Paths for id
                ├─   0.382974s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(id)- ID/d is valid
                ├─   0.382981s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.382992s   0ms DEBUG path Product/d -(id)- ID/d is valid
                ├─   0.382999s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
              ┌─┘
              ├─   0.383014s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/d"}
                └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                  ├─   0.383041s   0ms DEBUG Building root query tree node: Product/d
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.383057s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.383080s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.383125s   0ms INFO return=Ok([])
              ┌─┘
              ├─   0.383140s   0ms DEBUG No direct paths found
              ├─   0.383148s   0ms DEBUG going deeper
              ├─   0.383157s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
              ├─   0.383163s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.383171s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              ├─   0.383177s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.383184s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.383190s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
              ├─   0.383197s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              ├─   0.383203s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
              ├─   0.383211s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.383217s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.383231s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.383247s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.383282s   0ms DEBUG Paths for id
        ├─   0.383295s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(id)- ID/d is valid
        ├─   0.383301s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.383312s   0ms DEBUG path Product/d -(id)- ID/d is valid
        ├─   0.383318s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.383334s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/d"}
        └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
          ├─   0.383360s   0ms DEBUG Building root query tree node: Product/d
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.383374s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.383394s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a", current_cost=2003}
        ├─   0.383454s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.383470s   1ms DEBUG No direct paths found
      ├─   0.383479s   1ms DEBUG going deeper
      ├─   0.383489s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
      ├─   0.383495s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.383500s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      ├─   0.383509s   1ms DEBUG Ignoring. Already visited similar edge
      ├─   0.383515s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.383520s   1ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.383528s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
      ├─   0.383534s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.383539s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.383545s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.383550s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.383556s   1ms DEBUG Ignoring. Already visited similar edge
      ├─   0.383563s   1ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.383568s   1ms INFO return=Ok([])
    ┌─┘
    ├─   0.383580s   1ms DEBUG Indirect paths found: 0
    ├─   0.383590s   2ms DEBUG advanced: root(Query) -(d)- Query/d -(productFromD)- Product/d
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.383623s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(d)- Query/d -(productFromD)- Product/d"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
      ├─   0.383648s   0ms DEBUG checking edge Product/d -(id)- ID/d
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
        ├─   0.383664s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.383679s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(id)- ID/d
      ├─   0.383687s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.383700s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
      ├─   0.383720s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
      ├─   0.383725s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.383731s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
        ├─   0.383747s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
              ├─   0.383778s   0ms DEBUG checking edge Product/d -(id)- ID/d
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                ├─   0.383794s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.383811s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(id)- ID/d
              ├─   0.383819s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
              ├─   0.383847s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
              ├─   0.383854s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.383860s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
              ├─   0.383867s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.383874s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                ├─   0.383891s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
                      ├─   0.383926s   0ms DEBUG checking edge Product/d -(id)- ID/d
                      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                        ├─   0.383944s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.383963s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(id)- ID/d
                      ├─   0.383972s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
                      ├─   0.384002s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                      ├─   0.384010s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.384020s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                      ├─   0.384027s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
                      ├─   0.384035s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                      ├─   0.384041s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
                      ├─   0.384050s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.384057s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.384074s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                  ┌─┘
                  ├─   0.384091s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                ┌─┘
                ├─   0.384107s   0ms DEBUG Paths for id
                ├─   0.384116s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(id)- ID/d is valid
                ├─   0.384123s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.384134s   0ms DEBUG path Product/d -(id)- ID/d is valid
                ├─   0.384141s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
              ┌─┘
              ├─   0.384157s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/d"}
                └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                  ├─   0.384184s   0ms DEBUG Building root query tree node: Product/d
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.384199s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.384222s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a", current_cost=2003}
                ├─   0.384289s   0ms INFO return=Ok([])
              ┌─┘
              ├─   0.384311s   0ms DEBUG No direct paths found
              ├─   0.384321s   0ms DEBUG going deeper
              ├─   0.384331s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
              ├─   0.384338s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.384345s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.384351s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
              ├─   0.384359s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
              ├─   0.384365s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
              ├─   0.384374s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.384380s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.384395s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.384413s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.384426s   0ms DEBUG Paths for id
        ├─   0.384435s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(id)- ID/d is valid
        ├─   0.384441s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.384451s   0ms DEBUG path Product/d -(id)- ID/d is valid
        ├─   0.384457s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.384471s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/d"}
        └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
          ├─   0.384497s   0ms DEBUG Building root query tree node: Product/d
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.384511s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.384531s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.384573s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.384585s   0ms DEBUG No direct paths found
      ├─   0.384593s   0ms DEBUG going deeper
      ├─   0.384600s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
        ├─   0.384617s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
              ├─   0.384648s   0ms DEBUG checking edge Product/d -(id)- ID/d
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                ├─   0.384664s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.384681s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(id)- ID/d
              ├─   0.384689s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
              ├─   0.384718s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
              ├─   0.384725s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.384732s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
              └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                ├─   0.384749s   0ms DEBUG checking requirements {id} for edge 'Product/d -(🔑🧩{id})- Product/b'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
                      ├─   0.384783s   0ms DEBUG checking edge Product/d -(id)- ID/d
                      └─┐can_satisfy_edge{path="root(Query) -(d)- Query/d -(productFromD)- Product/d", edge="id"}
                        ├─   0.384802s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.384820s   0ms DEBUG Advancing path root(Query) -(d)- Query/d -(productFromD)- Product/d with edge Product/d -(id)- ID/d
                      ├─   0.384829s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d", current_cost=1001}
                      ├─   0.384860s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/d
                      ├─   0.384867s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.384875s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/b
                      ├─   0.384882s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
                      ├─   0.384890s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
                      ├─   0.384897s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
                      ├─   0.384905s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.384912s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.384929s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                  ┌─┘
                  ├─   0.384946s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                ┌─┘
                ├─   0.384962s   0ms DEBUG Paths for id
                ├─   0.384970s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(id)- ID/d is valid
                ├─   0.384977s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.384988s   0ms DEBUG path Product/d -(id)- ID/d is valid
                ├─   0.384995s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
              ┌─┘
              ├─   0.385010s   0ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/b
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/d"}
                └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
                  ├─   0.385037s   0ms DEBUG Building root query tree node: Product/d
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.385052s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.385075s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/b", current_cost=2003}
                ├─   0.385121s   0ms INFO return=Ok([])
              ┌─┘
              ├─   0.385135s   0ms DEBUG No direct paths found
              ├─   0.385143s   0ms DEBUG going deeper
              ├─   0.385151s   0ms DEBUG Exploring edge Product/d -(🔑🧩{id})- Product/a
              ├─   0.385158s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.385166s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
              ├─   0.385172s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.385179s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
              ├─   0.385185s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
              ├─   0.385191s   0ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
              ├─   0.385197s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
              ├─   0.385206s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.385212s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.385226s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.385242s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.385256s   0ms DEBUG Paths for id
        ├─   0.385264s   0ms DEBUG   Path root(Query) -(d)- Query/d -(productFromD)- Product/d -(id)- ID/d is valid
        ├─   0.385269s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.385279s   0ms DEBUG path Product/d -(id)- ID/d is valid
        ├─   0.385284s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.385298s   1ms DEBUG Advancing path to Product/d -(🔑🧩{id})- Product/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="Product/d"}
        └─┐create_root_for_path_sequences{root_node="Product/d", segments_count=1}
          ├─   0.385321s   0ms DEBUG Building root query tree node: Product/d
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.385335s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.385355s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(d)- Query/d -(productFromD)- Product/d -(🔑🧩{id})- Product/a", current_cost=2003}
        ├─   0.385395s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.385407s   1ms DEBUG No direct paths found
      ├─   0.385414s   1ms DEBUG going deeper
      ├─   0.385422s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/d
      ├─   0.385429s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.385434s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      ├─   0.385441s   1ms DEBUG Ignoring. Already visited similar edge
      ├─   0.385447s   1ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/a
      ├─   0.385452s   1ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.385460s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/d
      ├─   0.385466s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.385471s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/b
      ├─   0.385476s   1ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.385482s   1ms DEBUG Exploring edge Product/b -(🔑🧩{id})- Product/a
      ├─   0.385487s   1ms DEBUG Ignoring. Already visited similar edge
      ├─   0.385494s   1ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.385499s   1ms INFO return=Ok([])
    ┌─┘
    ├─   0.385510s   1ms DEBUG Indirect paths found: 0
    ├─   0.385518s   1ms DEBUG advanced: root(Query) -(d)- Query/d -(productFromD)- Product/d
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(29) --> EdgeIndex(9) --> EdgeIndex(2)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.385597s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.385626s   0ms DEBUG Processing edge: root(Query) -(d)- Query/d
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.385640s   0ms DEBUG Processing edge: Query/d -(productFromD)- Product/d
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.385654s   0ms DEBUG Processing edge: Product/d -(🔑🧩{id})- Product/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.385667s   0ms DEBUG Processing edge: Product/a -(category)- Category/a
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.385680s   0ms DEBUG Processing edge: Category/a -(details)- String/a
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.385705s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.385719s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.385731s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.385741s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.385752s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 3007, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(21) --> EdgeIndex(7)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=6}
  ├─   0.385793s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=6}
    ├─   0.385805s   0ms DEBUG Processing edge: root(Query) -(d)- Query/d
    └─┐from_path_segment_sequences{current_index=1, total_segments=6}
      ├─   0.385816s   0ms DEBUG Processing edge: Query/d -(productFromD)- Product/d
      └─┐from_path_segment_sequences{current_index=2, total_segments=6}
        ├─   0.385829s   0ms DEBUG Processing edge: Product/d -(🔑🧩{id})- Product/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=6}
          ├─   0.385841s   0ms DEBUG Processing edge: Product/b -(category)- Category/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=6}
            ├─   0.385854s   0ms DEBUG Processing edge: Category/b -(🔑🧩{id})- Category/c
            └─┐from_path_segment_sequences{current_index=5, total_segments=6}
              ├─   0.385868s   0ms DEBUG Processing edge: Category/c -(name)- String/c
              └─┐from_path_segment_sequences{current_index=6, total_segments=6}
              ┌─┘
              ├─   0.385888s   0ms DEBUG No subsequent steps (leaf or end of path)
            ┌─┘
            ├─   0.385901s   0ms DEBUG Adding subsequent step as child
          ┌─┘
          ├─   0.385913s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.385924s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.385935s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.385946s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(30) --> EdgeIndex(11) --> EdgeIndex(4)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.385981s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.385992s   0ms DEBUG Processing edge: root(Query) -(d)- Query/d
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.386004s   0ms DEBUG Processing edge: Query/d -(productFromD)- Product/d
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.386018s   0ms DEBUG Processing edge: Product/d -(🔑🧩{id})- Product/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.386030s   0ms DEBUG Processing edge: Product/b -(category)- Category/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.386043s   0ms DEBUG Processing edge: Category/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.386063s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.386075s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.386086s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.386098s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.386108s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(13)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.386143s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.386155s   0ms DEBUG Processing edge: root(Query) -(d)- Query/d
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.386166s   0ms DEBUG Processing edge: Query/d -(productFromD)- Product/d
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.386180s   0ms DEBUG Processing edge: Product/d -(name)- String/d
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.386199s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.386209s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.386220s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(19) --> EdgeIndex(14)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.386254s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.386266s   0ms DEBUG Processing edge: root(Query) -(d)- Query/d
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.386278s   0ms DEBUG Processing edge: Query/d -(productFromD)- Product/d
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.386294s   0ms DEBUG Processing edge: Product/d -(id)- ID/d
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.386312s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.386323s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.386334s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=5}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="d", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="productFromD", arguments="id: \"1\"", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.386486s   0ms DEBUG adding output field 'productFromD' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=4, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Product/d -(🔑🧩{id})- Product/a", parent_fetch_step_index=1}
              ├─   0.386525s   0ms DEBUG created a new fetch step [2] subgraph(a) type(Product) requirement() key({id}) in children of 1
              ├─   0.386533s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.386540s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.386549s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Product", field="id", leaf=true, list=false, response_path="productFromD", fetch_path="productFromD"}
                      ├─   0.386611s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.386635s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Product", field="category", leaf=false, list=false, response_path="productFromD", fetch_path=""}
                  ├─   0.386726s   0ms DEBUG adding output field 'category' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Category", field="details", leaf=true, list=false, response_path="productFromD.category", fetch_path="category"}
                      ├─   0.386754s   0ms DEBUG adding output field 'details' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_entity_move_edge{edge="Product/d -(🔑🧩{id})- Product/b", parent_fetch_step_index=1}
              ├─   0.386835s   0ms DEBUG created a new fetch step [3] subgraph(b) type(Product) requirement() key({id}) in children of 1
              ├─   0.386843s   0ms DEBUG adding input requirement '{id}' to fetch step [3]
              ├─   0.386849s   0ms DEBUG adding __typename field to output for type 'Product'
              ├─   0.386856s   0ms DEBUG connecting fetch step to parent [1] -> [3]
              └─┐connect{parent=1, child=3}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=3}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=3, type_name="Product", field="id", leaf=true, list=false, response_path="productFromD", fetch_path="productFromD"}
                      ├─   0.386912s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [3]
                      └─┐connect{parent=1, child=3}
                      ┌─┘
                      ├─   0.386937s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=3}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=3}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                └─┐process_plain_field_edge{parent_fetch_step_index=3, type_name="Product", field="category", leaf=false, list=false, response_path="productFromD", fetch_path=""}
                  ├─   0.387055s   0ms DEBUG adding output field 'category' to fetch step [3]
                  └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=3}
                    └─┐process_entity_move_edge{edge="Category/b -(🔑🧩{id})- Category/c", parent_fetch_step_index=3}
                      ├─   0.387102s   0ms DEBUG created a new fetch step [4] subgraph(c) type(Category) requirement() key({id}) in children of 3
                      ├─   0.387125s   0ms DEBUG adding input requirement '{id}' to fetch step [4]
                      ├─   0.387136s   0ms DEBUG adding __typename field to output for type 'Category'
                      ├─   0.387145s   0ms DEBUG connecting fetch step to parent [3] -> [4]
                      └─┐connect{parent=3, child=4}
                      ┌─┘
                      └─┐process_requirements_for_fetch_steps{count=1}
                        └─┐process_noop_edge{}
                          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3, requiring_fetch_step_index=4}
                            └─┐process_plain_field_edge{parent_fetch_step_index=3, requiring_fetch_step_index=4, type_name="Category", field="id", leaf=true, list=false, response_path="productFromD.category", fetch_path="category"}
                              ├─   0.387236s   0ms DEBUG connecting parent fetch step [3] to requiring fetch step [4]
                              └─┐connect{parent=3, child=4}
                              ┌─┘
                              ├─   0.387272s   0ms DEBUG adding output field 'id' to fetch step [3]
                              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3, requiring_fetch_step_index=4}
                              ┌─┘
                            ┌─┘
                          ┌─┘
                        ┌─┘
                        └─┐connect{parent=3, child=4}
                        ┌─┘
                      ┌─┘
                      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                        └─┐process_plain_field_edge{parent_fetch_step_index=4, type_name="Category", field="name", leaf=true, list=false, response_path="productFromD.category", fetch_path=""}
                          ├─   0.387397s   0ms DEBUG adding output field 'name' to fetch step [4]
                          └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4}
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                    └─┐process_plain_field_edge{parent_fetch_step_index=3, type_name="Category", field="id", leaf=true, list=false, response_path="productFromD.category", fetch_path="category"}
                      ├─   0.387463s   0ms DEBUG adding output field 'id' to fetch step [3]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="name", leaf=true, list=false, response_path="productFromD", fetch_path="productFromD"}
              ├─   0.387534s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="id", leaf=true, list=false, response_path="productFromD", fetch_path="productFromD"}
              ├─   0.387572s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.387637s   1ms DEBUG Done
├─   0.387646s   1ms DEBUG found roots
├─   0.387651s   1ms DEBUG print graph
├─   0.387656s   1ms DEBUG Nodes:
│ [1] Query/d {} → {productFromD(id: "1"){__typename id name}} at $.
│ [2] Product/a {__typename id} → {category{details}} at $.productFromD
│ [3] Product/b {__typename id} → {category{__typename id}} at $.productFromD
│ [4] Category/c {__typename id} → {name} at $.productFromD.category
│ 
│ Tree:
│ [1]
│   [2]
│   [3]
│     [4]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="d"}
      └─┐execute{subgraph_name="d"}
        ├─   0.388277s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.388732s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.389129s   1ms DEBUG connected to 127.0.0.1:4200
        ├─   0.393570s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐ParallelNode::execute{data=Object {"productFromD": Object {"__typename": String("Product"), "id": String("1"), "name": String("Product#1")}}, representations=[]}
    └─┐FlattenNode::execute{data=Object {"productFromD": Object {"__typename": String("Product"), "id": String("1"), "name": String("Product#1")}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("1"), "name": String("Product#1")}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("1"), "name": String("Product#1")}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("1"), "name": String("Product#1")}}
            └─┐project_requires{requires_selections=[], entity=String("Product")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("1")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="b"}
          └─┐execute{subgraph_name="b"}
            ├─   0.394076s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
    └─┐FlattenNode::execute{data=Object {"productFromD": Object {"__typename": String("Product"), "id": String("1"), "name": String("Product#1")}}, representations=[]}
      └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Product"), "id": String("1"), "name": String("Product#1")}]}
        └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Product", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Product"), "id": String("1"), "name": String("Product#1")}}
          └─┐entity_satisfies_type_condition{possible_types={}, type_name="Product", type_condition="Product"}
          ┌─┘
          └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Product"), "id": String("1"), "name": String("Product#1")}}
            └─┐project_requires{requires_selections=[], entity=String("Product")}
            ┌─┘
            └─┐project_requires{requires_selections=[], entity=String("1")}
            ┌─┘
          ┌─┘
        ┌─┘
        └─┐execute{subgraph_name="a"}
          └─┐execute{subgraph_name="a"}
            ├─   0.394351s   0ms DEBUG starting new connection: http://localhost:4200/
            ├─   0.394536s   0ms DEBUG connecting to 127.0.0.1:4200
            ├─   0.394880s   0ms DEBUG connected to 127.0.0.1:4200
            ├─   0.397831s   3ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
            ├─   0.400882s   6ms DEBUG pooling idle connection for ("http", localhost:4200)
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"productFromD": Object {"__typename": String("Product"), "id": String("1"), "name": String("Product#1"), "category": Object {"__typename": String("Category"), "id": String("3"), "details": String("Details for Product#1")}}}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Category"), "id": String("3"), "details": String("Details for Product#1")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Category", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Category"), "id": String("3"), "details": String("Details for Product#1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="Category", type_condition="Category"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Category"), "id": String("3"), "details": String("Details for Product#1")}}
          └─┐project_requires{requires_selections=[], entity=String("Category")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("3")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.401455s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.406050s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.406533s DEBUG execution result: ExecutionResult { data: Some(Object {"productFromD": Object {"id": String("1"), "name": String("Product#1"), "category": Object {"id": String("3"), "name": String("Category#3"), "details": String("Details for Product#1")}}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("d"), "operationKind": String("query"), "operation": String("{productFromD(id: \"1\"){__typename id name}}")}, Object {"kind": String("Parallel"), "nodes": Array [Object {"kind": String("Flatten"), "path": Array [String("productFromD")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{category{__typename id}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("productFromD")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Product{category{details}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Product"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}, Object {"kind": String("Flatten"), "path": Array [String("productFromD"), String("category")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Category{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Category"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
