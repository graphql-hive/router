generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.14s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_enum_type{name="FriendType"}
  ┌─┘
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="User"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="AGE"}
┌─┘
└─┐decompose_from_supergraph{graph_id="FRIENDS"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.007114s   0ms DEBUG Building graph for supergraph with 16 definitions
  └─┐build_root_nodes{}
    ├─   0.007178s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.007265s   0ms INFO [x] Creating owned field move edge 'User.__typename/AGE' (type: String)
    ├─   0.007292s   0ms INFO [x] Creating field move edge 'User.id/AGE' (type: ID)
    ├─   0.007305s   0ms INFO [x] Creating field move edge 'User.id/AGE' (type: ID)
    ├─   0.007315s   0ms INFO [x] Creating field move edge 'User.age/AGE' (type: Int)
    ├─   0.007325s   0ms INFO [x] Creating field move edge 'User.age/AGE' (type: Int)
    ├─   0.007335s   0ms INFO [ ] Field 'User.type/AGE' does is not available in the subgraph, skipping edge creation (type: FriendType)
    ├─   0.007344s   0ms INFO [ ] Field 'User.friends/AGE' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.007352s   0ms INFO [x] Creating owned field move edge 'User.__typename/FRIENDS' (type: String)
    ├─   0.007367s   0ms INFO [x] Creating field move edge 'User.id/FRIENDS' (type: ID)
    ├─   0.007380s   0ms INFO [x] Creating field move edge 'User.id/FRIENDS' (type: ID)
    ├─   0.007389s   0ms INFO [ ] Field 'User.age/FRIENDS' does is not available in the subgraph, skipping edge creation (type: Int)
    ├─   0.007397s   0ms INFO [x] Creating field move edge 'User.type/FRIENDS' (type: FriendType)
    ├─   0.007406s   0ms INFO [x] Creating field move edge 'User.type/FRIENDS' (type: FriendType)
    ├─   0.007416s   0ms INFO [x] Creating field move edge 'User.friends/FRIENDS' (type: User)
    ├─   0.007426s   0ms INFO [x] Creating field move edge 'User.friends/FRIENDS' (type: User)
    ├─   0.007439s   0ms INFO [x] Creating owned field move edge 'Query.__typename/AGE' (type: String)
    ├─   0.007449s   0ms INFO [ ] Field 'Query.usersInFriends/AGE' does is not available in the subgraph, skipping edge creation (type: User)
    ├─   0.007457s   0ms INFO [x] Creating field move edge 'Query.usersInAge/AGE' (type: User)
    ├─   0.007467s   0ms INFO [x] Creating field move edge 'Query.usersInAge/AGE' (type: User)
    ├─   0.007479s   0ms INFO [x] Creating owned field move edge 'Query.__typename/FRIENDS' (type: String)
    ├─   0.007493s   0ms INFO [x] Creating field move edge 'Query.usersInFriends/FRIENDS' (type: User)
    ├─   0.007503s   0ms INFO [x] Creating field move edge 'Query.usersInFriends/FRIENDS' (type: User)
    ├─   0.007540s   0ms INFO [ ] Field 'Query.usersInAge/FRIENDS' does is not available in the subgraph, skipping edge creation (type: User)
  ┌─┘
  └─┐build_interface_implementation_edges{}
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.007713s   0ms INFO Creating self-referencing entity move edge in 'User/AGE' via key 'id'
    ├─   0.007768s   0ms INFO Creating entity move edge from 'User/AGE' to 'User/FRIENDS' via key 'id'
    ├─   0.007844s   0ms INFO Creating entity move edge from 'User/FRIENDS' to 'User/AGE' via key 'id'
    ├─   0.007916s   0ms INFO Creating self-referencing entity move edge in 'User/FRIENDS' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.071343s INFO Starting server on http://localhost:4000
   0.072891s INFO starting 16 workers
   0.072971s INFO Actix runtime found; starting in Actix runtime
   0.072980s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.178303s DEBUG original document: query ping {
  __typename
}

   0.178415s DEBUG normalized document: query ping {__typename}

   0.178435s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.178843s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.263176s DEBUG original document: query {
  usersInAge {
    id
    friends {
      id
    }
  }
}

   0.263301s DEBUG normalized document: query{usersInAge{id friends{id}}}

   0.263327s DEBUG executable operation: query{usersInAge{id friends{id}}}
┐walk_operation{}
├─   0.263735s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="usersInAge", leaf=false}
  ├─   0.263799s   0ms DEBUG Trying to advance to: usersInAge{id friends{id}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(age)- Query/age"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "usersInAge", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age", current_cost=1000}
      ├─   0.263872s   0ms DEBUG checking edge Query/age -(usersInAge)- User/age
      └─┐can_satisfy_edge{path="root(Query) -(age)- Query/age", edge="usersInAge"}
        ├─   0.263895s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.263923s   0ms DEBUG Advancing path root(Query) -(age)- Query/age with edge Query/age -(usersInAge)- User/age
      ├─   0.263936s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.263953s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "usersInAge", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age", current_cost=1000}
      ├─   0.264009s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.264021s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.264038s   0ms DEBUG Indirect paths found: 0
    ├─   0.264049s   0ms DEBUG advanced: root(Query) -(age)- Query/age
  ┌─┘
  └─┐explore_path{path="root(Query) -(friends)- Query/friends"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "usersInAge", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends", current_cost=1000}
      ├─   0.264086s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.264098s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "usersInAge", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends", current_cost=1000}
      ├─   0.264118s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.264123s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.264135s   0ms DEBUG Indirect paths found: 0
    ├─   0.264142s   0ms WARN failed to advance: root(Query) -(friends)- Query/friends
  ┌─┘
  ├─   0.264163s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="friends", leaf=false}
  ├─   0.264186s   0ms DEBUG Trying to advance to: friends{id} through 1 possible paths
  └─┐explore_path{path="root(Query) -(age)- Query/age -(usersInAge)- User/age"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age", current_cost=1001}
      ├─   0.264213s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.264225s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age", current_cost=1001}
      ├─   0.264245s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/friends
      └─┐can_satisfy_edge{path="root(Query) -(age)- Query/age -(usersInAge)- User/age", edge="id"}
        ├─   0.264268s   0ms DEBUG checking requirements {id} for edge 'User/age -(🔑🧩{id})- User/friends'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age", current_cost=1001}
              ├─   0.264307s   0ms DEBUG checking edge User/age -(id)- ID/age
              └─┐can_satisfy_edge{path="root(Query) -(age)- Query/age -(usersInAge)- User/age", edge="id"}
                ├─   0.264327s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.264345s   0ms DEBUG Advancing path root(Query) -(age)- Query/age -(usersInAge)- User/age with edge User/age -(id)- ID/age
              ├─   0.264355s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age", current_cost=1001}
              ├─   0.264390s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/friends
              ├─   0.264400s   0ms DEBUG Ignoring, graph is excluded and already visited (current: friends, visited: {"friends"})
              ├─   0.264409s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/age
              ├─   0.264416s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.264424s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.264430s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.264448s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.264491s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.264510s   0ms DEBUG Paths for id
        ├─   0.264522s   0ms DEBUG   Path root(Query) -(age)- Query/age -(usersInAge)- User/age -(id)- ID/age is valid
        ├─   0.264529s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.264562s   0ms DEBUG path User/age -(id)- ID/age is valid
        ├─   0.264572s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.264593s   0ms DEBUG Advancing path to User/age -(🔑🧩{id})- User/friends
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="User/age"}
        └─┐create_root_for_path_sequences{root_node="User/age", segments_count=1}
          ├─   0.264625s   0ms DEBUG Building root query tree node: User/age
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.264641s   0ms DEBUG Processing edge: User/age -(id)- ID/age
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.264664s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends", current_cost=2003}
        ├─   0.264730s   0ms DEBUG checking edge User/friends -(friends)- User/friends
        └─┐can_satisfy_edge{path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends", edge="friends"}
          ├─   0.264759s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.264779s   0ms DEBUG Advancing path root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends with edge User/friends -(friends)- User/friends
        ├─   0.264790s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(14) --> EdgeIndex(8)" }])
      ┌─┘
      ├─   0.264809s   0ms DEBUG Found 1 direct paths to User/age -(🔑🧩{id})- User/friends
      ├─   0.264819s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/age
      ├─   0.264825s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.264833s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.264839s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(14) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.264853s   0ms DEBUG Indirect paths found: 1
    ├─   0.264862s   0ms DEBUG advanced: root(Query) -(age)- Query/age -(usersInAge)- User/age
  ┌─┘
  ├─   0.264873s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.264910s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends", current_cost=2004}
      ├─   0.264952s   0ms DEBUG checking edge User/friends -(id)- ID/friends
      └─┐can_satisfy_edge{path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends", edge="id"}
        ├─   0.264972s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.264991s   0ms DEBUG Advancing path root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends with edge User/friends -(id)- ID/friends
      ├─   0.265000s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(14) --> EdgeIndex(8) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.265020s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends", current_cost=2004}
      ├─   0.265042s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
      ├─   0.265048s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.265054s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
      └─┐can_satisfy_edge{path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends", edge="id"}
        ├─   0.265073s   0ms DEBUG checking requirements {id} for edge 'User/friends -(🔑🧩{id})- User/age'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends", current_cost=2004}
              ├─   0.265125s   0ms DEBUG checking edge User/friends -(id)- ID/friends
              └─┐can_satisfy_edge{path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends", edge="id"}
                ├─   0.265155s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.265176s   0ms DEBUG Advancing path root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends with edge User/friends -(id)- ID/friends
              ├─   0.265186s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(14) --> EdgeIndex(8) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends", current_cost=2004}
              ├─   0.265224s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
              ├─   0.265232s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.265239s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
              ├─   0.265246s   0ms DEBUG Ignoring, graph is excluded and already visited (current: age, visited: {"age"})
              ├─   0.265255s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.265261s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.265278s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(14) --> EdgeIndex(8) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.265295s   0ms INFO return=Ok(Some(([ { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(14) --> EdgeIndex(8) --> EdgeIndex(6)" }], [])))
        ┌─┘
        ├─   0.265310s   0ms DEBUG Paths for id
        ├─   0.265322s   0ms DEBUG   Path root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends -(id)- ID/friends is valid
        ├─   0.265328s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.265342s   0ms DEBUG path User/friends -(id)- ID/friends is valid
        ├─   0.265348s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.265363s   0ms DEBUG Advancing path to User/friends -(🔑🧩{id})- User/age
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="User/friends"}
        └─┐create_root_for_path_sequences{root_node="User/friends", segments_count=1}
          ├─   0.265409s   0ms DEBUG Building root query tree node: User/friends
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.265426s   0ms DEBUG Processing edge: User/friends -(id)- ID/friends
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.265449s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends -(🔑🧩{id})- User/age", current_cost=3006}
        ├─   0.265499s   0ms DEBUG checking edge User/age -(id)- ID/age
        └─┐can_satisfy_edge{path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends -(🔑🧩{id})- User/age", edge="id"}
          ├─   0.265520s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.265537s   0ms DEBUG Advancing path root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends -(🔑🧩{id})- User/age with edge User/age -(id)- ID/age
        ├─   0.265545s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(14) --> EdgeIndex(8) --> EdgeIndex(15) --> EdgeIndex(3)" }])
      ┌─┘
      ├─   0.265561s   0ms DEBUG Found 1 direct paths to User/friends -(🔑🧩{id})- User/age
      ├─   0.265573s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.265578s   0ms INFO return=Ok([ { cost: 3007, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(14) --> EdgeIndex(8) --> EdgeIndex(15) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.265593s   0ms DEBUG Indirect paths found: 1
    ├─   0.265604s   0ms DEBUG advanced: root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends -(friends)- User/friends
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.265640s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(age)- Query/age -(usersInAge)- User/age"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age", current_cost=1001}
      ├─   0.265665s   0ms DEBUG checking edge User/age -(id)- ID/age
      └─┐can_satisfy_edge{path="root(Query) -(age)- Query/age -(usersInAge)- User/age", edge="id"}
        ├─   0.265681s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.265696s   0ms DEBUG Advancing path root(Query) -(age)- Query/age -(usersInAge)- User/age with edge User/age -(id)- ID/age
      ├─   0.265703s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.265717s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age", current_cost=1001}
      ├─   0.265736s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/friends
      └─┐can_satisfy_edge{path="root(Query) -(age)- Query/age -(usersInAge)- User/age", edge="id"}
        ├─   0.265753s   0ms DEBUG checking requirements {id} for edge 'User/age -(🔑🧩{id})- User/friends'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age", current_cost=1001}
              ├─   0.265785s   0ms DEBUG checking edge User/age -(id)- ID/age
              └─┐can_satisfy_edge{path="root(Query) -(age)- Query/age -(usersInAge)- User/age", edge="id"}
                ├─   0.265802s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.265819s   0ms DEBUG Advancing path root(Query) -(age)- Query/age -(usersInAge)- User/age with edge User/age -(id)- ID/age
              ├─   0.265828s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age", current_cost=1001}
              ├─   0.265856s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/friends
              ├─   0.265863s   0ms DEBUG Ignoring, graph is excluded and already visited (current: friends, visited: {"friends"})
              ├─   0.265871s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/age
              ├─   0.265877s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.265885s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.265891s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.265906s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }], [])))
          ┌─┘
          ├─   0.265922s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }], [])))
        ┌─┘
        ├─   0.265936s   0ms DEBUG Paths for id
        ├─   0.265944s   0ms DEBUG   Path root(Query) -(age)- Query/age -(usersInAge)- User/age -(id)- ID/age is valid
        ├─   0.265950s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.265961s   0ms DEBUG path User/age -(id)- ID/age is valid
        ├─   0.265967s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(3)" }]))
      ┌─┘
      ├─   0.266006s   0ms DEBUG Advancing path to User/age -(🔑🧩{id})- User/friends
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(3)" }, root_node="User/age"}
        └─┐create_root_for_path_sequences{root_node="User/age", segments_count=1}
          ├─   0.266037s   0ms DEBUG Building root query tree node: User/age
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.266051s   0ms DEBUG Processing edge: User/age -(id)- ID/age
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.266072s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends", current_cost=2003}
        ├─   0.266118s   0ms DEBUG checking edge User/friends -(id)- ID/friends
        └─┐can_satisfy_edge{path="root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends", edge="id"}
          ├─   0.266137s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.266153s   0ms DEBUG Advancing path root(Query) -(age)- Query/age -(usersInAge)- User/age -(🔑🧩{id})- User/friends with edge User/friends -(id)- ID/friends
        ├─   0.266162s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(14) --> EdgeIndex(6)" }])
      ┌─┘
      ├─   0.266178s   0ms DEBUG Found 1 direct paths to User/age -(🔑🧩{id})- User/friends
      ├─   0.266209s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/age
      ├─   0.266218s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.266227s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.266236s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(14) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.266256s   0ms DEBUG Indirect paths found: 1
    ├─   0.266266s   0ms DEBUG advanced: root(Query) -(age)- Query/age -(usersInAge)- User/age
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2005, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(14) --> EdgeIndex(8) --> EdgeIndex(6)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=5}
  ├─   0.266312s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=5}
    ├─   0.266325s   0ms DEBUG Processing edge: root(Query) -(age)- Query/age
    └─┐from_path_segment_sequences{current_index=1, total_segments=5}
      ├─   0.266337s   0ms DEBUG Processing edge: Query/age -(usersInAge)- User/age
      └─┐from_path_segment_sequences{current_index=2, total_segments=5}
        ├─   0.266351s   0ms DEBUG Processing edge: User/age -(🔑🧩{id})- User/friends
        └─┐from_path_segment_sequences{current_index=3, total_segments=5}
          ├─   0.266364s   0ms DEBUG Processing edge: User/friends -(friends)- User/friends
          └─┐from_path_segment_sequences{current_index=4, total_segments=5}
            ├─   0.266377s   0ms DEBUG Processing edge: User/friends -(id)- ID/friends
            └─┐from_path_segment_sequences{current_index=5, total_segments=5}
            ┌─┘
            ├─   0.266398s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
          ├─   0.266412s   0ms DEBUG Adding subsequent step as child
        ┌─┘
        ├─   0.266423s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.266434s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.266445s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(10) --> EdgeIndex(3)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.266479s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.266491s   0ms DEBUG Processing edge: root(Query) -(age)- Query/age
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.266502s   0ms DEBUG Processing edge: Query/age -(usersInAge)- User/age
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.266514s   0ms DEBUG Processing edge: User/age -(id)- ID/age
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.266532s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.266543s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.266554s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="age", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="usersInAge", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.266722s   0ms DEBUG adding output field 'usersInAge' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="User/age -(🔑🧩{id})- User/friends", parent_fetch_step_index=1}
              ├─   0.266786s   0ms DEBUG created a new fetch step [2] subgraph(friends) type(User) requirement() key({id}) in children of 1
              ├─   0.266798s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.266806s   0ms DEBUG adding __typename field to output for type 'User'
              ├─   0.266814s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="usersInAge.@", fetch_path="usersInAge.@"}
                      ├─   0.266899s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.266944s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="friends", leaf=false, list=true, response_path="usersInAge.@", fetch_path=""}
                  ├─   0.267062s   0ms DEBUG adding output field 'friends' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="User", field="id", leaf=true, list=false, response_path="usersInAge.@.friends.@", fetch_path="friends.@"}
                      ├─   0.267111s   0ms DEBUG adding output field 'id' to fetch step [2]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="usersInAge.@", fetch_path="usersInAge.@"}
              ├─   0.267186s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.267253s   0ms DEBUG Done
├─   0.267262s   0ms DEBUG found roots
├─   0.267267s   0ms DEBUG print graph
├─   0.267272s   0ms DEBUG Nodes:
│ [1] Query/age {} → {usersInAge{__typename id}} at $.
│ [2] User/friends {__typename id} → {friends{id}} at $.usersInAge.@
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="age"}
      └─┐execute{subgraph_name="age"}
        ├─   0.267797s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.268313s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.268702s   1ms DEBUG connected to 127.0.0.1:4200
        ├─   0.273322s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"usersInAge": Array [Object {"__typename": String("User"), "id": String("u1")}, Object {"__typename": String("User"), "id": String("u2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1")}, Object {"__typename": String("User"), "id": String("u2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u2")}}
        └─┐entity_satisfies_type_condition{possible_types={}, type_name="User", type_condition="User"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u2")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="friends"}
        └─┐execute{subgraph_name="friends"}
          ├─   0.274026s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.278727s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.279214s DEBUG execution result: ExecutionResult { data: Some(Object {"usersInAge": Array [Object {"id": String("u1"), "friends": Array [Object {"id": String("u2")}]}, Object {"id": String("u2"), "friends": Array [Object {"id": String("u1")}]}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("age"), "operationKind": String("query"), "operation": String("{usersInAge{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("usersInAge"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("friends"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on User{friends{id}}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("User"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.286638s DEBUG original document: query {
  usersInFriends {
    id
    friends {
      id
    }
  }
}

   0.286735s DEBUG normalized document: query{usersInFriends{id friends{id}}}

   0.286749s DEBUG executable operation: query{usersInFriends{id friends{id}}}
┐walk_operation{}
├─   0.287121s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="usersInFriends", leaf=false}
  ├─   0.287191s   0ms DEBUG Trying to advance to: usersInFriends{id friends{id}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(age)- Query/age"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "usersInFriends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age", current_cost=1000}
      ├─   0.287285s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.287311s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "usersInFriends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age", current_cost=1000}
      ├─   0.287347s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.287356s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.287372s   0ms DEBUG Indirect paths found: 0
    ├─   0.287387s   0ms WARN failed to advance: root(Query) -(age)- Query/age
  ┌─┘
  └─┐explore_path{path="root(Query) -(friends)- Query/friends"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "usersInFriends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends", current_cost=1000}
      ├─   0.287460s   0ms DEBUG checking edge Query/friends -(usersInFriends)- User/friends
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends", edge="usersInFriends"}
        ├─   0.287491s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.287510s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends with edge Query/friends -(usersInFriends)- User/friends
      ├─   0.287521s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.287538s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "usersInFriends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends", current_cost=1000}
      ├─   0.287565s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.287572s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.287584s   0ms DEBUG Indirect paths found: 0
    ├─   0.287591s   0ms DEBUG advanced: root(Query) -(friends)- Query/friends
  ┌─┘
  ├─   0.287607s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="friends", leaf=false}
  ├─   0.287630s   0ms DEBUG Trying to advance to: friends{id} through 1 possible paths
  └─┐explore_path{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
      ├─   0.287679s   0ms DEBUG checking edge User/friends -(friends)- User/friends
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", edge="friends"}
        ├─   0.287706s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.287725s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends with edge User/friends -(friends)- User/friends
      ├─   0.287735s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.287750s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
      ├─   0.287789s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
      ├─   0.287813s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.287820s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", edge="id"}
        ├─   0.287844s   0ms DEBUG checking requirements {id} for edge 'User/friends -(🔑🧩{id})- User/age'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
              ├─   0.287883s   0ms DEBUG checking edge User/friends -(id)- ID/friends
              └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", edge="id"}
                ├─   0.287906s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.287928s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends with edge User/friends -(id)- ID/friends
              ├─   0.287938s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
              ├─   0.287969s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
              ├─   0.287978s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.287985s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
              ├─   0.287992s   0ms DEBUG Ignoring, graph is excluded and already visited (current: age, visited: {"age"})
              ├─   0.288009s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.288015s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.288036s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.288100s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }], [])))
        ┌─┘
        ├─   0.288130s   0ms DEBUG Paths for id
        ├─   0.288143s   0ms DEBUG   Path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(id)- ID/friends is valid
        ├─   0.288151s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.288169s   0ms DEBUG path User/friends -(id)- ID/friends is valid
        ├─   0.288177s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.288222s   0ms DEBUG Advancing path to User/friends -(🔑🧩{id})- User/age
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="User/friends"}
        └─┐create_root_for_path_sequences{root_node="User/friends", segments_count=1}
          ├─   0.288259s   0ms DEBUG Building root query tree node: User/friends
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.288306s   0ms DEBUG Processing edge: User/friends -(id)- ID/friends
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.288337s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(🔑🧩{id})- User/age", current_cost=2003}
        ├─   0.288392s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.288408s   0ms DEBUG No direct paths found
      ├─   0.288419s   0ms DEBUG going deeper
      ├─   0.288449s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/friends
      ├─   0.288460s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.288466s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/age
      ├─   0.288471s   0ms DEBUG Ignoring, graph is excluded and already visited (current: age, visited: {"age"})
      ├─   0.288482s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.288501s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.288521s   0ms DEBUG Indirect paths found: 0
    ├─   0.288532s   0ms DEBUG advanced: root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends
  ┌─┘
  ├─   0.288546s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.288570s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", current_cost=1002}
      ├─   0.288599s   0ms DEBUG checking edge User/friends -(id)- ID/friends
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", edge="id"}
        ├─   0.288617s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.288633s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends with edge User/friends -(id)- ID/friends
      ├─   0.288643s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.288658s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", current_cost=1002}
      ├─   0.288679s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
      ├─   0.288685s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.288691s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", edge="id"}
        ├─   0.288721s   0ms DEBUG checking requirements {id} for edge 'User/friends -(🔑🧩{id})- User/age'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", current_cost=1002}
              ├─   0.288755s   0ms DEBUG checking edge User/friends -(id)- ID/friends
              └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", edge="id"}
                ├─   0.288773s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.288791s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends with edge User/friends -(id)- ID/friends
              ├─   0.288800s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", current_cost=1002}
              ├─   0.288842s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
              ├─   0.288854s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.288861s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
              ├─   0.288868s   0ms DEBUG Ignoring, graph is excluded and already visited (current: age, visited: {"age"})
              ├─   0.288877s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.288883s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.288901s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.288919s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(6)" }], [])))
        ┌─┘
        ├─   0.288933s   0ms DEBUG Paths for id
        ├─   0.288943s   0ms DEBUG   Path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends -(id)- ID/friends is valid
        ├─   0.288950s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.288967s   0ms DEBUG path User/friends -(id)- ID/friends is valid
        ├─   0.288973s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.288987s   0ms DEBUG Advancing path to User/friends -(🔑🧩{id})- User/age
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="User/friends"}
        └─┐create_root_for_path_sequences{root_node="User/friends", segments_count=1}
          ├─   0.289015s   0ms DEBUG Building root query tree node: User/friends
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.289064s   0ms DEBUG Processing edge: User/friends -(id)- ID/friends
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.289089s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends -(🔑🧩{id})- User/age", current_cost=2004}
        ├─   0.289141s   0ms DEBUG checking edge User/age -(id)- ID/age
        └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends -(🔑🧩{id})- User/age", edge="id"}
          ├─   0.289171s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.289197s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends -(🔑🧩{id})- User/age with edge User/age -(id)- ID/age
        ├─   0.289210s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(15) --> EdgeIndex(3)" }])
      ┌─┘
      ├─   0.289230s   0ms DEBUG Found 1 direct paths to User/friends -(🔑🧩{id})- User/age
      ├─   0.289242s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.289248s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(15) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.289263s   0ms DEBUG Indirect paths found: 1
    ├─   0.289274s   0ms DEBUG advanced: root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.289305s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
      ├─   0.289333s   0ms DEBUG checking edge User/friends -(id)- ID/friends
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", edge="id"}
        ├─   0.289357s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.289372s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends with edge User/friends -(id)- ID/friends
      ├─   0.289380s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.289394s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
      ├─   0.289414s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
      ├─   0.289420s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.289425s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", edge="id"}
        ├─   0.289442s   0ms DEBUG checking requirements {id} for edge 'User/friends -(🔑🧩{id})- User/age'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
              ├─   0.289475s   0ms DEBUG checking edge User/friends -(id)- ID/friends
              └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", edge="id"}
                ├─   0.289493s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.289510s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends with edge User/friends -(id)- ID/friends
              ├─   0.289519s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
              ├─   0.289558s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
              ├─   0.289567s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.289577s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
              ├─   0.289584s   0ms DEBUG Ignoring, graph is excluded and already visited (current: age, visited: {"age"})
              ├─   0.289593s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.289599s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.289617s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.289635s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }], [])))
        ┌─┘
        ├─   0.289672s   0ms DEBUG Paths for id
        ├─   0.289686s   0ms DEBUG   Path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(id)- ID/friends is valid
        ├─   0.289692s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.289704s   0ms DEBUG path User/friends -(id)- ID/friends is valid
        ├─   0.289710s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.289727s   0ms DEBUG Advancing path to User/friends -(🔑🧩{id})- User/age
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="User/friends"}
        └─┐create_root_for_path_sequences{root_node="User/friends", segments_count=1}
          ├─   0.289754s   0ms DEBUG Building root query tree node: User/friends
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.289769s   0ms DEBUG Processing edge: User/friends -(id)- ID/friends
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.289791s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(🔑🧩{id})- User/age", current_cost=2003}
        ├─   0.289837s   0ms DEBUG checking edge User/age -(id)- ID/age
        └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(🔑🧩{id})- User/age", edge="id"}
          ├─   0.289857s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.289873s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(🔑🧩{id})- User/age with edge User/age -(id)- ID/age
        ├─   0.289882s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(15) --> EdgeIndex(3)" }])
      ┌─┘
      ├─   0.289898s   0ms DEBUG Found 1 direct paths to User/friends -(🔑🧩{id})- User/age
      ├─   0.289909s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.289915s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(15) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.289929s   0ms DEBUG Indirect paths found: 1
    ├─   0.289937s   0ms DEBUG advanced: root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(6)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.289984s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.289998s   0ms DEBUG Processing edge: root(Query) -(friends)- Query/friends
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.290011s   0ms DEBUG Processing edge: Query/friends -(usersInFriends)- User/friends
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.290023s   0ms DEBUG Processing edge: User/friends -(friends)- User/friends
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.290037s   0ms DEBUG Processing edge: User/friends -(id)- ID/friends
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.290057s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.290069s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.290082s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.290094s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.290130s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.290142s   0ms DEBUG Processing edge: root(Query) -(friends)- Query/friends
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.290166s   0ms DEBUG Processing edge: Query/friends -(usersInFriends)- User/friends
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.290178s   0ms DEBUG Processing edge: User/friends -(id)- ID/friends
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.290197s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.290209s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.290249s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="friends", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="usersInFriends", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.290403s   0ms DEBUG adding output field 'usersInFriends' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="friends", leaf=false, list=true, response_path="usersInFriends.@", fetch_path="usersInFriends.@"}
              ├─   0.290442s   0ms DEBUG adding output field 'friends' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
                └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="usersInFriends.@.friends.@", fetch_path="usersInFriends.@.friends.@"}
                  ├─   0.290471s   0ms DEBUG adding output field 'id' to fetch step [1]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="usersInFriends.@", fetch_path="usersInFriends.@"}
              ├─   0.290544s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.290614s   0ms DEBUG Done
├─   0.290622s   0ms DEBUG found roots
├─   0.290627s   0ms DEBUG print graph
├─   0.290633s   0ms DEBUG Nodes:
│ [1] Query/friends {} → {usersInFriends{friends{id} id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="friends"}
    └─┐execute{subgraph_name="friends"}
      ├─   0.291058s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.293626s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.294014s DEBUG execution result: ExecutionResult { data: Some(Object {"usersInFriends": Array [Object {"id": String("u1"), "friends": Array [Object {"id": String("u2")}]}, Object {"id": String("u2"), "friends": Array [Object {"id": String("u1")}]}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("friends"), "operationKind": String("query"), "operation": String("{usersInFriends{friends{id} id}}")}}}) }
   0.297472s DEBUG original document: query {
  usersInFriends {
    id
    friends(type: FRIEND) {
      id
    }
  }
}

   0.297581s DEBUG normalized document: query{usersInFriends{id friends(type: FRIEND){id}}}

   0.297601s DEBUG executable operation: query{usersInFriends{id friends(type: FRIEND){id}}}
   0.300248s DEBUG original document: query {
  usersInFriends {
    id
    friends {
      id
      type
    }
  }
}

   0.300339s DEBUG normalized document: query{usersInFriends{id friends{id type}}}

   0.300351s DEBUG executable operation: query{usersInFriends{id friends{id type}}}
┐walk_operation{}
├─   0.300617s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="usersInFriends", leaf=false}
  ├─   0.300666s   0ms DEBUG Trying to advance to: usersInFriends{id friends{id type}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(age)- Query/age"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "usersInFriends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "type", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age", current_cost=1000}
      ├─   0.300716s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.300741s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "usersInFriends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "type", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(age)- Query/age", current_cost=1000}
      ├─   0.300767s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.300773s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.300785s   0ms DEBUG Indirect paths found: 0
    ├─   0.300795s   0ms WARN failed to advance: root(Query) -(age)- Query/age
  ┌─┘
  └─┐explore_path{path="root(Query) -(friends)- Query/friends"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "usersInFriends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "type", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends", current_cost=1000}
      ├─   0.300826s   0ms DEBUG checking edge Query/friends -(usersInFriends)- User/friends
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends", edge="usersInFriends"}
        ├─   0.300845s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.300860s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends with edge Query/friends -(usersInFriends)- User/friends
      ├─   0.300869s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.300906s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "usersInFriends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "type", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends", current_cost=1000}
      ├─   0.300939s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.300945s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.300957s   0ms DEBUG Indirect paths found: 0
    ├─   0.300964s   0ms DEBUG advanced: root(Query) -(friends)- Query/friends
  ┌─┘
  ├─   0.300978s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="friends", leaf=false}
  ├─   0.301000s   0ms DEBUG Trying to advance to: friends{id type} through 1 possible paths
  └─┐explore_path{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "type", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
      ├─   0.301030s   0ms DEBUG checking edge User/friends -(friends)- User/friends
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", edge="friends"}
        ├─   0.301048s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.301063s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends with edge User/friends -(friends)- User/friends
      ├─   0.301071s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.301090s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "type", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
      ├─   0.301110s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
      ├─   0.301116s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.301122s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", edge="id"}
        ├─   0.301143s   0ms DEBUG checking requirements {id} for edge 'User/friends -(🔑🧩{id})- User/age'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
              ├─   0.301215s   0ms DEBUG checking edge User/friends -(id)- ID/friends
              └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", edge="id"}
                ├─   0.301241s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.301261s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends with edge User/friends -(id)- ID/friends
              ├─   0.301271s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
              ├─   0.301304s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
              ├─   0.301312s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.301319s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
              ├─   0.301327s   0ms DEBUG Ignoring, graph is excluded and already visited (current: age, visited: {"age"})
              ├─   0.301336s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.301343s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.301360s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.301377s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }], [])))
        ┌─┘
        ├─   0.301392s   0ms DEBUG Paths for id
        ├─   0.301401s   0ms DEBUG   Path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(id)- ID/friends is valid
        ├─   0.301407s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.301422s   0ms DEBUG path User/friends -(id)- ID/friends is valid
        ├─   0.301430s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.301444s   0ms DEBUG Advancing path to User/friends -(🔑🧩{id})- User/age
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="User/friends"}
        └─┐create_root_for_path_sequences{root_node="User/friends", segments_count=1}
          ├─   0.301472s   0ms DEBUG Building root query tree node: User/friends
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.301487s   0ms DEBUG Processing edge: User/friends -(id)- ID/friends
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.301508s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "friends", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "type", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(🔑🧩{id})- User/age", current_cost=2003}
        ├─   0.301553s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.301566s   0ms DEBUG No direct paths found
      ├─   0.301576s   0ms DEBUG going deeper
      ├─   0.301585s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/friends
      ├─   0.301591s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.301597s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/age
      ├─   0.301603s   0ms DEBUG Ignoring, graph is excluded and already visited (current: age, visited: {"age"})
      ├─   0.301612s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.301617s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.301629s   0ms DEBUG Indirect paths found: 0
    ├─   0.301638s   0ms DEBUG advanced: root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends
  ┌─┘
  ├─   0.301651s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="type", leaf=true}
  ├─   0.301673s   0ms DEBUG Trying to advance to: type through 1 possible paths
  └─┐explore_path{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "type", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", current_cost=1002}
      ├─   0.301700s   0ms DEBUG checking edge User/friends -(type)- FriendType/friends
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", edge="type"}
        ├─   0.301716s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.301732s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends with edge User/friends -(type)- FriendType/friends
      ├─   0.301741s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.301756s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "type", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", current_cost=1002}
      ├─   0.301776s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
      ├─   0.301782s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.301787s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", edge="id"}
        ├─   0.301820s   0ms DEBUG checking requirements {id} for edge 'User/friends -(🔑🧩{id})- User/age'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", current_cost=1002}
              ├─   0.301864s   0ms DEBUG checking edge User/friends -(id)- ID/friends
              └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", edge="id"}
                ├─   0.301885s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.301905s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends with edge User/friends -(id)- ID/friends
              ├─   0.301915s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", current_cost=1002}
              ├─   0.301947s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
              ├─   0.301959s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.301966s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
              ├─   0.301972s   0ms DEBUG Ignoring, graph is excluded and already visited (current: age, visited: {"age"})
              ├─   0.301981s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.301987s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.302004s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.302020s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(6)" }], [])))
        ┌─┘
        ├─   0.302037s   0ms DEBUG Paths for id
        ├─   0.302047s   0ms DEBUG   Path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends -(id)- ID/friends is valid
        ├─   0.302053s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.302065s   0ms DEBUG path User/friends -(id)- ID/friends is valid
        ├─   0.302090s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.302114s   0ms DEBUG Advancing path to User/friends -(🔑🧩{id})- User/age
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="User/friends"}
        └─┐create_root_for_path_sequences{root_node="User/friends", segments_count=1}
          ├─   0.302142s   0ms DEBUG Building root query tree node: User/friends
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.302158s   0ms DEBUG Processing edge: User/friends -(id)- ID/friends
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.302201s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "type", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends -(🔑🧩{id})- User/age", current_cost=2004}
        ├─   0.302270s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.302288s   0ms DEBUG No direct paths found
      ├─   0.302298s   0ms DEBUG going deeper
      ├─   0.302308s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/friends
      ├─   0.302314s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.302320s   0ms DEBUG Exploring edge User/age -(🔑🧩{id})- User/age
      ├─   0.302326s   0ms DEBUG Ignoring, graph is excluded and already visited (current: age, visited: {"age"})
      ├─   0.302335s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.302341s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.302353s   0ms DEBUG Indirect paths found: 0
    ├─   0.302363s   0ms DEBUG advanced: root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.302393s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", current_cost=1002}
      ├─   0.302420s   0ms DEBUG checking edge User/friends -(id)- ID/friends
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", edge="id"}
        ├─   0.302437s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.302452s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends with edge User/friends -(id)- ID/friends
      ├─   0.302461s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.302475s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", current_cost=1002}
      ├─   0.302494s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
      ├─   0.302502s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.302507s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", edge="id"}
        ├─   0.302524s   0ms DEBUG checking requirements {id} for edge 'User/friends -(🔑🧩{id})- User/age'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", current_cost=1002}
              ├─   0.302556s   0ms DEBUG checking edge User/friends -(id)- ID/friends
              └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", edge="id"}
                ├─   0.302574s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.302591s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends with edge User/friends -(id)- ID/friends
              ├─   0.302611s   0ms INFO return=Ok([ { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends", current_cost=1002}
              ├─   0.302666s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
              ├─   0.302673s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.302680s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
              ├─   0.302687s   0ms DEBUG Ignoring, graph is excluded and already visited (current: age, visited: {"age"})
              ├─   0.302695s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.302701s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.302717s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.302733s   0ms INFO return=Ok(Some(([ { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(6)" }], [])))
        ┌─┘
        ├─   0.302747s   0ms DEBUG Paths for id
        ├─   0.302756s   0ms DEBUG   Path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends -(id)- ID/friends is valid
        ├─   0.302762s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.302774s   0ms DEBUG path User/friends -(id)- ID/friends is valid
        ├─   0.302780s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.302794s   0ms DEBUG Advancing path to User/friends -(🔑🧩{id})- User/age
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="User/friends"}
        └─┐create_root_for_path_sequences{root_node="User/friends", segments_count=1}
          ├─   0.302819s   0ms DEBUG Building root query tree node: User/friends
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.302835s   0ms DEBUG Processing edge: User/friends -(id)- ID/friends
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.302885s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends -(🔑🧩{id})- User/age", current_cost=2004}
        ├─   0.302938s   0ms DEBUG checking edge User/age -(id)- ID/age
        └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends -(🔑🧩{id})- User/age", edge="id"}
          ├─   0.302957s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.302974s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends -(🔑🧩{id})- User/age with edge User/age -(id)- ID/age
        ├─   0.302982s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(15) --> EdgeIndex(3)" }])
      ┌─┘
      ├─   0.303006s   0ms DEBUG Found 1 direct paths to User/friends -(🔑🧩{id})- User/age
      ├─   0.303017s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.303023s   0ms INFO return=Ok([ { cost: 2005, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(15) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.303041s   0ms DEBUG Indirect paths found: 1
    ├─   0.303052s   0ms DEBUG advanced: root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(friends)- User/friends
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.303081s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
      ├─   0.303107s   0ms DEBUG checking edge User/friends -(id)- ID/friends
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", edge="id"}
        ├─   0.303124s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.303178s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends with edge User/friends -(id)- ID/friends
      ├─   0.303191s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.303207s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
      ├─   0.303234s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
      ├─   0.303242s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.303251s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
      └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", edge="id"}
        ├─   0.303271s   0ms DEBUG checking requirements {id} for edge 'User/friends -(🔑🧩{id})- User/age'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
              ├─   0.303306s   0ms DEBUG checking edge User/friends -(id)- ID/friends
              └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", edge="id"}
                ├─   0.303324s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.303342s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends with edge User/friends -(id)- ID/friends
              ├─   0.303367s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends", current_cost=1001}
              ├─   0.303413s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/friends
              ├─   0.303421s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.303428s   0ms DEBUG Exploring edge User/friends -(🔑🧩{id})- User/age
              ├─   0.303434s   0ms DEBUG Ignoring, graph is excluded and already visited (current: age, visited: {"age"})
              ├─   0.303443s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.303449s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.303465s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }], [])))
          ┌─┘
          ├─   0.303489s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }], [])))
        ┌─┘
        ├─   0.303503s   0ms DEBUG Paths for id
        ├─   0.303512s   0ms DEBUG   Path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(id)- ID/friends is valid
        ├─   0.303518s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.303530s   0ms DEBUG path User/friends -(id)- ID/friends is valid
        ├─   0.303536s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(6)" }]))
      ┌─┘
      ├─   0.303550s   0ms DEBUG Advancing path to User/friends -(🔑🧩{id})- User/age
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(6)" }, root_node="User/friends"}
        └─┐create_root_for_path_sequences{root_node="User/friends", segments_count=1}
          ├─   0.303575s   0ms DEBUG Building root query tree node: User/friends
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.303590s   0ms DEBUG Processing edge: User/friends -(id)- ID/friends
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.303612s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(🔑🧩{id})- User/age", current_cost=2003}
        ├─   0.303710s   0ms DEBUG checking edge User/age -(id)- ID/age
        └─┐can_satisfy_edge{path="root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(🔑🧩{id})- User/age", edge="id"}
          ├─   0.303759s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.303780s   0ms DEBUG Advancing path root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends -(🔑🧩{id})- User/age with edge User/age -(id)- ID/age
        ├─   0.303791s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(15) --> EdgeIndex(3)" }])
      ┌─┘
      ├─   0.303808s   0ms DEBUG Found 1 direct paths to User/friends -(🔑🧩{id})- User/age
      ├─   0.303820s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.303826s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(15) --> EdgeIndex(3)" }])
    ┌─┘
    ├─   0.303841s   0ms DEBUG Indirect paths found: 1
    ├─   0.303850s   0ms DEBUG advanced: root(Query) -(friends)- Query/friends -(usersInFriends)- User/friends
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(7)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.303897s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.303910s   0ms DEBUG Processing edge: root(Query) -(friends)- Query/friends
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.303922s   0ms DEBUG Processing edge: Query/friends -(usersInFriends)- User/friends
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.303935s   0ms DEBUG Processing edge: User/friends -(friends)- User/friends
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.303948s   0ms DEBUG Processing edge: User/friends -(type)- FriendType/friends
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.303972s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.304000s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.304016s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.304027s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1003, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(8) --> EdgeIndex(6)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.304069s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.304082s   0ms DEBUG Processing edge: root(Query) -(friends)- Query/friends
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.304094s   0ms DEBUG Processing edge: Query/friends -(usersInFriends)- User/friends
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.304106s   0ms DEBUG Processing edge: User/friends -(friends)- User/friends
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.304123s   0ms DEBUG Processing edge: User/friends -(id)- ID/friends
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.304142s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.304154s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.304166s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.304176s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(12) --> EdgeIndex(6)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.304211s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.304223s   0ms DEBUG Processing edge: root(Query) -(friends)- Query/friends
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.304235s   0ms DEBUG Processing edge: Query/friends -(usersInFriends)- User/friends
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.304247s   0ms DEBUG Processing edge: User/friends -(id)- ID/friends
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.304266s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.304277s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.304288s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="friends", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="usersInFriends", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.304457s   0ms DEBUG adding output field 'usersInFriends' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="friends", leaf=false, list=true, response_path="usersInFriends.@", fetch_path="usersInFriends.@"}
              ├─   0.304518s   0ms DEBUG adding output field 'friends' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
                └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="type", leaf=false, list=false, response_path="usersInFriends.@.friends.@", fetch_path="usersInFriends.@.friends.@"}
                  ├─   0.304548s   0ms DEBUG adding output field 'type' to fetch step [1]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
                  ┌─┘
                ┌─┘
                └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="usersInFriends.@.friends.@", fetch_path="usersInFriends.@.friends.@"}
                  ├─   0.304598s   0ms DEBUG adding output field 'id' to fetch step [1]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="id", leaf=true, list=false, response_path="usersInFriends.@", fetch_path="usersInFriends.@"}
              ├─   0.304653s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.304721s   0ms DEBUG Done
├─   0.304731s   0ms DEBUG found roots
├─   0.304736s   0ms DEBUG print graph
├─   0.304741s   0ms DEBUG Nodes:
│ [1] Query/friends {} → {usersInFriends{friends{type id} id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="friends"}
    └─┐execute{subgraph_name="friends"}
      ├─   0.305243s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.307765s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.308109s DEBUG execution result: ExecutionResult { data: Some(Object {"usersInFriends": Array [Object {"id": String("u1"), "friends": Array [Object {"id": String("u2"), "type": Null}]}, Object {"id": String("u2"), "friends": Array [Object {"id": String("u1"), "type": Null}]}]}), errors: Some([GraphQLError { message: "Value 'FAMILY' is not a valid enum value for type 'FriendType'", locations: None, path: None, extensions: None }, GraphQLError { message: "Value 'FAMILY' is not a valid enum value for type 'FriendType'", locations: None, path: None, extensions: None }]), extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("friends"), "operationKind": String("query"), "operation": String("{usersInFriends{friends{type id} id}}")}}}) }
