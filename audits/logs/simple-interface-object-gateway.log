generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.17s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_interface_type{name="Account"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Admin"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_interface_type{name="NodeWithName"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Regular"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="User"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="C"}
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.007483s   0ms DEBUG Building graph for supergraph with 18 definitions
  └─┐build_root_nodes{}
    ├─   0.007525s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.007587s   0ms INFO [x] Creating owned field move edge 'Admin.__typename/A' (type: String)
    ├─   0.007604s   0ms INFO [x] Creating field move edge 'Admin.isMain/A' (type: Boolean)
    ├─   0.007616s   0ms INFO [x] Creating field move edge 'Admin.isMain/A' (type: Boolean)
    ├─   0.007623s   0ms INFO [x] Creating field move edge 'Admin.id/A' (type: ID)
    ├─   0.007630s   0ms INFO [x] Creating field move edge 'Admin.id/A' (type: ID)
    ├─   0.007636s   0ms INFO [x] Creating field move edge 'Admin.isActive/A' (type: Boolean)
    ├─   0.007643s   0ms INFO [x] Creating field move edge 'Admin.isActive/A' (type: Boolean)
    ├─   0.007651s   0ms INFO [ ] Field 'Admin.name/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007658s   0ms INFO [x] Creating owned field move edge 'NodeWithName.__typename/A' (type: String)
    ├─   0.007668s   0ms INFO [ ] Field 'NodeWithName.username/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007674s   0ms INFO [x] Creating field move edge 'NodeWithName.name/A' (type: String)
    ├─   0.007680s   0ms INFO [x] Creating field move edge 'NodeWithName.name/A' (type: String)
    ├─   0.007686s   0ms INFO [x] Creating field move edge 'NodeWithName.id/A' (type: ID)
    ├─   0.007693s   0ms INFO [x] Creating field move edge 'NodeWithName.id/A' (type: ID)
    ├─   0.007699s   0ms INFO [x] Creating owned field move edge 'NodeWithName.__typename/B' (type: String)
    ├─   0.007708s   0ms INFO [x] Creating field move edge 'NodeWithName.username/B' (type: String)
    ├─   0.007714s   0ms INFO [x] Creating field move edge 'NodeWithName.username/B' (type: String)
    ├─   0.007720s   0ms INFO [ ] Field 'NodeWithName.name/B' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007726s   0ms INFO [x] Creating field move edge 'NodeWithName.id/B' (type: ID)
    ├─   0.007733s   0ms INFO [x] Creating field move edge 'NodeWithName.id/B' (type: ID)
    ├─   0.007740s   0ms INFO [x] Creating owned field move edge 'Regular.__typename/A' (type: String)
    ├─   0.007747s   0ms INFO [ ] Field 'Regular.name/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007753s   0ms INFO [x] Creating field move edge 'Regular.isMain/A' (type: Boolean)
    ├─   0.007759s   0ms INFO [x] Creating field move edge 'Regular.isMain/A' (type: Boolean)
    ├─   0.007765s   0ms INFO [x] Creating field move edge 'Regular.id/A' (type: ID)
    ├─   0.007771s   0ms INFO [x] Creating field move edge 'Regular.id/A' (type: ID)
    ├─   0.007777s   0ms INFO [ ] Field 'Regular.isActive/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.007783s   0ms INFO [x] Creating owned field move edge 'Account.__typename/A' (type: String)
    ├─   0.007790s   0ms INFO [ ] Field 'Account.name/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007796s   0ms INFO [ ] Field 'Account.isActive/A' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.007802s   0ms INFO [x] Creating field move edge 'Account.id/A' (type: ID)
    ├─   0.007808s   0ms INFO [x] Creating field move edge 'Account.id/A' (type: ID)
    ├─   0.007814s   0ms INFO [x] Creating owned field move edge 'Account.__typename/B' (type: String)
    ├─   0.007822s   0ms INFO [x] Creating field move edge 'Account.name/B' (type: String)
    ├─   0.007828s   0ms INFO [x] Creating field move edge 'Account.name/B' (type: String)
    ├─   0.007834s   0ms INFO [ ] Field 'Account.isActive/B' does is not available in the subgraph, skipping edge creation (type: Boolean)
    ├─   0.007839s   0ms INFO [x] Creating field move edge 'Account.id/B' (type: ID)
    ├─   0.007845s   0ms INFO [x] Creating field move edge 'Account.id/B' (type: ID)
    ├─   0.007851s   0ms INFO [x] Creating owned field move edge 'Account.__typename/C' (type: String)
    ├─   0.007862s   0ms INFO [ ] Field 'Account.name/C' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.007868s   0ms INFO [x] Creating field move edge 'Account.isActive/C' (type: Boolean)
    ├─   0.007874s   0ms INFO [x] Creating field move edge 'Account.isActive/C' (type: Boolean)
    ├─   0.007881s   0ms INFO [x] Creating field move edge 'Account.id/C' (type: ID)
    ├─   0.007887s   0ms INFO [x] Creating field move edge 'Account.id/C' (type: ID)
    ├─   0.007893s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.007900s   0ms INFO [ ] Field 'Query.anotherUsers/A' does is not available in the subgraph, skipping edge creation (type: NodeWithName)
    ├─   0.007906s   0ms INFO [ ] Field 'Query.accounts/A' does is not available in the subgraph, skipping edge creation (type: Account)
    ├─   0.007911s   0ms INFO [x] Creating field move edge 'Query.users/A' (type: NodeWithName)
    ├─   0.007917s   0ms INFO [x] Creating field move edge 'Query.users/A' (type: NodeWithName)
    ├─   0.007924s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.007931s   0ms INFO [x] Creating field move edge 'Query.anotherUsers/B' (type: NodeWithName)
    ├─   0.007938s   0ms INFO [x] Creating field move edge 'Query.anotherUsers/B' (type: NodeWithName)
    ├─   0.007944s   0ms INFO [x] Creating field move edge 'Query.accounts/B' (type: Account)
    ├─   0.007950s   0ms INFO [x] Creating field move edge 'Query.accounts/B' (type: Account)
    ├─   0.007957s   0ms INFO [ ] Field 'Query.users/B' does is not available in the subgraph, skipping edge creation (type: NodeWithName)
    ├─   0.007962s   0ms INFO [x] Creating owned field move edge 'Query.__typename/C' (type: String)
    ├─   0.007969s   0ms INFO [ ] Field 'Query.anotherUsers/C' does is not available in the subgraph, skipping edge creation (type: NodeWithName)
    ├─   0.007975s   0ms INFO [ ] Field 'Query.accounts/C' does is not available in the subgraph, skipping edge creation (type: Account)
    ├─   0.007980s   0ms INFO [ ] Field 'Query.users/C' does is not available in the subgraph, skipping edge creation (type: NodeWithName)
    ├─   0.007986s   0ms INFO [x] Creating owned field move edge 'User.__typename/A' (type: String)
    ├─   0.007993s   0ms INFO [x] Creating field move edge 'User.name/A' (type: String)
    ├─   0.007999s   0ms INFO [x] Creating field move edge 'User.name/A' (type: String)
    ├─   0.008005s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.008011s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.008017s   0ms INFO [x] Creating field move edge 'User.age/A' (type: Int)
    ├─   0.008024s   0ms INFO [x] Creating field move edge 'User.age/A' (type: Int)
    ├─   0.008035s   0ms INFO [ ] Field 'User.username/A' does is not available in the subgraph, skipping edge creation (type: String)
  ┌─┘
  └─┐build_interface_implementation_edges{}
    ├─   0.008073s   0ms INFO Building interface implementation edge from 'Admin/A' to 'Account/A'
    ├─   0.008087s   0ms INFO Building interface implementation edge from 'Regular/A' to 'Account/A'
    ├─   0.008095s   0ms INFO Building interface implementation edge from 'User/A' to 'NodeWithName/A'
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.008200s   0ms INFO Creating self-referencing entity move edge in 'Admin/A' via key 'id'
    ├─   0.008256s   0ms INFO Creating self-referencing entity move edge in 'NodeWithName/A' via key 'id'
    ├─   0.008309s   0ms INFO Creating entity move edge from 'NodeWithName/A' to 'NodeWithName/B' via key 'id'
    ├─   0.008395s   0ms INFO Creating entity move edge from 'NodeWithName/B' to 'NodeWithName/A' via key 'id'
    ├─   0.008445s   0ms INFO Creating self-referencing entity move edge in 'NodeWithName/B' via key 'id'
    ├─   0.008490s   0ms INFO Creating self-referencing entity move edge in 'Regular/A' via key 'id'
    ├─   0.008528s   0ms INFO Creating self-referencing entity move edge in 'Account/A' via key 'id'
    ├─   0.008564s   0ms INFO Creating entity move edge from 'Account/A' to 'Account/B' via key 'id'
    ├─   0.008598s   0ms INFO Creating entity move edge from 'Account/A' to 'Account/C' via key 'id'
    ├─   0.008668s   0ms INFO Creating entity move edge from 'Account/B' to 'Account/A' via key 'id'
    ├─   0.008708s   0ms INFO Creating self-referencing entity move edge in 'Account/B' via key 'id'
    ├─   0.008744s   0ms INFO Creating entity move edge from 'Account/B' to 'Account/C' via key 'id'
    ├─   0.008778s   0ms INFO Creating entity move edge from 'Account/C' to 'Account/A' via key 'id'
    ├─   0.008812s   0ms INFO Creating entity move edge from 'Account/C' to 'Account/B' via key 'id'
    ├─   0.008846s   0ms INFO Creating self-referencing entity move edge in 'Account/C' via key 'id'
    ├─   0.008924s   0ms INFO Creating self-referencing entity move edge in 'User/A' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.071681s INFO Starting server on http://localhost:4000
   0.082737s INFO starting 16 workers
   0.082793s INFO Actix runtime found; starting in Actix runtime
   0.082802s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.248541s DEBUG original document: query ping {
  __typename
}

   0.248714s DEBUG normalized document: query ping {__typename}

   0.248756s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.249241s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.341075s DEBUG original document: query {
  anotherUsers {
    id
    name
    username
  }
}

   0.341244s DEBUG normalized document: query{anotherUsers{id name username}}

   0.341274s DEBUG executable operation: query{anotherUsers{id name username}}
┐walk_operation{}
├─   0.341730s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="anotherUsers", leaf=false}
  ├─   0.341790s   0ms DEBUG Trying to advance to: anotherUsers{id name username} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.341882s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.341909s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.341947s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.341972s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.341993s   0ms DEBUG Indirect paths found: 0
    ├─   0.342005s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.342049s   0ms DEBUG checking edge Query/b -(anotherUsers)- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="anotherUsers"}
        ├─   0.342071s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.342087s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(anotherUsers)- NodeWithName/b
      ├─   0.342099s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(26)" }])
    ┌─┘
    ├─   0.342136s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.342169s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.342176s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.342188s   0ms DEBUG Indirect paths found: 0
    ├─   0.342197s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.342213s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="username", leaf=true}
  ├─   0.342236s   0ms DEBUG Trying to advance to: username through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.342265s   0ms DEBUG checking edge NodeWithName/b -(username)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="username"}
        ├─   0.342283s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.342299s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(username)- String/b
      ├─   0.342307s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.342322s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.342348s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.342357s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.342364s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.342384s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.342424s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
                ├─   0.342467s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.342490s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
              ├─   0.342501s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.342535s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
              ├─   0.342544s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.342551s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              ├─   0.342561s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.342590s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.342600s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.342623s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.342644s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.342659s   0ms DEBUG Paths for id
        ├─   0.342671s   0ms DEBUG   Path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(id)- ID/b is valid
        ├─   0.342678s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.342698s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
        ├─   0.342719s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.342747s   0ms DEBUG Advancing path to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="NodeWithName/b"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=1}
          ├─   0.342782s   0ms DEBUG Building root query tree node: NodeWithName/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.342800s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.342824s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", current_cost=2003}
        ├─   0.342892s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.342914s   0ms DEBUG No direct paths found
      ├─   0.342927s   0ms DEBUG going deeper
      ├─   0.342937s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      ├─   0.342944s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.342950s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.342956s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.342966s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.342972s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.342984s   0ms DEBUG Indirect paths found: 0
    ├─   0.342994s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.343028s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.343055s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.343068s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.343086s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.343092s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.343098s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.343116s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.343153s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
                ├─   0.343171s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.343189s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
              ├─   0.343199s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.343261s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
              ├─   0.343271s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.343278s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              ├─   0.343285s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.343296s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.343305s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.343322s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.343342s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.343356s   0ms DEBUG Paths for id
        ├─   0.343365s   0ms DEBUG   Path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(id)- ID/b is valid
        ├─   0.343373s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.343385s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
        ├─   0.343391s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.343407s   0ms DEBUG Advancing path to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="NodeWithName/b"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=1}
          ├─   0.343444s   0ms DEBUG Building root query tree node: NodeWithName/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.343459s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.343481s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", current_cost=2003}
        ├─   0.343527s   0ms DEBUG checking edge NodeWithName/a -(name)- String/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", edge="name"}
          ├─   0.343547s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.343564s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a with edge NodeWithName/a -(name)- String/a
        ├─   0.343574s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(39) --> EdgeIndex(7)" }])
      ┌─┘
      ├─   0.343592s   0ms DEBUG Found 1 direct paths to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.343603s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.343609s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(39) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.343628s   0ms DEBUG Indirect paths found: 1
    ├─   0.343636s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.343663s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.343689s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.343706s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.343721s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
      ├─   0.343730s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.343744s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.343787s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.343797s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.343803s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.343827s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.343862s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
                ├─   0.343880s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.343901s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
              ├─   0.343911s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.343971s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
              ├─   0.343980s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.343988s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              ├─   0.343994s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.344003s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.344010s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.344027s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.344044s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.344059s   0ms DEBUG Paths for id
        ├─   0.344068s   0ms DEBUG   Path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(id)- ID/b is valid
        ├─   0.344089s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.344107s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
        ├─   0.344113s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.344133s   0ms DEBUG Advancing path to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="NodeWithName/b"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=1}
          ├─   0.344162s   0ms DEBUG Building root query tree node: NodeWithName/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.344177s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.344198s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", current_cost=2003}
        ├─   0.344263s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", edge="id"}
          ├─   0.344292s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.344312s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
        ├─   0.344323s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(39) --> EdgeIndex(8)" }])
      ┌─┘
      ├─   0.344340s   0ms DEBUG Found 1 direct paths to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.344355s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.344361s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(39) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.344375s   0ms DEBUG Indirect paths found: 1
    ├─   0.344387s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(10)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.344433s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.344446s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.344458s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.344471s   0ms DEBUG Processing edge: NodeWithName/b -(username)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.344490s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.344504s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.344515s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(39) --> EdgeIndex(7)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.344552s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.344564s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.344576s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.344589s   0ms DEBUG Processing edge: NodeWithName/b -(🔑🧩{id})- NodeWithName/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.344631s   0ms DEBUG Processing edge: NodeWithName/a -(name)- String/a
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.344658s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.344670s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.344681s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.344692s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.344737s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.344749s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.344761s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.344774s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.344793s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.344804s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.344816s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="anotherUsers", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.344974s   0ms DEBUG adding output field 'anotherUsers' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="NodeWithName", field="username", leaf=true, list=false, response_path="anotherUsers.@", fetch_path="anotherUsers.@"}
              ├─   0.345010s   0ms DEBUG adding output field 'username' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_entity_move_edge{edge="NodeWithName/b -(🔑🧩{id})- NodeWithName/a", parent_fetch_step_index=1}
              ├─   0.345068s   0ms DEBUG created a new fetch step [2] subgraph(a) type(NodeWithName) requirement() key({id}) in children of 1
              ├─   0.345077s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.345086s   0ms DEBUG adding __typename field to output for type 'NodeWithName'
              ├─   0.345094s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="anotherUsers.@", fetch_path="anotherUsers.@"}
                      ├─   0.345156s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.345182s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="NodeWithName", field="name", leaf=true, list=false, response_path="anotherUsers.@", fetch_path=""}
                  ├─   0.345303s   0ms DEBUG adding output field 'name' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="anotherUsers.@", fetch_path="anotherUsers.@"}
              ├─   0.345369s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.345437s   0ms DEBUG Done
├─   0.345446s   0ms DEBUG found roots
├─   0.345454s   0ms DEBUG print graph
├─   0.345459s   0ms DEBUG Nodes:
│ [1] Query/b {} → {anotherUsers{__typename username id}} at $.
│ [2] NodeWithName/a {__typename id} → {name} at $.anotherUsers.@
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="b"}
      └─┐execute{subgraph_name="b"}
        ├─   0.345970s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.346324s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.346816s   1ms DEBUG connected to 127.0.0.1:4200
        ├─   0.353061s   7ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"anotherUsers": Array [Object {"__typename": String("NodeWithName"), "username": String("u1-username"), "id": String("u1")}, Object {"__typename": String("NodeWithName"), "username": String("u2-username"), "id": String("u2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("NodeWithName"), "username": String("u1-username"), "id": String("u1")}, Object {"__typename": String("NodeWithName"), "username": String("u2-username"), "id": String("u2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("NodeWithName"), "username": String("u1-username"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="NodeWithName", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("NodeWithName"), "username": String("u1-username"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("NodeWithName")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("NodeWithName"), "username": String("u2-username"), "id": String("u2")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="NodeWithName", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("NodeWithName"), "username": String("u2-username"), "id": String("u2")}}
          └─┐project_requires{requires_selections=[], entity=String("NodeWithName")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.353842s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.360769s   7ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.361338s DEBUG execution result: ExecutionResult { data: Some(Object {"anotherUsers": Array [Object {"id": String("u1"), "name": String("u1-name"), "username": String("u1-username")}, Object {"id": String("u2"), "name": String("u2-name"), "username": String("u2-username")}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{anotherUsers{__typename username id}}")}, Object {"kind": String("Flatten"), "path": Array [String("anotherUsers"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on NodeWithName{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("NodeWithName"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.368191s DEBUG original document: query {
  users {
    id
    name
    username
  }
}

   0.368352s DEBUG normalized document: query{users{id name username}}

   0.368367s DEBUG executable operation: query{users{id name username}}
┐walk_operation{}
├─   0.368766s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="users", leaf=false}
  ├─   0.368818s   0ms DEBUG Trying to advance to: users{id name username} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.368896s   0ms DEBUG checking edge Query/a -(users)- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="users"}
        ├─   0.368918s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.368949s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(users)- NodeWithName/a
      ├─   0.368961s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(24)" }])
    ┌─┘
    ├─   0.368981s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.369035s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.369043s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.369058s   0ms DEBUG Indirect paths found: 0
    ├─   0.369066s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.369097s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.369109s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.369125s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.369131s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.369142s   0ms DEBUG Indirect paths found: 0
    ├─   0.369149s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.369163s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="username", leaf=true}
  ├─   0.369185s   0ms DEBUG Trying to advance to: username through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.369234s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.369250s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.369270s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.369294s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.369333s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.369369s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.369396s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.369408s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.369453s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.369462s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.369471s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.369478s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.369486s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.369493s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.369510s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.369528s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.369542s   0ms DEBUG Paths for id
        ├─   0.369551s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.369558s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.369574s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.369604s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.369630s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.369661s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.369677s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.369699s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.369764s   0ms DEBUG checking edge NodeWithName/b -(username)- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", edge="username"}
          ├─   0.369793s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.369812s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b with edge NodeWithName/b -(username)- String/b
        ├─   0.369823s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(38) --> EdgeIndex(10)" }])
      ┌─┘
      ├─   0.369840s   0ms DEBUG Found 1 direct paths to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      ├─   0.369852s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.369858s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.369865s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.369871s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(38) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.369886s   0ms DEBUG Indirect paths found: 1
    ├─   0.369894s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.369937s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.369973s   0ms DEBUG checking edge NodeWithName/a -(name)- String/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="name"}
        ├─   0.369991s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.370009s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(name)- String/a
      ├─   0.370018s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.370033s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.370053s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.370090s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.370133s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.370152s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.370172s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.370196s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.370245s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.370254s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.370261s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.370268s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.370276s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.370282s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.370298s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.370335s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.370354s   0ms DEBUG Paths for id
        ├─   0.370364s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.370371s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.370383s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.370389s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.370404s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.370434s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.370448s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.370470s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.370526s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.370539s   0ms DEBUG No direct paths found
      ├─   0.370550s   0ms DEBUG going deeper
      ├─   0.370558s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.370564s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.370575s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.370581s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.370588s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.370593s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.370602s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.370607s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.370620s   0ms DEBUG Indirect paths found: 0
    ├─   0.370628s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.370675s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.370712s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.370729s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.370750s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
      ├─   0.370759s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.370774s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.370807s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.370825s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.370858s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.370875s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.370893s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.370901s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.370931s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.370938s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.370946s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.370952s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.370960s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.370966s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.370982s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.370998s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.371012s   0ms DEBUG Paths for id
        ├─   0.371020s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.371027s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.371038s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.371044s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.371058s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.371107s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.371124s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.371147s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.371194s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", edge="id"}
          ├─   0.371228s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.371254s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
        ├─   0.371265s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(38) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.371282s   0ms DEBUG Found 1 direct paths to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      ├─   0.371291s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.371297s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.371305s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.371310s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(38) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.371345s   0ms DEBUG Indirect paths found: 1
    ├─   0.371360s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(38) --> EdgeIndex(10)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.371427s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.371442s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.371454s   0ms DEBUG Processing edge: Query/a -(users)- NodeWithName/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.371467s   0ms DEBUG Processing edge: NodeWithName/a -(🔑🧩{id})- NodeWithName/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.371482s   0ms DEBUG Processing edge: NodeWithName/b -(username)- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.371504s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.371524s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.371536s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.371546s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(7)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.371583s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.371595s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.371607s   0ms DEBUG Processing edge: Query/a -(users)- NodeWithName/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.371619s   0ms DEBUG Processing edge: NodeWithName/a -(name)- String/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.371638s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.371654s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.371670s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.371708s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.371720s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.371734s   0ms DEBUG Processing edge: Query/a -(users)- NodeWithName/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.371747s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.371783s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.371796s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.371807s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="users", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.371945s   0ms DEBUG adding output field 'users' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="NodeWithName/a -(🔑🧩{id})- NodeWithName/b", parent_fetch_step_index=1}
              ├─   0.372006s   0ms DEBUG created a new fetch step [2] subgraph(b) type(NodeWithName) requirement() key({id}) in children of 1
              ├─   0.372017s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.372025s   0ms DEBUG adding __typename field to output for type 'NodeWithName'
              ├─   0.372033s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="users.@", fetch_path="users.@"}
                      ├─   0.372118s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.372147s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="NodeWithName", field="username", leaf=true, list=false, response_path="users.@", fetch_path=""}
                  ├─   0.372277s   0ms DEBUG adding output field 'username' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="NodeWithName", field="name", leaf=true, list=false, response_path="users.@", fetch_path="users.@"}
              ├─   0.372359s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="users.@", fetch_path="users.@"}
              ├─   0.372416s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.372507s   0ms DEBUG Done
├─   0.372517s   0ms DEBUG found roots
├─   0.372522s   0ms DEBUG print graph
├─   0.372527s   0ms DEBUG Nodes:
│ [1] Query/a {} → {users{__typename id name}} at $.
│ [2] NodeWithName/b {__typename id} → {username} at $.users.@
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.373110s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.375993s   3ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"users": Array [Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}, Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}, Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="User", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="User", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.377247s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.381144s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.382057s DEBUG execution result: ExecutionResult { data: Some(Object {"users": Array [Object {"id": String("u1"), "name": String("u1-name"), "username": Null}, Object {"id": String("u2"), "name": String("u2-name"), "username": Null}]}), errors: Some([GraphQLError { message: "Unexpected error.", locations: Some([GraphQLErrorLocation { line: 1, column: 34 }]), path: Some([String("_entities")]), extensions: Some({"code": String("INTERNAL_SERVER_ERROR")}) }]), extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{users{__typename id name}}")}, Object {"kind": String("Flatten"), "path": Array [String("users"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on NodeWithName{username}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("NodeWithName"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.390458s DEBUG original document: query {
  anotherUsers {
    ... on User {
      age
    }
  }
}

   0.390581s DEBUG normalized document: query{anotherUsers{...on User{age}}}

   0.390590s DEBUG executable operation: query{anotherUsers{...on User{age}}}
┐walk_operation{}
├─   0.390998s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="anotherUsers", leaf=false}
  ├─   0.391052s   0ms DEBUG Trying to advance to: anotherUsers{...on User{age}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.391113s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.391134s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.391164s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.391174s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.391190s   0ms DEBUG Indirect paths found: 0
    ├─   0.391198s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.391233s   0ms DEBUG checking edge Query/b -(anotherUsers)- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="anotherUsers"}
        ├─   0.391253s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.391273s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(anotherUsers)- NodeWithName/b
      ├─   0.391284s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(26)" }])
    ┌─┘
    ├─   0.391305s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.391336s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.391342s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.391354s   0ms DEBUG Indirect paths found: 0
    ├─   0.391365s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.391382s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_inline_fragment{type_condition="User"}
  ├─   0.391416s   0ms DEBUG Processing inline fragment '{age}' on type 'User' through 1 possible paths
  ├─   0.391426s   0ms DEBUG Trying to advance to: ... on User, through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=ConcreteType("User"), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.391456s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.391470s   0ms DEBUG Direct paths found: 0
    ├─   0.391478s   0ms WARN Object type 'User' is not resolvable by 'NodeWithName', resolve only the __typename
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.391527s   0ms DEBUG checking edge NodeWithName/b -(__typename)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="__typename"}
        ├─   0.391547s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.391567s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(__typename)- String/b
      ├─   0.391589s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.391606s   0ms DEBUG Direct paths found: 1
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(9)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.391669s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.391685s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.391699s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.391715s   0ms DEBUG Processing edge: NodeWithName/b -(__typename)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.391738s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.391750s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.391765s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="anotherUsers", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.391921s   0ms DEBUG adding output field 'anotherUsers' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="NodeWithName", field="__typename", leaf=true, list=false, response_path="anotherUsers.@", fetch_path="anotherUsers.@"}
              ├─   0.392012s   0ms DEBUG adding output field '__typename' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.392122s   0ms DEBUG Done
├─   0.392159s   0ms DEBUG found roots
├─   0.392240s   0ms DEBUG print graph
├─   0.392249s   0ms DEBUG Nodes:
│ [1] Query/b {} → {anotherUsers{__typename}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="b"}
    └─┐execute{subgraph_name="b"}
      ├─   0.392630s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.395510s   3ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="NodeWithName", type_condition="User"}
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="NodeWithName", type_condition="User"}
┘
   0.395988s DEBUG execution result: ExecutionResult { data: Some(Object {"anotherUsers": Array [Object {}, Object {}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{anotherUsers{__typename}}")}}}) }
   0.400094s DEBUG original document: query {
  users {
    ... on User {
      age
    }
  }
}

   0.400174s DEBUG normalized document: query{users{...on User{age}}}

   0.400182s DEBUG executable operation: query{users{...on User{age}}}
┐walk_operation{}
├─   0.400371s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="users", leaf=false}
  ├─   0.400399s   0ms DEBUG Trying to advance to: users{...on User{age}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.400438s   0ms DEBUG checking edge Query/a -(users)- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="users"}
        ├─   0.400456s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.400476s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(users)- NodeWithName/a
      ├─   0.400485s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(24)" }])
    ┌─┘
    ├─   0.400500s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.400524s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.400530s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.400542s   0ms DEBUG Indirect paths found: 0
    ├─   0.400549s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.400579s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.400591s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.400608s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.400613s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.400625s   0ms DEBUG Indirect paths found: 0
    ├─   0.400632s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.400645s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_inline_fragment{type_condition="User"}
  ├─   0.400686s   0ms DEBUG Processing inline fragment '{age}' on type 'User' through 1 possible paths
  ├─   0.400697s   0ms DEBUG Trying to advance to: ... on User, through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=ConcreteType("User"), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.400735s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(🔮)- User/a
      ├─   0.400744s   0ms INFO return=Ok([ { cost: 2001, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(35)" }])
    ┌─┘
    ├─   0.400763s   0ms DEBUG Direct paths found: 1
    ├─   0.400771s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
  └─┐process_selection_set{}
    └─┐process_field{field_name="age", leaf=true}
      ├─   0.400798s   0ms DEBUG Trying to advance to: age through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "age", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.400829s   0ms DEBUG checking edge User/a -(age)- Int/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="age"}
            ├─   0.400849s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.400867s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(age)- Int/a
          ├─   0.400877s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(35) --> EdgeIndex(32)" }])
        ┌─┘
        ├─   0.400893s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "age", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.400918s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.400926s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.400933s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.400939s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.400954s   0ms DEBUG Indirect paths found: 0
        ├─   0.400987s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(35) --> EdgeIndex(32)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.401111s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.401128s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.401358s   0ms DEBUG Processing edge: Query/a -(users)- NodeWithName/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.401397s   0ms DEBUG Processing edge: NodeWithName/a -(🔮)- User/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.401415s   0ms DEBUG Processing edge: User/a -(age)- Int/a
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.401455s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.401468s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.401481s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.401493s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="users", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.401640s   0ms DEBUG adding output field 'users' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_abstract_edge{parent_fetch_step_index=1, type_name="User", response_path="users.@", fetch_path="users.@"}
              ├─   0.401702s   0ms DEBUG adding output field '__typename' and starting an inline fragment for type '1' to fetch step [User]
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
                └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="age", leaf=true, list=false, response_path="users.@", fetch_path="users.@"}
                  ├─   0.401736s   0ms DEBUG adding output field 'age' to fetch step [1]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.401823s   0ms DEBUG Done
├─   0.401833s   0ms DEBUG found roots
├─   0.401838s   0ms DEBUG print graph
├─   0.401843s   0ms DEBUG Nodes:
│ [1] Query/a {} → {users{__typename ...on User{age}}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.402344s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.404679s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="User", type_condition="User"}
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="User", type_condition="User"}
┘
   0.404957s DEBUG execution result: ExecutionResult { data: Some(Object {"users": Array [Object {"age": Number(11)}, Object {"age": Number(22)}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{users{__typename ...on User{age}}}")}}}) }
   0.407927s DEBUG original document: query {
  anotherUsers {
    ... on User {
      age
      id
      name
      username
    }
    id
    name
  }
}

   0.408118s DEBUG normalized document: query{anotherUsers{...on User{age id name username} id name}}

   0.408136s DEBUG executable operation: query{anotherUsers{...on User{age id name username} id name}}
┐walk_operation{}
├─   0.408604s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="anotherUsers", leaf=false}
  ├─   0.408659s   0ms DEBUG Trying to advance to: anotherUsers{...on User{age id name username} id name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.408784s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.408840s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.408885s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.408893s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.408906s   0ms DEBUG Indirect paths found: 0
    ├─   0.408914s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.408978s   0ms DEBUG checking edge Query/b -(anotherUsers)- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="anotherUsers"}
        ├─   0.409030s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.409051s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(anotherUsers)- NodeWithName/b
      ├─   0.409063s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(26)" }])
    ┌─┘
    ├─   0.409097s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.409133s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.409139s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.409151s   0ms DEBUG Indirect paths found: 0
    ├─   0.409161s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.409175s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.409199s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.409251s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.409267s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.409288s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.409295s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.409302s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.409324s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.409364s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
                ├─   0.409384s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.409401s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
              ├─   0.409411s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.409442s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
              ├─   0.409450s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.409457s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              ├─   0.409465s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.409474s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.409480s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.409500s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.409517s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.409532s   0ms DEBUG Paths for id
        ├─   0.409541s   0ms DEBUG   Path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(id)- ID/b is valid
        ├─   0.409548s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.409567s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
        ├─   0.409573s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.409588s   0ms DEBUG Advancing path to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="NodeWithName/b"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=1}
          ├─   0.409617s   0ms DEBUG Building root query tree node: NodeWithName/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.409634s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.409655s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", current_cost=2003}
        ├─   0.409702s   0ms DEBUG checking edge NodeWithName/a -(name)- String/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", edge="name"}
          ├─   0.409721s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.409738s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a with edge NodeWithName/a -(name)- String/a
        ├─   0.409747s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(39) --> EdgeIndex(7)" }])
      ┌─┘
      ├─   0.409764s   0ms DEBUG Found 1 direct paths to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.409775s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.409780s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(39) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.409794s   0ms DEBUG Indirect paths found: 1
    ├─   0.409802s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.409829s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.409854s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.409870s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.409885s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
      ├─   0.409892s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.409907s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.409926s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.409932s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.409938s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.409954s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.409987s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
                ├─   0.410004s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.410022s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
              ├─   0.410031s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.410061s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
              ├─   0.410068s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.410075s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              ├─   0.410082s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.410090s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.410096s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.410111s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.410127s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.410141s   0ms DEBUG Paths for id
        ├─   0.410150s   0ms DEBUG   Path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(id)- ID/b is valid
        ├─   0.410156s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.410167s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
        ├─   0.410173s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.410187s   0ms DEBUG Advancing path to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="NodeWithName/b"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=1}
          ├─   0.410212s   0ms DEBUG Building root query tree node: NodeWithName/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.410226s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.410248s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", current_cost=2003}
        ├─   0.410291s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", edge="id"}
          ├─   0.410309s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.410326s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
        ├─   0.410334s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(39) --> EdgeIndex(8)" }])
      ┌─┘
      ├─   0.410350s   0ms DEBUG Found 1 direct paths to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.410359s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.410365s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(39) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.410379s   0ms DEBUG Indirect paths found: 1
    ├─   0.410390s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b
  ┌─┘
┌─┘
└─┐process_inline_fragment{type_condition="User"}
  ├─   0.410418s   0ms DEBUG Processing inline fragment '{age id name username}' on type 'User' through 1 possible paths
  ├─   0.410425s   0ms DEBUG Trying to advance to: ... on User, through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=ConcreteType("User"), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.410450s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.410461s   0ms DEBUG Direct paths found: 0
    ├─   0.410467s   0ms WARN Object type 'User' is not resolvable by 'NodeWithName', resolve only the __typename
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.410497s   0ms DEBUG checking edge NodeWithName/b -(__typename)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="__typename"}
        ├─   0.410514s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.410528s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(__typename)- String/b
      ├─   0.410536s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.410550s   0ms DEBUG Direct paths found: 1
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(39) --> EdgeIndex(7)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.410592s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.410605s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.410617s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.410630s   0ms DEBUG Processing edge: NodeWithName/b -(🔑🧩{id})- NodeWithName/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.410643s   0ms DEBUG Processing edge: NodeWithName/a -(name)- String/a
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.410663s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.410676s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.410687s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.410697s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.410731s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.410743s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.410755s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.410767s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.410785s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.410797s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.410808s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(26) --> EdgeIndex(9)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.410841s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.410854s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.410865s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.410878s   0ms DEBUG Processing edge: NodeWithName/b -(__typename)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.410896s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.410907s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.410917s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="anotherUsers", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.411036s   0ms DEBUG adding output field 'anotherUsers' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="NodeWithName/b -(🔑🧩{id})- NodeWithName/a", parent_fetch_step_index=1}
              ├─   0.411077s   0ms DEBUG created a new fetch step [2] subgraph(a) type(NodeWithName) requirement() key({id}) in children of 1
              ├─   0.411085s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.411093s   0ms DEBUG adding __typename field to output for type 'NodeWithName'
              ├─   0.411102s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="anotherUsers.@", fetch_path="anotherUsers.@"}
                      ├─   0.411162s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.411186s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="NodeWithName", field="name", leaf=true, list=false, response_path="anotherUsers.@", fetch_path=""}
                  ├─   0.411302s   0ms DEBUG adding output field 'name' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="anotherUsers.@", fetch_path="anotherUsers.@"}
              ├─   0.411362s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="NodeWithName", field="__typename", leaf=true, list=false, response_path="anotherUsers.@", fetch_path="anotherUsers.@"}
              ├─   0.411401s   0ms DEBUG adding output field '__typename' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.411464s   0ms DEBUG Done
├─   0.411472s   0ms DEBUG found roots
├─   0.411477s   0ms DEBUG print graph
├─   0.411482s   0ms DEBUG Nodes:
│ [1] Query/b {} → {anotherUsers{__typename id}} at $.
│ [2] NodeWithName/a {__typename id} → {name} at $.anotherUsers.@
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="b"}
      └─┐execute{subgraph_name="b"}
        ├─   0.411963s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.413844s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"anotherUsers": Array [Object {"__typename": String("NodeWithName"), "id": String("u1")}, Object {"__typename": String("NodeWithName"), "id": String("u2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("NodeWithName"), "id": String("u1")}, Object {"__typename": String("NodeWithName"), "id": String("u2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="NodeWithName", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("NodeWithName")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u2")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="NodeWithName", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u2")}}
          └─┐project_requires{requires_selections=[], entity=String("NodeWithName")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.414568s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.416549s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="NodeWithName", type_condition="User"}
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="NodeWithName", type_condition="User"}
┘
   0.416941s DEBUG execution result: ExecutionResult { data: Some(Object {"anotherUsers": Array [Object {"id": String("u1"), "name": String("u1-name")}, Object {"id": String("u2"), "name": String("u2-name")}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{anotherUsers{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("anotherUsers"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on NodeWithName{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("NodeWithName"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.421133s DEBUG original document: query {
  users {
    ... on User {
      age
      id
      name
      username
    }
    id
    name
  }
}

   0.421232s DEBUG normalized document: query{users{...on User{age id name username} id name}}

   0.421240s DEBUG executable operation: query{users{...on User{age id name username} id name}}
┐walk_operation{}
├─   0.421536s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="users", leaf=false}
  ├─   0.421569s   0ms DEBUG Trying to advance to: users{...on User{age id name username} id name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.421612s   0ms DEBUG checking edge Query/a -(users)- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="users"}
        ├─   0.421633s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.421657s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(users)- NodeWithName/a
      ├─   0.421668s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(24)" }])
    ┌─┘
    ├─   0.421684s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.421711s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.421718s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.421731s   0ms DEBUG Indirect paths found: 0
    ├─   0.421739s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.421769s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.421781s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.421799s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.421804s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.421816s   0ms DEBUG Indirect paths found: 0
    ├─   0.421823s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.421837s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.421858s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.421884s   0ms DEBUG checking edge NodeWithName/a -(name)- String/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="name"}
        ├─   0.421901s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.421917s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(name)- String/a
      ├─   0.421925s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.421939s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.421960s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.421980s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.422019s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.422038s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.422056s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.422065s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.422096s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.422105s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.422114s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.422121s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.422129s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.422135s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.422153s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.422170s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.422185s   0ms DEBUG Paths for id
        ├─   0.422195s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.422202s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.422217s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.422223s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.422239s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.422266s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.422283s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.422305s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.422352s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.422367s   0ms DEBUG No direct paths found
      ├─   0.422377s   0ms DEBUG going deeper
      ├─   0.422385s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.422391s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.422398s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.422404s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.422410s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.422416s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.422424s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.422429s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.422441s   0ms DEBUG Indirect paths found: 0
    ├─   0.422450s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.422478s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.422504s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.422520s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.422536s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
      ├─   0.422544s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.422559s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.422579s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.422599s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.422633s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.422651s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.422669s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.422678s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.422749s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.422761s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.422769s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.422776s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.422785s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.422791s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.422812s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.422832s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.422866s   0ms DEBUG Paths for id
        ├─   0.422881s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.422887s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.422900s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.422906s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.422922s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.422973s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.422991s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.423015s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.423082s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", edge="id"}
          ├─   0.423125s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.423163s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
        ├─   0.423177s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(38) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.423195s   0ms DEBUG Found 1 direct paths to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      ├─   0.423206s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.423224s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.423236s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.423242s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(38) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.423263s   0ms DEBUG Indirect paths found: 1
    ├─   0.423276s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
└─┐process_inline_fragment{type_condition="User"}
  ├─   0.423326s   0ms DEBUG Processing inline fragment '{age id name username}' on type 'User' through 1 possible paths
  ├─   0.423335s   0ms DEBUG Trying to advance to: ... on User, through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=ConcreteType("User"), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.423392s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(🔮)- User/a
      ├─   0.423402s   0ms INFO return=Ok([ { cost: 2001, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(35)" }])
    ┌─┘
    ├─   0.423435s   0ms DEBUG Direct paths found: 1
    ├─   0.423447s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
  └─┐process_selection_set{}
    └─┐process_field{field_name="age", leaf=true}
      ├─   0.423479s   0ms DEBUG Trying to advance to: age through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "age", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.423533s   0ms DEBUG checking edge User/a -(age)- Int/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="age"}
            ├─   0.423555s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.423577s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(age)- Int/a
          ├─   0.423602s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(35) --> EdgeIndex(32)" }])
        ┌─┘
        ├─   0.423638s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "age", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.423672s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.423691s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.423702s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.423708s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.423727s   0ms DEBUG Indirect paths found: 0
        ├─   0.423738s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="id", leaf=true}
      ├─   0.423787s   0ms DEBUG Trying to advance to: id through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.423852s   0ms DEBUG checking edge User/a -(id)- ID/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="id"}
            ├─   0.423874s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.423901s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(id)- ID/a
          ├─   0.423925s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(35) --> EdgeIndex(31)" }])
        ┌─┘
        ├─   0.423950s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.423979s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.423986s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.423994s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.424000s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.424014s   0ms DEBUG Indirect paths found: 0
        ├─   0.424041s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="name", leaf=true}
      ├─   0.424083s   0ms DEBUG Trying to advance to: name through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.424137s   0ms DEBUG checking edge User/a -(name)- String/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="name"}
            ├─   0.424159s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.424179s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(name)- String/a
          ├─   0.424203s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(35) --> EdgeIndex(30)" }])
        ┌─┘
        ├─   0.424239s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.424272s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.424280s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.424287s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.424293s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.424308s   0ms DEBUG Indirect paths found: 0
        ├─   0.424320s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="username", leaf=true}
      ├─   0.424373s   0ms DEBUG Trying to advance to: username through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.424424s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.424444s   0ms DEBUG Direct paths found: 0
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.424486s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.424497s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.424504s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.424511s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.424528s   0ms DEBUG Indirect paths found: 0
        ├─   0.424538s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.428128s DEBUG original document: query {
  users {
    ... on User {
      age
      id
      name
      username
    }
    id
    name
  }
}

   0.428212s DEBUG normalized document: query{users{...on User{age id name username} id name}}

   0.428220s DEBUG executable operation: query{users{...on User{age id name username} id name}}
┐walk_operation{}
├─   0.428264s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="users", leaf=false}
  ├─   0.428289s   0ms DEBUG Trying to advance to: users{...on User{age id name username} id name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.428327s   0ms DEBUG checking edge Query/a -(users)- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="users"}
        ├─   0.428344s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.428364s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(users)- NodeWithName/a
      ├─   0.428372s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(24)" }])
    ┌─┘
    ├─   0.428388s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.428412s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.428418s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.428431s   0ms DEBUG Indirect paths found: 0
    ├─   0.428439s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.428492s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.428514s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.428569s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.428579s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.428596s   0ms DEBUG Indirect paths found: 0
    ├─   0.428606s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.428621s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.428656s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.428695s   0ms DEBUG checking edge NodeWithName/a -(name)- String/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="name"}
        ├─   0.428713s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.428731s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(name)- String/a
      ├─   0.428741s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.428785s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.428818s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.428839s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.428900s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.428922s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.428943s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.428954s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.428987s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.428996s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.429008s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.429018s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.429031s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.429038s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.429057s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.429077s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.429132s   0ms DEBUG Paths for id
        ├─   0.429149s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.429163s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.429177s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.429183s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.429202s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.429246s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.429261s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.429283s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.429331s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.429351s   0ms DEBUG No direct paths found
      ├─   0.429363s   0ms DEBUG going deeper
      ├─   0.429372s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.429378s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.429385s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.429391s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.429398s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.429404s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.429412s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.429418s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.429432s   0ms DEBUG Indirect paths found: 0
    ├─   0.429441s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.429473s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.429500s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.429554s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.429574s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
      ├─   0.429606s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }])
    ┌─┘
    ├─   0.429633s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.429661s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.429680s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.429715s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.429756s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.429778s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.429789s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.429822s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.429830s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.429838s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.429845s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.429853s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.429862s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.429879s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
          ┌─┘
          ├─   0.429895s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(8)" }], [])))
        ┌─┘
        ├─   0.429910s   0ms DEBUG Paths for id
        ├─   0.429919s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.429925s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.429937s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.429943s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(8)" }]))
      ┌─┘
      ├─   0.429958s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(8)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.429984s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.429999s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.430042s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.430099s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", edge="id"}
          ├─   0.430142s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.430169s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
        ├─   0.430182s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(38) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.430206s   0ms DEBUG Found 1 direct paths to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      ├─   0.430217s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.430223s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.430232s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.430237s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(38) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.430271s   0ms DEBUG Indirect paths found: 1
    ├─   0.430286s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
└─┐process_inline_fragment{type_condition="User"}
  ├─   0.430319s   0ms DEBUG Processing inline fragment '{age id name username}' on type 'User' through 1 possible paths
  ├─   0.430327s   0ms DEBUG Trying to advance to: ... on User, through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=ConcreteType("User"), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.430355s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(🔮)- User/a
      ├─   0.430364s   0ms INFO return=Ok([ { cost: 2001, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(35)" }])
    ┌─┘
    ├─   0.430380s   0ms DEBUG Direct paths found: 1
    ├─   0.430387s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
  └─┐process_selection_set{}
    └─┐process_field{field_name="age", leaf=true}
      ├─   0.430413s   0ms DEBUG Trying to advance to: age through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "age", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.430444s   0ms DEBUG checking edge User/a -(age)- Int/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="age"}
            ├─   0.430483s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.430510s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(age)- Int/a
          ├─   0.430522s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(35) --> EdgeIndex(32)" }])
        ┌─┘
        ├─   0.430538s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "age", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.430576s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.430583s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.430590s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.430597s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.430610s   0ms DEBUG Indirect paths found: 0
        ├─   0.430619s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="id", leaf=true}
      ├─   0.430667s   0ms DEBUG Trying to advance to: id through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.430724s   0ms DEBUG checking edge User/a -(id)- ID/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="id"}
            ├─   0.430752s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.430772s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(id)- ID/a
          ├─   0.430783s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(35) --> EdgeIndex(31)" }])
        ┌─┘
        ├─   0.430799s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.430824s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.430831s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.430838s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.430844s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.430858s   0ms DEBUG Indirect paths found: 0
        ├─   0.430866s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="name", leaf=true}
      ├─   0.430916s   0ms DEBUG Trying to advance to: name through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.430957s   0ms DEBUG checking edge User/a -(name)- String/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="name"}
            ├─   0.430977s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.430997s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(name)- String/a
          ├─   0.431010s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(24) --> EdgeIndex(35) --> EdgeIndex(30)" }])
        ┌─┘
        ├─   0.431038s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.431140s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.431152s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.431160s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.431166s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.431185s   0ms DEBUG Indirect paths found: 0
        ├─   0.431201s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="username", leaf=true}
      ├─   0.431239s   0ms DEBUG Trying to advance to: username through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.431284s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.431298s   0ms DEBUG Direct paths found: 0
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.431318s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.431325s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.431332s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.431337s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.431350s   0ms DEBUG Indirect paths found: 0
        ├─   0.431359s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.434927s DEBUG original document: query {
  accounts {
    name
  }
}

   0.435020s DEBUG normalized document: query{accounts{name}}

   0.435030s DEBUG executable operation: query{accounts{name}}
┐walk_operation{}
├─   0.435203s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="accounts", leaf=false}
  ├─   0.435231s   0ms DEBUG Trying to advance to: accounts{name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.435265s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.435282s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.435303s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.435309s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.435321s   0ms DEBUG Indirect paths found: 0
    ├─   0.435338s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.435380s   0ms DEBUG checking edge Query/b -(accounts)- Account/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="accounts"}
        ├─   0.435398s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.435414s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(accounts)- Account/b
      ├─   0.435423s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(27)" }])
    ┌─┘
    ├─   0.435438s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.435459s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.435465s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.435477s   0ms DEBUG Indirect paths found: 0
    ├─   0.435483s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.435496s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.435516s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(accounts)- Account/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.435543s   0ms DEBUG checking edge Account/b -(name)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="name"}
        ├─   0.435559s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.435575s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(name)- String/b
      ├─   0.435583s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.435597s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.435617s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.435707s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.435754s   0ms DEBUG checking edge Account/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.435775s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.435797s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
              ├─   0.435808s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.435841s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
              ├─   0.435850s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.435858s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
              ├─   0.435865s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.435872s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.435892s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.435929s   0ms DEBUG checking edge Account/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                        ├─   0.435950s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.435970s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
                      ├─   0.435980s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.436024s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
                      ├─   0.436056s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                      ├─   0.436070s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
                      ├─   0.436078s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.436086s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
                      ├─   0.436094s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                      ├─   0.436104s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.436111s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.436135s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                  ┌─┘
                  ├─   0.436157s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                ┌─┘
                ├─   0.436174s   0ms DEBUG Paths for id
                ├─   0.436185s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
                ├─   0.436193s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.436206s   0ms DEBUG path Account/b -(id)- ID/b is valid
                ├─   0.436214s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
              ┌─┘
              ├─   0.436231s   0ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
                └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
                  ├─   0.436263s   0ms DEBUG Building root query tree node: Account/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.436281s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.436305s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", current_cost=2003}
                ├─   0.436359s   0ms DEBUG checking edge Account/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", edge="id"}
                  ├─   0.436382s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.436401s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a with edge Account/a -(id)- ID/a
                ├─   0.436413s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.436431s   0ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/a
              ├─   0.436459s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.436466s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.436490s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.436526s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.436546s   0ms DEBUG Paths for id
        ├─   0.436557s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
        ├─   0.436566s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a -(id)- ID/a is valid
        ├─   0.436574s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.436585s   0ms DEBUG path Account/b -(id)- ID/b is valid
        ├─   0.436591s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.436638s   1ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
        └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
          ├─   0.436675s   0ms DEBUG Building root query tree node: Account/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.436690s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.436713s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", current_cost=2003}
        ├─   0.436762s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.436776s   1ms DEBUG No direct paths found
      ├─   0.436785s   1ms DEBUG going deeper
      ├─   0.436793s   1ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
      ├─   0.436799s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.436805s   1ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.436845s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.436888s   0ms DEBUG checking edge Account/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.436908s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.436928s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
              ├─   0.436938s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.436972s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.436993s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.437030s   0ms DEBUG checking edge Account/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                        ├─   0.437052s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.437072s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
                      ├─   0.437082s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.437115s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
                      ├─   0.437124s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.437133s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
                      ├─   0.437141s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.437148s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
                      ├─   0.437156s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.437166s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.437173s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.437191s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                  ┌─┘
                  ├─   0.437213s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                ┌─┘
                ├─   0.437230s   0ms DEBUG Paths for id
                ├─   0.437239s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
                ├─   0.437247s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.437259s   0ms DEBUG path Account/b -(id)- ID/b is valid
                ├─   0.437267s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
              ┌─┘
              ├─   0.437284s   0ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
                └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
                  ├─   0.437339s   0ms DEBUG Building root query tree node: Account/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.437365s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.437432s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", current_cost=2003}
                ├─   0.437502s   0ms DEBUG checking edge Account/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", edge="id"}
                  ├─   0.437525s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.437564s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c with edge Account/c -(id)- ID/c
                ├─   0.437580s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
              ┌─┘
              ├─   0.437601s   0ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/c
              ├─   0.437612s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
              ├─   0.437619s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.437626s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
              ├─   0.437633s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.437643s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.437650s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
            ┌─┘
            ├─   0.437669s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }], [])))
          ┌─┘
          ├─   0.437686s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }], [])))
        ┌─┘
        ├─   0.437702s   0ms DEBUG Paths for id
        ├─   0.437711s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
        ├─   0.437720s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c -(id)- ID/c is valid
        ├─   0.437727s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.437738s   0ms DEBUG path Account/b -(id)- ID/b is valid
        ├─   0.437759s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.437774s   2ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
        └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
          ├─   0.437820s   0ms DEBUG Building root query tree node: Account/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.437842s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.437866s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", current_cost=2003}
        ├─   0.437926s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.437944s   2ms DEBUG No direct paths found
      ├─   0.437956s   2ms DEBUG going deeper
      ├─   0.437966s   2ms DEBUG Exploring edge Account/a -(🔑🧩{id})- Account/c
      ├─   0.437977s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.437984s   2ms DEBUG Exploring edge Account/a -(🔑🧩{id})- Account/b
      ├─   0.437990s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.437997s   2ms DEBUG Exploring edge Account/a -(🔑🧩{id})- Account/a
      ├─   0.438003s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.438012s   2ms DEBUG Exploring edge Account/c -(🔑🧩{id})- Account/c
      ├─   0.438018s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.438024s   2ms DEBUG Exploring edge Account/c -(🔑🧩{id})- Account/b
      ├─   0.438029s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.438035s   2ms DEBUG Exploring edge Account/c -(🔑🧩{id})- Account/a
      ├─   0.438041s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.438049s   2ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.438055s   2ms INFO return=Ok([])
    ┌─┘
    ├─   0.438070s   2ms DEBUG Indirect paths found: 0
    ├─   0.438079s   2ms DEBUG advanced: root(Query) -(b)- Query/b -(accounts)- Account/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(18)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.438147s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.438167s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.438180s   0ms DEBUG Processing edge: Query/b -(accounts)- Account/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.438193s   0ms DEBUG Processing edge: Account/b -(name)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.438215s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.438227s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.438238s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="accounts", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.438355s   0ms DEBUG adding output field 'accounts' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Account", field="name", leaf=true, list=false, response_path="accounts.@", fetch_path="accounts.@"}
              ├─   0.438410s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.438492s   0ms DEBUG Done
├─   0.438500s   0ms DEBUG found roots
├─   0.438505s   0ms DEBUG print graph
├─   0.438511s   0ms DEBUG Nodes:
│ [1] Query/b {} → {accounts{name}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="b"}
    └─┐execute{subgraph_name="b"}
      ├─   0.438861s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.441352s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.441736s DEBUG execution result: ExecutionResult { data: Some(Object {"accounts": Array [Object {"name": String("Alice")}, Object {"name": String("Bob")}, Object {"name": String("Charlie")}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{accounts{name}}")}}}) }
   0.445244s DEBUG original document: query {
  accounts {
    ... on Admin {
      name
    }
  }
}

   0.445387s DEBUG normalized document: query{accounts{...on Admin{name}}}

   0.445398s DEBUG executable operation: query{accounts{...on Admin{name}}}
┐walk_operation{}
├─   0.445746s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="accounts", leaf=false}
  ├─   0.445798s   0ms DEBUG Trying to advance to: accounts{...on Admin{name}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Admin", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.445854s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.445883s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Admin", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.445920s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.445927s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.445939s   0ms DEBUG Indirect paths found: 0
    ├─   0.445946s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Admin", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.446004s   0ms DEBUG checking edge Query/b -(accounts)- Account/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="accounts"}
        ├─   0.446039s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.446079s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(accounts)- Account/b
      ├─   0.446091s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(27)" }])
    ┌─┘
    ├─   0.446108s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Admin", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.446136s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.446145s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.446157s   0ms DEBUG Indirect paths found: 0
    ├─   0.446164s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.446179s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_inline_fragment{type_condition="Admin"}
  ├─   0.446211s   0ms DEBUG Processing inline fragment '{name}' on type 'Admin' through 1 possible paths
  ├─   0.446218s   0ms DEBUG Trying to advance to: ... on Admin, through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(accounts)- Account/b"}
    └─┐find_direct_paths{target=ConcreteType("Admin"), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.446247s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.446260s   0ms DEBUG Direct paths found: 0
    ├─   0.446266s   0ms WARN Object type 'Admin' is not resolvable by 'Account', resolve only the __typename
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b -(accounts)- Account/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.446298s   0ms DEBUG checking edge Account/b -(__typename)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="__typename"}
        ├─   0.446315s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.446330s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(__typename)- String/b
      ├─   0.446338s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(17)" }])
    ┌─┘
    ├─   0.446353s   0ms DEBUG Direct paths found: 1
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(17)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.446401s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.446415s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.446428s   0ms DEBUG Processing edge: Query/b -(accounts)- Account/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.446440s   0ms DEBUG Processing edge: Account/b -(__typename)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.446459s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.446470s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.446481s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="accounts", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.446622s   0ms DEBUG adding output field 'accounts' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Account", field="__typename", leaf=true, list=false, response_path="accounts.@", fetch_path="accounts.@"}
              ├─   0.446662s   0ms DEBUG adding output field '__typename' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.446732s   0ms DEBUG Done
├─   0.446740s   0ms DEBUG found roots
├─   0.446745s   0ms DEBUG print graph
├─   0.446749s   0ms DEBUG Nodes:
│ [1] Query/b {} → {accounts{__typename}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="b"}
    └─┐execute{subgraph_name="b"}
      ├─   0.447216s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.449353s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="Account", type_condition="Admin"}
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="Account", type_condition="Admin"}
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="Account", type_condition="Admin"}
┘
   0.449792s DEBUG execution result: ExecutionResult { data: Some(Object {"accounts": Array [Object {}, Object {}, Object {}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{accounts{__typename}}")}}}) }
   0.452833s DEBUG original document: query {
  accounts {
    name
    __typename
  }
}

   0.452910s DEBUG normalized document: query{accounts{name __typename}}

   0.452917s DEBUG executable operation: query{accounts{name __typename}}
┐walk_operation{}
├─   0.453098s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="accounts", leaf=false}
  ├─   0.453127s   0ms DEBUG Trying to advance to: accounts{name __typename} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.453161s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.453179s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.453200s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.453206s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.453218s   0ms DEBUG Indirect paths found: 0
    ├─   0.453225s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.453256s   0ms DEBUG checking edge Query/b -(accounts)- Account/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="accounts"}
        ├─   0.453274s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.453289s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(accounts)- Account/b
      ├─   0.453319s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(27)" }])
    ┌─┘
    ├─   0.453345s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.453372s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.453378s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.453390s   0ms DEBUG Indirect paths found: 0
    ├─   0.453398s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.453411s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="__typename", leaf=true}
  ├─   0.453432s   0ms DEBUG Trying to advance to: __typename through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(accounts)- Account/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.453486s   0ms DEBUG checking edge Account/b -(__typename)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="__typename"}
        ├─   0.453525s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.453545s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(__typename)- String/b
      ├─   0.453555s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(17)" }])
    ┌─┘
    ├─   0.453570s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.453593s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.453611s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.453648s   0ms DEBUG checking edge Account/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.453689s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.453717s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
              ├─   0.453728s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.453789s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
              ├─   0.453814s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.453827s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
              ├─   0.453834s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.453841s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.453883s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.453936s   0ms DEBUG checking edge Account/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                        ├─   0.453959s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.453982s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
                      ├─   0.454010s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.454078s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
                      ├─   0.454090s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.454099s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
                      ├─   0.454106s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.454114s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
                      ├─   0.454121s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.454131s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.454141s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.454165s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                  ┌─┘
                  ├─   0.454186s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                ┌─┘
                ├─   0.454203s   0ms DEBUG Paths for id
                ├─   0.454214s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
                ├─   0.454222s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.454235s   0ms DEBUG path Account/b -(id)- ID/b is valid
                ├─   0.454257s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
              ┌─┘
              ├─   0.454284s   0ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
                └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
                  ├─   0.454317s   0ms DEBUG Building root query tree node: Account/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.454334s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.454380s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", current_cost=2003}
                ├─   0.454439s   0ms DEBUG checking edge Account/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", edge="id"}
                  ├─   0.454491s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.454521s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a with edge Account/a -(id)- ID/a
                ├─   0.454535s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.454555s   0ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/a
              ├─   0.454584s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.454595s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.454619s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.454637s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.454657s   1ms DEBUG Paths for id
        ├─   0.454668s   1ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
        ├─   0.454677s   1ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a -(id)- ID/a is valid
        ├─   0.454684s   1ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.454696s   1ms DEBUG path Account/b -(id)- ID/b is valid
        ├─   0.454702s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.454720s   1ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
        └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
          ├─   0.454749s   0ms DEBUG Building root query tree node: Account/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.454764s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.454787s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", current_cost=2003}
        ├─   0.454837s   0ms DEBUG checking edge Account/c -(__typename)- String/c
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", edge="__typename"}
          ├─   0.454858s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.454875s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c with edge Account/c -(__typename)- String/c
        ├─   0.454904s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(20)" }])
      ┌─┘
      ├─   0.454932s   1ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/c
      ├─   0.454942s   1ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
      ├─   0.454948s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.454954s   1ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.454977s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.455013s   0ms DEBUG checking edge Account/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.455033s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.455052s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
              ├─   0.455061s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.455094s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.455142s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.455183s   0ms DEBUG checking edge Account/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                        ├─   0.455215s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.455242s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
                      ├─   0.455254s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.455295s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
                      ├─   0.455304s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.455332s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
                      ├─   0.455344s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.455352s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
                      ├─   0.455360s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.455371s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.455378s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.455401s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                  ┌─┘
                  ├─   0.455422s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                ┌─┘
                ├─   0.455439s   0ms DEBUG Paths for id
                ├─   0.455450s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
                ├─   0.455458s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.455470s   0ms DEBUG path Account/b -(id)- ID/b is valid
                ├─   0.455478s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
              ┌─┘
              ├─   0.455495s   0ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
                └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
                  ├─   0.455526s   0ms DEBUG Building root query tree node: Account/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.455553s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.455577s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", current_cost=2003}
                ├─   0.455648s   0ms DEBUG checking edge Account/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", edge="id"}
                  ├─   0.455697s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.455722s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c with edge Account/c -(id)- ID/c
                ├─   0.455734s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
              ┌─┘
              ├─   0.455753s   0ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/c
              ├─   0.455764s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
              ├─   0.455773s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.455780s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
              ├─   0.455787s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.455797s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.455803s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
            ┌─┘
            ├─   0.455822s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }], [])))
          ┌─┘
          ├─   0.455862s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }], [])))
        ┌─┘
        ├─   0.455883s   0ms DEBUG Paths for id
        ├─   0.455894s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
        ├─   0.455903s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c -(id)- ID/c is valid
        ├─   0.455911s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.455922s   0ms DEBUG path Account/b -(id)- ID/b is valid
        ├─   0.455944s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.455969s   2ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
        └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
          ├─   0.455998s   0ms DEBUG Building root query tree node: Account/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.456013s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.456035s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", current_cost=2003}
        ├─   0.456108s   0ms DEBUG checking edge Account/a -(__typename)- String/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", edge="__typename"}
          ├─   0.456129s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.456147s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a with edge Account/a -(__typename)- String/a
        ├─   0.456156s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(15)" }])
      ┌─┘
      ├─   0.456174s   2ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/a
      ├─   0.456187s   2ms DEBUG Finished finding indirect paths, found total of 2
      ├─   0.456193s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(15)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(20)" }])
    ┌─┘
    ├─   0.456209s   2ms DEBUG Indirect paths found: 2
    ├─   0.456218s   2ms DEBUG advanced: root(Query) -(b)- Query/b -(accounts)- Account/b
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.456252s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(accounts)- Account/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.456280s   0ms DEBUG checking edge Account/b -(name)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="name"}
        ├─   0.456315s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.456341s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(name)- String/b
      ├─   0.456351s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.456387s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.456417s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.456437s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.456490s   0ms DEBUG checking edge Account/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.456518s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.456540s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
              ├─   0.456550s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.456610s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
              ├─   0.456620s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.456627s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
              ├─   0.456648s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.456657s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.456686s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.456726s   0ms DEBUG checking edge Account/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                        ├─   0.456746s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.456769s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
                      ├─   0.456796s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.456847s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
                      ├─   0.456856s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.456865s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
                      ├─   0.456873s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.456884s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
                      ├─   0.456892s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.456918s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.456929s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.456952s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                  ┌─┘
                  ├─   0.456978s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                ┌─┘
                ├─   0.456995s   0ms DEBUG Paths for id
                ├─   0.457006s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
                ├─   0.457014s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.457027s   0ms DEBUG path Account/b -(id)- ID/b is valid
                ├─   0.457050s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
              ┌─┘
              ├─   0.457092s   0ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
                └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
                  ├─   0.457128s   0ms DEBUG Building root query tree node: Account/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.457146s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.457171s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", current_cost=2003}
                ├─   0.457230s   0ms DEBUG checking edge Account/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", edge="id"}
                  ├─   0.457251s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.457271s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a with edge Account/a -(id)- ID/a
                ├─   0.457281s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.457300s   0ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/a
              ├─   0.457312s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.457319s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.457338s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.457355s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.457396s   0ms DEBUG Paths for id
        ├─   0.457410s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
        ├─   0.457424s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a -(id)- ID/a is valid
        ├─   0.457431s   1ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.457442s   1ms DEBUG path Account/b -(id)- ID/b is valid
        ├─   0.457448s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.457464s   1ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
        └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
          ├─   0.457512s   0ms DEBUG Building root query tree node: Account/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.457529s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.457553s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", current_cost=2003}
        ├─   0.457605s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.457619s   1ms DEBUG No direct paths found
      ├─   0.457628s   1ms DEBUG going deeper
      ├─   0.457636s   1ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
      ├─   0.457650s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.457656s   1ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.457674s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.457728s   0ms DEBUG checking edge Account/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.457756s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.457777s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
              ├─   0.457804s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.457861s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.457882s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.457920s   0ms DEBUG checking edge Account/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                        ├─   0.457958s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.457988s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
                      ├─   0.458000s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.458043s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
                      ├─   0.458052s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.458061s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
                      ├─   0.458068s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.458076s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
                      ├─   0.458084s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.458093s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.458100s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.458119s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                  ┌─┘
                  ├─   0.458138s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                ┌─┘
                ├─   0.458154s   0ms DEBUG Paths for id
                ├─   0.458164s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
                ├─   0.458172s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.458185s   0ms DEBUG path Account/b -(id)- ID/b is valid
                ├─   0.458210s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
              ┌─┘
              ├─   0.458238s   0ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
                └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
                  ├─   0.458270s   0ms DEBUG Building root query tree node: Account/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.458309s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.458338s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", current_cost=2003}
                ├─   0.458410s   0ms DEBUG checking edge Account/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", edge="id"}
                  ├─   0.458442s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.458467s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c with edge Account/c -(id)- ID/c
                ├─   0.458479s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
              ┌─┘
              ├─   0.458508s   0ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/c
              ├─   0.458519s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
              ├─   0.458526s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.458533s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
              ├─   0.458540s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.458550s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.458557s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
            ┌─┘
            ├─   0.458598s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }], [])))
          ┌─┘
          ├─   0.458620s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }], [])))
        ┌─┘
        ├─   0.458654s   0ms DEBUG Paths for id
        ├─   0.458668s   1ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
        ├─   0.458677s   1ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c -(id)- ID/c is valid
        ├─   0.458699s   1ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.458716s   1ms DEBUG path Account/b -(id)- ID/b is valid
        ├─   0.458722s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.458742s   2ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
        └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
          ├─   0.458787s   0ms DEBUG Building root query tree node: Account/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.458820s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.458847s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", current_cost=2003}
        ├─   0.458898s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.458912s   2ms DEBUG No direct paths found
      ├─   0.458920s   2ms DEBUG going deeper
      ├─   0.458930s   2ms DEBUG Exploring edge Account/a -(🔑🧩{id})- Account/c
      ├─   0.458937s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.458944s   2ms DEBUG Exploring edge Account/a -(🔑🧩{id})- Account/b
      ├─   0.458950s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.458956s   2ms DEBUG Exploring edge Account/a -(🔑🧩{id})- Account/a
      ├─   0.458961s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.458970s   2ms DEBUG Exploring edge Account/c -(🔑🧩{id})- Account/c
      ├─   0.458976s   2ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
      ├─   0.458982s   2ms DEBUG Exploring edge Account/c -(🔑🧩{id})- Account/b
      ├─   0.458987s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.458993s   2ms DEBUG Exploring edge Account/c -(🔑🧩{id})- Account/a
      ├─   0.458999s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.459028s   2ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.459037s   2ms INFO return=Ok([])
    ┌─┘
    ├─   0.459054s   2ms DEBUG Indirect paths found: 0
    ├─   0.459065s   2ms DEBUG advanced: root(Query) -(b)- Query/b -(accounts)- Account/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(17)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.459125s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.459138s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.459151s   0ms DEBUG Processing edge: Query/b -(accounts)- Account/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.459164s   0ms DEBUG Processing edge: Account/b -(__typename)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.459184s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.459196s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.459207s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(18)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.459275s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.459309s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.459323s   0ms DEBUG Processing edge: Query/b -(accounts)- Account/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.459336s   0ms DEBUG Processing edge: Account/b -(name)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.459357s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.459369s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.459380s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="accounts", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.459494s   0ms DEBUG adding output field 'accounts' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Account", field="__typename", leaf=true, list=false, response_path="accounts.@", fetch_path="accounts.@"}
              ├─   0.459549s   0ms DEBUG adding output field '__typename' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Account", field="name", leaf=true, list=false, response_path="accounts.@", fetch_path="accounts.@"}
              ├─   0.459601s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.459670s   0ms DEBUG Done
├─   0.459677s   0ms DEBUG found roots
├─   0.459682s   0ms DEBUG print graph
├─   0.459686s   0ms DEBUG Nodes:
│ [1] Query/b {} → {accounts{__typename name}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="b"}
    └─┐execute{subgraph_name="b"}
      ├─   0.460017s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.462232s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.462458s DEBUG execution result: ExecutionResult { data: Some(Object {"accounts": Array [Object {"name": String("Alice"), "__typename": String("Account")}, Object {"name": String("Bob"), "__typename": String("Account")}, Object {"name": String("Charlie"), "__typename": String("Account")}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{accounts{__typename name}}")}}}) }
   0.465467s DEBUG original document: query {
  accounts {
    ... on Admin {
      __typename
    }
  }
}

   0.465633s DEBUG normalized document: query{accounts{...on Admin{__typename}}}

   0.465648s DEBUG executable operation: query{accounts{...on Admin{__typename}}}
┐walk_operation{}
├─   0.466203s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="accounts", leaf=false}
  ├─   0.466337s   0ms DEBUG Trying to advance to: accounts{...on Admin{__typename}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Admin", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.466429s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.466468s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Admin", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.466523s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.466532s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.466545s   0ms DEBUG Indirect paths found: 0
    ├─   0.466555s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Admin", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.466603s   0ms DEBUG checking edge Query/b -(accounts)- Account/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="accounts"}
        ├─   0.466628s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.466651s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(accounts)- Account/b
      ├─   0.466690s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(27)" }])
    ┌─┘
    ├─   0.466725s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Admin", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.466808s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.466823s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.466846s   0ms DEBUG Indirect paths found: 0
    ├─   0.466861s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.466886s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_inline_fragment{type_condition="Admin"}
  ├─   0.466933s   0ms DEBUG Processing inline fragment '{__typename}' on type 'Admin' through 1 possible paths
  ├─   0.466944s   0ms DEBUG Trying to advance to: ... on Admin, through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(accounts)- Account/b"}
    └─┐find_direct_paths{target=ConcreteType("Admin"), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.466978s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.466994s   0ms DEBUG Direct paths found: 0
    ├─   0.466999s   0ms WARN Object type 'Admin' is not resolvable by 'Account', resolve only the __typename
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b -(accounts)- Account/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.467071s   0ms DEBUG checking edge Account/b -(__typename)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="__typename"}
        ├─   0.467102s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.467121s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(__typename)- String/b
      ├─   0.467132s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(17)" }])
    ┌─┘
    ├─   0.467150s   0ms DEBUG Direct paths found: 1
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(17)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.467238s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.467255s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.467268s   0ms DEBUG Processing edge: Query/b -(accounts)- Account/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.467281s   0ms DEBUG Processing edge: Account/b -(__typename)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.467302s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.467314s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.467328s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="accounts", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.467476s   0ms DEBUG adding output field 'accounts' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Account", field="__typename", leaf=true, list=false, response_path="accounts.@", fetch_path="accounts.@"}
              ├─   0.467538s   0ms DEBUG adding output field '__typename' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.467611s   0ms DEBUG Done
├─   0.467620s   0ms DEBUG found roots
├─   0.467626s   0ms DEBUG print graph
├─   0.467630s   0ms DEBUG Nodes:
│ [1] Query/b {} → {accounts{__typename}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="b"}
    └─┐execute{subgraph_name="b"}
      ├─   0.468049s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.469908s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="Account", type_condition="Admin"}
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="Account", type_condition="Admin"}
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="Account", type_condition="Admin"}
┘
   0.470213s DEBUG execution result: ExecutionResult { data: Some(Object {"accounts": Array [Object {}, Object {}, Object {}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{accounts{__typename}}")}}}) }
   0.473457s DEBUG original document: query {
  accounts {
    id
    isActive
  }
}

   0.473632s DEBUG normalized document: query{accounts{id isActive}}

   0.473652s DEBUG executable operation: query{accounts{id isActive}}
┐walk_operation{}
├─   0.474134s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="accounts", leaf=false}
  ├─   0.474197s   0ms DEBUG Trying to advance to: accounts{id isActive} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isActive", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.474292s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.474321s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isActive", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.474353s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.474374s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.474393s   0ms DEBUG Indirect paths found: 0
    ├─   0.474404s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isActive", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.474442s   0ms DEBUG checking edge Query/b -(accounts)- Account/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="accounts"}
        ├─   0.474463s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.474478s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(accounts)- Account/b
      ├─   0.474489s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(27)" }])
    ┌─┘
    ├─   0.474505s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "isActive", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.474529s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.474535s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.474546s   0ms DEBUG Indirect paths found: 0
    ├─   0.474553s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.474568s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="isActive", leaf=true}
  ├─   0.474593s   0ms DEBUG Trying to advance to: isActive through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(accounts)- Account/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "isActive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.474619s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.474631s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "isActive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.474654s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.474675s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.474744s   0ms DEBUG checking edge Account/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.474767s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.474788s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
              ├─   0.474798s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.474837s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
              ├─   0.474847s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.474856s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
              ├─   0.474863s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.474870s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.474892s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.474935s   0ms DEBUG checking edge Account/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                        ├─   0.474958s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.474978s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
                      ├─   0.474989s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.475054s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
                      ├─   0.475070s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.475079s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
                      ├─   0.475086s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.475094s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
                      ├─   0.475101s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.475111s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.475118s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.475154s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                  ┌─┘
                  ├─   0.475192s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                ┌─┘
                ├─   0.475212s   0ms DEBUG Paths for id
                ├─   0.475224s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
                ├─   0.475232s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.475251s   0ms DEBUG path Account/b -(id)- ID/b is valid
                ├─   0.475269s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
              ┌─┘
              ├─   0.475296s   0ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
                └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
                  ├─   0.475335s   0ms DEBUG Building root query tree node: Account/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.475359s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.475384s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", current_cost=2003}
                ├─   0.475454s   0ms DEBUG checking edge Account/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", edge="id"}
                  ├─   0.475489s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.475511s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a with edge Account/a -(id)- ID/a
                ├─   0.475534s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.475575s   0ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/a
              ├─   0.475593s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.475600s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.475622s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.475652s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.475668s   1ms DEBUG Paths for id
        ├─   0.475678s   1ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
        ├─   0.475686s   1ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a -(id)- ID/a is valid
        ├─   0.475694s   1ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.475706s   1ms DEBUG path Account/b -(id)- ID/b is valid
        ├─   0.475712s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.475727s   1ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
        └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
          ├─   0.475755s   0ms DEBUG Building root query tree node: Account/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.475770s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.475791s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "isActive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", current_cost=2003}
        ├─   0.475857s   0ms DEBUG checking edge Account/c -(isActive)- Boolean/c
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", edge="isActive"}
          ├─   0.475886s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.475907s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c with edge Account/c -(isActive)- Boolean/c
        ├─   0.475921s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(21)" }])
      ┌─┘
      ├─   0.475941s   1ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/c
      ├─   0.475951s   1ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
      ├─   0.475975s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.475985s   1ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.476011s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.476046s   0ms DEBUG checking edge Account/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.476103s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.476127s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
              ├─   0.476139s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.476178s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.476199s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.476254s   0ms DEBUG checking edge Account/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                        ├─   0.476284s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.476306s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
                      ├─   0.476317s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.476352s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
                      ├─   0.476362s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.476373s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
                      ├─   0.476381s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.476389s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
                      ├─   0.476396s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.476406s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.476414s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.476453s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                  ┌─┘
                  ├─   0.476475s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                ┌─┘
                ├─   0.476491s   0ms DEBUG Paths for id
                ├─   0.476502s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
                ├─   0.476509s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.476525s   0ms DEBUG path Account/b -(id)- ID/b is valid
                ├─   0.476532s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
              ┌─┘
              ├─   0.476549s   0ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
                └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
                  ├─   0.476596s   0ms DEBUG Building root query tree node: Account/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.476626s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.476658s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", current_cost=2003}
                ├─   0.476732s   0ms DEBUG checking edge Account/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", edge="id"}
                  ├─   0.476755s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.476774s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c with edge Account/c -(id)- ID/c
                ├─   0.476785s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
              ┌─┘
              ├─   0.476803s   0ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/c
              ├─   0.476813s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
              ├─   0.476820s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.476827s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
              ├─   0.476833s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.476844s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.476850s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
            ┌─┘
            ├─   0.476883s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }], [])))
          ┌─┘
          ├─   0.476918s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }], [])))
        ┌─┘
        ├─   0.476934s   0ms DEBUG Paths for id
        ├─   0.476944s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
        ├─   0.476953s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c -(id)- ID/c is valid
        ├─   0.476960s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.476971s   0ms DEBUG path Account/b -(id)- ID/b is valid
        ├─   0.476977s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.476995s   2ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
        └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
          ├─   0.477030s   0ms DEBUG Building root query tree node: Account/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.477045s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.477085s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "isActive", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", current_cost=2003}
        ├─   0.477143s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.477157s   2ms DEBUG No direct paths found
      ├─   0.477167s   2ms DEBUG going deeper
      ├─   0.477176s   2ms DEBUG Exploring edge Account/a -(🔑🧩{id})- Account/c
      ├─   0.477198s   2ms DEBUG Ignoring. Already visited similar edge
      ├─   0.477209s   2ms DEBUG Exploring edge Account/a -(🔑🧩{id})- Account/b
      ├─   0.477214s   2ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.477221s   2ms DEBUG Exploring edge Account/a -(🔑🧩{id})- Account/a
      ├─   0.477226s   2ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.477238s   2ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.477244s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(21)" }])
    ┌─┘
    ├─   0.477266s   2ms DEBUG Indirect paths found: 1
    ├─   0.477276s   2ms DEBUG advanced: root(Query) -(b)- Query/b -(accounts)- Account/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.477332s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(accounts)- Account/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.477385s   0ms DEBUG checking edge Account/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.477405s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.477423s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
      ├─   0.477432s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
    ┌─┘
    ├─   0.477461s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.477482s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.477500s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.477533s   0ms DEBUG checking edge Account/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.477550s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.477572s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
              ├─   0.477581s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.477631s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
              ├─   0.477642s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.477650s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
              ├─   0.477656s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.477663s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.477687s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.477738s   0ms DEBUG checking edge Account/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                        ├─   0.477773s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.477802s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
                      ├─   0.477813s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.477852s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
                      ├─   0.477876s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.477888s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
                      ├─   0.477896s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.477904s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
                      ├─   0.477911s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.477920s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.477927s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.477949s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                  ┌─┘
                  ├─   0.477984s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                ┌─┘
                ├─   0.478005s   0ms DEBUG Paths for id
                ├─   0.478016s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
                ├─   0.478023s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.478036s   0ms DEBUG path Account/b -(id)- ID/b is valid
                ├─   0.478054s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
              ┌─┘
              ├─   0.478080s   0ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
                └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
                  ├─   0.478112s   0ms DEBUG Building root query tree node: Account/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.478128s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.478152s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", current_cost=2003}
                ├─   0.478211s   0ms DEBUG checking edge Account/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", edge="id"}
                  ├─   0.478233s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.478253s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a with edge Account/a -(id)- ID/a
                ├─   0.478264s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.478281s   0ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/a
              ├─   0.478294s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.478300s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.478328s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.478345s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.478361s   0ms DEBUG Paths for id
        ├─   0.478369s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
        ├─   0.478377s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a -(id)- ID/a is valid
        ├─   0.478385s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.478395s   0ms DEBUG path Account/b -(id)- ID/b is valid
        ├─   0.478401s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.478415s   0ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
        └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
          ├─   0.478440s   0ms DEBUG Building root query tree node: Account/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.478454s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.478475s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", current_cost=2003}
        ├─   0.478548s   0ms DEBUG checking edge Account/c -(id)- ID/c
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", edge="id"}
          ├─   0.478569s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.478586s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c with edge Account/c -(id)- ID/c
        ├─   0.478610s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
      ┌─┘
      ├─   0.478636s   1ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/c
      ├─   0.478645s   1ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
      ├─   0.478651s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.478657s   1ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.478692s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.478735s   0ms DEBUG checking edge Account/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.478754s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.478774s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
              ├─   0.478798s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.478843s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.478879s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.478926s   0ms DEBUG checking edge Account/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                        ├─   0.478947s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.478969s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
                      ├─   0.478979s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.479022s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
                      ├─   0.479049s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"a", "c"})
                      ├─   0.479062s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
                      ├─   0.479070s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.479077s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
                      ├─   0.479084s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "c"})
                      ├─   0.479094s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.479101s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.479134s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                  ┌─┘
                  ├─   0.479160s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                ┌─┘
                ├─   0.479176s   0ms DEBUG Paths for id
                ├─   0.479187s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
                ├─   0.479194s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.479207s   0ms DEBUG path Account/b -(id)- ID/b is valid
                ├─   0.479214s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
              ┌─┘
              ├─   0.479232s   0ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
                └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
                  ├─   0.479284s   0ms DEBUG Building root query tree node: Account/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.479307s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.479334s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", current_cost=2003}
                ├─   0.479392s   0ms DEBUG checking edge Account/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", edge="id"}
                  ├─   0.479417s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.479436s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c with edge Account/c -(id)- ID/c
                ├─   0.479457s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
              ┌─┘
              ├─   0.479475s   0ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/c
              ├─   0.479485s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
              ├─   0.479492s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.479499s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
              ├─   0.479505s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.479516s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.479522s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
            ┌─┘
            ├─   0.479558s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }], [])))
          ┌─┘
          ├─   0.479579s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }], [])))
        ┌─┘
        ├─   0.479603s   0ms DEBUG Paths for id
        ├─   0.479613s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
        ├─   0.479622s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c -(id)- ID/c is valid
        ├─   0.479629s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.479640s   0ms DEBUG path Account/b -(id)- ID/b is valid
        ├─   0.479648s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.479677s   2ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
        └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
          ├─   0.479725s   0ms DEBUG Building root query tree node: Account/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.479740s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.479764s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", current_cost=2003}
        ├─   0.479818s   0ms DEBUG checking edge Account/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", edge="id"}
          ├─   0.479837s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.479853s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a with edge Account/a -(id)- ID/a
        ├─   0.479863s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
      ┌─┘
      ├─   0.479878s   2ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/a
      ├─   0.479892s   2ms DEBUG Finished finding indirect paths, found total of 2
      ├─   0.479898s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
    ┌─┘
    ├─   0.479914s   2ms DEBUG Indirect paths found: 2
    ├─   0.479924s   2ms DEBUG advanced: root(Query) -(b)- Query/b -(accounts)- Account/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(21)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.480056s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.480077s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.480098s   0ms DEBUG Processing edge: Query/b -(accounts)- Account/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.480111s   0ms DEBUG Processing edge: Account/b -(🔑🧩{id})- Account/c
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.480124s   0ms DEBUG Processing edge: Account/c -(isActive)- Boolean/c
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.480146s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.480159s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.480170s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.480182s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.480239s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.480253s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.480266s   0ms DEBUG Processing edge: Query/b -(accounts)- Account/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.480278s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.480298s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.480310s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.480320s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="accounts", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.480467s   0ms DEBUG adding output field 'accounts' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="Account/b -(🔑🧩{id})- Account/c", parent_fetch_step_index=1}
              ├─   0.480520s   0ms DEBUG created a new fetch step [2] subgraph(c) type(Account) requirement() key({id}) in children of 1
              ├─   0.480528s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.480536s   0ms DEBUG adding __typename field to output for type 'Account'
              ├─   0.480544s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="Account", field="id", leaf=true, list=false, response_path="accounts.@", fetch_path="accounts.@"}
                      ├─   0.480621s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.480655s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="Account", field="isActive", leaf=true, list=false, response_path="accounts.@", fetch_path=""}
                  ├─   0.480766s   0ms DEBUG adding output field 'isActive' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Account", field="id", leaf=true, list=false, response_path="accounts.@", fetch_path="accounts.@"}
              ├─   0.480834s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.480907s   0ms DEBUG Done
├─   0.480917s   0ms DEBUG found roots
├─   0.480922s   0ms DEBUG print graph
├─   0.480927s   0ms DEBUG Nodes:
│ [1] Query/b {} → {accounts{__typename id}} at $.
│ [2] Account/c {__typename id} → {isActive} at $.accounts.@
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="b"}
      └─┐execute{subgraph_name="b"}
        ├─   0.481486s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.484020s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"accounts": Array [Object {"__typename": String("Account"), "id": String("u1")}, Object {"__typename": String("Account"), "id": String("u2")}, Object {"__typename": String("Account"), "id": String("u3")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("Account"), "id": String("u1")}, Object {"__typename": String("Account"), "id": String("u2")}, Object {"__typename": String("Account"), "id": String("u3")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Account", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Account"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="Account", type_condition="Account"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Account"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("Account")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Account", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Account"), "id": String("u2")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="Account", type_condition="Account"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Account"), "id": String("u2")}}
          └─┐project_requires{requires_selections=[], entity=String("Account")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "Account", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("Account"), "id": String("u3")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="Account", type_condition="Account"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("Account"), "id": String("u3")}}
          └─┐project_requires{requires_selections=[], entity=String("Account")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u3")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="c"}
        └─┐execute{subgraph_name="c"}
          ├─   0.484792s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.489837s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.490349s DEBUG execution result: ExecutionResult { data: Some(Object {"accounts": Array [Object {"id": String("u1"), "isActive": Bool(false)}, Object {"id": String("u2"), "isActive": Bool(false)}, Object {"id": String("u3"), "isActive": Bool(false)}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{accounts{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("accounts"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("c"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on Account{isActive}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("Account"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.492514s DEBUG original document: query {
  accounts {
    id
    ... on Admin {
      isActive
    }
  }
}

   0.492619s DEBUG normalized document: query{accounts{id ...on Admin{isActive}}}

   0.492627s DEBUG executable operation: query{accounts{id ...on Admin{isActive}}}
┐walk_operation{}
├─   0.492902s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="accounts", leaf=false}
  ├─   0.492946s   0ms DEBUG Trying to advance to: accounts{id ...on Admin{isActive}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Fragment { type_name: "Admin", selections: SelectionSet { items: [SelectionItem::Field { name: "isActive", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.492992s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.493012s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Fragment { type_name: "Admin", selections: SelectionSet { items: [SelectionItem::Field { name: "isActive", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.493038s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.493063s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.493083s   0ms DEBUG Indirect paths found: 0
    ├─   0.493093s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Fragment { type_name: "Admin", selections: SelectionSet { items: [SelectionItem::Field { name: "isActive", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.493130s   0ms DEBUG checking edge Query/b -(accounts)- Account/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="accounts"}
        ├─   0.493165s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.493189s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(accounts)- Account/b
      ├─   0.493199s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(27)" }])
    ┌─┘
    ├─   0.493215s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "accounts", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Fragment { type_name: "Admin", selections: SelectionSet { items: [SelectionItem::Field { name: "isActive", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.493249s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.493255s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.493303s   0ms DEBUG Indirect paths found: 0
    ├─   0.493315s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.493331s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_inline_fragment{type_condition="Admin"}
  ├─   0.493357s   0ms DEBUG Processing inline fragment '{isActive}' on type 'Admin' through 1 possible paths
  ├─   0.493365s   0ms DEBUG Trying to advance to: ... on Admin, through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(accounts)- Account/b"}
    └─┐find_direct_paths{target=ConcreteType("Admin"), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.493392s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.493405s   0ms DEBUG Direct paths found: 0
    ├─   0.493410s   0ms WARN Object type 'Admin' is not resolvable by 'Account', resolve only the __typename
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b -(accounts)- Account/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.493442s   0ms DEBUG checking edge Account/b -(__typename)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="__typename"}
        ├─   0.493471s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.493487s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(__typename)- String/b
      ├─   0.493495s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(17)" }])
    ┌─┘
    ├─   0.493511s   0ms DEBUG Direct paths found: 1
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.493539s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(accounts)- Account/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.493565s   0ms DEBUG checking edge Account/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.493602s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.493628s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
      ├─   0.493638s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
    ┌─┘
    ├─   0.493653s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
      ├─   0.493678s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.493698s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/c'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.493735s   0ms DEBUG checking edge Account/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.493756s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.493778s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
              ├─   0.493797s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.493832s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
              ├─   0.493841s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c"})
              ├─   0.493851s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
              ├─   0.493858s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.493865s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.493885s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.493959s   0ms DEBUG checking edge Account/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                        ├─   0.493999s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.494035s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
                      ├─   0.494061s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.494111s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
                      ├─   0.494120s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                      ├─   0.494133s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
                      ├─   0.494144s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.494152s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
                      ├─   0.494159s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                      ├─   0.494169s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.494176s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.494197s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                  ┌─┘
                  ├─   0.494219s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                ┌─┘
                ├─   0.494244s   0ms DEBUG Paths for id
                ├─   0.494255s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
                ├─   0.494263s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.494282s   0ms DEBUG path Account/b -(id)- ID/b is valid
                ├─   0.494291s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
              ┌─┘
              ├─   0.494310s   0ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
                └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
                  ├─   0.494360s   0ms DEBUG Building root query tree node: Account/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.494390s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.494420s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", current_cost=2003}
                ├─   0.494489s   0ms DEBUG checking edge Account/a -(id)- ID/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", edge="id"}
                  ├─   0.494520s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.494542s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a with edge Account/a -(id)- ID/a
                ├─   0.494554s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
              ┌─┘
              ├─   0.494574s   0ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/a
              ├─   0.494587s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.494594s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
            ┌─┘
            ├─   0.494614s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }], [])))
          ┌─┘
          ├─   0.494655s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }], [])))
        ┌─┘
        ├─   0.494676s   0ms DEBUG Paths for id
        ├─   0.494690s   1ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
        ├─   0.494717s   1ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a -(id)- ID/a is valid
        ├─   0.494726s   1ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.494737s   1ms DEBUG path Account/b -(id)- ID/b is valid
        ├─   0.494743s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.494761s   1ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/c
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
        └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
          ├─   0.494790s   0ms DEBUG Building root query tree node: Account/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.494805s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.494826s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", current_cost=2003}
        ├─   0.494908s   0ms DEBUG checking edge Account/c -(id)- ID/c
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", edge="id"}
          ├─   0.494930s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.494949s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c with edge Account/c -(id)- ID/c
        ├─   0.494958s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
      ┌─┘
      ├─   0.495000s   1ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/c
      ├─   0.495014s   1ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
      ├─   0.495020s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.495026s   1ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
        ├─   0.495051s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.495087s   0ms DEBUG checking edge Account/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.495106s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.495133s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
              ├─   0.495158s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
              ├─   0.495215s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                ├─   0.495241s   0ms DEBUG checking requirements {id} for edge 'Account/b -(🔑🧩{id})- Account/c'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.495285s   0ms DEBUG checking edge Account/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b", edge="id"}
                        ├─   0.495306s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.495334s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b with edge Account/b -(id)- ID/b
                      ├─   0.495348s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b", current_cost=1001}
                      ├─   0.495417s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/c
                      ├─   0.495455s   0ms DEBUG Ignoring, graph is excluded and already visited (current: c, visited: {"c", "a"})
                      ├─   0.495468s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
                      ├─   0.495477s   0ms DEBUG Ignoring. We would go back to the same graph
                      ├─   0.495488s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
                      ├─   0.495499s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"c", "a"})
                      ├─   0.495509s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.495517s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.495542s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                  ┌─┘
                  ├─   0.495585s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }], [])))
                ┌─┘
                ├─   0.495611s   0ms DEBUG Paths for id
                ├─   0.495627s   0ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
                ├─   0.495634s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.495647s   0ms DEBUG path Account/b -(id)- ID/b is valid
                ├─   0.495654s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
              ┌─┘
              ├─   0.495673s   0ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/c
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
                └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
                  ├─   0.495705s   0ms DEBUG Building root query tree node: Account/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.495722s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.495764s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", current_cost=2003}
                ├─   0.495837s   0ms DEBUG checking edge Account/c -(id)- ID/c
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c", edge="id"}
                  ├─   0.495860s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.495908s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c with edge Account/c -(id)- ID/c
                ├─   0.495923s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
              ┌─┘
              ├─   0.495944s   0ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/c
              ├─   0.495955s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/b
              ├─   0.495963s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.495970s   0ms DEBUG Exploring edge Account/b -(🔑🧩{id})- Account/a
              ├─   0.495995s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.496009s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.496016s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
            ┌─┘
            ├─   0.496041s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }], [])))
          ┌─┘
          ├─   0.496074s   1ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }], [])))
        ┌─┘
        ├─   0.496091s   1ms DEBUG Paths for id
        ├─   0.496103s   1ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(id)- ID/b is valid
        ├─   0.496117s   1ms DEBUG   Path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/c -(id)- ID/c is valid
        ├─   0.496143s   1ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.496161s   1ms DEBUG path Account/b -(id)- ID/b is valid
        ├─   0.496167s   1ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(19)" }]))
      ┌─┘
      ├─   0.496188s   2ms DEBUG Advancing path to Account/b -(🔑🧩{id})- Account/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(19)" }, root_node="Account/b"}
        └─┐create_root_for_path_sequences{root_node="Account/b", segments_count=1}
          ├─   0.496230s   0ms DEBUG Building root query tree node: Account/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.496250s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.496283s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", current_cost=2003}
        ├─   0.496357s   0ms DEBUG checking edge Account/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a", edge="id"}
          ├─   0.496406s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.496435s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(accounts)- Account/b -(🔑🧩{id})- Account/a with edge Account/a -(id)- ID/a
        ├─   0.496446s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" }])
      ┌─┘
      ├─   0.496466s   2ms DEBUG Found 1 direct paths to Account/b -(🔑🧩{id})- Account/a
      ├─   0.496483s   2ms DEBUG Finished finding indirect paths, found total of 2
      ├─   0.496490s   2ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(45) --> EdgeIndex(16)" },  { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(47) --> EdgeIndex(22)" }])
    ┌─┘
    ├─   0.496547s   3ms DEBUG Indirect paths found: 2
    ├─   0.496568s   3ms DEBUG advanced: root(Query) -(b)- Query/b -(accounts)- Account/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(17)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.496634s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.496647s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.496660s   0ms DEBUG Processing edge: Query/b -(accounts)- Account/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.496672s   0ms DEBUG Processing edge: Account/b -(__typename)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.496692s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.496703s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.496714s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(27) --> EdgeIndex(19)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.496770s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.496789s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.496801s   0ms DEBUG Processing edge: Query/b -(accounts)- Account/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.496834s   0ms DEBUG Processing edge: Account/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.496857s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.496869s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.496880s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="accounts", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.497021s   0ms DEBUG adding output field 'accounts' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Account", field="__typename", leaf=true, list=false, response_path="accounts.@", fetch_path="accounts.@"}
              ├─   0.497054s   0ms DEBUG adding output field '__typename' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Account", field="id", leaf=true, list=false, response_path="accounts.@", fetch_path="accounts.@"}
              ├─   0.497102s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.497191s   0ms DEBUG Done
├─   0.497201s   0ms DEBUG found roots
├─   0.497209s   0ms DEBUG print graph
├─   0.497214s   0ms DEBUG Nodes:
│ [1] Query/b {} → {accounts{__typename id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="b"}
    └─┐execute{subgraph_name="b"}
      ├─   0.497579s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.499625s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="Account", type_condition="Admin"}
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="Account", type_condition="Admin"}
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"], "Account": ["Admin", "Regular"]}, type_name="Account", type_condition="Admin"}
┘
   0.500111s DEBUG execution result: ExecutionResult { data: Some(Object {"accounts": Array [Object {"id": String("u1")}, Object {"id": String("u2")}, Object {"id": String("u3")}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{accounts{__typename id}}")}}}) }
