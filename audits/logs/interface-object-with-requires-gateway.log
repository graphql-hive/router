generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.11s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_interface_type{name="NodeWithName"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="User"}
    └─┐build_fields{fields_count=4}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006121s   0ms DEBUG Building graph for supergraph with 15 definitions
  └─┐build_root_nodes{}
    ├─   0.006154s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006204s   0ms INFO [x] Creating owned field move edge 'User.__typename/A' (type: String)
    ├─   0.006217s   0ms INFO [x] Creating field move edge 'User.name/A' (type: String)
    ├─   0.006225s   0ms INFO [x] Creating field move edge 'User.name/A' (type: String)
    ├─   0.006232s   0ms INFO [ ] Field 'User.username/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006237s   0ms INFO [x] Creating field move edge 'User.age/A' (type: Int)
    ├─   0.006243s   0ms INFO [x] Creating field move edge 'User.age/A' (type: Int)
    ├─   0.006249s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006255s   0ms INFO [x] Creating field move edge 'User.id/A' (type: ID)
    ├─   0.006261s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006268s   0ms INFO [x] Creating field move edge 'Query.users/A' (type: NodeWithName)
    ├─   0.006276s   0ms INFO [x] Creating field move edge 'Query.users/A' (type: NodeWithName)
    ├─   0.006282s   0ms INFO [ ] Field 'Query.anotherUsers/A' does is not available in the subgraph, skipping edge creation (type: NodeWithName)
    ├─   0.006287s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006295s   0ms INFO [ ] Field 'Query.users/B' does is not available in the subgraph, skipping edge creation (type: NodeWithName)
    ├─   0.006300s   0ms INFO [x] Creating field move edge 'Query.anotherUsers/B' (type: NodeWithName)
    ├─   0.006306s   0ms INFO [x] Creating field move edge 'Query.anotherUsers/B' (type: NodeWithName)
    ├─   0.006312s   0ms INFO [x] Creating owned field move edge 'NodeWithName.__typename/A' (type: String)
    ├─   0.006318s   0ms INFO [x] Creating field move edge 'NodeWithName.id/A' (type: ID)
    ├─   0.006324s   0ms INFO [x] Creating field move edge 'NodeWithName.id/A' (type: ID)
    ├─   0.006330s   0ms INFO [x] Creating field move edge 'NodeWithName.name/A' (type: String)
    ├─   0.006336s   0ms INFO [x] Creating field move edge 'NodeWithName.name/A' (type: String)
    ├─   0.006341s   0ms INFO [ ] Field 'NodeWithName.username/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006346s   0ms INFO [x] Creating owned field move edge 'NodeWithName.__typename/B' (type: String)
    ├─   0.006352s   0ms INFO [x] Creating field move edge 'NodeWithName.id/B' (type: ID)
    ├─   0.006358s   0ms INFO [x] Creating field move edge 'NodeWithName.id/B' (type: ID)
    ├─   0.006364s   0ms INFO [ ] Field 'NodeWithName.name/B' is external, skipping edge creation
    ├─   0.006432s   0ms INFO [x] Creating field move edge 'NodeWithName.username/B' (type: String)
    ├─   0.006444s   0ms INFO [x] Creating field move edge 'NodeWithName.username/B' (type: String)
  ┌─┘
  └─┐build_interface_implementation_edges{}
    ├─   0.006475s   0ms INFO Building interface implementation edge from 'User/A' to 'NodeWithName/A'
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006530s   0ms INFO Creating self-referencing entity move edge in 'User/A' via key 'id'
    ├─   0.006573s   0ms INFO Creating self-referencing entity move edge in 'NodeWithName/A' via key 'id'
    ├─   0.006644s   0ms INFO Creating entity move edge from 'NodeWithName/A' to 'NodeWithName/B' via key 'id'
    ├─   0.006685s   0ms INFO Creating entity move edge from 'NodeWithName/B' to 'NodeWithName/A' via key 'id'
    ├─   0.006717s   0ms INFO Creating self-referencing entity move edge in 'NodeWithName/B' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.063324s INFO Starting server on http://localhost:4000
   0.064532s INFO starting 16 workers
   0.064571s INFO Actix runtime found; starting in Actix runtime
   0.064579s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.217976s DEBUG original document: query ping {
  __typename
}

   0.218142s DEBUG normalized document: query ping {__typename}

   0.218166s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.218767s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.300631s DEBUG original document: query {
  anotherUsers {
    id
    name
    username
  }
}

   0.300771s DEBUG normalized document: query{anotherUsers{id name username}}

   0.300790s DEBUG executable operation: query{anotherUsers{id name username}}
┐walk_operation{}
├─   0.301167s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="anotherUsers", leaf=false}
  ├─   0.301222s   0ms DEBUG Trying to advance to: anotherUsers{id name username} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.301297s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.301325s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.301359s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.301379s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.301398s   0ms DEBUG Indirect paths found: 0
    ├─   0.301408s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.301452s   0ms DEBUG checking edge Query/b -(anotherUsers)- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="anotherUsers"}
        ├─   0.301472s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.301487s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(anotherUsers)- NodeWithName/b
      ├─   0.301511s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.301535s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.301582s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.301591s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.301606s   0ms DEBUG Indirect paths found: 0
    ├─   0.301617s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.301631s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="username", leaf=true}
  ├─   0.301655s   0ms DEBUG Trying to advance to: username through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.301684s   0ms DEBUG checking edge NodeWithName/b -(username🧩{name})- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="username"}
        ├─   0.301702s   0ms DEBUG checking requirements {name} for edge 'NodeWithName/b -(username🧩{name})- String/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.301750s   0ms INFO return=Ok([])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.301780s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
              ├─   0.301789s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.301798s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
                ├─   0.301836s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/a'
                └─┐validate_field_requirement{}
                  └─┐validate_field_requirement{}
                    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
                      ├─   0.301889s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
                      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
                        ├─   0.301911s   0ms INFO return=Ok(Some([]))
                      ┌─┘
                      ├─   0.301932s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
                      ├─   0.301955s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }])
                    ┌─┘
                    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
                      ├─   0.302018s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
                      ├─   0.302030s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b", "a"})
                      ├─   0.302038s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
                      ├─   0.302045s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"b", "a"})
                      ├─   0.302054s   0ms DEBUG Finished finding indirect paths, found total of 0
                      ├─   0.302061s   0ms INFO return=Ok([])
                    ┌─┘
                    ├─   0.302096s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }], [])))
                  ┌─┘
                  ├─   0.302126s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }], [])))
                ┌─┘
                ├─   0.302142s   0ms DEBUG Paths for id
                ├─   0.302153s   0ms DEBUG   Path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(id)- ID/b is valid
                ├─   0.302161s   0ms DEBUG Found 1 best paths for this leaf requirement
                ├─   0.302178s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
                ├─   0.302185s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
              ┌─┘
              ├─   0.302202s   0ms DEBUG Advancing path to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="NodeWithName/b"}
                └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=1}
                  ├─   0.302234s   0ms DEBUG Building root query tree node: NodeWithName/b
                  └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                    ├─   0.302252s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
                    └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                    ┌─┘
                    ├─   0.302276s   0ms DEBUG No subsequent steps (leaf or end of path)
                  ┌─┘
                ┌─┘
              ┌─┘
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", current_cost=2003}
                ├─   0.302327s   0ms DEBUG checking edge NodeWithName/a -(name)- String/a
                └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", edge="name"}
                  ├─   0.302363s   0ms INFO return=Ok(Some([]))
                ┌─┘
                ├─   0.302384s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a with edge NodeWithName/a -(name)- String/a
                ├─   0.302395s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(12)" }])
              ┌─┘
              ├─   0.302414s   0ms DEBUG Found 1 direct paths to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              ├─   0.302433s   0ms DEBUG Finished finding indirect paths, found total of 1
              ├─   0.302439s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(12)" }])
            ┌─┘
            ├─   0.302457s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(12)" }], [])))
          ┌─┘
          ├─   0.302472s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(12)" }], [])))
        ┌─┘
        ├─   0.302485s   0ms DEBUG Paths for name
        ├─   0.302494s   0ms DEBUG   Path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a -(name)- String/a is valid
        ├─   0.302500s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.302511s   0ms DEBUG path NodeWithName/b -(🔑🧩{id})- NodeWithName/a -(name)- String/a is valid
        ├─   0.302517s   0ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(20) --> EdgeIndex(12)" }]))
      ┌─┘
      ├─   0.302533s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(username🧩{name})- String/b
      └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(20) --> EdgeIndex(12)" }, root_node="NodeWithName/b"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=2}
          ├─   0.302558s   0ms DEBUG Building root query tree node: NodeWithName/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=2}
            ├─   0.302572s   0ms DEBUG Processing edge: NodeWithName/b -(🔑🧩{id})- NodeWithName/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=2}
              ├─   0.302585s   0ms DEBUG Processing edge: NodeWithName/a -(name)- String/a
              └─┐from_path_segment_sequences{current_index=2, total_segments=2}
              ┌─┘
              ├─   0.302606s   0ms DEBUG No subsequent steps (leaf or end of path)
            ┌─┘
            ├─   0.302619s   0ms DEBUG Adding subsequent step as child
          ┌─┘
        ┌─┘
      ┌─┘
      ├─   0.302646s   0ms INFO return=Ok([ { cost: 1004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.302660s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.302681s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.302688s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.302693s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.302710s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.302741s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
                ├─   0.302758s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.302775s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
              ├─   0.302783s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.302811s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
              ├─   0.302818s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.302826s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              ├─   0.302853s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.302866s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.302882s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.302904s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.302923s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.302937s   0ms DEBUG Paths for id
        ├─   0.302951s   0ms DEBUG   Path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(id)- ID/b is valid
        ├─   0.302957s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.302968s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
        ├─   0.302974s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.302988s   0ms DEBUG Advancing path to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="NodeWithName/b"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=1}
          ├─   0.303014s   0ms DEBUG Building root query tree node: NodeWithName/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.303028s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.303050s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", current_cost=2003}
        ├─   0.303093s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.303125s   0ms DEBUG No direct paths found
      ├─   0.303138s   0ms DEBUG going deeper
      ├─   0.303148s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      ├─   0.303154s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.303160s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.303166s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.303175s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.303180s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.303192s   1ms DEBUG Indirect paths found: 0
    ├─   0.303202s   1ms DEBUG advanced: root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.303232s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.303279s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.303294s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.303313s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.303319s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.303325s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.303342s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.303373s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
                ├─   0.303391s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.303408s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
              ├─   0.303417s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.303446s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
              ├─   0.303453s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.303459s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              ├─   0.303466s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.303474s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.303480s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.303495s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.303510s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.303524s   0ms DEBUG Paths for id
        ├─   0.303532s   0ms DEBUG   Path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(id)- ID/b is valid
        ├─   0.303538s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.303548s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
        ├─   0.303554s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.303568s   0ms DEBUG Advancing path to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="NodeWithName/b"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=1}
          ├─   0.303591s   0ms DEBUG Building root query tree node: NodeWithName/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.303604s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.303625s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", current_cost=2003}
        ├─   0.303670s   0ms DEBUG checking edge NodeWithName/a -(name)- String/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", edge="name"}
          ├─   0.303688s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.303703s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a with edge NodeWithName/a -(name)- String/a
        ├─   0.303712s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(12)" }])
      ┌─┘
      ├─   0.303727s   0ms DEBUG Found 1 direct paths to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.303737s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.303742s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.303755s   0ms DEBUG Indirect paths found: 1
    ├─   0.303763s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.303788s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.303812s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.303827s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.303841s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
      ├─   0.303849s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.303862s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.303880s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.303885s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.303891s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.303906s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.303937s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
                ├─   0.303954s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.303970s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
              ├─   0.303978s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.304005s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
              ├─   0.304012s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.304018s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              ├─   0.304025s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.304032s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.304039s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.304053s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.304068s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.304082s   0ms DEBUG Paths for id
        ├─   0.304090s   0ms DEBUG   Path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(id)- ID/b is valid
        ├─   0.304095s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.304105s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
        ├─   0.304111s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.304124s   0ms DEBUG Advancing path to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="NodeWithName/b"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=1}
          ├─   0.304155s   0ms DEBUG Building root query tree node: NodeWithName/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.304168s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.304189s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", current_cost=2003}
        ├─   0.304230s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", edge="id"}
          ├─   0.304263s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.304285s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
        ├─   0.304295s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.304311s   0ms DEBUG Found 1 direct paths to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.304322s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.304327s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.304340s   0ms DEBUG Indirect paths found: 1
    ├─   0.304350s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(15)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.304393s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.304405s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.304416s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.304429s   0ms DEBUG Processing edge: NodeWithName/b -(username🧩{name})- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.304447s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.304458s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.304469s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(12)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.304502s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.304513s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.304524s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.304536s   0ms DEBUG Processing edge: NodeWithName/b -(🔑🧩{id})- NodeWithName/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.304548s   0ms DEBUG Processing edge: NodeWithName/a -(name)- String/a
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.304567s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.304578s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.304589s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.304601s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.304679s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.304693s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.304705s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.304717s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.304735s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.304746s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.304756s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="anotherUsers", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.304883s   0ms DEBUG adding output field 'anotherUsers' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_requires_field_edge{parent_fetch_step_index=1}
              └─┐find_satisfiable_key{node="NodeWithName/b"}
                └─┐can_satisfy_edge{path="NodeWithName/b", edge="id"}
                  ├─   0.304939s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/b'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="NodeWithName/b", current_cost=0}
                        ├─   0.304977s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
                        └─┐can_satisfy_edge{path="NodeWithName/b", edge="id"}
                          ├─   0.304998s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.305016s   0ms DEBUG Advancing path NodeWithName/b with edge NodeWithName/b -(id)- ID/b
                        ├─   0.305027s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(14)" }])
                      ┌─┘
                      ├─   0.305048s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(14)" }], [])))
                    ┌─┘
                    ├─   0.305064s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(14)" }], [])))
                  ┌─┘
                  ├─   0.305079s   0ms DEBUG Paths for id
                  ├─   0.305088s   0ms DEBUG   Path NodeWithName/b -(id)- ID/b is valid
                  ├─   0.305095s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.305106s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
                  ├─   0.305113s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
                ┌─┘
              ┌─┘
              ├─   0.305137s   0ms DEBUG Key to re-enter: {id}
              ├─   0.305145s   0ms DEBUG Creating a fetch step for children of @requires
              ├─   0.305155s   0ms DEBUG created a new fetch step [2] subgraph(b) type(NodeWithName) requirement({name}) in children of 1
              ├─   0.305164s   0ms DEBUG Adding {name} to fetch([2]).input
              ├─   0.305175s   0ms DEBUG Adding {id} to fetch([2]).input
              ├─   0.305182s   0ms DEBUG Creating a fetch step for requirement of @requires
              ├─   0.305189s   0ms DEBUG Adding {id} to fetch([3]).input
              └─┐connect{parent=1, child=3}
              ┌─┘
              ├─   0.305217s   0ms DEBUG Processing requirements
              └─┐process_noop_edge{}
                └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3}
                  └─┐process_entity_move_edge{edge="NodeWithName/b -(🔑🧩{id})- NodeWithName/a", parent_fetch_step_index=3}
                    ├─   0.305259s   0ms DEBUG created a new fetch step [4] subgraph(a) type(NodeWithName) requirement() key({id}) in children of 3
                    ├─   0.305268s   0ms DEBUG adding input requirement '{id}' to fetch step [4]
                    ├─   0.305276s   0ms DEBUG adding __typename field to output for type 'NodeWithName'
                    ├─   0.305284s   0ms DEBUG connecting fetch step to parent [3] -> [4]
                    └─┐connect{parent=3, child=4}
                    ┌─┘
                    └─┐process_requirements_for_fetch_steps{count=1}
                      └─┐process_noop_edge{}
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=3, requiring_fetch_step_index=4}
                          └─┐process_plain_field_edge{parent_fetch_step_index=3, requiring_fetch_step_index=4, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="anotherUsers.@", fetch_path=""}
                            ├─   0.305349s   0ms DEBUG connecting parent fetch step [3] to requiring fetch step [4]
                            └─┐connect{parent=3, child=4}
                            ┌─┘
                            ├─   0.305376s   0ms DEBUG adding output field 'id' to fetch step [3]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3, requiring_fetch_step_index=4}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                      └─┐connect{parent=3, child=4}
                      ┌─┘
                    ┌─┘
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_plain_field_edge{parent_fetch_step_index=4, type_name="NodeWithName", field="name", leaf=true, list=false, response_path="anotherUsers.@", fetch_path=""}
                        ├─   0.305472s   0ms DEBUG adding output field 'name' to fetch step [4]
                        └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4}
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
              ┌─┘
              ├─   0.305535s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
              └─┐connect{parent=4, child=2}
              ┌─┘
              ├─   0.305556s   0ms DEBUG Processing children
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
              ┌─┘
            ┌─┘
            └─┐process_entity_move_edge{edge="NodeWithName/b -(🔑🧩{id})- NodeWithName/a", parent_fetch_step_index=1}
              ├─   0.305597s   0ms DEBUG created a new fetch step [5] subgraph(a) type(NodeWithName) requirement() key({id}) in children of 1
              ├─   0.305603s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
              ├─   0.305610s   0ms DEBUG adding __typename field to output for type 'NodeWithName'
              ├─   0.305617s   0ms DEBUG connecting fetch step to parent [1] -> [5]
              └─┐connect{parent=1, child=5}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=5}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=5, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="anotherUsers.@", fetch_path="anotherUsers.@"}
                      ├─   0.305673s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [5]
                      └─┐connect{parent=1, child=5}
                      ┌─┘
                      ├─   0.305697s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=5}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=5}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="NodeWithName", field="name", leaf=true, list=false, response_path="anotherUsers.@", fetch_path=""}
                  ├─   0.305782s   0ms DEBUG adding output field 'name' to fetch step [5]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="anotherUsers.@", fetch_path="anotherUsers.@"}
              ├─   0.305835s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.305898s   1ms DEBUG Done
├─   0.305905s   1ms DEBUG found roots
├─   0.305910s   1ms DEBUG print graph
├─   0.305915s   1ms DEBUG Nodes:
│ [1] Query/b {} → {anotherUsers{__typename id}} at $.
│ [2] NodeWithName/b {__typename name id} → {username} at $.anotherUsers.@
│ [3] NodeWithName/b {__typename id} → {__typename id} at $.anotherUsers.@
│ [4] NodeWithName/a {__typename id} → {name} at $.anotherUsers.@
│ [5] NodeWithName/a {__typename id} → {name} at $.anotherUsers.@
│ 
│ Tree:
│ [1]
│   [3]
│     [4]
│       [2]
│   [5]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.305960s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [3]
    └─┐perform_passthrough_child_merge{}
      ├─   0.305975s   0ms DEBUG merging fetch steps [1] and [3]
      └─┐connect{parent=1, child=4}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.306045s   0ms DEBUG Found optimization: 4 <- 5
    └─┐perform_fetch_step_merge{}
      ├─   0.306060s   0ms DEBUG merging fetch steps [4] and [5]
      └─┐connect{parent=1, child=4}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="b"}
      └─┐execute{subgraph_name="b"}
        ├─   0.306535s   0ms DEBUG starting new connection: http://localhost:4200/
        ├─   0.306928s   0ms DEBUG connecting to 127.0.0.1:4200
        ├─   0.307304s   1ms DEBUG connected to 127.0.0.1:4200
        ├─   0.311746s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"anotherUsers": Array [Object {"__typename": String("NodeWithName"), "id": String("u1")}, Object {"__typename": String("NodeWithName"), "id": String("u2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("NodeWithName"), "id": String("u1")}, Object {"__typename": String("NodeWithName"), "id": String("u2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="NodeWithName", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("NodeWithName")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u2")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="NodeWithName", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u2")}}
          └─┐project_requires{requires_selections=[], entity=String("NodeWithName")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.312454s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.316567s   4ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"anotherUsers": Array [Object {"__typename": String("NodeWithName"), "id": String("u1"), "name": String("u1-name")}, Object {"__typename": String("NodeWithName"), "id": String("u2"), "name": String("u2-name")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("NodeWithName"), "id": String("u1"), "name": String("u1-name")}, Object {"__typename": String("NodeWithName"), "id": String("u2"), "name": String("u2-name")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u1"), "name": String("u1-name")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="NodeWithName", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u1"), "name": String("u1-name")}}
          └─┐project_requires{requires_selections=[], entity=String("NodeWithName")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1-name")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u2"), "name": String("u2-name")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="NodeWithName", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u2"), "name": String("u2-name")}}
          └─┐project_requires{requires_selections=[], entity=String("NodeWithName")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u2-name")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.317019s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.318516s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.318756s DEBUG execution result: ExecutionResult { data: Some(Object {"anotherUsers": Array [Object {"id": String("u1"), "name": String("u1-name"), "username": String("u1-username")}, Object {"id": String("u2"), "name": String("u2-name"), "username": String("u2-username")}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{anotherUsers{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("anotherUsers"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on NodeWithName{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("NodeWithName"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}, Object {"kind": String("Flatten"), "path": Array [String("anotherUsers"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on NodeWithName{username}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("NodeWithName"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("name")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.324805s DEBUG original document: query {
  users {
    id
    name
    username
  }
}

   0.324913s DEBUG normalized document: query{users{id name username}}

   0.324926s DEBUG executable operation: query{users{id name username}}
┐walk_operation{}
├─   0.325236s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="users", leaf=false}
  ├─   0.325279s   0ms DEBUG Trying to advance to: users{id name username} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.325325s   0ms DEBUG checking edge Query/a -(users)- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="users"}
        ├─   0.325344s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.325365s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(users)- NodeWithName/a
      ├─   0.325375s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.325391s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.325420s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.325427s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.325438s   0ms DEBUG Indirect paths found: 0
    ├─   0.325445s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.325473s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.325484s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.325499s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.325505s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.325515s   0ms DEBUG Indirect paths found: 0
    ├─   0.325522s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.325535s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="username", leaf=true}
  ├─   0.325555s   0ms DEBUG Trying to advance to: username through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.325579s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.325590s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.325607s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.325625s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.325661s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.325679s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.325695s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.325704s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.325733s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.325740s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.325748s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.325755s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.325762s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.325768s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.325784s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.325800s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.325813s   0ms DEBUG Paths for id
        ├─   0.325822s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.325828s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.325841s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.325847s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.325861s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.325887s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.325902s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.325922s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.325965s   0ms DEBUG checking edge NodeWithName/b -(username🧩{name})- String/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", edge="username"}
          ├─   0.325984s   0ms DEBUG checking requirements {name} for edge 'NodeWithName/b -(username🧩{name})- String/b'
          └─┐validate_field_requirement{}
            └─┐validate_field_requirement{}
              └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
                ├─   0.326016s   0ms INFO return=Ok([])
              ┌─┘
              └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
                ├─   0.326048s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
                ├─   0.326055s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
                ├─   0.326063s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
                └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", edge="id"}
                  ├─   0.326087s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/a'
                  └─┐validate_field_requirement{}
                    └─┐validate_field_requirement{}
                      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
                        ├─   0.326132s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
                        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", edge="id"}
                          ├─   0.326157s   0ms INFO return=Ok(Some([]))
                        ┌─┘
                        ├─   0.326178s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
                        ├─   0.326189s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(14)" }])
                      ┌─┘
                      └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
                        ├─   0.326226s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
                        ├─   0.326235s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"a", "b"})
                        ├─   0.326243s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
                        ├─   0.326250s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a", "b"})
                        ├─   0.326258s   0ms DEBUG Finished finding indirect paths, found total of 0
                        ├─   0.326265s   0ms INFO return=Ok([])
                      ┌─┘
                      ├─   0.326282s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                    ┌─┘
                    ├─   0.326300s   0ms INFO return=Ok(Some(([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(14)" }], [])))
                  ┌─┘
                  ├─   0.326316s   0ms DEBUG Paths for id
                  ├─   0.326347s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b -(id)- ID/b is valid
                  ├─   0.326354s   0ms DEBUG Found 1 best paths for this leaf requirement
                  ├─   0.326367s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
                  ├─   0.326373s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
                ┌─┘
                ├─   0.326394s   0ms DEBUG Advancing path to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
                └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="NodeWithName/b"}
                  └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=1}
                    ├─   0.326423s   0ms DEBUG Building root query tree node: NodeWithName/b
                    └─┐from_path_segment_sequences{current_index=0, total_segments=1}
                      ├─   0.326439s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
                      └─┐from_path_segment_sequences{current_index=1, total_segments=1}
                      ┌─┘
                      ├─   0.326463s   0ms DEBUG No subsequent steps (leaf or end of path)
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", current_cost=3005}
                  ├─   0.326515s   0ms DEBUG checking edge NodeWithName/a -(name)- String/a
                  └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", edge="name"}
                    ├─   0.326539s   0ms INFO return=Ok(Some([]))
                  ┌─┘
                  ├─   0.326558s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b -(🔑🧩{id})- NodeWithName/a with edge NodeWithName/a -(name)- String/a
                  ├─   0.326567s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(20) --> EdgeIndex(12)" }])
                ┌─┘
                ├─   0.326585s   0ms DEBUG Found 1 direct paths to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
                ├─   0.326596s   0ms DEBUG Finished finding indirect paths, found total of 1
                ├─   0.326603s   0ms INFO return=Ok([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(20) --> EdgeIndex(12)" }])
              ┌─┘
              ├─   0.326620s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(20) --> EdgeIndex(12)" }], [])))
            ┌─┘
            ├─   0.326636s   0ms INFO return=Ok(Some(([ { cost: 3006, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(20) --> EdgeIndex(12)" }], [])))
          ┌─┘
          ├─   0.326650s   0ms DEBUG Paths for name
          ├─   0.326660s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b -(🔑🧩{id})- NodeWithName/a -(name)- String/a is valid
          ├─   0.326665s   0ms DEBUG Found 1 best paths for this leaf requirement
          ├─   0.326676s   0ms DEBUG path NodeWithName/b -(🔑🧩{id})- NodeWithName/a -(name)- String/a is valid
          ├─   0.326682s   0ms INFO return=Ok(Some([ { cost: 1003, egdes: "EdgeIndex(20) --> EdgeIndex(12)" }]))
        ┌─┘
        ├─   0.326698s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b with edge NodeWithName/b -(username🧩{name})- String/b
        └─┐from_path{path= { cost: 1003, egdes: "EdgeIndex(20) --> EdgeIndex(12)" }, root_node="NodeWithName/b"}
          └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=2}
            ├─   0.326723s   0ms DEBUG Building root query tree node: NodeWithName/b
            └─┐from_path_segment_sequences{current_index=0, total_segments=2}
              ├─   0.326737s   0ms DEBUG Processing edge: NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              └─┐from_path_segment_sequences{current_index=1, total_segments=2}
                ├─   0.326751s   0ms DEBUG Processing edge: NodeWithName/a -(name)- String/a
                └─┐from_path_segment_sequences{current_index=2, total_segments=2}
                ┌─┘
                ├─   0.326772s   0ms DEBUG No subsequent steps (leaf or end of path)
              ┌─┘
              ├─   0.326785s   0ms DEBUG Adding subsequent step as child
            ┌─┘
          ┌─┘
        ┌─┘
        ├─   0.326813s   0ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(15)" }])
      ┌─┘
      ├─   0.326829s   1ms DEBUG Found 1 direct paths to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      ├─   0.326836s   1ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.326842s   1ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.326849s   1ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.326854s   1ms INFO return=Ok([ { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.326867s   1ms DEBUG Indirect paths found: 1
    ├─   0.326875s   1ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.326900s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.326924s   0ms DEBUG checking edge NodeWithName/a -(name)- String/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="name"}
        ├─   0.326940s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.326954s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(name)- String/a
      ├─   0.326962s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.326980s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.326998s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.327014s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.327045s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.327062s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.327078s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.327086s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.327114s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.327121s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.327128s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.327134s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.327141s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.327147s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.327161s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.327177s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.327190s   0ms DEBUG Paths for id
        ├─   0.327198s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.327203s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.327213s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.327219s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.327232s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.327255s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.327269s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.327288s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.327328s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.327340s   0ms DEBUG No direct paths found
      ├─   0.327349s   0ms DEBUG going deeper
      ├─   0.327356s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.327362s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.327368s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.327373s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.327379s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.327384s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.327391s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.327396s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.327407s   0ms DEBUG Indirect paths found: 0
    ├─   0.327415s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.327440s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.327463s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.327478s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.327492s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
      ├─   0.327518s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.327541s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.327566s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.327584s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.327615s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.327632s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.327648s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.327657s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.327684s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.327691s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.327698s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.327704s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.327711s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.327717s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.327732s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.327747s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.327761s   0ms DEBUG Paths for id
        ├─   0.327769s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.327774s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.327785s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.327790s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.327804s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.327827s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.327840s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.327860s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.327900s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", edge="id"}
          ├─   0.327918s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.327933s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
        ├─   0.327941s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(14)" }])
      ┌─┘
      ├─   0.327956s   0ms DEBUG Found 1 direct paths to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      ├─   0.327964s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.327969s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.327976s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.327981s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.327995s   0ms DEBUG Indirect paths found: 1
    ├─   0.328004s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2006, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(15)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.328044s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.328056s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.328067s   0ms DEBUG Processing edge: Query/a -(users)- NodeWithName/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.328079s   0ms DEBUG Processing edge: NodeWithName/a -(🔑🧩{id})- NodeWithName/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.328092s   0ms DEBUG Processing edge: NodeWithName/b -(username🧩{name})- String/b
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.328110s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.328122s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.328132s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.328143s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(12)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.328175s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.328186s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.328197s   0ms DEBUG Processing edge: Query/a -(users)- NodeWithName/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.328208s   0ms DEBUG Processing edge: NodeWithName/a -(name)- String/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.328226s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.328236s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.328246s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.328278s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.328289s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.328300s   0ms DEBUG Processing edge: Query/a -(users)- NodeWithName/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.328311s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.328328s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.328339s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.328349s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="users", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.328458s   0ms DEBUG adding output field 'users' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="NodeWithName/a -(🔑🧩{id})- NodeWithName/b", parent_fetch_step_index=1}
              ├─   0.328506s   0ms DEBUG created a new fetch step [2] subgraph(b) type(NodeWithName) requirement() key({id}) in children of 1
              ├─   0.328518s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.328526s   0ms DEBUG adding __typename field to output for type 'NodeWithName'
              ├─   0.328534s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="users.@", fetch_path="users.@"}
                      ├─   0.328597s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.328621s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_requires_field_edge{parent_fetch_step_index=2}
                  └─┐find_satisfiable_key{node="NodeWithName/b"}
                    └─┐can_satisfy_edge{path="NodeWithName/b", edge="id"}
                      ├─   0.328735s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/b'
                      └─┐validate_field_requirement{}
                        └─┐validate_field_requirement{}
                          └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="NodeWithName/b", current_cost=0}
                            ├─   0.328774s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
                            └─┐can_satisfy_edge{path="NodeWithName/b", edge="id"}
                              ├─   0.328794s   0ms INFO return=Ok(Some([]))
                            ┌─┘
                            ├─   0.328813s   0ms DEBUG Advancing path NodeWithName/b with edge NodeWithName/b -(id)- ID/b
                            ├─   0.328824s   0ms INFO return=Ok([ { cost: 1, egdes: "EdgeIndex(14)" }])
                          ┌─┘
                          ├─   0.328846s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(14)" }], [])))
                        ┌─┘
                        ├─   0.328863s   0ms INFO return=Ok(Some(([ { cost: 1, egdes: "EdgeIndex(14)" }], [])))
                      ┌─┘
                      ├─   0.328879s   0ms DEBUG Paths for id
                      ├─   0.328901s   0ms DEBUG   Path NodeWithName/b -(id)- ID/b is valid
                      ├─   0.328909s   0ms DEBUG Found 1 best paths for this leaf requirement
                      ├─   0.328920s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
                      ├─   0.328928s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
                    ┌─┘
                  ┌─┘
                  ├─   0.328960s   0ms DEBUG Key to re-enter: {id}
                  ├─   0.328968s   0ms DEBUG Creating a fetch step for children of @requires
                  ├─   0.328978s   0ms DEBUG created a new fetch step [3] subgraph(b) type(NodeWithName) requirement({name}) in children of 1
                  ├─   0.328988s   0ms DEBUG Adding {name} to fetch([3]).input
                  ├─   0.328995s   0ms DEBUG Adding {id} to fetch([3]).input
                  ├─   0.329002s   0ms DEBUG Creating a fetch step for requirement of @requires
                  ├─   0.329013s   0ms DEBUG Adding {id} to fetch([4]).input
                  └─┐connect{parent=1, child=4}
                  ┌─┘
                  ├─   0.329044s   0ms DEBUG Processing requirements
                  └─┐process_noop_edge{}
                    └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4}
                      └─┐process_entity_move_edge{edge="NodeWithName/b -(🔑🧩{id})- NodeWithName/a", parent_fetch_step_index=4}
                        ├─   0.329082s   0ms DEBUG created a new fetch step [5] subgraph(a) type(NodeWithName) requirement() key({id}) in children of 4
                        ├─   0.329090s   0ms DEBUG adding input requirement '{id}' to fetch step [5]
                        ├─   0.329098s   0ms DEBUG adding __typename field to output for type 'NodeWithName'
                        ├─   0.329105s   0ms DEBUG connecting fetch step to parent [4] -> [5]
                        └─┐connect{parent=4, child=5}
                        ┌─┘
                        └─┐process_requirements_for_fetch_steps{count=1}
                          └─┐process_noop_edge{}
                            └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                              └─┐process_plain_field_edge{parent_fetch_step_index=4, requiring_fetch_step_index=5, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="users.@", fetch_path=""}
                                ├─   0.329178s   0ms DEBUG connecting parent fetch step [4] to requiring fetch step [5]
                                └─┐connect{parent=4, child=5}
                                ┌─┘
                                ├─   0.329207s   0ms DEBUG adding output field 'id' to fetch step [4]
                                └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=4, requiring_fetch_step_index=5}
                                ┌─┘
                              ┌─┘
                            ┌─┘
                          ┌─┘
                          └─┐connect{parent=4, child=5}
                          ┌─┘
                        ┌─┘
                        └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=5}
                          └─┐process_plain_field_edge{parent_fetch_step_index=5, type_name="NodeWithName", field="name", leaf=true, list=false, response_path="users.@", fetch_path=""}
                            ├─   0.329311s   0ms DEBUG adding output field 'name' to fetch step [5]
                            └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=5}
                            ┌─┘
                          ┌─┘
                        ┌─┘
                      ┌─┘
                    ┌─┘
                  ┌─┘
                  ├─   0.329377s   0ms DEBUG Connecting leaf fetches of requirements to fetch with @requires
                  └─┐connect{parent=5, child=3}
                  ┌─┘
                  ├─   0.329400s   0ms DEBUG Processing children
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=3}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="NodeWithName", field="name", leaf=true, list=false, response_path="users.@", fetch_path="users.@"}
              ├─   0.329451s   0ms DEBUG adding output field 'name' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="users.@", fetch_path="users.@"}
              ├─   0.329491s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.329554s   1ms DEBUG Done
├─   0.329561s   1ms DEBUG found roots
├─   0.329565s   1ms DEBUG print graph
├─   0.329570s   1ms DEBUG Nodes:
│ [1] Query/a {} → {users{__typename id name}} at $.
│ [2] NodeWithName/b {__typename id} → {} at $.users.@
│ [3] NodeWithName/b {__typename name id} → {username} at $.users.@
│ [4] NodeWithName/b {__typename id} → {__typename id} at $.users.@
│ [5] NodeWithName/a {__typename id} → {name} at $.users.@
│ 
│ Tree:
│ [1]
│   [2]
│   [4]
│     [5]
│       [3]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
    ├─   0.329612s   0ms DEBUG optimization found: merge parent [1] with a passthrough child [4]
    └─┐perform_passthrough_child_merge{}
      ├─   0.329627s   0ms DEBUG merging fetch steps [1] and [4]
      └─┐connect{parent=1, child=5}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_children_with_parents{}
    ├─   0.329682s   0ms DEBUG optimization found: merge parent [1] with child [5]
    └─┐perform_fetch_step_merge{}
      ├─   0.329701s   0ms DEBUG merging fetch steps [1] and [5]
      └─┐connect{parent=1, child=3}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐merge_siblings{}
    ├─   0.329745s   0ms DEBUG Found optimization: 3 <- 2
    └─┐perform_fetch_step_merge{}
      ├─   0.329757s   0ms DEBUG merging fetch steps [3] and [2]
      └─┐connect{parent=1, child=3}
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="a"}
      └─┐execute{subgraph_name="a"}
        ├─   0.330082s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.331890s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"users": Array [Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}, Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}, Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="User", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u1"), "name": String("u1-name")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1-name")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="User", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("User"), "id": String("u2"), "name": String("u2-name")}}
          └─┐project_requires{requires_selections=[], entity=String("User")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u2-name")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="b"}
        └─┐execute{subgraph_name="b"}
          ├─   0.332430s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.333977s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.334204s DEBUG execution result: ExecutionResult { data: Some(Object {"users": Array [Object {"id": String("u1"), "name": String("u1-name"), "username": Null}, Object {"id": String("u2"), "name": String("u2-name"), "username": Null}]}), errors: Some([GraphQLError { message: "Unexpected error.", locations: Some([GraphQLErrorLocation { line: 1, column: 34 }]), path: Some([String("_entities")]), extensions: Some({"code": String("INTERNAL_SERVER_ERROR")}) }]), extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{users{__typename id name}}")}, Object {"kind": String("Flatten"), "path": Array [String("users"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on NodeWithName{username}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("NodeWithName"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("name")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.340024s DEBUG original document: query {
  anotherUsers {
    ... on User {
      age
    }
  }
}

   0.340129s DEBUG normalized document: query{anotherUsers{...on User{age}}}

   0.340139s DEBUG executable operation: query{anotherUsers{...on User{age}}}
┐walk_operation{}
├─   0.340405s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="anotherUsers", leaf=false}
  ├─   0.340444s   0ms DEBUG Trying to advance to: anotherUsers{...on User{age}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.340491s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.340512s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.340542s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.340567s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.340585s   0ms DEBUG Indirect paths found: 0
    ├─   0.340595s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.340630s   0ms DEBUG checking edge Query/b -(anotherUsers)- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="anotherUsers"}
        ├─   0.340648s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.340663s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(anotherUsers)- NodeWithName/b
      ├─   0.340672s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.340687s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.340709s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.340714s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.340725s   0ms DEBUG Indirect paths found: 0
    ├─   0.340732s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.340745s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_inline_fragment{type_condition="User"}
  ├─   0.340772s   0ms DEBUG Processing inline fragment '{age}' on type 'User' through 1 possible paths
  ├─   0.340779s   0ms DEBUG Trying to advance to: ... on User, through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=ConcreteType("User"), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.340803s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.340815s   0ms DEBUG Direct paths found: 0
    ├─   0.340821s   0ms WARN Object type 'User' is not resolvable by 'NodeWithName', resolve only the __typename
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.340851s   0ms DEBUG checking edge NodeWithName/b -(__typename)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="__typename"}
        ├─   0.340867s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.340881s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(__typename)- String/b
      ├─   0.340888s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.340903s   0ms DEBUG Direct paths found: 1
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(13)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.340949s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.340962s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.340974s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.340985s   0ms DEBUG Processing edge: NodeWithName/b -(__typename)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.341004s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.341015s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.341025s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="anotherUsers", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.341134s   0ms DEBUG adding output field 'anotherUsers' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="NodeWithName", field="__typename", leaf=true, list=false, response_path="anotherUsers.@", fetch_path="anotherUsers.@"}
              ├─   0.341166s   0ms DEBUG adding output field '__typename' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.341231s   0ms DEBUG Done
├─   0.341238s   0ms DEBUG found roots
├─   0.341243s   0ms DEBUG print graph
├─   0.341247s   0ms DEBUG Nodes:
│ [1] Query/b {} → {anotherUsers{__typename}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="b"}
    └─┐execute{subgraph_name="b"}
      ├─   0.341619s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.343600s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="NodeWithName", type_condition="User"}
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="NodeWithName", type_condition="User"}
┘
   0.343879s DEBUG execution result: ExecutionResult { data: Some(Object {"anotherUsers": Array [Object {}, Object {}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{anotherUsers{__typename}}")}}}) }
   0.347304s DEBUG original document: query {
  users {
    ... on User {
      age
    }
  }
}

   0.347415s DEBUG normalized document: query{users{...on User{age}}}

   0.347423s DEBUG executable operation: query{users{...on User{age}}}
┐walk_operation{}
├─   0.347687s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="users", leaf=false}
  ├─   0.347725s   0ms DEBUG Trying to advance to: users{...on User{age}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.347773s   0ms DEBUG checking edge Query/a -(users)- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="users"}
        ├─   0.347792s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.347814s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(users)- NodeWithName/a
      ├─   0.347824s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.347840s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.347867s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.347874s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.347885s   0ms DEBUG Indirect paths found: 0
    ├─   0.347892s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.347921s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.347932s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.347948s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.347953s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.347965s   0ms DEBUG Indirect paths found: 0
    ├─   0.347971s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.347985s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_inline_fragment{type_condition="User"}
  ├─   0.348006s   0ms DEBUG Processing inline fragment '{age}' on type 'User' through 1 possible paths
  ├─   0.348012s   0ms DEBUG Trying to advance to: ... on User, through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=ConcreteType("User"), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.348042s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(🔮)- User/a
      ├─   0.348050s   0ms INFO return=Ok([ { cost: 2001, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(16)" }])
    ┌─┘
    ├─   0.348070s   0ms DEBUG Direct paths found: 1
    ├─   0.348077s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
  └─┐process_selection_set{}
    └─┐process_field{field_name="age", leaf=true}
      ├─   0.348102s   0ms DEBUG Trying to advance to: age through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "age", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.348131s   0ms DEBUG checking edge User/a -(age)- Int/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="age"}
            ├─   0.348150s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.348166s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(age)- Int/a
          ├─   0.348178s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(16) --> EdgeIndex(4)" }])
        ┌─┘
        ├─   0.348193s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "age", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.348216s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.348223s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.348230s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.348236s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.348248s   0ms DEBUG Indirect paths found: 0
        ├─   0.348256s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(16) --> EdgeIndex(4)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.348313s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.348327s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.348339s   0ms DEBUG Processing edge: Query/a -(users)- NodeWithName/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.348351s   0ms DEBUG Processing edge: NodeWithName/a -(🔮)- User/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.348363s   0ms DEBUG Processing edge: User/a -(age)- Int/a
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.348383s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.348394s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.348406s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.348416s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="users", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.348524s   0ms DEBUG adding output field 'users' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_abstract_edge{parent_fetch_step_index=1, type_name="User", response_path="users.@", fetch_path="users.@"}
              ├─   0.348558s   0ms DEBUG adding output field '__typename' and starting an inline fragment for type '1' to fetch step [User]
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
                └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="User", field="age", leaf=true, list=false, response_path="users.@", fetch_path="users.@"}
                  ├─   0.348585s   0ms DEBUG adding output field 'age' to fetch step [1]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.348667s   0ms DEBUG Done
├─   0.348674s   0ms DEBUG found roots
├─   0.348679s   0ms DEBUG print graph
├─   0.348683s   0ms DEBUG Nodes:
│ [1] Query/a {} → {users{__typename ...on User{age}}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.349014s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.351021s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="User", type_condition="User"}
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="User", type_condition="User"}
┘
   0.351260s DEBUG execution result: ExecutionResult { data: Some(Object {"users": Array [Object {"age": Number(11)}, Object {"age": Number(22)}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{users{__typename ...on User{age}}}")}}}) }
   0.353652s DEBUG original document: query {
  anotherUsers {
    ... on User {
      age
      id
      name
      username
    }
    id
    name
  }
}

   0.353758s DEBUG normalized document: query{anotherUsers{...on User{age id name username} id name}}

   0.353770s DEBUG executable operation: query{anotherUsers{...on User{age id name username} id name}}
┐walk_operation{}
├─   0.354119s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="anotherUsers", leaf=false}
  ├─   0.354162s   0ms DEBUG Trying to advance to: anotherUsers{...on User{age id name username} id name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.354209s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.354228s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.354255s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.354261s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.354272s   0ms DEBUG Indirect paths found: 0
    ├─   0.354280s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.354310s   0ms DEBUG checking edge Query/b -(anotherUsers)- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="anotherUsers"}
        ├─   0.354327s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.354341s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(anotherUsers)- NodeWithName/b
      ├─   0.354350s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.354365s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "anotherUsers", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.354386s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.354391s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.354402s   0ms DEBUG Indirect paths found: 0
    ├─   0.354408s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.354424s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.354444s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.354469s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.354480s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.354497s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.354504s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.354510s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.354528s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.354562s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
                ├─   0.354596s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.354627s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
              ├─   0.354649s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.354694s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
              ├─   0.354702s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.354709s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              ├─   0.354718s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.354727s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.354733s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.354750s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.354766s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.354781s   0ms DEBUG Paths for id
        ├─   0.354790s   0ms DEBUG   Path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(id)- ID/b is valid
        ├─   0.354796s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.354811s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
        ├─   0.354824s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.354838s   0ms DEBUG Advancing path to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="NodeWithName/b"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=1}
          ├─   0.354886s   0ms DEBUG Building root query tree node: NodeWithName/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.354903s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.354926s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", current_cost=2003}
        ├─   0.354974s   0ms DEBUG checking edge NodeWithName/a -(name)- String/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", edge="name"}
          ├─   0.354993s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.355009s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a with edge NodeWithName/a -(name)- String/a
        ├─   0.355027s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(12)" }])
      ┌─┘
      ├─   0.355043s   0ms DEBUG Found 1 direct paths to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.355054s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.355059s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.355072s   0ms DEBUG Indirect paths found: 1
    ├─   0.355080s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.355105s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.355130s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.355145s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.355159s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
      ├─   0.355182s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.355204s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.355228s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.355234s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.355240s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
        ├─   0.355256s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/b -(🔑🧩{id})- NodeWithName/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.355291s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="id"}
                ├─   0.355308s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.355325s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
              ├─   0.355334s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
              ├─   0.355362s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
              ├─   0.355369s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.355376s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
              ├─   0.355382s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.355390s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.355396s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.355411s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }], [])))
          ┌─┘
          ├─   0.355427s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }], [])))
        ┌─┘
        ├─   0.355440s   0ms DEBUG Paths for id
        ├─   0.355448s   0ms DEBUG   Path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(id)- ID/b is valid
        ├─   0.355454s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.355465s   0ms DEBUG path NodeWithName/b -(id)- ID/b is valid
        ├─   0.355471s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(14)" }]))
      ┌─┘
      ├─   0.355484s   0ms DEBUG Advancing path to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(14)" }, root_node="NodeWithName/b"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/b", segments_count=1}
          ├─   0.355510s   0ms DEBUG Building root query tree node: NodeWithName/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.355524s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.355544s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", current_cost=2003}
        ├─   0.355590s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a", edge="id"}
          ├─   0.355607s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.355622s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b -(🔑🧩{id})- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
        ├─   0.355630s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(11)" }])
      ┌─┘
      ├─   0.355645s   0ms DEBUG Found 1 direct paths to NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.355655s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.355660s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.355673s   0ms DEBUG Indirect paths found: 1
    ├─   0.355683s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b
  ┌─┘
┌─┘
└─┐process_inline_fragment{type_condition="User"}
  ├─   0.355712s   0ms DEBUG Processing inline fragment '{age id name username}' on type 'User' through 1 possible paths
  ├─   0.355719s   0ms DEBUG Trying to advance to: ... on User, through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=ConcreteType("User"), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.355742s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.355754s   0ms DEBUG Direct paths found: 0
    ├─   0.355775s   0ms WARN Object type 'User' is not resolvable by 'NodeWithName', resolve only the __typename
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", current_cost=1001}
      ├─   0.355819s   0ms DEBUG checking edge NodeWithName/b -(__typename)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b", edge="__typename"}
        ├─   0.355836s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.355850s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(anotherUsers)- NodeWithName/b with edge NodeWithName/b -(__typename)- String/b
      ├─   0.355858s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.355872s   0ms DEBUG Direct paths found: 1
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(20) --> EdgeIndex(12)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=4}
  ├─   0.355917s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=4}
    ├─   0.355929s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=4}
      ├─   0.355940s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=4}
        ├─   0.355953s   0ms DEBUG Processing edge: NodeWithName/b -(🔑🧩{id})- NodeWithName/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=4}
          ├─   0.355965s   0ms DEBUG Processing edge: NodeWithName/a -(name)- String/a
          └─┐from_path_segment_sequences{current_index=4, total_segments=4}
          ┌─┘
          ├─   0.355983s   0ms DEBUG No subsequent steps (leaf or end of path)
        ┌─┘
        ├─   0.355996s   0ms DEBUG Adding subsequent step as child
      ┌─┘
      ├─   0.356006s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.356016s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(14)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.356049s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.356060s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.356071s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.356083s   0ms DEBUG Processing edge: NodeWithName/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.356100s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.356110s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.356121s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(13)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.356152s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.356163s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.356174s   0ms DEBUG Processing edge: Query/b -(anotherUsers)- NodeWithName/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.356185s   0ms DEBUG Processing edge: NodeWithName/b -(__typename)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.356203s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.356213s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.356223s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=3}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="anotherUsers", leaf=false, list=true, response_path="", fetch_path=""}
          ├─   0.356333s   0ms DEBUG adding output field 'anotherUsers' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=3, parent_fetch_step_index=1}
            └─┐process_entity_move_edge{edge="NodeWithName/b -(🔑🧩{id})- NodeWithName/a", parent_fetch_step_index=1}
              ├─   0.356368s   0ms DEBUG created a new fetch step [2] subgraph(a) type(NodeWithName) requirement() key({id}) in children of 1
              ├─   0.356375s   0ms DEBUG adding input requirement '{id}' to fetch step [2]
              ├─   0.356382s   0ms DEBUG adding __typename field to output for type 'NodeWithName'
              ├─   0.356390s   0ms DEBUG connecting fetch step to parent [1] -> [2]
              └─┐connect{parent=1, child=2}
              ┌─┘
              └─┐process_requirements_for_fetch_steps{count=1}
                └─┐process_noop_edge{}
                  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                    └─┐process_plain_field_edge{parent_fetch_step_index=1, requiring_fetch_step_index=2, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="anotherUsers.@", fetch_path="anotherUsers.@"}
                      ├─   0.356446s   0ms DEBUG connecting parent fetch step [1] to requiring fetch step [2]
                      └─┐connect{parent=1, child=2}
                      ┌─┘
                      ├─   0.356470s   0ms DEBUG adding output field 'id' to fetch step [1]
                      └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1, requiring_fetch_step_index=2}
                      ┌─┘
                    ┌─┘
                  ┌─┘
                ┌─┘
                └─┐connect{parent=1, child=2}
                ┌─┘
              ┌─┘
              └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=2}
                └─┐process_plain_field_edge{parent_fetch_step_index=2, type_name="NodeWithName", field="name", leaf=true, list=false, response_path="anotherUsers.@", fetch_path=""}
                  ├─   0.356560s   0ms DEBUG adding output field 'name' to fetch step [2]
                  └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=2}
                  ┌─┘
                ┌─┘
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="NodeWithName", field="id", leaf=true, list=false, response_path="anotherUsers.@", fetch_path="anotherUsers.@"}
              ├─   0.356615s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="NodeWithName", field="__typename", leaf=true, list=false, response_path="anotherUsers.@", fetch_path="anotherUsers.@"}
              ├─   0.356652s   0ms DEBUG adding output field '__typename' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.356714s   0ms DEBUG Done
├─   0.356721s   0ms DEBUG found roots
├─   0.356726s   0ms DEBUG print graph
├─   0.356730s   0ms DEBUG Nodes:
│ [1] Query/b {} → {anotherUsers{__typename id}} at $.
│ [2] NodeWithName/a {__typename id} → {name} at $.anotherUsers.@
│ 
│ Tree:
│ [1]
│   [2]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐SequenceNode::execute{data=Null, representations=[]}
  └─┐FetchNode::execute{data=Null, representations=[]}
    └─┐execute{subgraph_name="b"}
      └─┐execute{subgraph_name="b"}
        ├─   0.357150s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
        ├─   0.358828s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
      ┌─┘
    ┌─┘
  ┌─┘
  └─┐FlattenNode::execute{data=Object {"anotherUsers": Array [Object {"__typename": String("NodeWithName"), "id": String("u1")}, Object {"__typename": String("NodeWithName"), "id": String("u2")}]}, representations=[]}
    └─┐FetchNode::execute{data=Null, representations=[Object {"__typename": String("NodeWithName"), "id": String("u1")}, Object {"__typename": String("NodeWithName"), "id": String("u2")}]}
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u1")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="NodeWithName", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u1")}}
          └─┐project_requires{requires_selections=[], entity=String("NodeWithName")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u1")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐project_requires{requires_selections=[SelectionItem::Fragment { type_name: "NodeWithName", selections: SelectionSet { items: [SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u2")}}
        └─┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="NodeWithName", type_condition="NodeWithName"}
        ┌─┘
        └─┐project_requires{requires_selections=[SelectionItem::Field { name: "__typename", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }], entity=Object {"__typename": String("NodeWithName"), "id": String("u2")}}
          └─┐project_requires{requires_selections=[], entity=String("NodeWithName")}
          ┌─┘
          └─┐project_requires{requires_selections=[], entity=String("u2")}
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐execute{subgraph_name="a"}
        └─┐execute{subgraph_name="a"}
          ├─   0.359288s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
          ├─   0.360484s   1ms DEBUG pooling idle connection for ("http", localhost:4200)
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="NodeWithName", type_condition="User"}
┘
┐entity_satisfies_type_condition{possible_types={"NodeWithName": ["User"]}, type_name="NodeWithName", type_condition="User"}
┘
   0.360732s DEBUG execution result: ExecutionResult { data: Some(Object {"anotherUsers": Array [Object {"id": String("u1"), "name": String("u1-name")}, Object {"id": String("u2"), "name": String("u2-name")}]}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Sequence"), "nodes": Array [Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{anotherUsers{__typename id}}")}, Object {"kind": String("Flatten"), "path": Array [String("anotherUsers"), String("@")], "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("query($representations:[_Any!]!){_entities(representations: $representations){...on NodeWithName{name}}}"), "requires": Array [Object {"kind": String("InlineFragment"), "typeCondition": String("NodeWithName"), "selections": Array [Object {"kind": String("Field"), "name": String("__typename")}, Object {"kind": String("Field"), "name": String("id")}]}]}}]}}}) }
   0.364749s DEBUG original document: query {
  users {
    ... on User {
      age
      id
      name
      username
    }
    id
    name
  }
}

   0.364871s DEBUG normalized document: query{users{...on User{age id name username} id name}}

   0.364892s DEBUG executable operation: query{users{...on User{age id name username} id name}}
┐walk_operation{}
├─   0.365311s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="users", leaf=false}
  ├─   0.365354s   0ms DEBUG Trying to advance to: users{...on User{age id name username} id name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.365402s   0ms DEBUG checking edge Query/a -(users)- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="users"}
        ├─   0.365422s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.365445s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(users)- NodeWithName/a
      ├─   0.365455s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.365471s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.365499s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.365505s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.365517s   0ms DEBUG Indirect paths found: 0
    ├─   0.365523s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.365552s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.365563s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.365579s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.365584s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.365595s   0ms DEBUG Indirect paths found: 0
    ├─   0.365601s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.365615s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.365635s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.365660s   0ms DEBUG checking edge NodeWithName/a -(name)- String/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="name"}
        ├─   0.365675s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.365690s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(name)- String/a
      ├─   0.365697s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.365711s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.365729s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.365747s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.365782s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.365798s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.365815s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.365823s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.365851s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.365859s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.365867s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.365874s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.365881s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.365887s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.365902s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.365918s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.365932s   0ms DEBUG Paths for id
        ├─   0.365940s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.365946s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.365961s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.365967s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.365981s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.366007s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.366022s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.366042s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.366085s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.366097s   0ms DEBUG No direct paths found
      ├─   0.366106s   0ms DEBUG going deeper
      ├─   0.366113s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.366121s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.366127s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.366132s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.366138s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.366143s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.366151s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.366156s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.366167s   0ms DEBUG Indirect paths found: 0
    ├─   0.366175s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.366228s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.366258s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.366274s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.366293s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
      ├─   0.366302s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.366315s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.366335s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.366351s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.366382s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.366399s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.366415s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.366423s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.366450s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.366457s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.366464s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.366470s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.366478s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.366484s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.366498s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.366513s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.366526s   0ms DEBUG Paths for id
        ├─   0.366534s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.366540s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.366550s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.366556s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.366570s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.366592s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.366606s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.366625s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.366665s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", edge="id"}
          ├─   0.366683s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.366698s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
        ├─   0.366707s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(14)" }])
      ┌─┘
      ├─   0.366721s   0ms DEBUG Found 1 direct paths to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      ├─   0.366729s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.366735s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.366742s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.366747s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.366760s   0ms DEBUG Indirect paths found: 1
    ├─   0.366770s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
└─┐process_inline_fragment{type_condition="User"}
  ├─   0.366796s   0ms DEBUG Processing inline fragment '{age id name username}' on type 'User' through 1 possible paths
  ├─   0.366803s   0ms DEBUG Trying to advance to: ... on User, through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=ConcreteType("User"), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.366827s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(🔮)- User/a
      ├─   0.366835s   0ms INFO return=Ok([ { cost: 2001, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(16)" }])
    ┌─┘
    ├─   0.366848s   0ms DEBUG Direct paths found: 1
    ├─   0.366855s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
  └─┐process_selection_set{}
    └─┐process_field{field_name="age", leaf=true}
      ├─   0.366878s   0ms DEBUG Trying to advance to: age through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "age", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.366904s   0ms DEBUG checking edge User/a -(age)- Int/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="age"}
            ├─   0.366924s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.366940s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(age)- Int/a
          ├─   0.366948s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(16) --> EdgeIndex(4)" }])
        ┌─┘
        ├─   0.366962s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "age", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.366982s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.366988s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.366995s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.367000s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.367012s   0ms DEBUG Indirect paths found: 0
        ├─   0.367020s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="id", leaf=true}
      ├─   0.367046s   0ms DEBUG Trying to advance to: id through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.367071s   0ms DEBUG checking edge User/a -(id)- ID/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="id"}
            ├─   0.367088s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.367103s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(id)- ID/a
          ├─   0.367111s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(16) --> EdgeIndex(5)" }])
        ┌─┘
        ├─   0.367125s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.367144s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.367150s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.367156s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.367161s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.367173s   0ms DEBUG Indirect paths found: 0
        ├─   0.367181s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="name", leaf=true}
      ├─   0.367206s   0ms DEBUG Trying to advance to: name through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.367231s   0ms DEBUG checking edge User/a -(name)- String/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="name"}
            ├─   0.367248s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.367263s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(name)- String/a
          ├─   0.367271s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(16) --> EdgeIndex(3)" }])
        ┌─┘
        ├─   0.367285s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.367304s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.367309s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.367315s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.367321s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.367332s   0ms DEBUG Indirect paths found: 0
        ├─   0.367340s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="username", leaf=true}
      ├─   0.367365s   0ms DEBUG Trying to advance to: username through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.367390s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.367402s   0ms DEBUG Direct paths found: 0
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.367419s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.367424s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.367430s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.367435s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.367447s   0ms DEBUG Indirect paths found: 0
        ├─   0.367455s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
   0.370637s DEBUG original document: query {
  users {
    ... on User {
      age
      id
      name
      username
    }
    id
    name
  }
}

   0.370708s DEBUG normalized document: query{users{...on User{age id name username} id name}}

   0.370716s DEBUG executable operation: query{users{...on User{age id name username} id name}}
┐walk_operation{}
├─   0.370764s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="users", leaf=false}
  ├─   0.370788s   0ms DEBUG Trying to advance to: users{...on User{age id name username} id name} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.370824s   0ms DEBUG checking edge Query/a -(users)- NodeWithName/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="users"}
        ├─   0.370840s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.370859s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(users)- NodeWithName/a
      ├─   0.370868s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.370882s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.370905s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.370910s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.370921s   0ms DEBUG Indirect paths found: 0
    ├─   0.370928s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.370957s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.370967s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "users", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "User", selections: SelectionSet { items: [SelectionItem::Field { name: "age", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "username", selections: SelectionSet { items: [] } }] } }, SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "name", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.370984s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.370989s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.371000s   0ms DEBUG Indirect paths found: 0
    ├─   0.371006s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.371018s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="name", leaf=true}
  ├─   0.371036s   0ms DEBUG Trying to advance to: name through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.371060s   0ms DEBUG checking edge NodeWithName/a -(name)- String/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="name"}
        ├─   0.371075s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.371089s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(name)- String/a
      ├─   0.371097s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(12)" }])
    ┌─┘
    ├─   0.371114s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.371132s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.371148s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.371180s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.371197s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.371214s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.371222s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.371249s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.371257s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.371264s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.371270s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.371277s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.371283s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.371298s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.371313s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.371326s   0ms DEBUG Paths for id
        ├─   0.371334s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.371340s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.371351s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.371357s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.371370s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.371394s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.371407s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.371427s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.371468s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.371480s   0ms DEBUG No direct paths found
      ├─   0.371488s   0ms DEBUG going deeper
      ├─   0.371494s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.371500s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.371506s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/b
      ├─   0.371511s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
      ├─   0.371517s   0ms DEBUG Exploring edge NodeWithName/b -(🔑🧩{id})- NodeWithName/a
      ├─   0.371522s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.371529s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.371534s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.371545s   0ms DEBUG Indirect paths found: 0
    ├─   0.371553s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.371578s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.371602s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.371617s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.371631s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
      ├─   0.371638s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.371651s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.371669s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
        ├─   0.371685s   0ms DEBUG checking requirements {id} for edge 'NodeWithName/a -(🔑🧩{id})- NodeWithName/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.371715s   0ms DEBUG checking edge NodeWithName/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", edge="id"}
                ├─   0.371732s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.371748s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(id)- ID/a
              ├─   0.371756s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
              ├─   0.371783s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/b
              ├─   0.371790s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.371797s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
              ├─   0.371803s   0ms DEBUG Ignoring. We would go back to the same graph
              ├─   0.371810s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.371815s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.371830s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.371845s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.371858s   0ms DEBUG Paths for id
        ├─   0.371866s   0ms DEBUG   Path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(id)- ID/a is valid
        ├─   0.371874s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.371884s   0ms DEBUG path NodeWithName/a -(id)- ID/a is valid
        ├─   0.371890s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.371903s   0ms DEBUG Advancing path to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="NodeWithName/a"}
        └─┐create_root_for_path_sequences{root_node="NodeWithName/a", segments_count=1}
          ├─   0.371926s   0ms DEBUG Building root query tree node: NodeWithName/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.371939s   0ms DEBUG Processing edge: NodeWithName/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.371959s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", current_cost=2003}
        ├─   0.372007s   0ms DEBUG checking edge NodeWithName/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b", edge="id"}
          ├─   0.372025s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.372041s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔑🧩{id})- NodeWithName/b with edge NodeWithName/b -(id)- ID/b
        ├─   0.372049s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(14)" }])
      ┌─┘
      ├─   0.372065s   0ms DEBUG Found 1 direct paths to NodeWithName/a -(🔑🧩{id})- NodeWithName/b
      ├─   0.372073s   0ms DEBUG Exploring edge NodeWithName/a -(🔑🧩{id})- NodeWithName/a
      ├─   0.372078s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.372085s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.372090s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(19) --> EdgeIndex(14)" }])
    ┌─┘
    ├─   0.372103s   0ms DEBUG Indirect paths found: 1
    ├─   0.372112s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
┌─┘
└─┐process_inline_fragment{type_condition="User"}
  ├─   0.372144s   0ms DEBUG Processing inline fragment '{age id name username}' on type 'User' through 1 possible paths
  ├─   0.372150s   0ms DEBUG Trying to advance to: ... on User, through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a"}
    └─┐find_direct_paths{target=ConcreteType("User"), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a", current_cost=1001}
      ├─   0.372175s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a with edge NodeWithName/a -(🔮)- User/a
      ├─   0.372182s   0ms INFO return=Ok([ { cost: 2001, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(16)" }])
    ┌─┘
    ├─   0.372196s   0ms DEBUG Direct paths found: 1
    ├─   0.372203s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a
  ┌─┘
  └─┐process_selection_set{}
    └─┐process_field{field_name="age", leaf=true}
      ├─   0.372226s   0ms DEBUG Trying to advance to: age through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "age", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.372278s   0ms DEBUG checking edge User/a -(age)- Int/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="age"}
            ├─   0.372297s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.372315s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(age)- Int/a
          ├─   0.372324s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(16) --> EdgeIndex(4)" }])
        ┌─┘
        ├─   0.372339s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "age", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.372361s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.372367s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.372374s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.372379s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.372392s   0ms DEBUG Indirect paths found: 0
        ├─   0.372399s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="id", leaf=true}
      ├─   0.372426s   0ms DEBUG Trying to advance to: id through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.372452s   0ms DEBUG checking edge User/a -(id)- ID/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="id"}
            ├─   0.372469s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.372484s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(id)- ID/a
          ├─   0.372492s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(16) --> EdgeIndex(5)" }])
        ┌─┘
        ├─   0.372506s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.372545s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.372554s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.372561s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.372567s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.372582s   0ms DEBUG Indirect paths found: 0
        ├─   0.372592s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="name", leaf=true}
      ├─   0.372621s   0ms DEBUG Trying to advance to: name through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.372648s   0ms DEBUG checking edge User/a -(name)- String/a
          └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", edge="name"}
            ├─   0.372666s   0ms INFO return=Ok(Some([]))
          ┌─┘
          ├─   0.372681s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a with edge User/a -(name)- String/a
          ├─   0.372690s   0ms INFO return=Ok([ { cost: 2002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(16) --> EdgeIndex(3)" }])
        ┌─┘
        ├─   0.372713s   0ms DEBUG Direct paths found: 1
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "name", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.372733s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.372740s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.372746s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.372752s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.372764s   0ms DEBUG Indirect paths found: 0
        ├─   0.372788s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
    └─┐process_field{field_name="username", leaf=true}
      ├─   0.372825s   0ms DEBUG Trying to advance to: username through 1 possible paths
      └─┐explore_path{path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a"}
        └─┐find_direct_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.372853s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.372865s   0ms DEBUG Direct paths found: 0
        └─┐find_indirect_paths{target=Field(FieldSelection { name: "username", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a", current_cost=2001}
          ├─   0.372884s   0ms DEBUG Exploring edge User/a -(🔑🧩{id})- User/a
          ├─   0.372890s   0ms DEBUG Ignoring. We would go back to the same graph
          ├─   0.372896s   0ms DEBUG Finished finding indirect paths, found total of 0
          ├─   0.372901s   0ms INFO return=Ok([])
        ┌─┘
        ├─   0.372913s   0ms DEBUG Indirect paths found: 0
        ├─   0.372921s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(users)- NodeWithName/a -(🔮)- User/a
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
┘
