generating supergraph file for test...
running gateway...
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.11s
     Running `target/debug/gateway audits/fed-audit-supergraph.graphql`
┐new_supergraph_state{}
└─┐build_map{}
  └─┐build_object_type{name="Bread"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
  └─┐build_scalar_type{name="join__FieldSet"}
  ┌─┘
  └─┐build_enum_type{name="join__Graph"}
  ┌─┘
  └─┐build_scalar_type{name="link__Import"}
  ┌─┘
  └─┐build_enum_type{name="link__Purpose"}
  ┌─┘
  └─┐build_interface_type{name="Node"}
    └─┐build_fields{fields_count=2}
    ┌─┘
  ┌─┘
  └─┐build_interface_type{name="Product"}
    └─┐build_fields{fields_count=1}
    ┌─┘
  ┌─┘
  └─┐build_object_type{name="Query"}
    └─┐build_fields{fields_count=3}
    ┌─┘
  ┌─┘
┌─┘
└─┐decompose_from_supergraph{graph_id="A"}
┌─┘
└─┐decompose_from_supergraph{graph_id="B"}
┌─┘
┘
┐graph_from_supergraph_state{}
└─┐build_graph{}
  ├─   0.006189s   0ms DEBUG Building graph for supergraph with 16 definitions
  └─┐build_root_nodes{}
    ├─   0.006222s   0ms DEBUG added root type for queries: Query
  ┌─┘
  └─┐link_root_edges{}
  ┌─┘
  └─┐build_field_edges{}
    ├─   0.006271s   0ms INFO [x] Creating owned field move edge 'Bread.__typename/B' (type: String)
    ├─   0.006284s   0ms INFO [x] Creating field move edge 'Bread.id/B' (type: ID)
    ├─   0.006292s   0ms INFO [x] Creating field move edge 'Bread.id/B' (type: ID)
    ├─   0.006299s   0ms INFO [x] Creating field move edge 'Bread.name/B' (type: String)
    ├─   0.006305s   0ms INFO [x] Creating field move edge 'Bread.name/B' (type: String)
    ├─   0.006312s   0ms INFO [x] Creating owned field move edge 'Query.__typename/A' (type: String)
    ├─   0.006319s   0ms INFO [x] Creating field move edge 'Query.product/A' (type: Product)
    ├─   0.006327s   0ms INFO [x] Creating field move edge 'Query.product/A' (type: Product)
    ├─   0.006334s   0ms INFO [ ] Field 'Query.b/A' does is not available in the subgraph, skipping edge creation (type: Node)
    ├─   0.006339s   0ms INFO [x] Creating field move edge 'Query.a/A' (type: Node)
    ├─   0.006345s   0ms INFO [x] Creating field move edge 'Query.a/A' (type: Node)
    ├─   0.006351s   0ms INFO [x] Creating owned field move edge 'Query.__typename/B' (type: String)
    ├─   0.006357s   0ms INFO [ ] Field 'Query.product/B' does is not available in the subgraph, skipping edge creation (type: Product)
    ├─   0.006362s   0ms INFO [x] Creating field move edge 'Query.b/B' (type: Node)
    ├─   0.006368s   0ms INFO [x] Creating field move edge 'Query.b/B' (type: Node)
    ├─   0.006374s   0ms INFO [ ] Field 'Query.a/B' does is not available in the subgraph, skipping edge creation (type: Node)
    ├─   0.006379s   0ms INFO [x] Creating owned field move edge 'Product.__typename/A' (type: String)
    ├─   0.006386s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.006392s   0ms INFO [x] Creating field move edge 'Product.id/A' (type: ID)
    ├─   0.006397s   0ms INFO [x] Creating owned field move edge 'Product.__typename/B' (type: String)
    ├─   0.006404s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.006410s   0ms INFO [x] Creating field move edge 'Product.id/B' (type: ID)
    ├─   0.006416s   0ms INFO [x] Creating owned field move edge 'Node.__typename/A' (type: String)
    ├─   0.006422s   0ms INFO [x] Creating field move edge 'Node.id/A' (type: ID)
    ├─   0.006428s   0ms INFO [x] Creating field move edge 'Node.id/A' (type: ID)
    ├─   0.006433s   0ms INFO [ ] Field 'Node.field/A' does is not available in the subgraph, skipping edge creation (type: String)
    ├─   0.006438s   0ms INFO [x] Creating owned field move edge 'Node.__typename/B' (type: String)
    ├─   0.006445s   0ms INFO [x] Creating field move edge 'Node.id/B' (type: ID)
    ├─   0.006451s   0ms INFO [x] Creating field move edge 'Node.id/B' (type: ID)
    ├─   0.006456s   0ms INFO [x] Creating field move edge 'Node.field/B' (type: String)
    ├─   0.006462s   0ms INFO [x] Creating field move edge 'Node.field/B' (type: String)
  ┌─┘
  └─┐build_interface_implementation_edges{}
    ├─   0.006483s   0ms INFO Building interface implementation edge from 'Bread/B' to 'Product/B'
  ┌─┘
  └─┐build_entity_reference_edges{}
    ├─   0.006568s   0ms INFO Creating self-referencing entity move edge in 'Bread/B' via key 'id'
    ├─   0.006611s   0ms INFO Creating entity move edge from 'Product/A' to 'Product/B' via key 'id'
    ├─   0.006679s   0ms INFO Creating self-referencing entity move edge in 'Product/B' via key 'id'
    ├─   0.006718s   0ms INFO Creating self-referencing entity move edge in 'Node/A' via key 'id'
    ├─   0.006750s   0ms INFO Creating entity move edge from 'Node/B' to 'Node/A' via key 'id'
  ┌─┘
  └─┐build_viewed_field_edges{}
  ┌─┘
┌─┘
┘
   0.063414s INFO Starting server on http://localhost:4000
   0.064540s INFO starting 16 workers
   0.064575s INFO Actix runtime found; starting in Actix runtime
   0.064583s INFO starting service: "actix-web-service-0.0.0.0:4000", workers: 16, listening on: 0.0.0.0:4000
   0.303100s DEBUG original document: query ping {
  __typename
}

   0.303245s DEBUG normalized document: query ping {__typename}

   0.303267s DEBUG executable operation: query ping {__typename}
┐execute{}
┘
   0.303661s DEBUG execution result: ExecutionResult { data: Some(Object {"__typename": String("Query")}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan")}}) }
   0.380693s DEBUG original document: query {
  b {
    id
    field
  }
}

   0.380836s DEBUG normalized document: query{b{id field}}

   0.380850s DEBUG executable operation: query{b{id field}}
┐walk_operation{}
├─   0.381268s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="b", leaf=false}
  ├─   0.381319s   0ms DEBUG Trying to advance to: b{id field} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "b", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "field", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.381374s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.381399s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "b", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "field", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.381428s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.381435s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.381446s   0ms DEBUG Indirect paths found: 0
    ├─   0.381454s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "b", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "field", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.381491s   0ms DEBUG checking edge Query/b -(b)- Node/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="b"}
        ├─   0.381509s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.381524s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(b)- Node/b
      ├─   0.381539s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.381578s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "b", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }, SelectionItem::Field { name: "field", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.381608s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.381614s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.381625s   0ms DEBUG Indirect paths found: 0
    ├─   0.381633s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.381647s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="field", leaf=true}
  ├─   0.381669s   0ms DEBUG Trying to advance to: field through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(b)- Node/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "field", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b", current_cost=1001}
      ├─   0.381693s   0ms DEBUG checking edge Node/b -(field)- String/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- Node/b", edge="field"}
        ├─   0.381709s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.381723s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- Node/b with edge Node/b -(field)- String/b
      ├─   0.381731s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(18)" }])
    ┌─┘
    ├─   0.381744s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "field", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b", current_cost=1001}
      ├─   0.381764s   0ms DEBUG Exploring edge Node/b -(🔑🧩{id})- Node/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- Node/b", edge="id"}
        ├─   0.381782s   0ms DEBUG checking requirements {id} for edge 'Node/b -(🔑🧩{id})- Node/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b", current_cost=1001}
              ├─   0.381820s   0ms DEBUG checking edge Node/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- Node/b", edge="id"}
                ├─   0.381838s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.381854s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- Node/b with edge Node/b -(id)- ID/b
              ├─   0.381862s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(17)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b", current_cost=1001}
              ├─   0.381890s   0ms DEBUG Exploring edge Node/b -(🔑🧩{id})- Node/a
              ├─   0.381899s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.381908s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.381914s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.381930s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.381949s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.381963s   0ms DEBUG Paths for id
        ├─   0.381971s   0ms DEBUG   Path root(Query) -(b)- Query/b -(b)- Node/b -(id)- ID/b is valid
        ├─   0.381977s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.381994s   0ms DEBUG path Node/b -(id)- ID/b is valid
        ├─   0.382000s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
      ┌─┘
      ├─   0.382014s   0ms DEBUG Advancing path to Node/b -(🔑🧩{id})- Node/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Node/b"}
        └─┐create_root_for_path_sequences{root_node="Node/b", segments_count=1}
          ├─   0.382042s   0ms DEBUG Building root query tree node: Node/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.382058s   0ms DEBUG Processing edge: Node/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.382079s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "field", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b -(🔑🧩{id})- Node/a", current_cost=2003}
        ├─   0.382136s   0ms INFO return=Ok([])
      ┌─┘
      ├─   0.382155s   0ms DEBUG No direct paths found
      ├─   0.382167s   0ms DEBUG going deeper
      ├─   0.382177s   0ms DEBUG Exploring edge Node/a -(🔑🧩{id})- Node/a
      ├─   0.382183s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
      ├─   0.382192s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.382198s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.382209s   0ms DEBUG Indirect paths found: 0
    ├─   0.382218s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(b)- Node/b
  ┌─┘
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.382246s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(b)- Node/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b", current_cost=1001}
      ├─   0.382271s   0ms DEBUG checking edge Node/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- Node/b", edge="id"}
        ├─   0.382287s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.382301s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- Node/b with edge Node/b -(id)- ID/b
      ├─   0.382308s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(17)" }])
    ┌─┘
    ├─   0.382322s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b", current_cost=1001}
      ├─   0.382340s   0ms DEBUG Exploring edge Node/b -(🔑🧩{id})- Node/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- Node/b", edge="id"}
        ├─   0.382356s   0ms DEBUG checking requirements {id} for edge 'Node/b -(🔑🧩{id})- Node/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b", current_cost=1001}
              ├─   0.382388s   0ms DEBUG checking edge Node/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- Node/b", edge="id"}
                ├─   0.382404s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.382420s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- Node/b with edge Node/b -(id)- ID/b
              ├─   0.382428s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(17)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b", current_cost=1001}
              ├─   0.382455s   0ms DEBUG Exploring edge Node/b -(🔑🧩{id})- Node/a
              ├─   0.382462s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.382469s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.382475s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.382489s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.382504s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.382517s   0ms DEBUG Paths for id
        ├─   0.382525s   0ms DEBUG   Path root(Query) -(b)- Query/b -(b)- Node/b -(id)- ID/b is valid
        ├─   0.382530s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.382541s   0ms DEBUG path Node/b -(id)- ID/b is valid
        ├─   0.382546s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
      ┌─┘
      ├─   0.382560s   0ms DEBUG Advancing path to Node/b -(🔑🧩{id})- Node/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Node/b"}
        └─┐create_root_for_path_sequences{root_node="Node/b", segments_count=1}
          ├─   0.382583s   0ms DEBUG Building root query tree node: Node/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.382596s   0ms DEBUG Processing edge: Node/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.382615s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b -(🔑🧩{id})- Node/a", current_cost=2003}
        ├─   0.382657s   0ms DEBUG checking edge Node/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- Node/b -(🔑🧩{id})- Node/a", edge="id"}
          ├─   0.382675s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.382690s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- Node/b -(🔑🧩{id})- Node/a with edge Node/a -(id)- ID/a
        ├─   0.382698s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(24) --> EdgeIndex(15)" }])
      ┌─┘
      ├─   0.382714s   0ms DEBUG Found 1 direct paths to Node/b -(🔑🧩{id})- Node/a
      ├─   0.382727s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.382732s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(24) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.382745s   0ms DEBUG Indirect paths found: 1
    ├─   0.382755s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(b)- Node/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(18)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.382795s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.382807s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.382818s   0ms DEBUG Processing edge: Query/b -(b)- Node/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.382829s   0ms DEBUG Processing edge: Node/b -(field)- String/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.382847s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.382858s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.382868s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(17)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.382901s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.382912s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.382923s   0ms DEBUG Processing edge: Query/b -(b)- Node/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.382961s   0ms DEBUG Processing edge: Node/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.382999s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.383024s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.383036s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=2}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="b", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.383180s   0ms DEBUG adding output field 'b' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=2, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Node", field="field", leaf=true, list=false, response_path="b", fetch_path="b"}
              ├─   0.383211s   0ms DEBUG adding output field 'field' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Node", field="id", leaf=true, list=false, response_path="b", fetch_path="b"}
              ├─   0.383266s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.383360s   0ms DEBUG Done
├─   0.383368s   0ms DEBUG found roots
├─   0.383373s   0ms DEBUG print graph
├─   0.383378s   0ms DEBUG Nodes:
│ [1] Query/b {} → {b{field id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="b"}
    └─┐execute{subgraph_name="b"}
      ├─   0.383834s   0ms DEBUG starting new connection: http://localhost:4200/
      ├─   0.384187s   0ms DEBUG connecting to 127.0.0.1:4200
      ├─   0.384560s   0ms DEBUG connected to 127.0.0.1:4200
      ├─   0.389245s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.389506s DEBUG execution result: ExecutionResult { data: Some(Object {"b": Object {"id": String("n1"), "field": String("foo")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{b{field id}}")}}}) }
   0.395246s DEBUG original document: query {
  a {
    field
  }
}

   0.395357s DEBUG normalized document: query{a{field}}

   0.395367s DEBUG executable operation: query{a{field}}
┐walk_operation{}
├─   0.395643s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="a", leaf=false}
  ├─   0.395686s   0ms DEBUG Trying to advance to: a{field} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "a", selections: SelectionSet { items: [SelectionItem::Field { name: "field", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.395732s   0ms DEBUG checking edge Query/a -(a)- Node/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="a"}
        ├─   0.395770s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.395793s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(a)- Node/a
      ├─   0.395804s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.395820s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "a", selections: SelectionSet { items: [SelectionItem::Field { name: "field", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.395847s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.395854s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.395865s   0ms DEBUG Indirect paths found: 0
    ├─   0.395872s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "a", selections: SelectionSet { items: [SelectionItem::Field { name: "field", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.395900s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.395911s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "a", selections: SelectionSet { items: [SelectionItem::Field { name: "field", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.395928s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.395933s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.395944s   0ms DEBUG Indirect paths found: 0
    ├─   0.395950s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.395964s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="field", leaf=true}
  ├─   0.395984s   0ms DEBUG Trying to advance to: field through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(a)- Node/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "field", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(a)- Node/a", current_cost=1001}
      ├─   0.396006s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.396017s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "field", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(a)- Node/a", current_cost=1001}
      ├─   0.396033s   0ms DEBUG Exploring edge Node/a -(🔑🧩{id})- Node/a
      ├─   0.396041s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.396047s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.396052s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.396063s   0ms DEBUG Indirect paths found: 0
    ├─   0.396069s   0ms WARN failed to advance: root(Query) -(a)- Query/a -(a)- Node/a
  ┌─┘
┌─┘
┘
   0.398153s DEBUG original document: query {
  b {
    id
  }
}

   0.398216s DEBUG normalized document: query{b{id}}

   0.398222s DEBUG executable operation: query{b{id}}
┐walk_operation{}
├─   0.398363s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="b", leaf=false}
  ├─   0.398405s   0ms DEBUG Trying to advance to: b{id} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "b", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.398437s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.398453s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "b", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.398471s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.398476s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.398487s   0ms DEBUG Indirect paths found: 0
    ├─   0.398494s   0ms WARN failed to advance: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "b", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.398522s   0ms DEBUG checking edge Query/b -(b)- Node/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b", edge="b"}
        ├─   0.398538s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.398551s   0ms DEBUG Advancing path root(Query) -(b)- Query/b with edge Query/b -(b)- Node/b
      ├─   0.398559s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(1) --> EdgeIndex(9)" }])
    ┌─┘
    ├─   0.398573s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "b", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.398591s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.398596s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.398606s   0ms DEBUG Indirect paths found: 0
    ├─   0.398613s   0ms DEBUG advanced: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.398624s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.398642s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(b)- Query/b -(b)- Node/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b", current_cost=1001}
      ├─   0.398667s   0ms DEBUG checking edge Node/b -(id)- ID/b
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- Node/b", edge="id"}
        ├─   0.398682s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.398695s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- Node/b with edge Node/b -(id)- ID/b
      ├─   0.398702s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(17)" }])
    ┌─┘
    ├─   0.398715s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b", current_cost=1001}
      ├─   0.398733s   0ms DEBUG Exploring edge Node/b -(🔑🧩{id})- Node/a
      └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- Node/b", edge="id"}
        ├─   0.398749s   0ms DEBUG checking requirements {id} for edge 'Node/b -(🔑🧩{id})- Node/a'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b", current_cost=1001}
              ├─   0.398781s   0ms DEBUG checking edge Node/b -(id)- ID/b
              └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- Node/b", edge="id"}
                ├─   0.398798s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.398813s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- Node/b with edge Node/b -(id)- ID/b
              ├─   0.398821s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(17)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b", current_cost=1001}
              ├─   0.398848s   0ms DEBUG Exploring edge Node/b -(🔑🧩{id})- Node/a
              ├─   0.398856s   0ms DEBUG Ignoring, graph is excluded and already visited (current: a, visited: {"a"})
              ├─   0.398864s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.398870s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.398885s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(17)" }], [])))
          ┌─┘
          ├─   0.398900s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(17)" }], [])))
        ┌─┘
        ├─   0.398914s   0ms DEBUG Paths for id
        ├─   0.398922s   0ms DEBUG   Path root(Query) -(b)- Query/b -(b)- Node/b -(id)- ID/b is valid
        ├─   0.398929s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.398943s   0ms DEBUG path Node/b -(id)- ID/b is valid
        ├─   0.398949s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(17)" }]))
      ┌─┘
      ├─   0.398962s   0ms DEBUG Advancing path to Node/b -(🔑🧩{id})- Node/a
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(17)" }, root_node="Node/b"}
        └─┐create_root_for_path_sequences{root_node="Node/b", segments_count=1}
          ├─   0.398988s   0ms DEBUG Building root query tree node: Node/b
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.399003s   0ms DEBUG Processing edge: Node/b -(id)- ID/b
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.399023s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b -(b)- Node/b -(🔑🧩{id})- Node/a", current_cost=2003}
        ├─   0.399066s   0ms DEBUG checking edge Node/a -(id)- ID/a
        └─┐can_satisfy_edge{path="root(Query) -(b)- Query/b -(b)- Node/b -(🔑🧩{id})- Node/a", edge="id"}
          ├─   0.399084s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.399099s   0ms DEBUG Advancing path root(Query) -(b)- Query/b -(b)- Node/b -(🔑🧩{id})- Node/a with edge Node/a -(id)- ID/a
        ├─   0.399107s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(24) --> EdgeIndex(15)" }])
      ┌─┘
      ├─   0.399122s   0ms DEBUG Found 1 direct paths to Node/b -(🔑🧩{id})- Node/a
      ├─   0.399132s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.399137s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(24) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.399150s   0ms DEBUG Indirect paths found: 1
    ├─   0.399159s   0ms DEBUG advanced: root(Query) -(b)- Query/b -(b)- Node/b
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(1) --> EdgeIndex(9) --> EdgeIndex(17)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.399200s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.399212s   0ms DEBUG Processing edge: root(Query) -(b)- Query/b
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.399223s   0ms DEBUG Processing edge: Query/b -(b)- Node/b
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.399234s   0ms DEBUG Processing edge: Node/b -(id)- ID/b
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.399252s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.399263s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.399273s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="b", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="b", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.399397s   0ms DEBUG adding output field 'b' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Node", field="id", leaf=true, list=false, response_path="b", fetch_path="b"}
              ├─   0.399428s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.399492s   0ms DEBUG Done
├─   0.399499s   0ms DEBUG found roots
├─   0.399504s   0ms DEBUG print graph
├─   0.399508s   0ms DEBUG Nodes:
│ [1] Query/b {} → {b{id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="b"}
    └─┐execute{subgraph_name="b"}
      ├─   0.399824s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.402557s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.402767s DEBUG execution result: ExecutionResult { data: Some(Object {"b": Object {"id": String("n1")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("b"), "operationKind": String("query"), "operation": String("{b{id}}")}}}) }
   0.405505s DEBUG original document: query {
  a {
    id
  }
}

   0.405626s DEBUG normalized document: query{a{id}}

   0.405655s DEBUG executable operation: query{a{id}}
┐walk_operation{}
├─   0.405967s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="a", leaf=false}
  ├─   0.406023s   0ms DEBUG Trying to advance to: a{id} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "a", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.406074s   0ms DEBUG checking edge Query/a -(a)- Node/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="a"}
        ├─   0.406093s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.406117s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(a)- Node/a
      ├─   0.406128s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(7)" }])
    ┌─┘
    ├─   0.406144s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "a", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.406172s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.406179s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.406190s   0ms DEBUG Indirect paths found: 0
    ├─   0.406197s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "a", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.406225s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.406235s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "a", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.406250s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.406255s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.406266s   0ms DEBUG Indirect paths found: 0
    ├─   0.406272s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.406287s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.406315s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(a)- Node/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(a)- Node/a", current_cost=1001}
      ├─   0.406338s   0ms DEBUG checking edge Node/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(a)- Node/a", edge="id"}
        ├─   0.406353s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.406367s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(a)- Node/a with edge Node/a -(id)- ID/a
      ├─   0.406374s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(15)" }])
    ┌─┘
    ├─   0.406387s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(a)- Node/a", current_cost=1001}
      ├─   0.406405s   0ms DEBUG Exploring edge Node/a -(🔑🧩{id})- Node/a
      ├─   0.406411s   0ms DEBUG Ignoring. We would go back to the same graph
      ├─   0.406417s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.406422s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.406433s   0ms DEBUG Indirect paths found: 0
    ├─   0.406439s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(a)- Node/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(7) --> EdgeIndex(15)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.406485s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.406499s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.406512s   0ms DEBUG Processing edge: Query/a -(a)- Node/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.406523s   0ms DEBUG Processing edge: Node/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.406546s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.406557s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.406568s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="a", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.406676s   0ms DEBUG adding output field 'a' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Node", field="id", leaf=true, list=false, response_path="a", fetch_path="a"}
              ├─   0.406707s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.406771s   0ms DEBUG Done
├─   0.406778s   0ms DEBUG found roots
├─   0.406782s   0ms DEBUG print graph
├─   0.406787s   0ms DEBUG Nodes:
│ [1] Query/a {} → {a{id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.407242s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.412062s   5ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.412392s DEBUG execution result: ExecutionResult { data: Some(Object {"a": Null}), errors: Some([GraphQLError { message: "Abstract type \"Node\" was resolved to a non-object type \"Node\".", locations: Some([GraphQLErrorLocation { line: 1, column: 2 }]), path: Some([String("a")]), extensions: None }]), extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{a{id}}")}}}) }
   0.414937s DEBUG original document: query {
  product {
    id
  }
}

   0.415057s DEBUG normalized document: query{product{id}}

   0.415068s DEBUG executable operation: query{product{id}}
┐walk_operation{}
├─   0.415380s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="product", leaf=false}
  ├─   0.415429s   0ms DEBUG Trying to advance to: product{id} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.415485s   0ms DEBUG checking edge Query/a -(product)- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="product"}
        ├─   0.415505s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.415529s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(product)- Product/a
      ├─   0.415554s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.415579s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.415614s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.415621s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.415632s   0ms DEBUG Indirect paths found: 0
    ├─   0.415640s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.415670s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.415681s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.415697s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.415702s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.415713s   0ms DEBUG Indirect paths found: 0
    ├─   0.415720s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.415734s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_field{field_name="id", leaf=true}
  ├─   0.415757s   0ms DEBUG Trying to advance to: id through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.415783s   0ms DEBUG checking edge Product/a -(id)- ID/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.415800s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.415814s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
      ├─   0.415822s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(6) --> EdgeIndex(11)" }])
    ┌─┘
    ├─   0.415836s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.415856s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
        ├─   0.415875s   0ms DEBUG checking requirements {id} for edge 'Product/a -(🔑🧩{id})- Product/b'
        └─┐validate_field_requirement{}
          └─┐validate_field_requirement{}
            └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.415910s   0ms DEBUG checking edge Product/a -(id)- ID/a
              └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="id"}
                ├─   0.415928s   0ms INFO return=Ok(Some([]))
              ┌─┘
              ├─   0.415945s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(id)- ID/a
              ├─   0.415954s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(6) --> EdgeIndex(11)" }])
            ┌─┘
            └─┐find_indirect_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
              ├─   0.415982s   0ms DEBUG Exploring edge Product/a -(🔑🧩{id})- Product/b
              ├─   0.415991s   0ms DEBUG Ignoring, graph is excluded and already visited (current: b, visited: {"b"})
              ├─   0.415999s   0ms DEBUG Finished finding indirect paths, found total of 0
              ├─   0.416005s   0ms INFO return=Ok([])
            ┌─┘
            ├─   0.416022s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(6) --> EdgeIndex(11)" }], [])))
          ┌─┘
          ├─   0.416038s   0ms INFO return=Ok(Some(([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(6) --> EdgeIndex(11)" }], [])))
        ┌─┘
        ├─   0.416052s   0ms DEBUG Paths for id
        ├─   0.416061s   0ms DEBUG   Path root(Query) -(a)- Query/a -(product)- Product/a -(id)- ID/a is valid
        ├─   0.416067s   0ms DEBUG Found 1 best paths for this leaf requirement
        ├─   0.416088s   0ms DEBUG path Product/a -(id)- ID/a is valid
        ├─   0.416095s   0ms INFO return=Ok(Some([ { cost: 1, egdes: "EdgeIndex(11)" }]))
      ┌─┘
      ├─   0.416110s   0ms DEBUG Advancing path to Product/a -(🔑🧩{id})- Product/b
      └─┐from_path{path= { cost: 1, egdes: "EdgeIndex(11)" }, root_node="Product/a"}
        └─┐create_root_for_path_sequences{root_node="Product/a", segments_count=1}
          ├─   0.416137s   0ms DEBUG Building root query tree node: Product/a
          └─┐from_path_segment_sequences{current_index=0, total_segments=1}
            ├─   0.416154s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
            └─┐from_path_segment_sequences{current_index=1, total_segments=1}
            ┌─┘
            ├─   0.416175s   0ms DEBUG No subsequent steps (leaf or end of path)
          ┌─┘
        ┌─┘
      ┌─┘
      └─┐find_direct_paths{target=Field(FieldSelection { name: "id", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", current_cost=2003}
        ├─   0.416224s   0ms DEBUG checking edge Product/b -(id)- ID/b
        └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b", edge="id"}
          ├─   0.416243s   0ms INFO return=Ok(Some([]))
        ┌─┘
        ├─   0.416258s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a -(🔑🧩{id})- Product/b with edge Product/b -(id)- ID/b
        ├─   0.416267s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(13)" }])
      ┌─┘
      ├─   0.416283s   0ms DEBUG Found 1 direct paths to Product/a -(🔑🧩{id})- Product/b
      ├─   0.416293s   0ms DEBUG Finished finding indirect paths, found total of 1
      ├─   0.416298s   0ms INFO return=Ok([ { cost: 2004, egdes: "EdgeIndex(0) --> EdgeIndex(6) --> EdgeIndex(21) --> EdgeIndex(13)" }])
    ┌─┘
    ├─   0.416312s   0ms DEBUG Indirect paths found: 1
    ├─   0.416322s   0ms DEBUG advanced: root(Query) -(a)- Query/a -(product)- Product/a
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(6) --> EdgeIndex(11)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.416411s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.416425s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.416438s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.416451s   0ms DEBUG Processing edge: Product/a -(id)- ID/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.416470s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.416481s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.416493s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="product", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.416626s   0ms DEBUG adding output field 'product' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="id", leaf=true, list=false, response_path="product", fetch_path="product"}
              ├─   0.416659s   0ms DEBUG adding output field 'id' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.416730s   0ms DEBUG Done
├─   0.416739s   0ms DEBUG found roots
├─   0.416744s   0ms DEBUG print graph
├─   0.416748s   0ms DEBUG Nodes:
│ [1] Query/a {} → {product{id}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.417134s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.419332s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
   0.419595s DEBUG execution result: ExecutionResult { data: Some(Object {"product": Object {"id": String("p1")}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{product{id}}")}}}) }
   0.422184s DEBUG original document: query {
  product {
    id
    name
  }
}

   0.422306s DEBUG normalized document: query{product{id name}}

   0.422316s DEBUG executable operation: query{product{id name}}
   0.424652s DEBUG original document: query {
  product {
    ... on Bread {
      id
    }
  }
}

   0.424771s DEBUG normalized document: query{product{...on Bread{id}}}

   0.424797s DEBUG executable operation: query{product{...on Bread{id}}}
┐walk_operation{}
├─   0.425056s   0ms DEBUG operation is of type Query
└─┐process_field{field_name="product", leaf=false}
  ├─   0.425103s   0ms DEBUG Trying to advance to: product{...on Bread{id}} through 2 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Bread", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.425158s   0ms DEBUG checking edge Query/a -(product)- Product/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a", edge="product"}
        ├─   0.425178s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.425221s   0ms DEBUG Advancing path root(Query) -(a)- Query/a with edge Query/a -(product)- Product/a
      ├─   0.425235s   0ms INFO return=Ok([ { cost: 1001, egdes: "EdgeIndex(0) --> EdgeIndex(6)" }])
    ┌─┘
    ├─   0.425254s   0ms DEBUG Direct paths found: 1
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Bread", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a", current_cost=1000}
      ├─   0.425287s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.425294s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.425305s   0ms DEBUG Indirect paths found: 0
    ├─   0.425313s   0ms DEBUG advanced: root(Query) -(a)- Query/a
  ┌─┘
  └─┐explore_path{path="root(Query) -(b)- Query/b"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Bread", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.425343s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.425354s   0ms DEBUG Direct paths found: 0
    └─┐find_indirect_paths{target=Field(FieldSelection { name: "product", selections: SelectionSet { items: [SelectionItem::Fragment { type_name: "Bread", selections: SelectionSet { items: [SelectionItem::Field { name: "id", selections: SelectionSet { items: [] } }] } }] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(b)- Query/b", current_cost=1000}
      ├─   0.425370s   0ms DEBUG Finished finding indirect paths, found total of 0
      ├─   0.425375s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.425386s   0ms DEBUG Indirect paths found: 0
    ├─   0.425392s   0ms WARN failed to advance: root(Query) -(b)- Query/b
  ┌─┘
  ├─   0.425406s   0ms DEBUG Found 1 paths
┌─┘
└─┐process_inline_fragment{type_condition="Bread"}
  ├─   0.425433s   0ms DEBUG Processing inline fragment '{id}' on type 'Bread' through 1 possible paths
  ├─   0.425440s   0ms DEBUG Trying to advance to: ... on Bread, through 1 possible paths
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=ConcreteType("Bread"), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.425465s   0ms INFO return=Ok([])
    ┌─┘
    ├─   0.425477s   0ms DEBUG Direct paths found: 0
    ├─   0.425483s   0ms WARN Object type 'Bread' is not resolvable by 'Product', resolve only the __typename
  ┌─┘
  └─┐explore_path{path="root(Query) -(a)- Query/a -(product)- Product/a"}
    └─┐find_direct_paths{target=Field(FieldSelection { name: "__typename", selections: SelectionSet { items: [] }, alias: None, arguments: None, skip_if: None, include_if: None }), path="root(Query) -(a)- Query/a -(product)- Product/a", current_cost=1001}
      ├─   0.425514s   0ms DEBUG checking edge Product/a -(__typename)- String/a
      └─┐can_satisfy_edge{path="root(Query) -(a)- Query/a -(product)- Product/a", edge="__typename"}
        ├─   0.425547s   0ms INFO return=Ok(Some([]))
      ┌─┘
      ├─   0.425584s   0ms DEBUG Advancing path root(Query) -(a)- Query/a -(product)- Product/a with edge Product/a -(__typename)- String/a
      ├─   0.425597s   0ms INFO return=Ok([ { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(6) --> EdgeIndex(10)" }])
    ┌─┘
    ├─   0.425615s   0ms DEBUG Direct paths found: 1
  ┌─┘
┌─┘
┘
┐from_path{path= { cost: 1002, egdes: "EdgeIndex(0) --> EdgeIndex(6) --> EdgeIndex(10)" }, root_node="root(Query)"}
└─┐create_root_for_path_sequences{root_node="root(Query)", segments_count=3}
  ├─   0.425669s   0ms DEBUG Building root query tree node: root(Query)
  └─┐from_path_segment_sequences{current_index=0, total_segments=3}
    ├─   0.425683s   0ms DEBUG Processing edge: root(Query) -(a)- Query/a
    └─┐from_path_segment_sequences{current_index=1, total_segments=3}
      ├─   0.425695s   0ms DEBUG Processing edge: Query/a -(product)- Product/a
      └─┐from_path_segment_sequences{current_index=2, total_segments=3}
        ├─   0.425707s   0ms DEBUG Processing edge: Product/a -(__typename)- String/a
        └─┐from_path_segment_sequences{current_index=3, total_segments=3}
        ┌─┘
        ├─   0.425727s   0ms DEBUG No subsequent steps (leaf or end of path)
      ┌─┘
      ├─   0.425738s   0ms DEBUG Adding subsequent step as child
    ┌─┘
    ├─   0.425749s   0ms DEBUG Adding subsequent step as child
  ┌─┘
┌─┘
┘
┐merge_trees{tree_count=1}
┘
┐build_fetch_graph_from_query_tree{requirements_count=0, children_count=1}
└─┐process_noop_edge{}
  └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=0}
    └─┐process_subgraph_entrypoint_edge{subgraph="a", type_name="Query", parent_fetch_step_index=0}
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐connect{parent=0, child=1}
      ┌─┘
      └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
        └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Query", field="product", leaf=false, list=false, response_path="", fetch_path=""}
          ├─   0.425860s   0ms DEBUG adding output field 'product' to fetch step [1]
          └─┐process_children_for_fetch_steps{count=1, parent_fetch_step_index=1}
            └─┐process_plain_field_edge{parent_fetch_step_index=1, type_name="Product", field="__typename", leaf=true, list=false, response_path="product", fetch_path="product"}
              ├─   0.425891s   0ms DEBUG adding output field '__typename' to fetch step [1]
              └─┐process_children_for_fetch_steps{count=0, parent_fetch_step_index=1}
              ┌─┘
            ┌─┘
          ┌─┘
        ┌─┘
      ┌─┘
    ┌─┘
  ┌─┘
┌─┘
├─   0.425957s   0ms DEBUG Done
├─   0.425964s   0ms DEBUG found roots
├─   0.425970s   0ms DEBUG print graph
├─   0.425974s   0ms DEBUG Nodes:
│ [1] Query/a {} → {product{__typename}} at $.
│ 
│ Tree:
│ [1]
│ 
└─┐optimize{}
  └─┐merge_passthrough_child{}
  ┌─┘
  └─┐merge_children_with_parents{}
  ┌─┘
  └─┐merge_siblings{}
  ┌─┘
  └─┐deduplicate_and_prune_fetch_steps{}
  ┌─┘
  └─┐turn_mutations_into_sequence{}
  ┌─┘
┌─┘
┘
┐build_query_plan_from_fetch_graph{}
┘
┐execute{}
└─┐FetchNode::execute{data=Null, representations=[]}
  └─┐execute{subgraph_name="a"}
    └─┐execute{subgraph_name="a"}
      ├─   0.426389s   0ms DEBUG reuse idle connection for ("http", localhost:4200)
      ├─   0.428624s   2ms DEBUG pooling idle connection for ("http", localhost:4200)
    ┌─┘
  ┌─┘
┌─┘
┘
┐entity_satisfies_type_condition{possible_types={"Product": ["Bread"]}, type_name="Product", type_condition="Bread"}
┘
   0.428924s DEBUG execution result: ExecutionResult { data: Some(Object {"product": Object {}}), errors: None, extensions: Some({"queryPlan": Object {"kind": String("QueryPlan"), "node": Object {"kind": String("Fetch"), "serviceName": String("a"), "operationKind": String("query"), "operation": String("{product{__typename}}")}}}) }
