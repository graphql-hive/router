<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1302" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1285.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1285.00"> </text><svg id="frames" x="10" width="1180" total_samples="176"><g><title>__libkernel_init (1 samples, 0.57%)</title><rect x="0.5682%" y="1029" width="0.5682%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.8182%" y="1039.50"></text></g><g><title>mach_init_doit (1 samples, 0.57%)</title><rect x="0.5682%" y="1013" width="0.5682%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.8182%" y="1023.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (2 samples, 1.14%)</title><rect x="0.5682%" y="1189" width="1.1364%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="2"/><text x="0.8182%" y="1199.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (2 samples, 1.14%)</title><rect x="0.5682%" y="1173" width="1.1364%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="2"/><text x="0.8182%" y="1183.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (2 samples, 1.14%)</title><rect x="0.5682%" y="1157" width="1.1364%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="2"/><text x="0.8182%" y="1167.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (2 samples, 1.14%)</title><rect x="0.5682%" y="1141" width="1.1364%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="2"/><text x="0.8182%" y="1151.50"></text></g><g><title>dyld3::MachOFile::forEachSection(void (dyld3::MachOFile::SectionInfo const&amp;, bool, bool&amp;) block_pointer) const (2 samples, 1.14%)</title><rect x="0.5682%" y="1125" width="1.1364%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="2"/><text x="0.8182%" y="1135.50"></text></g><g><title>dyld3::MachOFile::forEachLoadCommand(Diagnostics&amp;, void (load_command const*, bool&amp;) block_pointer) const (2 samples, 1.14%)</title><rect x="0.5682%" y="1109" width="1.1364%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="2"/><text x="0.8182%" y="1119.50"></text></g><g><title>invocation function for block in dyld3::MachOFile::forEachSection(void (dyld3::MachOFile::SectionInfo const&amp;, bool, bool&amp;) block_pointer) const (2 samples, 1.14%)</title><rect x="0.5682%" y="1093" width="1.1364%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="2"/><text x="0.8182%" y="1103.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (2 samples, 1.14%)</title><rect x="0.5682%" y="1077" width="1.1364%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="2"/><text x="0.8182%" y="1087.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (2 samples, 1.14%)</title><rect x="0.5682%" y="1061" width="1.1364%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="2"/><text x="0.8182%" y="1071.50"></text></g><g><title>libSystem_initializer (2 samples, 1.14%)</title><rect x="0.5682%" y="1045" width="1.1364%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="2"/><text x="0.8182%" y="1055.50"></text></g><g><title>libdispatch_init (1 samples, 0.57%)</title><rect x="1.1364%" y="1029" width="0.5682%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="1.3864%" y="1039.50"></text></g><g><title>_os_object_init (1 samples, 0.57%)</title><rect x="1.1364%" y="1013" width="0.5682%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="1.3864%" y="1023.50"></text></g><g><title>_objc_init (1 samples, 0.57%)</title><rect x="1.1364%" y="997" width="0.5682%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="1.3864%" y="1007.50"></text></g><g><title>dyld4::APIs::_dyld_objc_register_callbacks(_dyld_objc_callbacks const*) (1 samples, 0.57%)</title><rect x="1.1364%" y="981" width="0.5682%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="1.3864%" y="991.50"></text></g><g><title>dyld4::RuntimeState::setObjCNotifiers(void (*)(char const*, mach_header const*), void (*)(mach_header const*, void*, mach_header const*, void const*), void (*)(unsigned int, _dyld_objc_notify_mapped_info const*), void (*)(_dyld_objc_notify_mapped_info const*), void (*)(unsigned int, _dyld_objc_notify_mapped_info const*, void (unsigned int) block_pointer)) (1 samples, 0.57%)</title><rect x="1.1364%" y="965" width="0.5682%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="1.3864%" y="975.50"></text></g><g><title>dyld4::RuntimeLocks::withLoadersReadLock(void () block_pointer) (1 samples, 0.57%)</title><rect x="1.1364%" y="949" width="0.5682%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="1.3864%" y="959.50"></text></g><g><title>invocation function for block in dyld4::RuntimeState::setObjCNotifiers(void (*)(char const*, mach_header const*), void (*)(mach_header const*, void*, mach_header const*, void const*), void (*)(unsigned int, _dyld_objc_notify_mapped_info const*), void (*)(_dyld_objc_notify_mapped_info const*), void (*)(unsigned int, _dyld_objc_notify_mapped_info const*, void (unsigned int) block_pointer))::$_0::operator()() const (1 samples, 0.57%)</title><rect x="1.1364%" y="933" width="0.5682%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="1.3864%" y="943.50"></text></g><g><title>map_images (1 samples, 0.57%)</title><rect x="1.1364%" y="917" width="0.5682%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="1.3864%" y="927.50"></text></g><g><title>map_images_nolock (1 samples, 0.57%)</title><rect x="1.1364%" y="901" width="0.5682%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="1.3864%" y="911.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.57%)</title><rect x="1.7045%" y="1189" width="0.5682%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="1.9545%" y="1199.50"></text></g><g><title>dyld4::Loader::applyFixupsGeneric(Diagnostics&amp;, dyld4::RuntimeState&amp;, unsigned long long, dyld3::Array&lt;void const*&gt; const&amp;, dyld3::Array&lt;void const*&gt; const&amp;, bool, dyld3::Array&lt;dyld4::Loader::MissingFlatLazySymbol&gt; const&amp;) const (1 samples, 0.57%)</title><rect x="1.7045%" y="1173" width="0.5682%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="1.9545%" y="1183.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachRebaseLocation_Opcodes(Diagnostics&amp;, void (unsigned long long, bool&amp;) block_pointer) const (1 samples, 0.57%)</title><rect x="1.7045%" y="1157" width="0.5682%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="1.9545%" y="1167.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachRebase_Opcodes(Diagnostics&amp;, dyld3::MachOLoaded::LinkEditInfo const&amp;, dyld3::MachOFile::SegmentInfo const*, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&amp;, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, dyld3::MachOAnalyzer::Rebase, bool&amp;) block_pointer) const (1 samples, 0.57%)</title><rect x="1.7045%" y="1141" width="0.5682%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="1.9545%" y="1151.50"></text></g><g><title>dyld3::MachOFile::read_uleb128(Diagnostics&amp;, unsigned char const*&amp;, unsigned char const*) (1 samples, 0.57%)</title><rect x="1.7045%" y="1125" width="0.5682%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="1"/><text x="1.9545%" y="1135.50"></text></g><g><title>dyld4::PrebuiltLoader::invalidateInIsolation(dyld4::RuntimeState const&amp;) const (3 samples, 1.70%)</title><rect x="2.2727%" y="981" width="1.7045%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="3"/><text x="2.5227%" y="991.50"></text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, dyld3::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (3 samples, 1.70%)</title><rect x="2.2727%" y="965" width="1.7045%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="3"/><text x="2.5227%" y="975.50"></text></g><g><title>invocation function for block in dyld4::PrebuiltLoader::invalidateInIsolation(dyld4::RuntimeState const&amp;) const (3 samples, 1.70%)</title><rect x="2.2727%" y="949" width="1.7045%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="3"/><text x="2.5227%" y="959.50"></text></g><g><title>dyld4::SyscallDelegate::fileExists(char const*, dyld4::FileID*, int*) const (3 samples, 1.70%)</title><rect x="2.2727%" y="933" width="1.7045%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="3"/><text x="2.5227%" y="943.50"></text></g><g><title>dyld3::stat(char const*, stat*) (3 samples, 1.70%)</title><rect x="2.2727%" y="917" width="1.7045%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="3"/><text x="2.5227%" y="927.50"></text></g><g><title>stat$INODE64 (3 samples, 1.70%)</title><rect x="2.2727%" y="901" width="1.7045%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="3"/><text x="2.5227%" y="911.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (8 samples, 4.55%)</title><rect x="0.0000%" y="1221" width="4.5455%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="8"/><text x="0.2500%" y="1231.50">dyld4..</text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, dyld3::MachOAnalyzer const*) (7 samples, 3.98%)</title><rect x="0.5682%" y="1205" width="3.9773%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="7"/><text x="0.8182%" y="1215.50">dyld..</text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (4 samples, 2.27%)</title><rect x="2.2727%" y="1189" width="2.2727%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="4"/><text x="2.5227%" y="1199.50">d..</text></g><g><title>mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool&amp;) block_pointer) const (4 samples, 2.27%)</title><rect x="2.2727%" y="1173" width="2.2727%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="4"/><text x="2.5227%" y="1183.50">m..</text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (4 samples, 2.27%)</title><rect x="2.2727%" y="1157" width="2.2727%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="4"/><text x="2.5227%" y="1167.50">m..</text></g><g><title>invocation function for block in mach_o::Header::forEachLinkedDylib(void (char const*, mach_o::LinkedDylibAttributes, mach_o::Version32, mach_o::Version32, bool&amp;) block_pointer) const (4 samples, 2.27%)</title><rect x="2.2727%" y="1141" width="2.2727%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="4"/><text x="2.5227%" y="1151.50">i..</text></g><g><title>invocation function for block in dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (4 samples, 2.27%)</title><rect x="2.2727%" y="1125" width="2.2727%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="4"/><text x="2.5227%" y="1135.50">i..</text></g><g><title>dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (4 samples, 2.27%)</title><rect x="2.2727%" y="1109" width="2.2727%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="4"/><text x="2.5227%" y="1119.50">d..</text></g><g><title>dyld4::Loader::forEachPath(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (4 samples, 2.27%)</title><rect x="2.2727%" y="1093" width="2.2727%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="4"/><text x="2.5227%" y="1103.50">d..</text></g><g><title>dyld4::ProcessConfig::PathOverrides::forEachPathVariant(char const*, dyld3::Platform, bool, bool, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) const (4 samples, 2.27%)</title><rect x="2.2727%" y="1077" width="2.2727%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="4"/><text x="2.5227%" y="1087.50">d..</text></g><g><title>dyld4::Loader::forEachResolvedAtPathVar(dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;, void (char const*, dyld4::ProcessConfig::PathOverrides::Type, bool&amp;) block_pointer) (4 samples, 2.27%)</title><rect x="2.2727%" y="1061" width="2.2727%" height="15" fill="rgb(235,93,37)" fg:x="4" fg:w="4"/><text x="2.5227%" y="1071.50">d..</text></g><g><title>invocation function for block in dyld4::Loader::getLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;) (4 samples, 2.27%)</title><rect x="2.2727%" y="1045" width="2.2727%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="4"/><text x="2.5227%" y="1055.50">i..</text></g><g><title>dyld4::Loader::makeDyldCacheLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::LoadOptions const&amp;, unsigned int, mach_o::Layout const*) (4 samples, 2.27%)</title><rect x="2.2727%" y="1029" width="2.2727%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="4"/><text x="2.5227%" y="1039.50">d..</text></g><g><title>dyld4::RuntimeState::findPrebuiltLoader(char const*) const (4 samples, 2.27%)</title><rect x="2.2727%" y="1013" width="2.2727%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="4"/><text x="2.5227%" y="1023.50">d..</text></g><g><title>dyld4::PrebuiltLoader::isValid(dyld4::RuntimeState const&amp;) const (4 samples, 2.27%)</title><rect x="2.2727%" y="997" width="2.2727%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="4"/><text x="2.5227%" y="1007.50">d..</text></g><g><title>dyld4::PrebuiltLoader::invalidateShallow(dyld4::RuntimeState const&amp;) const (1 samples, 0.57%)</title><rect x="3.9773%" y="981" width="0.5682%" height="15" fill="rgb(250,191,14)" fg:x="7" fg:w="1"/><text x="4.2273%" y="991.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (1 samples, 0.57%)</title><rect x="3.9773%" y="965" width="0.5682%" height="15" fill="rgb(239,60,40)" fg:x="7" fg:w="1"/><text x="4.2273%" y="975.50"></text></g><g><title>&lt;axum::serve::private::ServeFuture as core::future::future::Future&gt;::poll (1 samples, 0.57%)</title><rect x="5.1136%" y="1141" width="0.5682%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="1"/><text x="5.3636%" y="1151.50"></text></g><g><title>&lt;axum::serve::WithGracefulShutdown&lt;L,M,S,F&gt; as core::future::into_future::IntoFuture&gt;::into_future::_{{closure}} (1 samples, 0.57%)</title><rect x="5.1136%" y="1125" width="0.5682%" height="15" fill="rgb(225,35,8)" fg:x="9" fg:w="1"/><text x="5.3636%" y="1135.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::accept::_{{closure}} (1 samples, 0.57%)</title><rect x="5.1136%" y="1109" width="0.5682%" height="15" fill="rgb(250,213,24)" fg:x="9" fg:w="1"/><text x="5.3636%" y="1119.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (1 samples, 0.57%)</title><rect x="5.1136%" y="1093" width="0.5682%" height="15" fill="rgb(247,123,22)" fg:x="9" fg:w="1"/><text x="5.3636%" y="1103.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest (1 samples, 0.57%)</title><rect x="5.1136%" y="1077" width="0.5682%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="5.3636%" y="1087.50"></text></g><g><title>tokio::runtime::io::registration::Registration::new_with_interest_and_handle (1 samples, 0.57%)</title><rect x="5.1136%" y="1061" width="0.5682%" height="15" fill="rgb(231,145,46)" fg:x="9" fg:w="1"/><text x="5.3636%" y="1071.50"></text></g><g><title>tokio::runtime::io::driver::Handle::add_source (1 samples, 0.57%)</title><rect x="5.1136%" y="1045" width="0.5682%" height="15" fill="rgb(251,118,11)" fg:x="9" fg:w="1"/><text x="5.3636%" y="1055.50"></text></g><g><title>kevent (1 samples, 0.57%)</title><rect x="5.1136%" y="1029" width="0.5682%" height="15" fill="rgb(217,147,25)" fg:x="9" fg:w="1"/><text x="5.3636%" y="1039.50"></text></g><g><title>gateway::logger::configure_logging (1 samples, 0.57%)</title><rect x="5.6818%" y="1125" width="0.5682%" height="15" fill="rgb(247,81,37)" fg:x="10" fg:w="1"/><text x="5.9318%" y="1135.50"></text></g><g><title>tracing_subscriber::registry (1 samples, 0.57%)</title><rect x="5.6818%" y="1109" width="0.5682%" height="15" fill="rgb(209,12,38)" fg:x="10" fg:w="1"/><text x="5.9318%" y="1119.50"></text></g><g><title>&lt;query_planner::consumer_schema::ConsumerSchema as query_plan_executor::schema_metadata::SchemaWithMetadata&gt;::schema_metadata (1 samples, 0.57%)</title><rect x="6.2500%" y="1109" width="0.5682%" height="15" fill="rgb(227,1,9)" fg:x="11" fg:w="1"/><text x="6.5000%" y="1119.50"></text></g><g><title>graphql_tools::introspection::introspection::_::_&lt;impl serde::ser::Serialize for graphql_tools::introspection::introspection::IntrospectionSchema&gt;::serialize (1 samples, 0.57%)</title><rect x="6.2500%" y="1093" width="0.5682%" height="15" fill="rgb(248,47,43)" fg:x="11" fg:w="1"/><text x="6.5000%" y="1103.50"></text></g><g><title>query_plan_executor::executors::map::SubgraphExecutorMap::from_http_endpoint_map (1 samples, 0.57%)</title><rect x="6.8182%" y="1109" width="0.5682%" height="15" fill="rgb(221,10,30)" fg:x="12" fg:w="1"/><text x="7.0682%" y="1119.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.57%)</title><rect x="6.8182%" y="1093" width="0.5682%" height="15" fill="rgb(210,229,1)" fg:x="12" fg:w="1"/><text x="7.0682%" y="1103.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.57%)</title><rect x="6.8182%" y="1077" width="0.5682%" height="15" fill="rgb(222,148,37)" fg:x="12" fg:w="1"/><text x="7.0682%" y="1087.50"></text></g><g><title>query_plan_executor::executors::http::HTTPSubgraphExecutor::new (1 samples, 0.57%)</title><rect x="6.8182%" y="1061" width="0.5682%" height="15" fill="rgb(234,67,33)" fg:x="12" fg:w="1"/><text x="7.0682%" y="1071.50"></text></g><g><title>http::header::name::HdrName::from_static (1 samples, 0.57%)</title><rect x="6.8182%" y="1045" width="0.5682%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="1"/><text x="7.0682%" y="1055.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (1 samples, 0.57%)</title><rect x="6.8182%" y="1029" width="0.5682%" height="15" fill="rgb(247,138,52)" fg:x="12" fg:w="1"/><text x="7.0682%" y="1039.50"></text></g><g><title>gateway::shared_state::GatewaySharedState::new (3 samples, 1.70%)</title><rect x="6.2500%" y="1125" width="1.7045%" height="15" fill="rgb(213,79,30)" fg:x="11" fg:w="3"/><text x="6.5000%" y="1135.50"></text></g><g><title>query_planner::planner::Planner::new_from_supergraph (1 samples, 0.57%)</title><rect x="7.3864%" y="1109" width="0.5682%" height="15" fill="rgb(246,177,23)" fg:x="13" fg:w="1"/><text x="7.6364%" y="1119.50"></text></g><g><title>query_planner::planner::Planner::new_from_supergraph_state (1 samples, 0.57%)</title><rect x="7.3864%" y="1093" width="0.5682%" height="15" fill="rgb(230,62,27)" fg:x="13" fg:w="1"/><text x="7.6364%" y="1103.50"></text></g><g><title>query_planner::graph::Graph::graph_from_supergraph_state (1 samples, 0.57%)</title><rect x="7.3864%" y="1077" width="0.5682%" height="15" fill="rgb(216,154,8)" fg:x="13" fg:w="1"/><text x="7.6364%" y="1087.50"></text></g><g><title>query_planner::graph::Graph::build_graph (1 samples, 0.57%)</title><rect x="7.3864%" y="1061" width="0.5682%" height="15" fill="rgb(244,35,45)" fg:x="13" fg:w="1"/><text x="7.6364%" y="1071.50"></text></g><g><title>query_planner::graph::Graph::build_field_edges (1 samples, 0.57%)</title><rect x="7.3864%" y="1045" width="0.5682%" height="15" fill="rgb(251,115,12)" fg:x="13" fg:w="1"/><text x="7.6364%" y="1055.50"></text></g><g><title>query_planner::federation_spec::normalize_fields_argument_value_mut (1 samples, 0.57%)</title><rect x="7.3864%" y="1029" width="0.5682%" height="15" fill="rgb(240,54,50)" fg:x="13" fg:w="1"/><text x="7.6364%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphql_parser::query::ast::Definition&lt;alloc::string::String&gt;&gt; (1 samples, 0.57%)</title><rect x="7.3864%" y="1013" width="0.5682%" height="15" fill="rgb(233,84,52)" fg:x="13" fg:w="1"/><text x="7.6364%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphql_parser::query::ast::Selection&lt;alloc::string::String&gt;&gt; (1 samples, 0.57%)</title><rect x="7.3864%" y="997" width="0.5682%" height="15" fill="rgb(207,117,47)" fg:x="13" fg:w="1"/><text x="7.6364%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.57%)</title><rect x="7.9545%" y="1077" width="0.5682%" height="15" fill="rgb(249,43,39)" fg:x="14" fg:w="1"/><text x="8.2045%" y="1087.50"></text></g><g><title>&lt;combine::parser::repeat::Iter&lt;Input,P,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="7.9545%" y="1061" width="0.5682%" height="15" fill="rgb(209,38,44)" fg:x="14" fg:w="1"/><text x="8.2045%" y="1071.50"></text></g><g><title>graphql_parser::schema::grammar::definition (1 samples, 0.57%)</title><rect x="7.9545%" y="1045" width="0.5682%" height="15" fill="rgb(236,212,23)" fg:x="14" fg:w="1"/><text x="8.2045%" y="1055.50"></text></g><g><title>graphql_parser::schema::grammar::described_definition (1 samples, 0.57%)</title><rect x="7.9545%" y="1029" width="0.5682%" height="15" fill="rgb(242,79,21)" fg:x="14" fg:w="1"/><text x="8.2045%" y="1039.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.57%)</title><rect x="7.9545%" y="1013" width="0.5682%" height="15" fill="rgb(211,96,35)" fg:x="14" fg:w="1"/><text x="8.2045%" y="1023.50"></text></g><g><title>graphql_parser::schema::grammar::directive_definition (1 samples, 0.57%)</title><rect x="7.9545%" y="997" width="0.5682%" height="15" fill="rgb(253,215,40)" fg:x="14" fg:w="1"/><text x="8.2045%" y="1007.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.57%)</title><rect x="7.9545%" y="981" width="0.5682%" height="15" fill="rgb(211,81,21)" fg:x="14" fg:w="1"/><text x="8.2045%" y="991.50"></text></g><g><title>graphql_parser::schema::grammar::directive_locations (1 samples, 0.57%)</title><rect x="7.9545%" y="965" width="0.5682%" height="15" fill="rgb(208,190,38)" fg:x="14" fg:w="1"/><text x="8.2045%" y="975.50"></text></g><g><title>start (16 samples, 9.09%)</title><rect x="0.0000%" y="1237" width="9.0909%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="16"/><text x="0.2500%" y="1247.50">start</text></g><g><title>main (8 samples, 4.55%)</title><rect x="4.5455%" y="1221" width="4.5455%" height="15" fill="rgb(237,122,38)" fg:x="8" fg:w="8"/><text x="4.7955%" y="1231.50">main</text></g><g><title>std::rt::lang_start_internal (8 samples, 4.55%)</title><rect x="4.5455%" y="1205" width="4.5455%" height="15" fill="rgb(244,218,35)" fg:x="8" fg:w="8"/><text x="4.7955%" y="1215.50">std::..</text></g><g><title>std::rt::lang_start::_{{closure}} (7 samples, 3.98%)</title><rect x="5.1136%" y="1189" width="3.9773%" height="15" fill="rgb(240,68,47)" fg:x="9" fg:w="7"/><text x="5.3636%" y="1199.50">std:..</text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 3.98%)</title><rect x="5.1136%" y="1173" width="3.9773%" height="15" fill="rgb(210,16,53)" fg:x="9" fg:w="7"/><text x="5.3636%" y="1183.50">core..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (7 samples, 3.98%)</title><rect x="5.1136%" y="1157" width="3.9773%" height="15" fill="rgb(235,124,12)" fg:x="9" fg:w="7"/><text x="5.3636%" y="1167.50">toki..</text></g><g><title>gateway::main::_{{closure}} (6 samples, 3.41%)</title><rect x="5.6818%" y="1141" width="3.4091%" height="15" fill="rgb(224,169,11)" fg:x="10" fg:w="6"/><text x="5.9318%" y="1151.50">gat..</text></g><g><title>query_planner::utils::parsing::parse_schema (2 samples, 1.14%)</title><rect x="7.9545%" y="1125" width="1.1364%" height="15" fill="rgb(250,166,2)" fg:x="14" fg:w="2"/><text x="8.2045%" y="1135.50"></text></g><g><title>graphql_parser::schema::grammar::parse_schema (2 samples, 1.14%)</title><rect x="7.9545%" y="1109" width="1.1364%" height="15" fill="rgb(242,216,29)" fg:x="14" fg:w="2"/><text x="8.2045%" y="1119.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (2 samples, 1.14%)</title><rect x="7.9545%" y="1093" width="1.1364%" height="15" fill="rgb(230,116,27)" fg:x="14" fg:w="2"/><text x="8.2045%" y="1103.50"></text></g><g><title>graphql_parser::schema::grammar::definition (1 samples, 0.57%)</title><rect x="8.5227%" y="1077" width="0.5682%" height="15" fill="rgb(228,99,48)" fg:x="15" fg:w="1"/><text x="8.7727%" y="1087.50"></text></g><g><title>graphql_parser::schema::grammar::schema (1 samples, 0.57%)</title><rect x="8.5227%" y="1061" width="0.5682%" height="15" fill="rgb(253,11,6)" fg:x="15" fg:w="1"/><text x="8.7727%" y="1071.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.57%)</title><rect x="8.5227%" y="1045" width="0.5682%" height="15" fill="rgb(247,143,39)" fg:x="15" fg:w="1"/><text x="8.7727%" y="1055.50"></text></g><g><title>graphql_parser::common::directives (1 samples, 0.57%)</title><rect x="8.5227%" y="1029" width="0.5682%" height="15" fill="rgb(236,97,10)" fg:x="15" fg:w="1"/><text x="8.7727%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.57%)</title><rect x="8.5227%" y="1013" width="0.5682%" height="15" fill="rgb(233,208,19)" fg:x="15" fg:w="1"/><text x="8.7727%" y="1023.50"></text></g><g><title>&lt;combine::parser::repeat::Iter&lt;Input,P,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="8.5227%" y="997" width="0.5682%" height="15" fill="rgb(216,164,2)" fg:x="15" fg:w="1"/><text x="8.7727%" y="1007.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.57%)</title><rect x="8.5227%" y="981" width="0.5682%" height="15" fill="rgb(220,129,5)" fg:x="15" fg:w="1"/><text x="8.7727%" y="991.50"></text></g><g><title>graphql_parser::common::arguments (1 samples, 0.57%)</title><rect x="8.5227%" y="965" width="0.5682%" height="15" fill="rgb(242,17,10)" fg:x="15" fg:w="1"/><text x="8.7727%" y="975.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse (1 samples, 0.57%)</title><rect x="8.5227%" y="949" width="0.5682%" height="15" fill="rgb(242,107,0)" fg:x="15" fg:w="1"/><text x="8.7727%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.57%)</title><rect x="8.5227%" y="933" width="0.5682%" height="15" fill="rgb(251,28,31)" fg:x="15" fg:w="1"/><text x="8.7727%" y="943.50"></text></g><g><title>tlv_get_addr (1 samples, 0.57%)</title><rect x="9.0909%" y="1045" width="0.5682%" height="15" fill="rgb(233,223,10)" fg:x="16" fg:w="1"/><text x="9.3409%" y="1055.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 1.14%)</title><rect x="9.6591%" y="1013" width="1.1364%" height="15" fill="rgb(215,21,27)" fg:x="17" fg:w="2"/><text x="9.9091%" y="1023.50"></text></g><g><title>__psynch_cvwait (2 samples, 1.14%)</title><rect x="9.6591%" y="997" width="1.1364%" height="15" fill="rgb(232,23,21)" fg:x="17" fg:w="2"/><text x="9.9091%" y="1007.50"></text></g><g><title>kevent (1 samples, 0.57%)</title><rect x="10.7955%" y="981" width="0.5682%" height="15" fill="rgb(244,5,23)" fg:x="19" fg:w="1"/><text x="11.0455%" y="991.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (4 samples, 2.27%)</title><rect x="9.6591%" y="1045" width="2.2727%" height="15" fill="rgb(226,81,46)" fg:x="17" fg:w="4"/><text x="9.9091%" y="1055.50">t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (4 samples, 2.27%)</title><rect x="9.6591%" y="1029" width="2.2727%" height="15" fill="rgb(247,70,30)" fg:x="17" fg:w="4"/><text x="9.9091%" y="1039.50">t..</text></g><g><title>tokio::runtime::time::Driver::park_internal (2 samples, 1.14%)</title><rect x="10.7955%" y="1013" width="1.1364%" height="15" fill="rgb(212,68,19)" fg:x="19" fg:w="2"/><text x="11.0455%" y="1023.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (2 samples, 1.14%)</title><rect x="10.7955%" y="997" width="1.1364%" height="15" fill="rgb(240,187,13)" fg:x="19" fg:w="2"/><text x="11.0455%" y="1007.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.57%)</title><rect x="11.3636%" y="981" width="0.5682%" height="15" fill="rgb(223,113,26)" fg:x="20" fg:w="1"/><text x="11.6136%" y="991.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.57%)</title><rect x="11.3636%" y="965" width="0.5682%" height="15" fill="rgb(206,192,2)" fg:x="20" fg:w="1"/><text x="11.6136%" y="975.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 1.14%)</title><rect x="11.9318%" y="1029" width="1.1364%" height="15" fill="rgb(241,108,4)" fg:x="21" fg:w="2"/><text x="12.1818%" y="1039.50"></text></g><g><title>__psynch_cvsignal (2 samples, 1.14%)</title><rect x="11.9318%" y="1013" width="1.1364%" height="15" fill="rgb(247,173,49)" fg:x="21" fg:w="2"/><text x="12.1818%" y="1023.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.57%)</title><rect x="14.2045%" y="949" width="0.5682%" height="15" fill="rgb(224,114,35)" fg:x="25" fg:w="1"/><text x="14.4545%" y="959.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (2 samples, 1.14%)</title><rect x="14.2045%" y="965" width="1.1364%" height="15" fill="rgb(245,159,27)" fg:x="25" fg:w="2"/><text x="14.4545%" y="975.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::send (1 samples, 0.57%)</title><rect x="14.7727%" y="949" width="0.5682%" height="15" fill="rgb(245,172,44)" fg:x="26" fg:w="1"/><text x="15.0227%" y="959.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (1 samples, 0.57%)</title><rect x="14.7727%" y="933" width="0.5682%" height="15" fill="rgb(236,23,11)" fg:x="26" fg:w="1"/><text x="15.0227%" y="943.50"></text></g><g><title>tokio::sync::oneshot::State::set_complete (1 samples, 0.57%)</title><rect x="14.7727%" y="917" width="0.5682%" height="15" fill="rgb(205,117,38)" fg:x="26" fg:w="1"/><text x="15.0227%" y="927.50"></text></g><g><title>hyper::body::incoming::Sender::try_send_data (1 samples, 0.57%)</title><rect x="15.3409%" y="965" width="0.5682%" height="15" fill="rgb(237,72,25)" fg:x="27" fg:w="1"/><text x="15.5909%" y="975.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (1 samples, 0.57%)</title><rect x="15.3409%" y="949" width="0.5682%" height="15" fill="rgb(244,70,9)" fg:x="27" fg:w="1"/><text x="15.5909%" y="959.50"></text></g><g><title>std::sys::sync::once_box::OnceBox&lt;T&gt;::initialize (1 samples, 0.57%)</title><rect x="15.3409%" y="933" width="0.5682%" height="15" fill="rgb(217,125,39)" fg:x="27" fg:w="1"/><text x="15.5909%" y="943.50"></text></g><g><title>pthread_mutex_init (1 samples, 0.57%)</title><rect x="15.3409%" y="917" width="0.5682%" height="15" fill="rgb(235,36,10)" fg:x="27" fg:w="1"/><text x="15.5909%" y="927.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (2 samples, 1.14%)</title><rect x="15.9091%" y="965" width="1.1364%" height="15" fill="rgb(251,123,47)" fg:x="28" fg:w="2"/><text x="16.1591%" y="975.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (2 samples, 1.14%)</title><rect x="15.9091%" y="949" width="1.1364%" height="15" fill="rgb(221,13,13)" fg:x="28" fg:w="2"/><text x="16.1591%" y="959.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (2 samples, 1.14%)</title><rect x="15.9091%" y="933" width="1.1364%" height="15" fill="rgb(238,131,9)" fg:x="28" fg:w="2"/><text x="16.1591%" y="943.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_io (2 samples, 1.14%)</title><rect x="15.9091%" y="917" width="1.1364%" height="15" fill="rgb(211,50,8)" fg:x="28" fg:w="2"/><text x="16.1591%" y="927.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored (2 samples, 1.14%)</title><rect x="15.9091%" y="901" width="1.1364%" height="15" fill="rgb(245,182,24)" fg:x="28" fg:w="2"/><text x="16.1591%" y="911.50"></text></g><g><title>writev (2 samples, 1.14%)</title><rect x="15.9091%" y="885" width="1.1364%" height="15" fill="rgb(242,14,37)" fg:x="28" fg:w="2"/><text x="16.1591%" y="895.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (3 samples, 1.70%)</title><rect x="17.0455%" y="965" width="1.7045%" height="15" fill="rgb(246,228,12)" fg:x="30" fg:w="3"/><text x="17.2955%" y="975.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (3 samples, 1.70%)</title><rect x="17.0455%" y="949" width="1.7045%" height="15" fill="rgb(213,55,15)" fg:x="30" fg:w="3"/><text x="17.2955%" y="959.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (3 samples, 1.70%)</title><rect x="17.0455%" y="933" width="1.7045%" height="15" fill="rgb(209,9,3)" fg:x="30" fg:w="3"/><text x="17.2955%" y="943.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (3 samples, 1.70%)</title><rect x="17.0455%" y="917" width="1.7045%" height="15" fill="rgb(230,59,30)" fg:x="30" fg:w="3"/><text x="17.2955%" y="927.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (3 samples, 1.70%)</title><rect x="17.0455%" y="901" width="1.7045%" height="15" fill="rgb(209,121,21)" fg:x="30" fg:w="3"/><text x="17.2955%" y="911.50"></text></g><g><title>__recvfrom (3 samples, 1.70%)</title><rect x="17.0455%" y="885" width="1.7045%" height="15" fill="rgb(220,109,13)" fg:x="30" fg:w="3"/><text x="17.2955%" y="895.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (1 samples, 0.57%)</title><rect x="18.7500%" y="965" width="0.5682%" height="15" fill="rgb(232,18,1)" fg:x="33" fg:w="1"/><text x="19.0000%" y="975.50"></text></g><g><title>&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::encode (1 samples, 0.57%)</title><rect x="18.7500%" y="949" width="0.5682%" height="15" fill="rgb(215,41,42)" fg:x="33" fg:w="1"/><text x="19.0000%" y="959.50"></text></g><g><title>hyper::proto::h1::role::set_content_length (1 samples, 0.57%)</title><rect x="18.7500%" y="933" width="0.5682%" height="15" fill="rgb(224,123,36)" fg:x="33" fg:w="1"/><text x="19.0000%" y="943.50"></text></g><g><title>&lt;http::header::value::HeaderValue as core::convert::From&lt;u64&gt;&gt;::from (1 samples, 0.57%)</title><rect x="18.7500%" y="917" width="0.5682%" height="15" fill="rgb(240,125,3)" fg:x="33" fg:w="1"/><text x="19.0000%" y="927.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.57%)</title><rect x="18.7500%" y="901" width="0.5682%" height="15" fill="rgb(205,98,50)" fg:x="33" fg:w="1"/><text x="19.0000%" y="911.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.57%)</title><rect x="18.7500%" y="885" width="0.5682%" height="15" fill="rgb(205,185,37)" fg:x="33" fg:w="1"/><text x="19.0000%" y="895.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (12 samples, 6.82%)</title><rect x="13.0682%" y="1013" width="6.8182%" height="15" fill="rgb(238,207,15)" fg:x="23" fg:w="12"/><text x="13.3182%" y="1023.50">&lt;futures_..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 5.68%)</title><rect x="14.2045%" y="997" width="5.6818%" height="15" fill="rgb(213,199,42)" fg:x="25" fg:w="10"/><text x="14.4545%" y="1007.50">&lt;future..</text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (10 samples, 5.68%)</title><rect x="14.2045%" y="981" width="5.6818%" height="15" fill="rgb(235,201,11)" fg:x="25" fg:w="10"/><text x="14.4545%" y="991.50">&lt;hyper:..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (1 samples, 0.57%)</title><rect x="19.3182%" y="965" width="0.5682%" height="15" fill="rgb(207,46,11)" fg:x="34" fg:w="1"/><text x="19.5682%" y="975.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.57%)</title><rect x="19.3182%" y="949" width="0.5682%" height="15" fill="rgb(241,35,35)" fg:x="34" fg:w="1"/><text x="19.5682%" y="959.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (13 samples, 7.39%)</title><rect x="13.0682%" y="1029" width="7.3864%" height="15" fill="rgb(243,32,47)" fg:x="23" fg:w="13"/><text x="13.3182%" y="1039.50">tokio::run..</text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (1 samples, 0.57%)</title><rect x="19.8864%" y="1013" width="0.5682%" height="15" fill="rgb(247,202,23)" fg:x="35" fg:w="1"/><text x="20.1364%" y="1023.50"></text></g><g><title>tokio::runtime::context::with_scheduler (1 samples, 0.57%)</title><rect x="19.8864%" y="997" width="0.5682%" height="15" fill="rgb(219,102,11)" fg:x="35" fg:w="1"/><text x="20.1364%" y="1007.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (1 samples, 0.57%)</title><rect x="19.8864%" y="981" width="0.5682%" height="15" fill="rgb(243,110,44)" fg:x="35" fg:w="1"/><text x="20.1364%" y="991.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.57%)</title><rect x="19.8864%" y="965" width="0.5682%" height="15" fill="rgb(222,74,54)" fg:x="35" fg:w="1"/><text x="20.1364%" y="975.50"></text></g><g><title>query_planner::planner::best::find_best_combination (1 samples, 0.57%)</title><rect x="20.4545%" y="613" width="0.5682%" height="15" fill="rgb(216,99,12)" fg:x="36" fg:w="1"/><text x="20.7045%" y="623.50"></text></g><g><title>query_planner::planner::best::explore_tree_combinations (1 samples, 0.57%)</title><rect x="20.4545%" y="597" width="0.5682%" height="15" fill="rgb(226,22,26)" fg:x="36" fg:w="1"/><text x="20.7045%" y="607.50"></text></g><g><title>query_planner::planner::best::explore_tree_combinations (1 samples, 0.57%)</title><rect x="20.4545%" y="581" width="0.5682%" height="15" fill="rgb(217,163,10)" fg:x="36" fg:w="1"/><text x="20.7045%" y="591.50"></text></g><g><title>query_planner::planner::best::explore_tree_combinations (1 samples, 0.57%)</title><rect x="20.4545%" y="565" width="0.5682%" height="15" fill="rgb(213,25,53)" fg:x="36" fg:w="1"/><text x="20.7045%" y="575.50"></text></g><g><title>query_planner::planner::best::explore_tree_combinations (1 samples, 0.57%)</title><rect x="20.4545%" y="549" width="0.5682%" height="15" fill="rgb(252,105,26)" fg:x="36" fg:w="1"/><text x="20.7045%" y="559.50"></text></g><g><title>query_planner::planner::best::explore_tree_combinations (1 samples, 0.57%)</title><rect x="20.4545%" y="533" width="0.5682%" height="15" fill="rgb(220,39,43)" fg:x="36" fg:w="1"/><text x="20.7045%" y="543.50"></text></g><g><title>query_planner::planner::best::explore_tree_combinations (1 samples, 0.57%)</title><rect x="20.4545%" y="517" width="0.5682%" height="15" fill="rgb(229,68,48)" fg:x="36" fg:w="1"/><text x="20.7045%" y="527.50"></text></g><g><title>query_planner::planner::best::explore_tree_combinations (1 samples, 0.57%)</title><rect x="20.4545%" y="501" width="0.5682%" height="15" fill="rgb(252,8,32)" fg:x="36" fg:w="1"/><text x="20.7045%" y="511.50"></text></g><g><title>query_planner::planner::best::explore_tree_combinations (1 samples, 0.57%)</title><rect x="20.4545%" y="485" width="0.5682%" height="15" fill="rgb(223,20,43)" fg:x="36" fg:w="1"/><text x="20.7045%" y="495.50"></text></g><g><title>query_planner::planner::best::explore_tree_combinations (1 samples, 0.57%)</title><rect x="20.4545%" y="469" width="0.5682%" height="15" fill="rgb(229,81,49)" fg:x="36" fg:w="1"/><text x="20.7045%" y="479.50"></text></g><g><title>query_planner::planner::tree::query_tree_node::QueryTreeNode::merge_nodes (1 samples, 0.57%)</title><rect x="20.4545%" y="453" width="0.5682%" height="15" fill="rgb(236,28,36)" fg:x="36" fg:w="1"/><text x="20.7045%" y="463.50"></text></g><g><title>query_planner::planner::tree::query_tree_node::QueryTreeNode::merge_nodes (1 samples, 0.57%)</title><rect x="20.4545%" y="437" width="0.5682%" height="15" fill="rgb(249,185,26)" fg:x="36" fg:w="1"/><text x="20.7045%" y="447.50"></text></g><g><title>query_planner::planner::tree::query_tree_node::QueryTreeNode::merge_nodes (1 samples, 0.57%)</title><rect x="20.4545%" y="421" width="0.5682%" height="15" fill="rgb(249,174,33)" fg:x="36" fg:w="1"/><text x="20.7045%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::make_mut (1 samples, 0.57%)</title><rect x="20.4545%" y="405" width="0.5682%" height="15" fill="rgb(233,201,37)" fg:x="36" fg:w="1"/><text x="20.7045%" y="415.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.57%)</title><rect x="20.4545%" y="389" width="0.5682%" height="15" fill="rgb(221,78,26)" fg:x="36" fg:w="1"/><text x="20.7045%" y="399.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.57%)</title><rect x="20.4545%" y="373" width="0.5682%" height="15" fill="rgb(250,127,30)" fg:x="36" fg:w="1"/><text x="20.7045%" y="383.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.57%)</title><rect x="20.4545%" y="357" width="0.5682%" height="15" fill="rgb(230,49,44)" fg:x="36" fg:w="1"/><text x="20.7045%" y="367.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.57%)</title><rect x="20.4545%" y="341" width="0.5682%" height="15" fill="rgb(229,67,23)" fg:x="36" fg:w="1"/><text x="20.7045%" y="351.50"></text></g><g><title>&lt;gateway::pipeline::query_plan_service::QueryPlanService as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}}::_{{closure}} (3 samples, 1.70%)</title><rect x="20.4545%" y="645" width="1.7045%" height="15" fill="rgb(249,83,47)" fg:x="36" fg:w="3"/><text x="20.7045%" y="655.50"></text></g><g><title>query_planner::planner::Planner::plan_from_normalized_operation (3 samples, 1.70%)</title><rect x="20.4545%" y="629" width="1.7045%" height="15" fill="rgb(215,43,3)" fg:x="36" fg:w="3"/><text x="20.7045%" y="639.50"></text></g><g><title>query_planner::planner::walker::walk_operation (2 samples, 1.14%)</title><rect x="21.0227%" y="613" width="1.1364%" height="15" fill="rgb(238,154,13)" fg:x="37" fg:w="2"/><text x="21.2727%" y="623.50"></text></g><g><title>query_planner::planner::walker::process_selection (1 samples, 0.57%)</title><rect x="21.5909%" y="597" width="0.5682%" height="15" fill="rgb(219,56,2)" fg:x="38" fg:w="1"/><text x="21.8409%" y="607.50"></text></g><g><title>query_planner::planner::walker::pathfinder::find_indirect_paths (1 samples, 0.57%)</title><rect x="21.5909%" y="581" width="0.5682%" height="15" fill="rgb(233,0,4)" fg:x="38" fg:w="1"/><text x="21.8409%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.57%)</title><rect x="21.5909%" y="565" width="0.5682%" height="15" fill="rgb(235,30,7)" fg:x="38" fg:w="1"/><text x="21.8409%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.57%)</title><rect x="21.5909%" y="549" width="0.5682%" height="15" fill="rgb(250,79,13)" fg:x="38" fg:w="1"/><text x="21.8409%" y="559.50"></text></g><g><title>query_planner::planner::tree::query_tree::QueryTree::from_path (1 samples, 0.57%)</title><rect x="21.5909%" y="533" width="0.5682%" height="15" fill="rgb(211,146,34)" fg:x="38" fg:w="1"/><text x="21.8409%" y="543.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4 samples, 2.27%)</title><rect x="20.4545%" y="677" width="2.2727%" height="15" fill="rgb(228,22,38)" fg:x="36" fg:w="4"/><text x="20.7045%" y="687.50">&lt;..</text></g><g><title>&lt;gateway::pipeline::query_plan_service::QueryPlanService as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}} (4 samples, 2.27%)</title><rect x="20.4545%" y="661" width="2.2727%" height="15" fill="rgb(235,168,5)" fg:x="36" fg:w="4"/><text x="20.7045%" y="671.50">&lt;..</text></g><g><title>moka::future::base_cache::BaseCache&lt;K,V,S&gt;::get_with_hash::_{{closure}} (1 samples, 0.57%)</title><rect x="22.1591%" y="645" width="0.5682%" height="15" fill="rgb(221,155,16)" fg:x="39" fg:w="1"/><text x="22.4091%" y="655.50"></text></g><g><title>moka::future::base_cache::BaseCache&lt;K,V,S&gt;::apply_reads_if_needed::_{{closure}} (1 samples, 0.57%)</title><rect x="22.1591%" y="629" width="0.5682%" height="15" fill="rgb(215,215,53)" fg:x="39" fg:w="1"/><text x="22.4091%" y="639.50"></text></g><g><title>moka::future::housekeeper::Housekeeper::do_run_pending_tasks::_{{closure}} (1 samples, 0.57%)</title><rect x="22.1591%" y="613" width="0.5682%" height="15" fill="rgb(223,4,10)" fg:x="39" fg:w="1"/><text x="22.4091%" y="623.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.57%)</title><rect x="22.1591%" y="597" width="0.5682%" height="15" fill="rgb(234,103,6)" fg:x="39" fg:w="1"/><text x="22.4091%" y="607.50"></text></g><g><title>moka::future::housekeeper::Housekeeper::do_run_pending_tasks::_{{closure}}::_{{closure}} (1 samples, 0.57%)</title><rect x="22.1591%" y="581" width="0.5682%" height="15" fill="rgb(227,97,0)" fg:x="39" fg:w="1"/><text x="22.4091%" y="591.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (1 samples, 0.57%)</title><rect x="22.1591%" y="565" width="0.5682%" height="15" fill="rgb(234,150,53)" fg:x="39" fg:w="1"/><text x="22.4091%" y="575.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (1 samples, 0.57%)</title><rect x="22.1591%" y="549" width="0.5682%" height="15" fill="rgb(228,201,54)" fg:x="39" fg:w="1"/><text x="22.4091%" y="559.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.57%)</title><rect x="22.1591%" y="533" width="0.5682%" height="15" fill="rgb(222,22,37)" fg:x="39" fg:w="1"/><text x="22.4091%" y="543.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.57%)</title><rect x="23.8636%" y="549" width="0.5682%" height="15" fill="rgb(237,53,32)" fg:x="42" fg:w="1"/><text x="24.1136%" y="559.50"></text></g><g><title>_szone_free (1 samples, 0.57%)</title><rect x="24.4318%" y="549" width="0.5682%" height="15" fill="rgb(233,25,53)" fg:x="43" fg:w="1"/><text x="24.6818%" y="559.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.57%)</title><rect x="27.2727%" y="469" width="0.5682%" height="15" fill="rgb(210,40,34)" fg:x="48" fg:w="1"/><text x="27.5227%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;hyper_util::client::legacy::connect::http::HttpConnector,http_body_util::full::Full&lt;bytes::bytes::Bytes&gt;&gt;::send_request::{{closure}}&gt; (1 samples, 0.57%)</title><rect x="27.2727%" y="453" width="0.5682%" height="15" fill="rgb(241,220,44)" fg:x="48" fg:w="1"/><text x="27.5227%" y="463.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.57%)</title><rect x="28.4091%" y="453" width="0.5682%" height="15" fill="rgb(235,28,35)" fg:x="50" fg:w="1"/><text x="28.6591%" y="463.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::_{{closure}} (1 samples, 0.57%)</title><rect x="28.4091%" y="437" width="0.5682%" height="15" fill="rgb(210,56,17)" fg:x="50" fg:w="1"/><text x="28.6591%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.57%)</title><rect x="28.9773%" y="453" width="0.5682%" height="15" fill="rgb(224,130,29)" fg:x="51" fg:w="1"/><text x="29.2273%" y="463.50"></text></g><g><title>&lt;hyper::body::incoming::Incoming as http_body::Body&gt;::poll_frame (1 samples, 0.57%)</title><rect x="29.5455%" y="437" width="0.5682%" height="15" fill="rgb(235,212,8)" fg:x="52" fg:w="1"/><text x="29.7955%" y="447.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.57%)</title><rect x="29.5455%" y="421" width="0.5682%" height="15" fill="rgb(223,33,50)" fg:x="52" fg:w="1"/><text x="29.7955%" y="431.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (1 samples, 0.57%)</title><rect x="29.5455%" y="405" width="0.5682%" height="15" fill="rgb(219,149,13)" fg:x="52" fg:w="1"/><text x="29.7955%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.57%)</title><rect x="29.5455%" y="389" width="0.5682%" height="15" fill="rgb(250,156,29)" fg:x="52" fg:w="1"/><text x="29.7955%" y="399.50"></text></g><g><title>free_tiny (1 samples, 0.57%)</title><rect x="29.5455%" y="373" width="0.5682%" height="15" fill="rgb(216,193,19)" fg:x="52" fg:w="1"/><text x="29.7955%" y="383.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.57%)</title><rect x="29.5455%" y="357" width="0.5682%" height="15" fill="rgb(216,135,14)" fg:x="52" fg:w="1"/><text x="29.7955%" y="367.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.57%)</title><rect x="29.5455%" y="341" width="0.5682%" height="15" fill="rgb(241,47,5)" fg:x="52" fg:w="1"/><text x="29.7955%" y="351.50"></text></g><g><title>&lt;http_body_util::combinators::collect::Collect&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 1.14%)</title><rect x="29.5455%" y="453" width="1.1364%" height="15" fill="rgb(233,42,35)" fg:x="52" fg:w="2"/><text x="29.7955%" y="463.50"></text></g><g><title>http_body_util::collected::Collected&lt;B&gt;::push_frame (1 samples, 0.57%)</title><rect x="30.1136%" y="437" width="0.5682%" height="15" fill="rgb(231,13,6)" fg:x="53" fg:w="1"/><text x="30.3636%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.57%)</title><rect x="30.1136%" y="421" width="0.5682%" height="15" fill="rgb(207,181,40)" fg:x="53" fg:w="1"/><text x="30.3636%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.57%)</title><rect x="30.1136%" y="405" width="0.5682%" height="15" fill="rgb(254,173,49)" fg:x="53" fg:w="1"/><text x="30.3636%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.57%)</title><rect x="30.1136%" y="389" width="0.5682%" height="15" fill="rgb(221,1,38)" fg:x="53" fg:w="1"/><text x="30.3636%" y="399.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.57%)</title><rect x="30.1136%" y="373" width="0.5682%" height="15" fill="rgb(206,124,46)" fg:x="53" fg:w="1"/><text x="30.3636%" y="383.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.57%)</title><rect x="30.1136%" y="357" width="0.5682%" height="15" fill="rgb(249,21,11)" fg:x="53" fg:w="1"/><text x="30.3636%" y="367.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.57%)</title><rect x="30.1136%" y="341" width="0.5682%" height="15" fill="rgb(222,201,40)" fg:x="53" fg:w="1"/><text x="30.3636%" y="351.50"></text></g><g><title>&lt;hyper_util::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.57%)</title><rect x="30.6818%" y="421" width="0.5682%" height="15" fill="rgb(235,61,29)" fg:x="54" fg:w="1"/><text x="30.9318%" y="431.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 0.57%)</title><rect x="30.6818%" y="405" width="0.5682%" height="15" fill="rgb(219,207,3)" fg:x="54" fg:w="1"/><text x="30.9318%" y="415.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.57%)</title><rect x="30.6818%" y="389" width="0.5682%" height="15" fill="rgb(222,56,46)" fg:x="54" fg:w="1"/><text x="30.9318%" y="399.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.57%)</title><rect x="30.6818%" y="373" width="0.5682%" height="15" fill="rgb(239,76,54)" fg:x="54" fg:w="1"/><text x="30.9318%" y="383.50"></text></g><g><title>&lt;hyper_util::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.57%)</title><rect x="30.6818%" y="357" width="0.5682%" height="15" fill="rgb(231,124,27)" fg:x="54" fg:w="1"/><text x="30.9318%" y="367.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (1 samples, 0.57%)</title><rect x="30.6818%" y="341" width="0.5682%" height="15" fill="rgb(249,195,6)" fg:x="54" fg:w="1"/><text x="30.9318%" y="351.50"></text></g><g><title>hyper_util::client::legacy::connect::http::connect (1 samples, 0.57%)</title><rect x="30.6818%" y="325" width="0.5682%" height="15" fill="rgb(237,174,47)" fg:x="54" fg:w="1"/><text x="30.9318%" y="335.50"></text></g><g><title>socket2::socket::Socket::new (1 samples, 0.57%)</title><rect x="30.6818%" y="309" width="0.5682%" height="15" fill="rgb(206,201,31)" fg:x="54" fg:w="1"/><text x="30.9318%" y="319.50"></text></g><g><title>__fcntl (1 samples, 0.57%)</title><rect x="30.6818%" y="293" width="0.5682%" height="15" fill="rgb(231,57,52)" fg:x="54" fg:w="1"/><text x="30.9318%" y="303.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.57%)</title><rect x="31.2500%" y="421" width="0.5682%" height="15" fill="rgb(248,177,22)" fg:x="55" fg:w="1"/><text x="31.5000%" y="431.50"></text></g><g><title>hyper::client::dispatch::Sender&lt;T,U&gt;::try_send (1 samples, 0.57%)</title><rect x="31.8182%" y="421" width="0.5682%" height="15" fill="rgb(215,211,37)" fg:x="56" fg:w="1"/><text x="32.0682%" y="431.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (1 samples, 0.57%)</title><rect x="31.8182%" y="405" width="0.5682%" height="15" fill="rgb(241,128,51)" fg:x="56" fg:w="1"/><text x="32.0682%" y="415.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.57%)</title><rect x="31.8182%" y="389" width="0.5682%" height="15" fill="rgb(227,165,31)" fg:x="56" fg:w="1"/><text x="32.0682%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 0.57%)</title><rect x="31.8182%" y="373" width="0.5682%" height="15" fill="rgb(228,167,24)" fg:x="56" fg:w="1"/><text x="32.0682%" y="383.50"></text></g><g><title>tokio::runtime::context::with_scheduler (1 samples, 0.57%)</title><rect x="31.8182%" y="357" width="0.5682%" height="15" fill="rgb(228,143,12)" fg:x="56" fg:w="1"/><text x="32.0682%" y="367.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (1 samples, 0.57%)</title><rect x="31.8182%" y="341" width="0.5682%" height="15" fill="rgb(249,149,8)" fg:x="56" fg:w="1"/><text x="32.0682%" y="351.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (1 samples, 0.57%)</title><rect x="31.8182%" y="325" width="0.5682%" height="15" fill="rgb(243,35,44)" fg:x="56" fg:w="1"/><text x="32.0682%" y="335.50"></text></g><g><title>kevent (1 samples, 0.57%)</title><rect x="31.8182%" y="309" width="0.5682%" height="15" fill="rgb(246,89,9)" fg:x="56" fg:w="1"/><text x="32.0682%" y="319.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::ResponseFuture as core::future::future::Future&gt;::poll (4 samples, 2.27%)</title><rect x="30.6818%" y="453" width="2.2727%" height="15" fill="rgb(233,213,13)" fg:x="54" fg:w="4"/><text x="30.9318%" y="463.50">&lt;..</text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::_{{closure}} (4 samples, 2.27%)</title><rect x="30.6818%" y="437" width="2.2727%" height="15" fill="rgb(233,141,41)" fg:x="54" fg:w="4"/><text x="30.9318%" y="447.50">h..</text></g><g><title>szone_try_free_default (1 samples, 0.57%)</title><rect x="32.3864%" y="421" width="0.5682%" height="15" fill="rgb(239,167,4)" fg:x="57" fg:w="1"/><text x="32.6364%" y="431.50"></text></g><g><title>free_small (2 samples, 1.14%)</title><rect x="32.9545%" y="453" width="1.1364%" height="15" fill="rgb(209,217,16)" fg:x="58" fg:w="2"/><text x="33.2045%" y="463.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::request (1 samples, 0.57%)</title><rect x="34.0909%" y="453" width="0.5682%" height="15" fill="rgb(219,88,35)" fg:x="60" fg:w="1"/><text x="34.3409%" y="463.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.57%)</title><rect x="34.0909%" y="437" width="0.5682%" height="15" fill="rgb(220,193,23)" fg:x="60" fg:w="1"/><text x="34.3409%" y="447.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.57%)</title><rect x="34.0909%" y="421" width="0.5682%" height="15" fill="rgb(230,90,52)" fg:x="60" fg:w="1"/><text x="34.3409%" y="431.50"></text></g><g><title>small_malloc_from_free_list (1 samples, 0.57%)</title><rect x="34.0909%" y="405" width="0.5682%" height="15" fill="rgb(252,106,19)" fg:x="60" fg:w="1"/><text x="34.3409%" y="415.50"></text></g><g><title>small_free_list_add_ptr (1 samples, 0.57%)</title><rect x="34.0909%" y="389" width="0.5682%" height="15" fill="rgb(206,74,20)" fg:x="60" fg:w="1"/><text x="34.3409%" y="399.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.57%)</title><rect x="34.6591%" y="357" width="0.5682%" height="15" fill="rgb(230,138,44)" fg:x="61" fg:w="1"/><text x="34.9091%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.57%)</title><rect x="34.6591%" y="341" width="0.5682%" height="15" fill="rgb(235,182,43)" fg:x="61" fg:w="1"/><text x="34.9091%" y="351.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.57%)</title><rect x="35.7955%" y="261" width="0.5682%" height="15" fill="rgb(242,16,51)" fg:x="63" fg:w="1"/><text x="36.0455%" y="271.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="36.9318%" y="229" width="0.5682%" height="15" fill="rgb(248,9,4)" fg:x="65" fg:w="1"/><text x="37.1818%" y="239.50"></text></g><g><title>DYLD-STUB$$_platform_memmove (1 samples, 0.57%)</title><rect x="37.5000%" y="229" width="0.5682%" height="15" fill="rgb(210,31,22)" fg:x="66" fg:w="1"/><text x="37.7500%" y="239.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (5 samples, 2.84%)</title><rect x="35.7955%" y="277" width="2.8409%" height="15" fill="rgb(239,54,39)" fg:x="63" fg:w="5"/><text x="36.0455%" y="287.50">&lt;s..</text></g><g><title>serde_json::read::next_or_eof (4 samples, 2.27%)</title><rect x="36.3636%" y="261" width="2.2727%" height="15" fill="rgb(230,99,41)" fg:x="64" fg:w="4"/><text x="36.6136%" y="271.50">s..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.27%)</title><rect x="36.3636%" y="245" width="2.2727%" height="15" fill="rgb(253,106,12)" fg:x="64" fg:w="4"/><text x="36.6136%" y="255.50">&lt;..</text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.57%)</title><rect x="38.0682%" y="229" width="0.5682%" height="15" fill="rgb(213,46,41)" fg:x="67" fg:w="1"/><text x="38.3182%" y="239.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.57%)</title><rect x="40.3409%" y="165" width="0.5682%" height="15" fill="rgb(215,133,35)" fg:x="71" fg:w="1"/><text x="40.5909%" y="175.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="40.3409%" y="149" width="0.5682%" height="15" fill="rgb(213,28,5)" fg:x="71" fg:w="1"/><text x="40.5909%" y="159.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (9 samples, 5.11%)</title><rect x="41.4773%" y="149" width="5.1136%" height="15" fill="rgb(215,77,49)" fg:x="73" fg:w="9"/><text x="41.7273%" y="159.50">&lt;bytes..</text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.57%)</title><rect x="46.0227%" y="133" width="0.5682%" height="15" fill="rgb(248,100,22)" fg:x="81" fg:w="1"/><text x="46.2727%" y="143.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (16 samples, 9.09%)</title><rect x="38.6364%" y="197" width="9.0909%" height="15" fill="rgb(208,67,9)" fg:x="68" fg:w="16"/><text x="38.8864%" y="207.50">&lt;serde_json::..</text></g><g><title>serde_json::read::next_or_eof (16 samples, 9.09%)</title><rect x="38.6364%" y="181" width="9.0909%" height="15" fill="rgb(219,133,21)" fg:x="68" fg:w="16"/><text x="38.8864%" y="191.50">serde_json::r..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 6.82%)</title><rect x="40.9091%" y="165" width="6.8182%" height="15" fill="rgb(246,46,29)" fg:x="72" fg:w="12"/><text x="41.1591%" y="175.50">&lt;std::io:..</text></g><g><title>_platform_memmove$VARIANT$Haswell (2 samples, 1.14%)</title><rect x="46.5909%" y="149" width="1.1364%" height="15" fill="rgb(246,185,52)" fg:x="82" fg:w="2"/><text x="46.8409%" y="159.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.57%)</title><rect x="50.0000%" y="85" width="0.5682%" height="15" fill="rgb(252,136,11)" fg:x="88" fg:w="1"/><text x="50.2500%" y="95.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="50.0000%" y="69" width="0.5682%" height="15" fill="rgb(219,138,53)" fg:x="88" fg:w="1"/><text x="50.2500%" y="79.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (23 samples, 13.07%)</title><rect x="47.7273%" y="117" width="13.0682%" height="15" fill="rgb(211,51,23)" fg:x="84" fg:w="23"/><text x="47.9773%" y="127.50">&lt;serde_json::read::I..</text></g><g><title>serde_json::read::next_or_eof (22 samples, 12.50%)</title><rect x="48.2955%" y="101" width="12.5000%" height="15" fill="rgb(247,221,28)" fg:x="85" fg:w="22"/><text x="48.5455%" y="111.50">serde_json::read::n..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 10.23%)</title><rect x="50.5682%" y="85" width="10.2273%" height="15" fill="rgb(251,222,45)" fg:x="89" fg:w="18"/><text x="50.8182%" y="95.50">&lt;std::io::Bytes..</text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (16 samples, 9.09%)</title><rect x="51.7045%" y="69" width="9.0909%" height="15" fill="rgb(217,162,53)" fg:x="91" fg:w="16"/><text x="51.9545%" y="79.50">&lt;bytes::buf::..</text></g><g><title>_platform_memmove$VARIANT$Haswell (2 samples, 1.14%)</title><rect x="59.6591%" y="53" width="1.1364%" height="15" fill="rgb(229,93,14)" fg:x="105" fg:w="2"/><text x="59.9091%" y="63.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 1.14%)</title><rect x="60.7955%" y="101" width="1.1364%" height="15" fill="rgb(209,67,49)" fg:x="107" fg:w="2"/><text x="61.0455%" y="111.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2 samples, 1.14%)</title><rect x="60.7955%" y="85" width="1.1364%" height="15" fill="rgb(213,87,29)" fg:x="107" fg:w="2"/><text x="61.0455%" y="95.50"></text></g><g><title>serde_json::read::next_or_eof (1 samples, 0.57%)</title><rect x="61.3636%" y="69" width="0.5682%" height="15" fill="rgb(205,151,52)" fg:x="108" fg:w="1"/><text x="61.6136%" y="79.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 1.70%)</title><rect x="60.7955%" y="117" width="1.7045%" height="15" fill="rgb(253,215,39)" fg:x="107" fg:w="3"/><text x="61.0455%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.57%)</title><rect x="61.9318%" y="101" width="0.5682%" height="15" fill="rgb(221,220,41)" fg:x="109" fg:w="1"/><text x="62.1818%" y="111.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.57%)</title><rect x="61.9318%" y="85" width="0.5682%" height="15" fill="rgb(218,133,21)" fg:x="109" fg:w="1"/><text x="62.1818%" y="95.50"></text></g><g><title>serde_json::read::next_or_eof (1 samples, 0.57%)</title><rect x="61.9318%" y="69" width="0.5682%" height="15" fill="rgb(221,193,43)" fg:x="109" fg:w="1"/><text x="62.1818%" y="79.50"></text></g><g><title>0xfffffffffffffffe (1 samples, 0.57%)</title><rect x="61.9318%" y="53" width="0.5682%" height="15" fill="rgb(240,128,52)" fg:x="109" fg:w="1"/><text x="62.1818%" y="63.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="61.9318%" y="37" width="0.5682%" height="15" fill="rgb(253,114,12)" fg:x="109" fg:w="1"/><text x="62.1818%" y="47.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.14%)</title><rect x="62.5000%" y="117" width="1.1364%" height="15" fill="rgb(215,223,47)" fg:x="110" fg:w="2"/><text x="62.7500%" y="127.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (2 samples, 1.14%)</title><rect x="62.5000%" y="101" width="1.1364%" height="15" fill="rgb(248,225,23)" fg:x="110" fg:w="2"/><text x="62.7500%" y="111.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (2 samples, 1.14%)</title><rect x="63.6364%" y="117" width="1.1364%" height="15" fill="rgb(250,108,0)" fg:x="112" fg:w="2"/><text x="63.8864%" y="127.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (31 samples, 17.61%)</title><rect x="47.7273%" y="133" width="17.6136%" height="15" fill="rgb(228,208,7)" fg:x="84" fg:w="31"/><text x="47.9773%" y="143.50">&lt;core::marker::PhantomData&lt;..</text></g><g><title>tiny_malloc_should_clear (1 samples, 0.57%)</title><rect x="64.7727%" y="117" width="0.5682%" height="15" fill="rgb(244,45,10)" fg:x="114" fg:w="1"/><text x="65.0227%" y="127.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (1 samples, 0.57%)</title><rect x="65.3409%" y="133" width="0.5682%" height="15" fill="rgb(207,125,25)" fg:x="115" fg:w="1"/><text x="65.5909%" y="143.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="65.3409%" y="117" width="0.5682%" height="15" fill="rgb(210,195,18)" fg:x="115" fg:w="1"/><text x="65.5909%" y="127.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.57%)</title><rect x="65.9091%" y="117" width="0.5682%" height="15" fill="rgb(249,80,12)" fg:x="116" fg:w="1"/><text x="66.1591%" y="127.50"></text></g><g><title>serde_json::read::next_or_eof (1 samples, 0.57%)</title><rect x="65.9091%" y="101" width="0.5682%" height="15" fill="rgb(221,65,9)" fg:x="116" fg:w="1"/><text x="66.1591%" y="111.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="65.9091%" y="85" width="0.5682%" height="15" fill="rgb(235,49,36)" fg:x="116" fg:w="1"/><text x="66.1591%" y="95.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="65.9091%" y="69" width="0.5682%" height="15" fill="rgb(225,32,20)" fg:x="116" fg:w="1"/><text x="66.1591%" y="79.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (34 samples, 19.32%)</title><rect x="47.7273%" y="165" width="19.3182%" height="15" fill="rgb(215,141,46)" fg:x="84" fg:w="34"/><text x="47.9773%" y="175.50">&lt;core::marker::PhantomData&lt;T&gt; ..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (34 samples, 19.32%)</title><rect x="47.7273%" y="149" width="19.3182%" height="15" fill="rgb(250,160,47)" fg:x="84" fg:w="34"/><text x="47.9773%" y="159.50">&lt;serde_json::value::de::&lt;impl ..</text></g><g><title>serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (2 samples, 1.14%)</title><rect x="65.9091%" y="133" width="1.1364%" height="15" fill="rgb(216,222,40)" fg:x="116" fg:w="2"/><text x="66.1591%" y="143.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.57%)</title><rect x="66.4773%" y="117" width="0.5682%" height="15" fill="rgb(234,217,39)" fg:x="117" fg:w="1"/><text x="66.7273%" y="127.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.57%)</title><rect x="66.4773%" y="101" width="0.5682%" height="15" fill="rgb(207,178,40)" fg:x="117" fg:w="1"/><text x="66.7273%" y="111.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.57%)</title><rect x="66.4773%" y="85" width="0.5682%" height="15" fill="rgb(221,136,13)" fg:x="117" fg:w="1"/><text x="66.7273%" y="95.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (36 samples, 20.45%)</title><rect x="47.7273%" y="181" width="20.4545%" height="15" fill="rgb(249,199,10)" fg:x="84" fg:w="36"/><text x="47.9773%" y="191.50">&lt;core::marker::PhantomData&lt;T&gt; as..</text></g><g><title>szone_malloc_should_clear (2 samples, 1.14%)</title><rect x="67.0455%" y="165" width="1.1364%" height="15" fill="rgb(249,222,13)" fg:x="118" fg:w="2"/><text x="67.2955%" y="175.50"></text></g><g><title>tiny_malloc_should_clear (2 samples, 1.14%)</title><rect x="67.0455%" y="149" width="1.1364%" height="15" fill="rgb(244,185,38)" fg:x="118" fg:w="2"/><text x="67.2955%" y="159.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 1.14%)</title><rect x="67.0455%" y="133" width="1.1364%" height="15" fill="rgb(236,202,9)" fg:x="118" fg:w="2"/><text x="67.2955%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.57%)</title><rect x="68.1818%" y="181" width="0.5682%" height="15" fill="rgb(250,229,37)" fg:x="120" fg:w="1"/><text x="68.4318%" y="191.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.57%)</title><rect x="68.1818%" y="165" width="0.5682%" height="15" fill="rgb(206,174,23)" fg:x="120" fg:w="1"/><text x="68.4318%" y="175.50"></text></g><g><title>serde_json::read::next_or_eof (1 samples, 0.57%)</title><rect x="68.1818%" y="149" width="0.5682%" height="15" fill="rgb(211,33,43)" fg:x="120" fg:w="1"/><text x="68.4318%" y="159.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="68.1818%" y="133" width="0.5682%" height="15" fill="rgb(245,58,50)" fg:x="120" fg:w="1"/><text x="68.4318%" y="143.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="68.1818%" y="117" width="0.5682%" height="15" fill="rgb(244,68,36)" fg:x="120" fg:w="1"/><text x="68.4318%" y="127.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.57%)</title><rect x="68.1818%" y="101" width="0.5682%" height="15" fill="rgb(232,229,15)" fg:x="120" fg:w="1"/><text x="68.4318%" y="111.50"></text></g><g><title>serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (3 samples, 1.70%)</title><rect x="68.7500%" y="181" width="1.7045%" height="15" fill="rgb(254,30,23)" fg:x="121" fg:w="3"/><text x="69.0000%" y="191.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (3 samples, 1.70%)</title><rect x="68.7500%" y="165" width="1.7045%" height="15" fill="rgb(235,160,14)" fg:x="121" fg:w="3"/><text x="69.0000%" y="175.50"></text></g><g><title>serde_json::read::next_or_eof (2 samples, 1.14%)</title><rect x="69.3182%" y="149" width="1.1364%" height="15" fill="rgb(212,155,44)" fg:x="122" fg:w="2"/><text x="69.5682%" y="159.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="69.8864%" y="133" width="0.5682%" height="15" fill="rgb(226,2,50)" fg:x="123" fg:w="1"/><text x="70.1364%" y="143.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="69.8864%" y="117" width="0.5682%" height="15" fill="rgb(234,177,6)" fg:x="123" fg:w="1"/><text x="70.1364%" y="127.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (57 samples, 32.39%)</title><rect x="38.6364%" y="213" width="32.3864%" height="15" fill="rgb(217,24,9)" fg:x="68" fg:w="57"/><text x="38.8864%" y="223.50">&lt;core::marker::PhantomData&lt;T&gt; as serde::de::Deserial..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (41 samples, 23.30%)</title><rect x="47.7273%" y="197" width="23.2955%" height="15" fill="rgb(220,13,46)" fg:x="84" fg:w="41"/><text x="47.9773%" y="207.50">&lt;serde_json::value::de::&lt;impl serde::..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (1 samples, 0.57%)</title><rect x="70.4545%" y="181" width="0.5682%" height="15" fill="rgb(239,221,27)" fg:x="124" fg:w="1"/><text x="70.7045%" y="191.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="70.4545%" y="165" width="0.5682%" height="15" fill="rgb(222,198,25)" fg:x="124" fg:w="1"/><text x="70.7045%" y="175.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="70.4545%" y="149" width="0.5682%" height="15" fill="rgb(211,99,13)" fg:x="124" fg:w="1"/><text x="70.7045%" y="159.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (58 samples, 32.95%)</title><rect x="38.6364%" y="261" width="32.9545%" height="15" fill="rgb(232,111,31)" fg:x="68" fg:w="58"/><text x="38.8864%" y="271.50">&lt;core::marker::PhantomData&lt;T&gt; as serde::de::Deseriali..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (58 samples, 32.95%)</title><rect x="38.6364%" y="245" width="32.9545%" height="15" fill="rgb(245,82,37)" fg:x="68" fg:w="58"/><text x="38.8864%" y="255.50">&lt;core::marker::PhantomData&lt;T&gt; as serde::de::Deseriali..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (58 samples, 32.95%)</title><rect x="38.6364%" y="229" width="32.9545%" height="15" fill="rgb(227,149,46)" fg:x="68" fg:w="58"/><text x="38.8864%" y="239.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize ..</text></g><g><title>serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.57%)</title><rect x="71.0227%" y="213" width="0.5682%" height="15" fill="rgb(218,36,50)" fg:x="125" fg:w="1"/><text x="71.2727%" y="223.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.57%)</title><rect x="71.0227%" y="197" width="0.5682%" height="15" fill="rgb(226,80,48)" fg:x="125" fg:w="1"/><text x="71.2727%" y="207.50"></text></g><g><title>serde_json::read::next_or_eof (1 samples, 0.57%)</title><rect x="71.0227%" y="181" width="0.5682%" height="15" fill="rgb(238,224,15)" fg:x="125" fg:w="1"/><text x="71.2727%" y="191.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (64 samples, 36.36%)</title><rect x="35.7955%" y="325" width="36.3636%" height="15" fill="rgb(241,136,10)" fg:x="63" fg:w="64"/><text x="36.0455%" y="335.50">&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (64 samples, 36.36%)</title><rect x="35.7955%" y="309" width="36.3636%" height="15" fill="rgb(208,32,45)" fg:x="63" fg:w="64"/><text x="36.0455%" y="319.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for se..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (64 samples, 36.36%)</title><rect x="35.7955%" y="293" width="36.3636%" height="15" fill="rgb(207,135,9)" fg:x="63" fg:w="64"/><text x="36.0455%" y="303.50">&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (59 samples, 33.52%)</title><rect x="38.6364%" y="277" width="33.5227%" height="15" fill="rgb(206,86,44)" fg:x="68" fg:w="59"/><text x="38.8864%" y="287.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize f..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (1 samples, 0.57%)</title><rect x="71.5909%" y="261" width="0.5682%" height="15" fill="rgb(245,177,15)" fg:x="126" fg:w="1"/><text x="71.8409%" y="271.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="71.5909%" y="245" width="0.5682%" height="15" fill="rgb(206,64,50)" fg:x="126" fg:w="1"/><text x="71.8409%" y="255.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="71.5909%" y="229" width="0.5682%" height="15" fill="rgb(234,36,40)" fg:x="126" fg:w="1"/><text x="71.8409%" y="239.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.57%)</title><rect x="72.1591%" y="325" width="0.5682%" height="15" fill="rgb(213,64,8)" fg:x="127" fg:w="1"/><text x="72.4091%" y="335.50"></text></g><g><title>serde_json::read::next_or_eof (1 samples, 0.57%)</title><rect x="72.1591%" y="309" width="0.5682%" height="15" fill="rgb(210,75,36)" fg:x="127" fg:w="1"/><text x="72.4091%" y="319.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="72.1591%" y="293" width="0.5682%" height="15" fill="rgb(229,88,21)" fg:x="127" fg:w="1"/><text x="72.4091%" y="303.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="72.1591%" y="277" width="0.5682%" height="15" fill="rgb(252,204,47)" fg:x="127" fg:w="1"/><text x="72.4091%" y="287.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="72.7273%" y="325" width="0.5682%" height="15" fill="rgb(208,77,27)" fg:x="128" fg:w="1"/><text x="72.9773%" y="335.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="72.7273%" y="309" width="0.5682%" height="15" fill="rgb(221,76,26)" fg:x="128" fg:w="1"/><text x="72.9773%" y="319.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_ident (1 samples, 0.57%)</title><rect x="73.2955%" y="325" width="0.5682%" height="15" fill="rgb(225,139,18)" fg:x="129" fg:w="1"/><text x="73.5455%" y="335.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="73.2955%" y="309" width="0.5682%" height="15" fill="rgb(230,137,11)" fg:x="129" fg:w="1"/><text x="73.5455%" y="319.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="73.2955%" y="293" width="0.5682%" height="15" fill="rgb(212,28,1)" fg:x="129" fg:w="1"/><text x="73.5455%" y="303.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.57%)</title><rect x="73.8636%" y="325" width="0.5682%" height="15" fill="rgb(248,164,17)" fg:x="130" fg:w="1"/><text x="74.1136%" y="335.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="73.8636%" y="309" width="0.5682%" height="15" fill="rgb(222,171,42)" fg:x="130" fg:w="1"/><text x="74.1136%" y="319.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (70 samples, 39.77%)</title><rect x="35.2273%" y="341" width="39.7727%" height="15" fill="rgb(243,84,45)" fg:x="62" fg:w="70"/><text x="35.4773%" y="351.50">&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::des..</text></g><g><title>szone_malloc_should_clear (1 samples, 0.57%)</title><rect x="74.4318%" y="325" width="0.5682%" height="15" fill="rgb(252,49,23)" fg:x="131" fg:w="1"/><text x="74.6818%" y="335.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.57%)</title><rect x="74.4318%" y="309" width="0.5682%" height="15" fill="rgb(215,19,7)" fg:x="131" fg:w="1"/><text x="74.6818%" y="319.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.57%)</title><rect x="74.4318%" y="293" width="0.5682%" height="15" fill="rgb(238,81,41)" fg:x="131" fg:w="1"/><text x="74.6818%" y="303.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.57%)</title><rect x="74.4318%" y="277" width="0.5682%" height="15" fill="rgb(210,199,37)" fg:x="131" fg:w="1"/><text x="74.6818%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 2.27%)</title><rect x="75.0000%" y="341" width="2.2727%" height="15" fill="rgb(244,192,49)" fg:x="132" fg:w="4"/><text x="75.2500%" y="351.50">&lt;..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (4 samples, 2.27%)</title><rect x="75.0000%" y="325" width="2.2727%" height="15" fill="rgb(226,211,11)" fg:x="132" fg:w="4"/><text x="75.2500%" y="335.50">&lt;..</text></g><g><title>serde_json::read::next_or_eof (3 samples, 1.70%)</title><rect x="75.5682%" y="309" width="1.7045%" height="15" fill="rgb(236,162,54)" fg:x="133" fg:w="3"/><text x="75.8182%" y="319.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.70%)</title><rect x="75.5682%" y="293" width="1.7045%" height="15" fill="rgb(220,229,9)" fg:x="133" fg:w="3"/><text x="75.8182%" y="303.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (3 samples, 1.70%)</title><rect x="75.5682%" y="277" width="1.7045%" height="15" fill="rgb(250,87,22)" fg:x="133" fg:w="3"/><text x="75.8182%" y="287.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (79 samples, 44.89%)</title><rect x="34.6591%" y="373" width="44.8864%" height="15" fill="rgb(239,43,17)" fg:x="61" fg:w="79"/><text x="34.9091%" y="383.50">&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (78 samples, 44.32%)</title><rect x="35.2273%" y="357" width="44.3182%" height="15" fill="rgb(231,177,25)" fg:x="62" fg:w="78"/><text x="35.4773%" y="367.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::valu..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 2.27%)</title><rect x="77.2727%" y="341" width="2.2727%" height="15" fill="rgb(219,179,1)" fg:x="136" fg:w="4"/><text x="77.5227%" y="351.50">a..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (4 samples, 2.27%)</title><rect x="77.2727%" y="325" width="2.2727%" height="15" fill="rgb(238,219,53)" fg:x="136" fg:w="4"/><text x="77.5227%" y="335.50">a..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 1.14%)</title><rect x="78.4091%" y="309" width="1.1364%" height="15" fill="rgb(232,167,36)" fg:x="138" fg:w="2"/><text x="78.6591%" y="319.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (80 samples, 45.45%)</title><rect x="34.6591%" y="389" width="45.4545%" height="15" fill="rgb(244,19,51)" fg:x="61" fg:w="80"/><text x="34.9091%" y="399.50">&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.57%)</title><rect x="79.5455%" y="373" width="0.5682%" height="15" fill="rgb(224,6,22)" fg:x="140" fg:w="1"/><text x="79.7955%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.57%)</title><rect x="79.5455%" y="357" width="0.5682%" height="15" fill="rgb(224,145,5)" fg:x="140" fg:w="1"/><text x="79.7955%" y="367.50"></text></g><g><title>_realloc (1 samples, 0.57%)</title><rect x="79.5455%" y="341" width="0.5682%" height="15" fill="rgb(234,130,49)" fg:x="140" fg:w="1"/><text x="79.7955%" y="351.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.57%)</title><rect x="79.5455%" y="325" width="0.5682%" height="15" fill="rgb(254,6,2)" fg:x="140" fg:w="1"/><text x="79.7955%" y="335.50"></text></g><g><title>szone_realloc (1 samples, 0.57%)</title><rect x="79.5455%" y="309" width="0.5682%" height="15" fill="rgb(208,96,46)" fg:x="140" fg:w="1"/><text x="79.7955%" y="319.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.57%)</title><rect x="79.5455%" y="293" width="0.5682%" height="15" fill="rgb(239,3,39)" fg:x="140" fg:w="1"/><text x="79.7955%" y="303.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.57%)</title><rect x="79.5455%" y="277" width="0.5682%" height="15" fill="rgb(233,210,1)" fg:x="140" fg:w="1"/><text x="79.7955%" y="287.50"></text></g><g><title>small_malloc_from_free_list (1 samples, 0.57%)</title><rect x="79.5455%" y="261" width="0.5682%" height="15" fill="rgb(244,137,37)" fg:x="140" fg:w="1"/><text x="79.7955%" y="271.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (1 samples, 0.57%)</title><rect x="79.5455%" y="245" width="0.5682%" height="15" fill="rgb(240,136,2)" fg:x="140" fg:w="1"/><text x="79.7955%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.57%)</title><rect x="80.1136%" y="389" width="0.5682%" height="15" fill="rgb(239,18,37)" fg:x="141" fg:w="1"/><text x="80.3636%" y="399.50"></text></g><g><title>&lt;query_planner::planner::plan_nodes::FetchNode as query_plan_executor::ExecutableFetchNode&gt;::execute_for_projected_representations::_{{closure}} (96 samples, 54.55%)</title><rect x="26.7045%" y="501" width="54.5455%" height="15" fill="rgb(218,185,22)" fg:x="47" fg:w="96"/><text x="26.9545%" y="511.50">&lt;query_planner::planner::plan_nodes::FetchNode as query_plan_executor::ExecutableFetchNode..</text></g><g><title>query_plan_executor::executors::map::SubgraphExecutorMap::execute::_{{closure}} (96 samples, 54.55%)</title><rect x="26.7045%" y="485" width="54.5455%" height="15" fill="rgb(225,218,4)" fg:x="47" fg:w="96"/><text x="26.9545%" y="495.50">query_plan_executor::executors::map::SubgraphExecutorMap::execute::_{{closure}}</text></g><g><title>&lt;query_plan_executor::executors::http::HTTPSubgraphExecutor as query_plan_executor::executors::common::SubgraphExecutor&gt;::execute::_{{closure}} (94 samples, 53.41%)</title><rect x="27.8409%" y="469" width="53.4091%" height="15" fill="rgb(230,182,32)" fg:x="49" fg:w="94"/><text x="28.0909%" y="479.50">&lt;query_plan_executor::executors::http::HTTPSubgraphExecutor as query_plan_executor::exec..</text></g><g><title>serde_json::de::from_reader (82 samples, 46.59%)</title><rect x="34.6591%" y="453" width="46.5909%" height="15" fill="rgb(242,56,43)" fg:x="61" fg:w="82"/><text x="34.9091%" y="463.50">serde_json::de::from_reader</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (82 samples, 46.59%)</title><rect x="34.6591%" y="437" width="46.5909%" height="15" fill="rgb(233,99,24)" fg:x="61" fg:w="82"/><text x="34.9091%" y="447.50">&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deseriali..</text></g><g><title>serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (82 samples, 46.59%)</title><rect x="34.6591%" y="421" width="46.5909%" height="15" fill="rgb(234,209,42)" fg:x="61" fg:w="82"/><text x="34.9091%" y="431.50">serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (82 samples, 46.59%)</title><rect x="34.6591%" y="405" width="46.5909%" height="15" fill="rgb(227,7,12)" fg:x="61" fg:w="82"/><text x="34.9091%" y="415.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.57%)</title><rect x="80.6818%" y="389" width="0.5682%" height="15" fill="rgb(245,203,43)" fg:x="142" fg:w="1"/><text x="80.9318%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (1 samples, 0.57%)</title><rect x="80.6818%" y="373" width="0.5682%" height="15" fill="rgb(238,205,33)" fg:x="142" fg:w="1"/><text x="80.9318%" y="383.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.57%)</title><rect x="80.6818%" y="357" width="0.5682%" height="15" fill="rgb(231,56,7)" fg:x="142" fg:w="1"/><text x="80.9318%" y="367.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.57%)</title><rect x="80.6818%" y="341" width="0.5682%" height="15" fill="rgb(244,186,29)" fg:x="142" fg:w="1"/><text x="80.9318%" y="351.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.57%)</title><rect x="80.6818%" y="325" width="0.5682%" height="15" fill="rgb(234,111,31)" fg:x="142" fg:w="1"/><text x="80.9318%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (1 samples, 0.57%)</title><rect x="81.2500%" y="341" width="0.5682%" height="15" fill="rgb(241,149,10)" fg:x="143" fg:w="1"/><text x="81.5000%" y="351.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="81.2500%" y="325" width="0.5682%" height="15" fill="rgb(249,206,44)" fg:x="143" fg:w="1"/><text x="81.5000%" y="335.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="81.2500%" y="309" width="0.5682%" height="15" fill="rgb(251,153,30)" fg:x="143" fg:w="1"/><text x="81.5000%" y="319.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (102 samples, 57.95%)</title><rect x="25.0000%" y="549" width="57.9545%" height="15" fill="rgb(239,152,38)" fg:x="44" fg:w="102"/><text x="25.2500%" y="559.50">futures_util::stream::stream::StreamExt::poll_next_unpin</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (101 samples, 57.39%)</title><rect x="25.5682%" y="533" width="57.3864%" height="15" fill="rgb(249,139,47)" fg:x="45" fg:w="101"/><text x="25.8182%" y="543.50">&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (100 samples, 56.82%)</title><rect x="26.1364%" y="517" width="56.8182%" height="15" fill="rgb(244,64,35)" fg:x="46" fg:w="100"/><text x="26.3864%" y="527.50">&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;query_planner::planner::plan_nodes::FetchNode as query_plan_executor::ExecutableFetchNode&gt;::execute_for_root::_{{closure}} (3 samples, 1.70%)</title><rect x="81.2500%" y="501" width="1.7045%" height="15" fill="rgb(216,46,15)" fg:x="143" fg:w="3"/><text x="81.5000%" y="511.50"></text></g><g><title>query_plan_executor::executors::map::SubgraphExecutorMap::execute::_{{closure}} (3 samples, 1.70%)</title><rect x="81.2500%" y="485" width="1.7045%" height="15" fill="rgb(250,74,19)" fg:x="143" fg:w="3"/><text x="81.5000%" y="495.50"></text></g><g><title>&lt;query_plan_executor::executors::http::HTTPSubgraphExecutor as query_plan_executor::executors::common::SubgraphExecutor&gt;::execute::_{{closure}} (3 samples, 1.70%)</title><rect x="81.2500%" y="469" width="1.7045%" height="15" fill="rgb(249,42,33)" fg:x="143" fg:w="3"/><text x="81.5000%" y="479.50"></text></g><g><title>serde_json::de::from_reader (3 samples, 1.70%)</title><rect x="81.2500%" y="453" width="1.7045%" height="15" fill="rgb(242,149,17)" fg:x="143" fg:w="3"/><text x="81.5000%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 1.70%)</title><rect x="81.2500%" y="437" width="1.7045%" height="15" fill="rgb(244,29,21)" fg:x="143" fg:w="3"/><text x="81.5000%" y="447.50"></text></g><g><title>serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (3 samples, 1.70%)</title><rect x="81.2500%" y="421" width="1.7045%" height="15" fill="rgb(220,130,37)" fg:x="143" fg:w="3"/><text x="81.5000%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 1.70%)</title><rect x="81.2500%" y="405" width="1.7045%" height="15" fill="rgb(211,67,2)" fg:x="143" fg:w="3"/><text x="81.5000%" y="415.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 1.70%)</title><rect x="81.2500%" y="389" width="1.7045%" height="15" fill="rgb(235,68,52)" fg:x="143" fg:w="3"/><text x="81.5000%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 1.70%)</title><rect x="81.2500%" y="373" width="1.7045%" height="15" fill="rgb(246,142,3)" fg:x="143" fg:w="3"/><text x="81.5000%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 1.70%)</title><rect x="81.2500%" y="357" width="1.7045%" height="15" fill="rgb(241,25,7)" fg:x="143" fg:w="3"/><text x="81.5000%" y="367.50"></text></g><g><title>serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (2 samples, 1.14%)</title><rect x="81.8182%" y="341" width="1.1364%" height="15" fill="rgb(242,119,39)" fg:x="144" fg:w="2"/><text x="82.0682%" y="351.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2 samples, 1.14%)</title><rect x="81.8182%" y="325" width="1.1364%" height="15" fill="rgb(241,98,45)" fg:x="144" fg:w="2"/><text x="82.0682%" y="335.50"></text></g><g><title>serde_json::read::next_or_eof (2 samples, 1.14%)</title><rect x="81.8182%" y="309" width="1.1364%" height="15" fill="rgb(254,28,30)" fg:x="144" fg:w="2"/><text x="82.0682%" y="319.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.57%)</title><rect x="82.3864%" y="293" width="0.5682%" height="15" fill="rgb(241,142,54)" fg:x="145" fg:w="1"/><text x="82.6364%" y="303.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (1 samples, 0.57%)</title><rect x="82.3864%" y="277" width="0.5682%" height="15" fill="rgb(222,85,15)" fg:x="145" fg:w="1"/><text x="82.6364%" y="287.50"></text></g><g><title>&lt;query_planner::planner::plan_nodes::ParallelNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}}::_{{closure}}::_{{closure}} (1 samples, 0.57%)</title><rect x="83.5227%" y="501" width="0.5682%" height="15" fill="rgb(210,85,47)" fg:x="147" fg:w="1"/><text x="83.7727%" y="511.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires (1 samples, 0.57%)</title><rect x="83.5227%" y="485" width="0.5682%" height="15" fill="rgb(224,206,25)" fg:x="147" fg:w="1"/><text x="83.7727%" y="495.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires_map_mut (1 samples, 0.57%)</title><rect x="83.5227%" y="469" width="0.5682%" height="15" fill="rgb(243,201,19)" fg:x="147" fg:w="1"/><text x="83.7727%" y="479.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires_map_mut (1 samples, 0.57%)</title><rect x="83.5227%" y="453" width="0.5682%" height="15" fill="rgb(236,59,4)" fg:x="147" fg:w="1"/><text x="83.7727%" y="463.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge (1 samples, 0.57%)</title><rect x="84.0909%" y="501" width="0.5682%" height="15" fill="rgb(254,179,45)" fg:x="148" fg:w="1"/><text x="84.3409%" y="511.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge_objects (1 samples, 0.57%)</title><rect x="84.0909%" y="485" width="0.5682%" height="15" fill="rgb(226,14,10)" fg:x="148" fg:w="1"/><text x="84.3409%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.57%)</title><rect x="84.0909%" y="469" width="0.5682%" height="15" fill="rgb(244,27,41)" fg:x="148" fg:w="1"/><text x="84.3409%" y="479.50"></text></g><g><title>free_tiny (1 samples, 0.57%)</title><rect x="84.0909%" y="453" width="0.5682%" height="15" fill="rgb(235,35,32)" fg:x="148" fg:w="1"/><text x="84.3409%" y="463.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (1 samples, 0.57%)</title><rect x="86.3636%" y="421" width="0.5682%" height="15" fill="rgb(218,68,31)" fg:x="152" fg:w="1"/><text x="86.6136%" y="431.50"></text></g><g><title>&lt;query_planner::planner::plan_nodes::ParallelNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}}::_{{closure}}::_{{closure}} (2 samples, 1.14%)</title><rect x="86.3636%" y="485" width="1.1364%" height="15" fill="rgb(207,120,37)" fg:x="152" fg:w="2"/><text x="86.6136%" y="495.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires (2 samples, 1.14%)</title><rect x="86.3636%" y="469" width="1.1364%" height="15" fill="rgb(227,98,0)" fg:x="152" fg:w="2"/><text x="86.6136%" y="479.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires_map_mut (2 samples, 1.14%)</title><rect x="86.3636%" y="453" width="1.1364%" height="15" fill="rgb(207,7,3)" fg:x="152" fg:w="2"/><text x="86.6136%" y="463.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires_map_mut (2 samples, 1.14%)</title><rect x="86.3636%" y="437" width="1.1364%" height="15" fill="rgb(206,98,19)" fg:x="152" fg:w="2"/><text x="86.6136%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.57%)</title><rect x="86.9318%" y="421" width="0.5682%" height="15" fill="rgb(217,5,26)" fg:x="153" fg:w="1"/><text x="87.1818%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.57%)</title><rect x="86.9318%" y="405" width="0.5682%" height="15" fill="rgb(235,190,38)" fg:x="153" fg:w="1"/><text x="87.1818%" y="415.50"></text></g><g><title>_realloc (1 samples, 0.57%)</title><rect x="86.9318%" y="389" width="0.5682%" height="15" fill="rgb(247,86,24)" fg:x="153" fg:w="1"/><text x="87.1818%" y="399.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.57%)</title><rect x="86.9318%" y="373" width="0.5682%" height="15" fill="rgb(205,101,16)" fg:x="153" fg:w="1"/><text x="87.1818%" y="383.50"></text></g><g><title>szone_realloc (1 samples, 0.57%)</title><rect x="86.9318%" y="357" width="0.5682%" height="15" fill="rgb(246,168,33)" fg:x="153" fg:w="1"/><text x="87.1818%" y="367.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.57%)</title><rect x="86.9318%" y="341" width="0.5682%" height="15" fill="rgb(231,114,1)" fg:x="153" fg:w="1"/><text x="87.1818%" y="351.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.57%)</title><rect x="86.9318%" y="325" width="0.5682%" height="15" fill="rgb(207,184,53)" fg:x="153" fg:w="1"/><text x="87.1818%" y="335.50"></text></g><g><title>small_malloc_from_free_list (1 samples, 0.57%)</title><rect x="86.9318%" y="309" width="0.5682%" height="15" fill="rgb(224,95,51)" fg:x="153" fg:w="1"/><text x="87.1818%" y="319.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (1 samples, 0.57%)</title><rect x="86.9318%" y="293" width="0.5682%" height="15" fill="rgb(212,188,45)" fg:x="153" fg:w="1"/><text x="87.1818%" y="303.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (1 samples, 0.57%)</title><rect x="87.5000%" y="485" width="0.5682%" height="15" fill="rgb(223,154,38)" fg:x="154" fg:w="1"/><text x="87.7500%" y="495.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge (1 samples, 0.57%)</title><rect x="88.0682%" y="485" width="0.5682%" height="15" fill="rgb(251,22,52)" fg:x="155" fg:w="1"/><text x="88.3182%" y="495.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge_objects (1 samples, 0.57%)</title><rect x="88.0682%" y="469" width="0.5682%" height="15" fill="rgb(229,209,22)" fg:x="155" fg:w="1"/><text x="88.3182%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.57%)</title><rect x="88.0682%" y="453" width="0.5682%" height="15" fill="rgb(234,138,34)" fg:x="155" fg:w="1"/><text x="88.3182%" y="463.50"></text></g><g><title>free_tiny (1 samples, 0.57%)</title><rect x="88.0682%" y="437" width="0.5682%" height="15" fill="rgb(212,95,11)" fg:x="155" fg:w="1"/><text x="88.3182%" y="447.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.57%)</title><rect x="88.0682%" y="421" width="0.5682%" height="15" fill="rgb(240,179,47)" fg:x="155" fg:w="1"/><text x="88.3182%" y="431.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (1 samples, 0.57%)</title><rect x="88.6364%" y="469" width="0.5682%" height="15" fill="rgb(240,163,11)" fg:x="156" fg:w="1"/><text x="88.8864%" y="479.50"></text></g><g><title>query_plan_executor::traverse_and_callback (12 samples, 6.82%)</title><rect x="82.9545%" y="549" width="6.8182%" height="15" fill="rgb(236,37,12)" fg:x="146" fg:w="12"/><text x="83.2045%" y="559.50">query_pla..</text></g><g><title>query_plan_executor::traverse_and_callback (12 samples, 6.82%)</title><rect x="82.9545%" y="533" width="6.8182%" height="15" fill="rgb(232,164,16)" fg:x="146" fg:w="12"/><text x="83.2045%" y="543.50">query_pla..</text></g><g><title>query_plan_executor::traverse_and_callback (11 samples, 6.25%)</title><rect x="83.5227%" y="517" width="6.2500%" height="15" fill="rgb(244,205,15)" fg:x="147" fg:w="11"/><text x="83.7727%" y="527.50">query_pl..</text></g><g><title>query_plan_executor::traverse_and_callback (9 samples, 5.11%)</title><rect x="84.6591%" y="501" width="5.1136%" height="15" fill="rgb(223,117,47)" fg:x="149" fg:w="9"/><text x="84.9091%" y="511.50">query_..</text></g><g><title>query_plan_executor::traverse_and_callback (2 samples, 1.14%)</title><rect x="88.6364%" y="485" width="1.1364%" height="15" fill="rgb(244,107,35)" fg:x="156" fg:w="2"/><text x="88.8864%" y="495.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge (1 samples, 0.57%)</title><rect x="89.2045%" y="469" width="0.5682%" height="15" fill="rgb(205,140,8)" fg:x="157" fg:w="1"/><text x="89.4545%" y="479.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge_objects (1 samples, 0.57%)</title><rect x="89.2045%" y="453" width="0.5682%" height="15" fill="rgb(228,84,46)" fg:x="157" fg:w="1"/><text x="89.4545%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.57%)</title><rect x="89.2045%" y="437" width="0.5682%" height="15" fill="rgb(254,188,9)" fg:x="157" fg:w="1"/><text x="89.4545%" y="447.50"></text></g><g><title>&lt;query_planner::planner::plan_nodes::QueryPlan as query_plan_executor::ExecutableQueryPlan&gt;::execute::_{{closure}} (117 samples, 66.48%)</title><rect x="23.8636%" y="629" width="66.4773%" height="15" fill="rgb(206,112,54)" fg:x="42" fg:w="117"/><text x="24.1136%" y="639.50">&lt;query_planner::planner::plan_nodes::QueryPlan as query_plan_executor::ExecutableQueryPlan&gt;::execute::_{{closu..</text></g><g><title>&lt;query_planner::planner::plan_nodes::PlanNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}} (117 samples, 66.48%)</title><rect x="23.8636%" y="613" width="66.4773%" height="15" fill="rgb(216,84,49)" fg:x="42" fg:w="117"/><text x="24.1136%" y="623.50">&lt;query_planner::planner::plan_nodes::PlanNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure..</text></g><g><title>&lt;query_planner::planner::plan_nodes::SequenceNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}} (117 samples, 66.48%)</title><rect x="23.8636%" y="597" width="66.4773%" height="15" fill="rgb(214,194,35)" fg:x="42" fg:w="117"/><text x="24.1136%" y="607.50">&lt;query_planner::planner::plan_nodes::SequenceNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{clo..</text></g><g><title>&lt;query_planner::planner::plan_nodes::PlanNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}} (117 samples, 66.48%)</title><rect x="23.8636%" y="581" width="66.4773%" height="15" fill="rgb(249,28,3)" fg:x="42" fg:w="117"/><text x="24.1136%" y="591.50">&lt;query_planner::planner::plan_nodes::PlanNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure..</text></g><g><title>&lt;query_planner::planner::plan_nodes::ParallelNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}} (117 samples, 66.48%)</title><rect x="23.8636%" y="565" width="66.4773%" height="15" fill="rgb(222,56,52)" fg:x="42" fg:w="117"/><text x="24.1136%" y="575.50">&lt;query_planner::planner::plan_nodes::ParallelNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{clo..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.57%)</title><rect x="89.7727%" y="549" width="0.5682%" height="15" fill="rgb(245,217,50)" fg:x="158" fg:w="1"/><text x="90.0227%" y="559.50"></text></g><g><title>clock_gettime (1 samples, 0.57%)</title><rect x="89.7727%" y="533" width="0.5682%" height="15" fill="rgb(213,201,24)" fg:x="158" fg:w="1"/><text x="90.0227%" y="543.50"></text></g><g><title>mach_absolute_time (1 samples, 0.57%)</title><rect x="89.7727%" y="517" width="0.5682%" height="15" fill="rgb(248,116,28)" fg:x="158" fg:w="1"/><text x="90.0227%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.57%)</title><rect x="90.3409%" y="517" width="0.5682%" height="15" fill="rgb(219,72,43)" fg:x="159" fg:w="1"/><text x="90.5909%" y="527.50"></text></g><g><title>free_tiny (1 samples, 0.57%)</title><rect x="90.3409%" y="501" width="0.5682%" height="15" fill="rgb(209,138,14)" fg:x="159" fg:w="1"/><text x="90.5909%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.57%)</title><rect x="91.4773%" y="437" width="0.5682%" height="15" fill="rgb(222,18,33)" fg:x="161" fg:w="1"/><text x="91.7273%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.57%)</title><rect x="92.0455%" y="421" width="0.5682%" height="15" fill="rgb(213,199,7)" fg:x="162" fg:w="1"/><text x="92.2955%" y="431.50"></text></g><g><title>free_tiny (1 samples, 0.57%)</title><rect x="92.0455%" y="405" width="0.5682%" height="15" fill="rgb(250,110,10)" fg:x="162" fg:w="1"/><text x="92.2955%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 1.14%)</title><rect x="92.0455%" y="437" width="1.1364%" height="15" fill="rgb(248,123,6)" fg:x="162" fg:w="2"/><text x="92.2955%" y="447.50"></text></g><g><title>free_tiny (1 samples, 0.57%)</title><rect x="92.6136%" y="421" width="0.5682%" height="15" fill="rgb(206,91,31)" fg:x="163" fg:w="1"/><text x="92.8636%" y="431.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.57%)</title><rect x="92.6136%" y="405" width="0.5682%" height="15" fill="rgb(211,154,13)" fg:x="163" fg:w="1"/><text x="92.8636%" y="415.50"></text></g><g><title>tiny_free_list_remove_ptr (1 samples, 0.57%)</title><rect x="92.6136%" y="389" width="0.5682%" height="15" fill="rgb(225,148,7)" fg:x="163" fg:w="1"/><text x="92.8636%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 2.84%)</title><rect x="91.4773%" y="469" width="2.8409%" height="15" fill="rgb(220,160,43)" fg:x="161" fg:w="5"/><text x="91.7273%" y="479.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 2.84%)</title><rect x="91.4773%" y="453" width="2.8409%" height="15" fill="rgb(213,52,39)" fg:x="161" fg:w="5"/><text x="91.7273%" y="463.50">co..</text></g><g><title>free_tiny (2 samples, 1.14%)</title><rect x="93.1818%" y="437" width="1.1364%" height="15" fill="rgb(243,137,7)" fg:x="164" fg:w="2"/><text x="93.4318%" y="447.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.57%)</title><rect x="93.7500%" y="421" width="0.5682%" height="15" fill="rgb(230,79,13)" fg:x="165" fg:w="1"/><text x="94.0000%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (11 samples, 6.25%)</title><rect x="90.3409%" y="629" width="6.2500%" height="15" fill="rgb(247,105,23)" fg:x="159" fg:w="11"/><text x="90.5909%" y="639.50">core::pt..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (11 samples, 6.25%)</title><rect x="90.3409%" y="613" width="6.2500%" height="15" fill="rgb(223,179,41)" fg:x="159" fg:w="11"/><text x="90.5909%" y="623.50">core::me..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 6.25%)</title><rect x="90.3409%" y="597" width="6.2500%" height="15" fill="rgb(218,9,34)" fg:x="159" fg:w="11"/><text x="90.5909%" y="607.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 6.25%)</title><rect x="90.3409%" y="581" width="6.2500%" height="15" fill="rgb(222,106,8)" fg:x="159" fg:w="11"/><text x="90.5909%" y="591.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 6.25%)</title><rect x="90.3409%" y="565" width="6.2500%" height="15" fill="rgb(211,220,0)" fg:x="159" fg:w="11"/><text x="90.5909%" y="575.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 6.25%)</title><rect x="90.3409%" y="549" width="6.2500%" height="15" fill="rgb(229,52,16)" fg:x="159" fg:w="11"/><text x="90.5909%" y="559.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 6.25%)</title><rect x="90.3409%" y="533" width="6.2500%" height="15" fill="rgb(212,155,18)" fg:x="159" fg:w="11"/><text x="90.5909%" y="543.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 5.68%)</title><rect x="90.9091%" y="517" width="5.6818%" height="15" fill="rgb(242,21,14)" fg:x="160" fg:w="10"/><text x="91.1591%" y="527.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 5.68%)</title><rect x="90.9091%" y="501" width="5.6818%" height="15" fill="rgb(222,19,48)" fg:x="160" fg:w="10"/><text x="91.1591%" y="511.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 5.68%)</title><rect x="90.9091%" y="485" width="5.6818%" height="15" fill="rgb(232,45,27)" fg:x="160" fg:w="10"/><text x="91.1591%" y="495.50">core::p..</text></g><g><title>free_tiny (4 samples, 2.27%)</title><rect x="94.3182%" y="469" width="2.2727%" height="15" fill="rgb(249,103,42)" fg:x="166" fg:w="4"/><text x="94.5682%" y="479.50">f..</text></g><g><title>tiny_free_no_lock (3 samples, 1.70%)</title><rect x="94.8864%" y="453" width="1.7045%" height="15" fill="rgb(246,81,33)" fg:x="167" fg:w="3"/><text x="95.1364%" y="463.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.57%)</title><rect x="96.0227%" y="437" width="0.5682%" height="15" fill="rgb(252,33,42)" fg:x="169" fg:w="1"/><text x="96.2727%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.57%)</title><rect x="96.5909%" y="325" width="0.5682%" height="15" fill="rgb(209,212,41)" fg:x="170" fg:w="1"/><text x="96.8409%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.57%)</title><rect x="96.5909%" y="309" width="0.5682%" height="15" fill="rgb(207,154,6)" fg:x="170" fg:w="1"/><text x="96.8409%" y="319.50"></text></g><g><title>_realloc (1 samples, 0.57%)</title><rect x="96.5909%" y="293" width="0.5682%" height="15" fill="rgb(223,64,47)" fg:x="170" fg:w="1"/><text x="96.8409%" y="303.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.57%)</title><rect x="96.5909%" y="277" width="0.5682%" height="15" fill="rgb(211,161,38)" fg:x="170" fg:w="1"/><text x="96.8409%" y="287.50"></text></g><g><title>szone_realloc (1 samples, 0.57%)</title><rect x="96.5909%" y="261" width="0.5682%" height="15" fill="rgb(219,138,40)" fg:x="170" fg:w="1"/><text x="96.8409%" y="271.50"></text></g><g><title>_szone_free (1 samples, 0.57%)</title><rect x="96.5909%" y="245" width="0.5682%" height="15" fill="rgb(241,228,46)" fg:x="170" fg:w="1"/><text x="96.8409%" y="255.50"></text></g><g><title>madvise (1 samples, 0.57%)</title><rect x="96.5909%" y="229" width="0.5682%" height="15" fill="rgb(223,209,38)" fg:x="170" fg:w="1"/><text x="96.8409%" y="239.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (136 samples, 77.27%)</title><rect x="20.4545%" y="709" width="77.2727%" height="15" fill="rgb(236,164,45)" fg:x="36" fg:w="136"/><text x="20.7045%" y="719.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (136 samples, 77.27%)</title><rect x="20.4545%" y="693" width="77.2727%" height="15" fill="rgb(231,15,5)" fg:x="36" fg:w="136"/><text x="20.7045%" y="703.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;::call::_{{closure}} (132 samples, 75.00%)</title><rect x="22.7273%" y="677" width="75.0000%" height="15" fill="rgb(252,35,15)" fg:x="40" fg:w="132"/><text x="22.9773%" y="687.50">&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Bo..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (132 samples, 75.00%)</title><rect x="22.7273%" y="661" width="75.0000%" height="15" fill="rgb(248,181,18)" fg:x="40" fg:w="132"/><text x="22.9773%" y="671.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;gateway::pipeline::execution_service::ExecutionService as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;::call::_{{closure}} (132 samples, 75.00%)</title><rect x="22.7273%" y="645" width="75.0000%" height="15" fill="rgb(233,39,42)" fg:x="40" fg:w="132"/><text x="22.9773%" y="655.50">&lt;gateway::pipeline::execution_service::ExecutionService as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Bod..</text></g><g><title>query_plan_executor::projection::project_by_operation (2 samples, 1.14%)</title><rect x="96.5909%" y="629" width="1.1364%" height="15" fill="rgb(238,110,33)" fg:x="170" fg:w="2"/><text x="96.8409%" y="639.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (2 samples, 1.14%)</title><rect x="96.5909%" y="613" width="1.1364%" height="15" fill="rgb(233,195,10)" fg:x="170" fg:w="2"/><text x="96.8409%" y="623.50"></text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (2 samples, 1.14%)</title><rect x="96.5909%" y="597" width="1.1364%" height="15" fill="rgb(254,105,3)" fg:x="170" fg:w="2"/><text x="96.8409%" y="607.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (2 samples, 1.14%)</title><rect x="96.5909%" y="581" width="1.1364%" height="15" fill="rgb(221,225,9)" fg:x="170" fg:w="2"/><text x="96.8409%" y="591.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (2 samples, 1.14%)</title><rect x="96.5909%" y="565" width="1.1364%" height="15" fill="rgb(224,227,45)" fg:x="170" fg:w="2"/><text x="96.8409%" y="575.50"></text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (2 samples, 1.14%)</title><rect x="96.5909%" y="549" width="1.1364%" height="15" fill="rgb(229,198,43)" fg:x="170" fg:w="2"/><text x="96.8409%" y="559.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (2 samples, 1.14%)</title><rect x="96.5909%" y="533" width="1.1364%" height="15" fill="rgb(206,209,35)" fg:x="170" fg:w="2"/><text x="96.8409%" y="543.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (2 samples, 1.14%)</title><rect x="96.5909%" y="517" width="1.1364%" height="15" fill="rgb(245,195,53)" fg:x="170" fg:w="2"/><text x="96.8409%" y="527.50"></text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (2 samples, 1.14%)</title><rect x="96.5909%" y="501" width="1.1364%" height="15" fill="rgb(240,92,26)" fg:x="170" fg:w="2"/><text x="96.8409%" y="511.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (2 samples, 1.14%)</title><rect x="96.5909%" y="485" width="1.1364%" height="15" fill="rgb(207,40,23)" fg:x="170" fg:w="2"/><text x="96.8409%" y="495.50"></text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (2 samples, 1.14%)</title><rect x="96.5909%" y="469" width="1.1364%" height="15" fill="rgb(223,111,35)" fg:x="170" fg:w="2"/><text x="96.8409%" y="479.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (2 samples, 1.14%)</title><rect x="96.5909%" y="453" width="1.1364%" height="15" fill="rgb(229,147,28)" fg:x="170" fg:w="2"/><text x="96.8409%" y="463.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (2 samples, 1.14%)</title><rect x="96.5909%" y="437" width="1.1364%" height="15" fill="rgb(211,29,28)" fg:x="170" fg:w="2"/><text x="96.8409%" y="447.50"></text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (2 samples, 1.14%)</title><rect x="96.5909%" y="421" width="1.1364%" height="15" fill="rgb(228,72,33)" fg:x="170" fg:w="2"/><text x="96.8409%" y="431.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (2 samples, 1.14%)</title><rect x="96.5909%" y="405" width="1.1364%" height="15" fill="rgb(205,214,31)" fg:x="170" fg:w="2"/><text x="96.8409%" y="415.50"></text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (2 samples, 1.14%)</title><rect x="96.5909%" y="389" width="1.1364%" height="15" fill="rgb(224,111,15)" fg:x="170" fg:w="2"/><text x="96.8409%" y="399.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (2 samples, 1.14%)</title><rect x="96.5909%" y="373" width="1.1364%" height="15" fill="rgb(253,21,26)" fg:x="170" fg:w="2"/><text x="96.8409%" y="383.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (2 samples, 1.14%)</title><rect x="96.5909%" y="357" width="1.1364%" height="15" fill="rgb(245,139,43)" fg:x="170" fg:w="2"/><text x="96.8409%" y="367.50"></text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (2 samples, 1.14%)</title><rect x="96.5909%" y="341" width="1.1364%" height="15" fill="rgb(252,170,7)" fg:x="170" fg:w="2"/><text x="96.8409%" y="351.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (1 samples, 0.57%)</title><rect x="97.1591%" y="325" width="0.5682%" height="15" fill="rgb(231,118,14)" fg:x="171" fg:w="1"/><text x="97.4091%" y="335.50"></text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (1 samples, 0.57%)</title><rect x="97.1591%" y="309" width="0.5682%" height="15" fill="rgb(238,83,0)" fg:x="171" fg:w="1"/><text x="97.4091%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.57%)</title><rect x="97.1591%" y="293" width="0.5682%" height="15" fill="rgb(221,39,39)" fg:x="171" fg:w="1"/><text x="97.4091%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.57%)</title><rect x="97.1591%" y="277" width="0.5682%" height="15" fill="rgb(222,119,46)" fg:x="171" fg:w="1"/><text x="97.4091%" y="287.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (137 samples, 77.84%)</title><rect x="20.4545%" y="725" width="77.8409%" height="15" fill="rgb(222,165,49)" fg:x="36" fg:w="137"/><text x="20.7045%" y="735.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;gateway::pipeline::validation_service::GraphQLValidationService as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}} (1 samples, 0.57%)</title><rect x="97.7273%" y="709" width="0.5682%" height="15" fill="rgb(219,113,52)" fg:x="172" fg:w="1"/><text x="97.9773%" y="719.50"></text></g><g><title>&lt;gateway::pipeline::validation_service::GraphQLValidationService as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}}::_{{closure}} (1 samples, 0.57%)</title><rect x="97.7273%" y="693" width="0.5682%" height="15" fill="rgb(214,7,15)" fg:x="172" fg:w="1"/><text x="97.9773%" y="703.50"></text></g><g><title>graphql_tools::validation::validate::validate (1 samples, 0.57%)</title><rect x="97.7273%" y="677" width="0.5682%" height="15" fill="rgb(235,32,4)" fg:x="172" fg:w="1"/><text x="97.9773%" y="687.50"></text></g><g><title>&lt;graphql_tools::validation::rules::fields_on_correct_type::FieldsOnCorrectType as graphql_tools::validation::rules::rule::ValidationRule&gt;::validate (1 samples, 0.57%)</title><rect x="97.7273%" y="661" width="0.5682%" height="15" fill="rgb(238,90,54)" fg:x="172" fg:w="1"/><text x="97.9773%" y="671.50"></text></g><g><title>graphql_tools::ast::operation_visitor::visit_document (1 samples, 0.57%)</title><rect x="97.7273%" y="645" width="0.5682%" height="15" fill="rgb(213,208,19)" fg:x="172" fg:w="1"/><text x="97.9773%" y="655.50"></text></g><g><title>graphql_tools::ast::operation_visitor::OperationVisitorContext::with_parent_type (1 samples, 0.57%)</title><rect x="97.7273%" y="629" width="0.5682%" height="15" fill="rgb(233,156,4)" fg:x="172" fg:w="1"/><text x="97.9773%" y="639.50"></text></g><g><title>graphql_tools::ast::operation_visitor::OperationVisitorContext::with_parent_type (1 samples, 0.57%)</title><rect x="97.7273%" y="613" width="0.5682%" height="15" fill="rgb(207,194,5)" fg:x="172" fg:w="1"/><text x="97.9773%" y="623.50"></text></g><g><title>graphql_tools::ast::operation_visitor::OperationVisitorContext::with_parent_type (1 samples, 0.57%)</title><rect x="97.7273%" y="597" width="0.5682%" height="15" fill="rgb(206,111,30)" fg:x="172" fg:w="1"/><text x="97.9773%" y="607.50"></text></g><g><title>graphql_tools::ast::operation_visitor::OperationVisitorContext::with_parent_type (1 samples, 0.57%)</title><rect x="97.7273%" y="581" width="0.5682%" height="15" fill="rgb(243,70,54)" fg:x="172" fg:w="1"/><text x="97.9773%" y="591.50"></text></g><g><title>graphql_tools::ast::operation_visitor::OperationVisitorContext::with_parent_type (1 samples, 0.57%)</title><rect x="97.7273%" y="565" width="0.5682%" height="15" fill="rgb(242,28,8)" fg:x="172" fg:w="1"/><text x="97.9773%" y="575.50"></text></g><g><title>graphql_tools::ast::operation_visitor::OperationVisitorContext::with_parent_type (1 samples, 0.57%)</title><rect x="97.7273%" y="549" width="0.5682%" height="15" fill="rgb(219,106,18)" fg:x="172" fg:w="1"/><text x="97.9773%" y="559.50"></text></g><g><title>graphql_tools::ast::operation_visitor::OperationVisitorContext::with_parent_type (1 samples, 0.57%)</title><rect x="97.7273%" y="533" width="0.5682%" height="15" fill="rgb(244,222,10)" fg:x="172" fg:w="1"/><text x="97.9773%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphql_parser::common::Type&lt;alloc::string::String&gt;&gt; (1 samples, 0.57%)</title><rect x="97.7273%" y="517" width="0.5682%" height="15" fill="rgb(236,179,52)" fg:x="172" fg:w="1"/><text x="97.9773%" y="527.50"></text></g><g><title>&lt;hyper_util::service::glue::TowerToHyperServiceFuture&lt;S,R&gt; as core::future::future::Future&gt;::poll (138 samples, 78.41%)</title><rect x="20.4545%" y="965" width="78.4091%" height="15" fill="rgb(213,23,39)" fg:x="36" fg:w="138"/><text x="20.7045%" y="975.50">&lt;hyper_util::service::glue::TowerToHyperServiceFuture&lt;S,R&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;hyper_util::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (138 samples, 78.41%)</title><rect x="20.4545%" y="949" width="78.4091%" height="15" fill="rgb(238,48,10)" fg:x="36" fg:w="138"/><text x="20.7045%" y="959.50">&lt;hyper_util::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;E&gt; as core::future::future::Future&gt;::poll (138 samples, 78.41%)</title><rect x="20.4545%" y="933" width="78.4091%" height="15" fill="rgb(251,196,23)" fg:x="36" fg:w="138"/><text x="20.7045%" y="943.50">&lt;axum::routing::route::RouteFuture&lt;E&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (138 samples, 78.41%)</title><rect x="20.4545%" y="917" width="78.4091%" height="15" fill="rgb(250,152,24)" fg:x="36" fg:w="138"/><text x="20.7045%" y="927.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (138 samples, 78.41%)</title><rect x="20.4545%" y="901" width="78.4091%" height="15" fill="rgb(209,150,17)" fg:x="36" fg:w="138"/><text x="20.7045%" y="911.50">&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (138 samples, 78.41%)</title><rect x="20.4545%" y="885" width="78.4091%" height="15" fill="rgb(234,202,34)" fg:x="36" fg:w="138"/><text x="20.7045%" y="895.50">&lt;F as futures_core::future::TryFuture&gt;::try_poll</text></g><g><title>&lt;tower_http::cors::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (138 samples, 78.41%)</title><rect x="20.4545%" y="869" width="78.4091%" height="15" fill="rgb(253,148,53)" fg:x="36" fg:w="138"/><text x="20.7045%" y="879.50">&lt;tower_http::cors::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;E&gt; as core::future::future::Future&gt;::poll (138 samples, 78.41%)</title><rect x="20.4545%" y="853" width="78.4091%" height="15" fill="rgb(218,129,16)" fg:x="36" fg:w="138"/><text x="20.7045%" y="863.50">&lt;axum::routing::route::RouteFuture&lt;E&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (138 samples, 78.41%)</title><rect x="20.4545%" y="837" width="78.4091%" height="15" fill="rgb(216,85,19)" fg:x="36" fg:w="138"/><text x="20.7045%" y="847.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;axum::util::MapIntoResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (138 samples, 78.41%)</title><rect x="20.4545%" y="821" width="78.4091%" height="15" fill="rgb(235,228,7)" fg:x="36" fg:w="138"/><text x="20.7045%" y="831.50">&lt;axum::util::MapIntoResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (138 samples, 78.41%)</title><rect x="20.4545%" y="805" width="78.4091%" height="15" fill="rgb(245,175,0)" fg:x="36" fg:w="138"/><text x="20.7045%" y="815.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;::call::_{{closure}} (138 samples, 78.41%)</title><rect x="20.4545%" y="789" width="78.4091%" height="15" fill="rgb(208,168,36)" fg:x="36" fg:w="138"/><text x="20.7045%" y="799.50">&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (138 samples, 78.41%)</title><rect x="20.4545%" y="773" width="78.4091%" height="15" fill="rgb(246,171,24)" fg:x="36" fg:w="138"/><text x="20.7045%" y="783.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (138 samples, 78.41%)</title><rect x="20.4545%" y="757" width="78.4091%" height="15" fill="rgb(215,142,24)" fg:x="36" fg:w="138"/><text x="20.7045%" y="767.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (138 samples, 78.41%)</title><rect x="20.4545%" y="741" width="78.4091%" height="15" fill="rgb(250,187,7)" fg:x="36" fg:w="138"/><text x="20.7045%" y="751.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;gateway::pipeline::parser_service::GraphQLParserService as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}} (1 samples, 0.57%)</title><rect x="98.2955%" y="725" width="0.5682%" height="15" fill="rgb(228,66,33)" fg:x="173" fg:w="1"/><text x="98.5455%" y="735.50"></text></g><g><title>moka::cht::segment::HashMap&lt;K,V,S&gt;::get_key_value_and_then (1 samples, 0.57%)</title><rect x="98.2955%" y="709" width="0.5682%" height="15" fill="rgb(234,215,21)" fg:x="173" fg:w="1"/><text x="98.5455%" y="719.50"></text></g><g><title>crossbeam_epoch::default::pin (1 samples, 0.57%)</title><rect x="98.2955%" y="693" width="0.5682%" height="15" fill="rgb(222,191,20)" fg:x="173" fg:w="1"/><text x="98.5455%" y="703.50"></text></g><g><title>crossbeam_epoch::default::with_handle (1 samples, 0.57%)</title><rect x="98.2955%" y="677" width="0.5682%" height="15" fill="rgb(245,79,54)" fg:x="173" fg:w="1"/><text x="98.5455%" y="687.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (1 samples, 0.57%)</title><rect x="98.2955%" y="661" width="0.5682%" height="15" fill="rgb(240,10,37)" fg:x="173" fg:w="1"/><text x="98.5455%" y="671.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (1 samples, 0.57%)</title><rect x="98.8636%" y="965" width="0.5682%" height="15" fill="rgb(214,192,32)" fg:x="174" fg:w="1"/><text x="99.1136%" y="975.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (1 samples, 0.57%)</title><rect x="98.8636%" y="949" width="0.5682%" height="15" fill="rgb(209,36,54)" fg:x="174" fg:w="1"/><text x="99.1136%" y="959.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.57%)</title><rect x="98.8636%" y="933" width="0.5682%" height="15" fill="rgb(220,10,11)" fg:x="174" fg:w="1"/><text x="99.1136%" y="943.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.57%)</title><rect x="98.8636%" y="917" width="0.5682%" height="15" fill="rgb(221,106,17)" fg:x="174" fg:w="1"/><text x="99.1136%" y="927.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.57%)</title><rect x="98.8636%" y="901" width="0.5682%" height="15" fill="rgb(251,142,44)" fg:x="174" fg:w="1"/><text x="99.1136%" y="911.50"></text></g><g><title>all (176 samples, 100%)</title><rect x="0.0000%" y="1253" width="100.0000%" height="15" fill="rgb(238,13,15)" fg:x="0" fg:w="176"/><text x="0.2500%" y="1263.50"></text></g><g><title>thread_start (160 samples, 90.91%)</title><rect x="9.0909%" y="1237" width="90.9091%" height="15" fill="rgb(208,107,27)" fg:x="16" fg:w="160"/><text x="9.3409%" y="1247.50">thread_start</text></g><g><title>_pthread_start (160 samples, 90.91%)</title><rect x="9.0909%" y="1221" width="90.9091%" height="15" fill="rgb(205,136,37)" fg:x="16" fg:w="160"/><text x="9.3409%" y="1231.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (160 samples, 90.91%)</title><rect x="9.0909%" y="1205" width="90.9091%" height="15" fill="rgb(250,205,27)" fg:x="16" fg:w="160"/><text x="9.3409%" y="1215.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (160 samples, 90.91%)</title><rect x="9.0909%" y="1189" width="90.9091%" height="15" fill="rgb(210,80,43)" fg:x="16" fg:w="160"/><text x="9.3409%" y="1199.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (160 samples, 90.91%)</title><rect x="9.0909%" y="1173" width="90.9091%" height="15" fill="rgb(247,160,36)" fg:x="16" fg:w="160"/><text x="9.3409%" y="1183.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (160 samples, 90.91%)</title><rect x="9.0909%" y="1157" width="90.9091%" height="15" fill="rgb(234,13,49)" fg:x="16" fg:w="160"/><text x="9.3409%" y="1167.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (160 samples, 90.91%)</title><rect x="9.0909%" y="1141" width="90.9091%" height="15" fill="rgb(234,122,0)" fg:x="16" fg:w="160"/><text x="9.3409%" y="1151.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (160 samples, 90.91%)</title><rect x="9.0909%" y="1125" width="90.9091%" height="15" fill="rgb(207,146,38)" fg:x="16" fg:w="160"/><text x="9.3409%" y="1135.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (160 samples, 90.91%)</title><rect x="9.0909%" y="1109" width="90.9091%" height="15" fill="rgb(207,177,25)" fg:x="16" fg:w="160"/><text x="9.3409%" y="1119.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (160 samples, 90.91%)</title><rect x="9.0909%" y="1093" width="90.9091%" height="15" fill="rgb(211,178,42)" fg:x="16" fg:w="160"/><text x="9.3409%" y="1103.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (160 samples, 90.91%)</title><rect x="9.0909%" y="1077" width="90.9091%" height="15" fill="rgb(230,69,54)" fg:x="16" fg:w="160"/><text x="9.3409%" y="1087.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (160 samples, 90.91%)</title><rect x="9.0909%" y="1061" width="90.9091%" height="15" fill="rgb(214,135,41)" fg:x="16" fg:w="160"/><text x="9.3409%" y="1071.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (155 samples, 88.07%)</title><rect x="11.9318%" y="1045" width="88.0682%" height="15" fill="rgb(237,67,25)" fg:x="21" fg:w="155"/><text x="12.1818%" y="1055.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (140 samples, 79.55%)</title><rect x="20.4545%" y="1029" width="79.5455%" height="15" fill="rgb(222,189,50)" fg:x="36" fg:w="140"/><text x="20.7045%" y="1039.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (140 samples, 79.55%)</title><rect x="20.4545%" y="1013" width="79.5455%" height="15" fill="rgb(245,148,34)" fg:x="36" fg:w="140"/><text x="20.7045%" y="1023.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>axum::serve::handle_connection::_{{closure}}::_{{closure}} (140 samples, 79.55%)</title><rect x="20.4545%" y="997" width="79.5455%" height="15" fill="rgb(222,29,6)" fg:x="36" fg:w="140"/><text x="20.7045%" y="1007.50">axum::serve::handle_connection::_{{closure}}::_{{closure}}</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (140 samples, 79.55%)</title><rect x="20.4545%" y="981" width="79.5455%" height="15" fill="rgb(221,189,43)" fg:x="36" fg:w="140"/><text x="20.7045%" y="991.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (1 samples, 0.57%)</title><rect x="99.4318%" y="965" width="0.5682%" height="15" fill="rgb(207,36,27)" fg:x="175" fg:w="1"/><text x="99.6818%" y="975.50"></text></g><g><title>hyper::body::incoming::Sender::try_send_data (1 samples, 0.57%)</title><rect x="99.4318%" y="949" width="0.5682%" height="15" fill="rgb(217,90,24)" fg:x="175" fg:w="1"/><text x="99.6818%" y="959.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (1 samples, 0.57%)</title><rect x="99.4318%" y="933" width="0.5682%" height="15" fill="rgb(224,66,35)" fg:x="175" fg:w="1"/><text x="99.6818%" y="943.50"></text></g><g><title>std::sys::sync::once_box::OnceBox&lt;T&gt;::initialize (1 samples, 0.57%)</title><rect x="99.4318%" y="917" width="0.5682%" height="15" fill="rgb(221,13,50)" fg:x="175" fg:w="1"/><text x="99.6818%" y="927.50"></text></g><g><title>pthread_mutex_init (1 samples, 0.57%)</title><rect x="99.4318%" y="901" width="0.5682%" height="15" fill="rgb(236,68,49)" fg:x="175" fg:w="1"/><text x="99.6818%" y="911.50"></text></g></svg></svg>