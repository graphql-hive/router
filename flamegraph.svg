<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1366" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1349.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1349.00"> </text><svg id="frames" x="10" width="1180" total_samples="30282"><g><title>start (5 samples, 0.02%)</title><rect x="0.0033%" y="1301" width="0.0165%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="5"/><text x="0.2533%" y="1311.50"></text></g><g><title>pow (8 samples, 0.03%)</title><rect x="0.3666%" y="1109" width="0.0264%" height="15" fill="rgb(217,0,24)" fg:x="111" fg:w="8"/><text x="0.6166%" y="1119.50"></text></g><g><title>mach_absolute_time (53 samples, 0.18%)</title><rect x="0.4293%" y="1061" width="0.1750%" height="15" fill="rgb(221,193,54)" fg:x="130" fg:w="53"/><text x="0.6793%" y="1071.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (66 samples, 0.22%)</title><rect x="0.3930%" y="1109" width="0.2180%" height="15" fill="rgb(248,212,6)" fg:x="119" fg:w="66"/><text x="0.6430%" y="1119.50"></text></g><g><title>clock_gettime (63 samples, 0.21%)</title><rect x="0.4029%" y="1093" width="0.2080%" height="15" fill="rgb(208,68,35)" fg:x="122" fg:w="63"/><text x="0.6529%" y="1103.50"></text></g><g><title>clock_gettime_nsec_np (61 samples, 0.20%)</title><rect x="0.4095%" y="1077" width="0.2014%" height="15" fill="rgb(232,128,0)" fg:x="124" fg:w="61"/><text x="0.6595%" y="1087.50"></text></g><g><title>mach_absolute_time (17 samples, 0.06%)</title><rect x="0.6373%" y="1045" width="0.0561%" height="15" fill="rgb(207,160,47)" fg:x="193" fg:w="17"/><text x="0.8873%" y="1055.50"></text></g><g><title>std::time::Instant::elapsed (27 samples, 0.09%)</title><rect x="0.6109%" y="1109" width="0.0892%" height="15" fill="rgb(228,23,34)" fg:x="185" fg:w="27"/><text x="0.8609%" y="1119.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (26 samples, 0.09%)</title><rect x="0.6142%" y="1093" width="0.0859%" height="15" fill="rgb(218,30,26)" fg:x="186" fg:w="26"/><text x="0.8642%" y="1103.50"></text></g><g><title>clock_gettime (25 samples, 0.08%)</title><rect x="0.6175%" y="1077" width="0.0826%" height="15" fill="rgb(220,122,19)" fg:x="187" fg:w="25"/><text x="0.8675%" y="1087.50"></text></g><g><title>clock_gettime_nsec_np (22 samples, 0.07%)</title><rect x="0.6274%" y="1061" width="0.0727%" height="15" fill="rgb(250,228,42)" fg:x="190" fg:w="22"/><text x="0.8774%" y="1071.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (7 samples, 0.02%)</title><rect x="0.7034%" y="1109" width="0.0231%" height="15" fill="rgb(240,193,28)" fg:x="213" fg:w="7"/><text x="0.9534%" y="1119.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (4 samples, 0.01%)</title><rect x="0.7133%" y="1093" width="0.0132%" height="15" fill="rgb(216,20,37)" fg:x="216" fg:w="4"/><text x="0.9633%" y="1103.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (14 samples, 0.05%)</title><rect x="0.7463%" y="1093" width="0.0462%" height="15" fill="rgb(206,188,39)" fg:x="226" fg:w="14"/><text x="0.9963%" y="1103.50"></text></g><g><title>pthread_cond_signal (13 samples, 0.04%)</title><rect x="0.7496%" y="1077" width="0.0429%" height="15" fill="rgb(217,207,13)" fg:x="227" fg:w="13"/><text x="0.9996%" y="1087.50"></text></g><g><title>__psynch_cvsignal (13 samples, 0.04%)</title><rect x="0.7496%" y="1061" width="0.0429%" height="15" fill="rgb(231,73,38)" fg:x="227" fg:w="13"/><text x="0.9996%" y="1071.50"></text></g><g><title>__psynch_cvwait (4 samples, 0.01%)</title><rect x="0.8850%" y="1061" width="0.0132%" height="15" fill="rgb(225,20,46)" fg:x="268" fg:w="4"/><text x="1.1350%" y="1071.50"></text></g><g><title>__psynch_cvwait (258 samples, 0.85%)</title><rect x="0.9180%" y="1045" width="0.8520%" height="15" fill="rgb(210,31,41)" fg:x="278" fg:w="258"/><text x="1.1680%" y="1055.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (7 samples, 0.02%)</title><rect x="1.7700%" y="1045" width="0.0231%" height="15" fill="rgb(221,200,47)" fg:x="536" fg:w="7"/><text x="2.0200%" y="1055.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (7 samples, 0.02%)</title><rect x="1.7700%" y="1029" width="0.0231%" height="15" fill="rgb(226,26,5)" fg:x="536" fg:w="7"/><text x="2.0200%" y="1039.50"></text></g><g><title>__psynch_mutexwait (7 samples, 0.02%)</title><rect x="1.7700%" y="1013" width="0.0231%" height="15" fill="rgb(249,33,26)" fg:x="536" fg:w="7"/><text x="2.0200%" y="1023.50"></text></g><g><title>_pthread_cond_wait (272 samples, 0.90%)</title><rect x="0.8982%" y="1061" width="0.8982%" height="15" fill="rgb(235,183,28)" fg:x="272" fg:w="272"/><text x="1.1482%" y="1071.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (288 samples, 0.95%)</title><rect x="0.8586%" y="1077" width="0.9511%" height="15" fill="rgb(221,5,38)" fg:x="260" fg:w="288"/><text x="1.1086%" y="1087.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (34 samples, 0.11%)</title><rect x="1.8361%" y="1061" width="0.1123%" height="15" fill="rgb(247,18,42)" fg:x="556" fg:w="34"/><text x="2.0861%" y="1071.50"></text></g><g><title>clock_gettime (32 samples, 0.11%)</title><rect x="1.8427%" y="1045" width="0.1057%" height="15" fill="rgb(241,131,45)" fg:x="558" fg:w="32"/><text x="2.0927%" y="1055.50"></text></g><g><title>clock_gettime_nsec_np (32 samples, 0.11%)</title><rect x="1.8427%" y="1029" width="0.1057%" height="15" fill="rgb(249,31,29)" fg:x="558" fg:w="32"/><text x="2.0927%" y="1039.50"></text></g><g><title>mach_absolute_time (31 samples, 0.10%)</title><rect x="1.8460%" y="1013" width="0.1024%" height="15" fill="rgb(225,111,53)" fg:x="559" fg:w="31"/><text x="2.0960%" y="1023.50"></text></g><g><title>kevent (10 samples, 0.03%)</title><rect x="1.9946%" y="1045" width="0.0330%" height="15" fill="rgb(238,160,17)" fg:x="604" fg:w="10"/><text x="2.2446%" y="1055.50"></text></g><g><title>mio::poll::Poll::poll (295 samples, 0.97%)</title><rect x="2.0276%" y="1045" width="0.9742%" height="15" fill="rgb(214,148,48)" fg:x="614" fg:w="295"/><text x="2.2776%" y="1055.50"></text></g><g><title>kevent (294 samples, 0.97%)</title><rect x="2.0309%" y="1029" width="0.9709%" height="15" fill="rgb(232,36,49)" fg:x="615" fg:w="294"/><text x="2.2809%" y="1039.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (9 samples, 0.03%)</title><rect x="3.0645%" y="1013" width="0.0297%" height="15" fill="rgb(209,103,24)" fg:x="928" fg:w="9"/><text x="3.3145%" y="1023.50"></text></g><g><title>tokio::runtime::context::with_scheduler (8 samples, 0.03%)</title><rect x="3.0678%" y="997" width="0.0264%" height="15" fill="rgb(229,88,8)" fg:x="929" fg:w="8"/><text x="3.3178%" y="1007.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (5 samples, 0.02%)</title><rect x="3.0777%" y="981" width="0.0165%" height="15" fill="rgb(213,181,19)" fg:x="932" fg:w="5"/><text x="3.3277%" y="991.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (4 samples, 0.01%)</title><rect x="3.0810%" y="965" width="0.0132%" height="15" fill="rgb(254,191,54)" fg:x="933" fg:w="4"/><text x="3.3310%" y="975.50"></text></g><g><title>tokio::runtime::task::raw::schedule (4 samples, 0.01%)</title><rect x="3.0942%" y="1013" width="0.0132%" height="15" fill="rgb(241,83,37)" fg:x="937" fg:w="4"/><text x="3.3442%" y="1023.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (351 samples, 1.16%)</title><rect x="1.9583%" y="1061" width="1.1591%" height="15" fill="rgb(233,36,39)" fg:x="593" fg:w="351"/><text x="2.2083%" y="1071.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (35 samples, 0.12%)</title><rect x="3.0018%" y="1045" width="0.1156%" height="15" fill="rgb(226,3,54)" fg:x="909" fg:w="35"/><text x="3.2518%" y="1055.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (19 samples, 0.06%)</title><rect x="3.0546%" y="1029" width="0.0627%" height="15" fill="rgb(245,192,40)" fg:x="925" fg:w="19"/><text x="3.3046%" y="1039.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (398 samples, 1.31%)</title><rect x="1.8097%" y="1077" width="1.3143%" height="15" fill="rgb(238,167,29)" fg:x="548" fg:w="398"/><text x="2.0597%" y="1087.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (708 samples, 2.34%)</title><rect x="0.7959%" y="1093" width="2.3380%" height="15" fill="rgb(232,182,51)" fg:x="241" fg:w="708"/><text x="1.0459%" y="1103.50">t..</text></g><g><title>mio::poll::Poll::poll (57 samples, 0.19%)</title><rect x="3.1669%" y="1061" width="0.1882%" height="15" fill="rgb(231,60,39)" fg:x="959" fg:w="57"/><text x="3.4169%" y="1071.50"></text></g><g><title>kevent (57 samples, 0.19%)</title><rect x="3.1669%" y="1045" width="0.1882%" height="15" fill="rgb(208,69,12)" fg:x="959" fg:w="57"/><text x="3.4169%" y="1055.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (5 samples, 0.02%)</title><rect x="3.3683%" y="1029" width="0.0165%" height="15" fill="rgb(235,93,37)" fg:x="1020" fg:w="5"/><text x="3.6183%" y="1039.50"></text></g><g><title>tokio::runtime::context::with_scheduler (5 samples, 0.02%)</title><rect x="3.3683%" y="1013" width="0.0165%" height="15" fill="rgb(213,116,39)" fg:x="1020" fg:w="5"/><text x="3.6183%" y="1023.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (74 samples, 0.24%)</title><rect x="3.1504%" y="1077" width="0.2444%" height="15" fill="rgb(222,207,29)" fg:x="954" fg:w="74"/><text x="3.4004%" y="1087.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (12 samples, 0.04%)</title><rect x="3.3551%" y="1061" width="0.0396%" height="15" fill="rgb(206,96,30)" fg:x="1016" fg:w="12"/><text x="3.6051%" y="1071.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (8 samples, 0.03%)</title><rect x="3.3683%" y="1045" width="0.0264%" height="15" fill="rgb(218,138,4)" fg:x="1020" fg:w="8"/><text x="3.6183%" y="1055.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (809 samples, 2.67%)</title><rect x="0.7265%" y="1109" width="2.6716%" height="15" fill="rgb(250,191,14)" fg:x="220" fg:w="809"/><text x="0.9765%" y="1119.50">to..</text></g><g><title>tokio::runtime::time::Driver::park_internal (79 samples, 0.26%)</title><rect x="3.1372%" y="1093" width="0.2609%" height="15" fill="rgb(239,60,40)" fg:x="950" fg:w="79"/><text x="3.3872%" y="1103.50"></text></g><g><title>_tlv_get_addr (20 samples, 0.07%)</title><rect x="3.5004%" y="1093" width="0.0660%" height="15" fill="rgb(206,27,48)" fg:x="1060" fg:w="20"/><text x="3.7504%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (4 samples, 0.01%)</title><rect x="3.5665%" y="1093" width="0.0132%" height="15" fill="rgb(225,35,8)" fg:x="1080" fg:w="4"/><text x="3.8165%" y="1103.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="3.5665%" y="1077" width="0.0132%" height="15" fill="rgb(250,213,24)" fg:x="1080" fg:w="4"/><text x="3.8165%" y="1087.50"></text></g><g><title>__psynch_cvsignal (70 samples, 0.23%)</title><rect x="3.6127%" y="1061" width="0.2312%" height="15" fill="rgb(247,123,22)" fg:x="1094" fg:w="70"/><text x="3.8627%" y="1071.50"></text></g><g><title>pthread_cond_signal (74 samples, 0.24%)</title><rect x="3.6061%" y="1077" width="0.2444%" height="15" fill="rgb(231,138,38)" fg:x="1092" fg:w="74"/><text x="3.8561%" y="1087.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (92 samples, 0.30%)</title><rect x="3.5797%" y="1093" width="0.3038%" height="15" fill="rgb(231,145,46)" fg:x="1084" fg:w="92"/><text x="3.8297%" y="1103.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (9 samples, 0.03%)</title><rect x="3.8538%" y="1077" width="0.0297%" height="15" fill="rgb(251,118,11)" fg:x="1167" fg:w="9"/><text x="4.1038%" y="1087.50"></text></g><g><title>clock_gettime (8 samples, 0.03%)</title><rect x="3.8571%" y="1061" width="0.0264%" height="15" fill="rgb(217,147,25)" fg:x="1168" fg:w="8"/><text x="4.1071%" y="1071.50"></text></g><g><title>clock_gettime_nsec_np (8 samples, 0.03%)</title><rect x="3.8571%" y="1045" width="0.0264%" height="15" fill="rgb(247,81,37)" fg:x="1168" fg:w="8"/><text x="4.1071%" y="1055.50"></text></g><g><title>mach_absolute_time (8 samples, 0.03%)</title><rect x="3.8571%" y="1029" width="0.0264%" height="15" fill="rgb(209,12,38)" fg:x="1168" fg:w="8"/><text x="4.1071%" y="1039.50"></text></g><g><title>&lt;core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.02%)</title><rect x="4.0321%" y="1013" width="0.0165%" height="15" fill="rgb(227,1,9)" fg:x="1221" fg:w="5"/><text x="4.2821%" y="1023.50"></text></g><g><title>&lt;http_body_util::combinators::box_body::UnsyncBoxBody&lt;D,E&gt; as http_body::Body&gt;::poll_frame (4 samples, 0.01%)</title><rect x="4.0486%" y="1013" width="0.0132%" height="15" fill="rgb(248,47,43)" fg:x="1226" fg:w="4"/><text x="4.2986%" y="1023.50"></text></g><g><title>&lt;http_body_util::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_frame (4 samples, 0.01%)</title><rect x="4.0486%" y="997" width="0.0132%" height="15" fill="rgb(221,10,30)" fg:x="1226" fg:w="4"/><text x="4.2986%" y="1007.50"></text></g><g><title>&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (7 samples, 0.02%)</title><rect x="4.0981%" y="949" width="0.0231%" height="15" fill="rgb(210,229,1)" fg:x="1241" fg:w="7"/><text x="4.3481%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (5 samples, 0.02%)</title><rect x="4.1708%" y="917" width="0.0165%" height="15" fill="rgb(222,148,37)" fg:x="1263" fg:w="5"/><text x="4.4208%" y="927.50"></text></g><g><title>&lt;tower_http::cors::Cors&lt;S&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::call (22 samples, 0.07%)</title><rect x="4.1213%" y="949" width="0.0727%" height="15" fill="rgb(234,67,33)" fg:x="1248" fg:w="22"/><text x="4.3713%" y="959.50"></text></g><g><title>tower_http::cors::vary::Vary::to_header (14 samples, 0.05%)</title><rect x="4.1477%" y="933" width="0.0462%" height="15" fill="rgb(247,98,35)" fg:x="1256" fg:w="14"/><text x="4.3977%" y="943.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as tower_service::Service&lt;Request&gt;&gt;::call (37 samples, 0.12%)</title><rect x="4.0915%" y="981" width="0.1222%" height="15" fill="rgb(247,138,52)" fg:x="1239" fg:w="37"/><text x="4.3415%" y="991.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::call (37 samples, 0.12%)</title><rect x="4.0915%" y="965" width="0.1222%" height="15" fill="rgb(213,79,30)" fg:x="1239" fg:w="37"/><text x="4.3415%" y="975.50"></text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;E&gt; as core::future::future::Future&gt;::poll (16 samples, 0.05%)</title><rect x="4.2236%" y="981" width="0.0528%" height="15" fill="rgb(246,177,23)" fg:x="1279" fg:w="16"/><text x="4.4736%" y="991.50"></text></g><g><title>axum::routing::route::set_content_length (11 samples, 0.04%)</title><rect x="4.2401%" y="965" width="0.0363%" height="15" fill="rgb(230,62,27)" fg:x="1284" fg:w="11"/><text x="4.4901%" y="975.50"></text></g><g><title>&lt;axum::util::MapIntoResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.01%)</title><rect x="4.2798%" y="965" width="0.0132%" height="15" fill="rgb(216,154,8)" fg:x="1296" fg:w="4"/><text x="4.5298%" y="975.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4 samples, 0.01%)</title><rect x="4.3425%" y="853" width="0.0132%" height="15" fill="rgb(244,35,45)" fg:x="1315" fg:w="4"/><text x="4.5925%" y="863.50"></text></g><g><title>&lt;gateway::http_utils::request_id::RequestIdGenerator as tower_http::request_id::MakeRequestId&gt;::make_request_id::_{{closure}} (7 samples, 0.02%)</title><rect x="4.3359%" y="885" width="0.0231%" height="15" fill="rgb(251,115,12)" fg:x="1313" fg:w="7"/><text x="4.5859%" y="895.50"></text></g><g><title>ulid::time::_&lt;impl ulid::Ulid&gt;::new (5 samples, 0.02%)</title><rect x="4.3425%" y="869" width="0.0165%" height="15" fill="rgb(240,54,50)" fg:x="1315" fg:w="5"/><text x="4.5925%" y="879.50"></text></g><g><title>&lt;tower_http::trace::on_request::DefaultOnRequest as tower_http::trace::on_request::OnRequest&lt;B&gt;&gt;::on_request (5 samples, 0.02%)</title><rect x="4.3722%" y="853" width="0.0165%" height="15" fill="rgb(233,84,52)" fg:x="1324" fg:w="5"/><text x="4.6222%" y="863.50"></text></g><g><title>&lt;tower_http::request_id::SetRequestId&lt;S,M&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::call (12 samples, 0.04%)</title><rect x="4.3623%" y="885" width="0.0396%" height="15" fill="rgb(207,117,47)" fg:x="1321" fg:w="12"/><text x="4.6123%" y="895.50"></text></g><g><title>&lt;tower_http::trace::service::Trace&lt;S,M,MakeSpanT,OnRequestT,OnResponseT,OnBodyChunkT,OnEosT,OnFailureT&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::call (11 samples, 0.04%)</title><rect x="4.3656%" y="869" width="0.0363%" height="15" fill="rgb(249,43,39)" fg:x="1322" fg:w="11"/><text x="4.6156%" y="879.50"></text></g><g><title>&lt;axum::extension::AddExtension&lt;S,T&gt; as tower_service::Service&lt;http::request::Request&lt;ResBody&gt;&gt;&gt;::call (27 samples, 0.09%)</title><rect x="4.3359%" y="901" width="0.0892%" height="15" fill="rgb(209,38,44)" fg:x="1313" fg:w="27"/><text x="4.5859%" y="911.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as tower_service::Service&lt;Request&gt;&gt;::call (29 samples, 0.10%)</title><rect x="4.3359%" y="917" width="0.0958%" height="15" fill="rgb(236,212,23)" fg:x="1313" fg:w="29"/><text x="4.5859%" y="927.50"></text></g><g><title>query_planner::ast::operation::OperationDefinition::hash (34 samples, 0.11%)</title><rect x="4.6166%" y="693" width="0.1123%" height="15" fill="rgb(242,79,21)" fg:x="1398" fg:w="34"/><text x="4.8666%" y="703.50"></text></g><g><title>&lt;query_planner::ast::operation::OperationDefinition as query_planner::ast::hash::ASTHash&gt;::ast_hash (32 samples, 0.11%)</title><rect x="4.6232%" y="677" width="0.1057%" height="15" fill="rgb(211,96,35)" fg:x="1400" fg:w="32"/><text x="4.8732%" y="687.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_planner::ast::hash::ASTHash&gt;::ast_hash (32 samples, 0.11%)</title><rect x="4.6232%" y="661" width="0.1057%" height="15" fill="rgb(253,215,40)" fg:x="1400" fg:w="32"/><text x="4.8732%" y="671.50"></text></g><g><title>&lt;&amp;query_planner::ast::selection_set::FieldSelection as query_planner::ast::hash::ASTHash&gt;::ast_hash (30 samples, 0.10%)</title><rect x="4.6298%" y="645" width="0.0991%" height="15" fill="rgb(211,81,21)" fg:x="1402" fg:w="30"/><text x="4.8798%" y="655.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_planner::ast::hash::ASTHash&gt;::ast_hash (28 samples, 0.09%)</title><rect x="4.6364%" y="629" width="0.0925%" height="15" fill="rgb(208,190,38)" fg:x="1404" fg:w="28"/><text x="4.8864%" y="639.50"></text></g><g><title>&lt;&amp;query_planner::ast::selection_set::FieldSelection as query_planner::ast::hash::ASTHash&gt;::ast_hash (27 samples, 0.09%)</title><rect x="4.6397%" y="613" width="0.0892%" height="15" fill="rgb(235,213,38)" fg:x="1405" fg:w="27"/><text x="4.8897%" y="623.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_planner::ast::hash::ASTHash&gt;::ast_hash (19 samples, 0.06%)</title><rect x="4.6661%" y="597" width="0.0627%" height="15" fill="rgb(237,122,38)" fg:x="1413" fg:w="19"/><text x="4.9161%" y="607.50"></text></g><g><title>&lt;&amp;query_planner::ast::selection_set::FieldSelection as query_planner::ast::hash::ASTHash&gt;::ast_hash (17 samples, 0.06%)</title><rect x="4.6727%" y="581" width="0.0561%" height="15" fill="rgb(244,218,35)" fg:x="1415" fg:w="17"/><text x="4.9227%" y="591.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_planner::ast::hash::ASTHash&gt;::ast_hash (15 samples, 0.05%)</title><rect x="4.6793%" y="565" width="0.0495%" height="15" fill="rgb(240,68,47)" fg:x="1417" fg:w="15"/><text x="4.9293%" y="575.50"></text></g><g><title>&lt;&amp;query_planner::ast::selection_set::FieldSelection as query_planner::ast::hash::ASTHash&gt;::ast_hash (15 samples, 0.05%)</title><rect x="4.6793%" y="549" width="0.0495%" height="15" fill="rgb(210,16,53)" fg:x="1417" fg:w="15"/><text x="4.9293%" y="559.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_planner::ast::hash::ASTHash&gt;::ast_hash (12 samples, 0.04%)</title><rect x="4.6893%" y="533" width="0.0396%" height="15" fill="rgb(235,124,12)" fg:x="1420" fg:w="12"/><text x="4.9393%" y="543.50"></text></g><g><title>&lt;&amp;query_planner::ast::selection_set::FieldSelection as query_planner::ast::hash::ASTHash&gt;::ast_hash (12 samples, 0.04%)</title><rect x="4.6893%" y="517" width="0.0396%" height="15" fill="rgb(224,169,11)" fg:x="1420" fg:w="12"/><text x="4.9393%" y="527.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_planner::ast::hash::ASTHash&gt;::ast_hash (10 samples, 0.03%)</title><rect x="4.6959%" y="501" width="0.0330%" height="15" fill="rgb(250,166,2)" fg:x="1422" fg:w="10"/><text x="4.9459%" y="511.50"></text></g><g><title>&lt;&amp;query_planner::ast::selection_set::FieldSelection as query_planner::ast::hash::ASTHash&gt;::ast_hash (8 samples, 0.03%)</title><rect x="4.7025%" y="485" width="0.0264%" height="15" fill="rgb(242,216,29)" fg:x="1424" fg:w="8"/><text x="4.9525%" y="495.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_planner::ast::hash::ASTHash&gt;::ast_hash (5 samples, 0.02%)</title><rect x="4.7124%" y="469" width="0.0165%" height="15" fill="rgb(230,116,27)" fg:x="1427" fg:w="5"/><text x="4.9624%" y="479.50"></text></g><g><title>&lt;gateway::pipeline::query_plan_service::QueryPlanService as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}}::_{{closure}} (44 samples, 0.15%)</title><rect x="4.5902%" y="709" width="0.1453%" height="15" fill="rgb(228,99,48)" fg:x="1390" fg:w="44"/><text x="4.8402%" y="719.50"></text></g><g><title>moka::cht::segment::HashMap&lt;K,V,S&gt;::get_key_value_and_then (5 samples, 0.02%)</title><rect x="4.7421%" y="709" width="0.0165%" height="15" fill="rgb(253,11,6)" fg:x="1436" fg:w="5"/><text x="4.9921%" y="719.50"></text></g><g><title>moka::future::base_cache::BaseCache&lt;K,V,S&gt;::record_read_op::_{{closure}} (7 samples, 0.02%)</title><rect x="4.7784%" y="693" width="0.0231%" height="15" fill="rgb(247,143,39)" fg:x="1447" fg:w="7"/><text x="5.0284%" y="703.50"></text></g><g><title>moka::future::base_cache::BaseCache&lt;K,V,S&gt;::get_with_hash::_{{closure}} (17 samples, 0.06%)</title><rect x="4.7586%" y="709" width="0.0561%" height="15" fill="rgb(236,97,10)" fg:x="1441" fg:w="17"/><text x="5.0086%" y="719.50"></text></g><g><title>moka::future::base_cache::BaseCache&lt;K,V,S&gt;::retry_interrupted_ops::_{{closure}} (4 samples, 0.01%)</title><rect x="4.8015%" y="693" width="0.0132%" height="15" fill="rgb(233,208,19)" fg:x="1454" fg:w="4"/><text x="5.0515%" y="703.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (74 samples, 0.24%)</title><rect x="4.5770%" y="741" width="0.2444%" height="15" fill="rgb(216,164,2)" fg:x="1386" fg:w="74"/><text x="4.8270%" y="751.50"></text></g><g><title>&lt;gateway::pipeline::query_plan_service::QueryPlanService as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}} (74 samples, 0.24%)</title><rect x="4.5770%" y="725" width="0.2444%" height="15" fill="rgb(220,129,5)" fg:x="1386" fg:w="74"/><text x="4.8270%" y="735.50"></text></g><g><title>&lt;gateway::pipeline::coerce_variables_service::CoerceVariablesService as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}} (7 samples, 0.02%)</title><rect x="4.8213%" y="741" width="0.0231%" height="15" fill="rgb(242,17,10)" fg:x="1460" fg:w="7"/><text x="5.0713%" y="751.50"></text></g><g><title>&lt;axum_core::body::Body as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (4 samples, 0.01%)</title><rect x="5.0789%" y="693" width="0.0132%" height="15" fill="rgb(242,107,0)" fg:x="1538" fg:w="4"/><text x="5.3289%" y="703.50"></text></g><g><title>mi_free (8 samples, 0.03%)</title><rect x="5.8550%" y="597" width="0.0264%" height="15" fill="rgb(251,28,31)" fg:x="1773" fg:w="8"/><text x="6.1050%" y="607.50"></text></g><g><title>mi_free_block_delayed_mt (4 samples, 0.01%)</title><rect x="5.8814%" y="597" width="0.0132%" height="15" fill="rgb(233,223,10)" fg:x="1781" fg:w="4"/><text x="6.1314%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.15%)</title><rect x="5.7526%" y="613" width="0.1519%" height="15" fill="rgb(215,21,27)" fg:x="1742" fg:w="46"/><text x="6.0026%" y="623.50"></text></g><g><title>_platform_memmove (12 samples, 0.04%)</title><rect x="5.9144%" y="613" width="0.0396%" height="15" fill="rgb(232,23,21)" fg:x="1791" fg:w="12"/><text x="6.1644%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.01%)</title><rect x="5.9540%" y="613" width="0.0132%" height="15" fill="rgb(244,5,23)" fg:x="1803" fg:w="4"/><text x="6.2040%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.03%)</title><rect x="5.9738%" y="613" width="0.0297%" height="15" fill="rgb(226,81,46)" fg:x="1809" fg:w="9"/><text x="6.2238%" y="623.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::new (7 samples, 0.02%)</title><rect x="6.0069%" y="613" width="0.0231%" height="15" fill="rgb(247,70,30)" fg:x="1819" fg:w="7"/><text x="6.2569%" y="623.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (18 samples, 0.06%)</title><rect x="6.0300%" y="613" width="0.0594%" height="15" fill="rgb(212,68,19)" fg:x="1826" fg:w="18"/><text x="6.2800%" y="623.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="6.7763%" y="565" width="0.0198%" height="15" fill="rgb(240,187,13)" fg:x="2052" fg:w="6"/><text x="7.0263%" y="575.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (9 samples, 0.03%)</title><rect x="6.8027%" y="549" width="0.0297%" height="15" fill="rgb(223,113,26)" fg:x="2060" fg:w="9"/><text x="7.0527%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.03%)</title><rect x="6.8027%" y="565" width="0.0330%" height="15" fill="rgb(206,192,2)" fg:x="2060" fg:w="10"/><text x="7.0527%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.05%)</title><rect x="7.4169%" y="533" width="0.0528%" height="15" fill="rgb(241,108,4)" fg:x="2246" fg:w="16"/><text x="7.6669%" y="543.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (6 samples, 0.02%)</title><rect x="7.4797%" y="533" width="0.0198%" height="15" fill="rgb(247,173,49)" fg:x="2265" fg:w="6"/><text x="7.7297%" y="543.50"></text></g><g><title>&lt;std::sys::sync::mutex::pthread::Mutex as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="7.6448%" y="453" width="0.0297%" height="15" fill="rgb(224,114,35)" fg:x="2315" fg:w="9"/><text x="7.8948%" y="463.50"></text></g><g><title>pthread_mutex_trylock (6 samples, 0.02%)</title><rect x="7.6547%" y="437" width="0.0198%" height="15" fill="rgb(245,159,27)" fg:x="2318" fg:w="6"/><text x="7.9047%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (15 samples, 0.05%)</title><rect x="7.6349%" y="469" width="0.0495%" height="15" fill="rgb(245,172,44)" fg:x="2312" fg:w="15"/><text x="7.8849%" y="479.50"></text></g><g><title>mi_free (6 samples, 0.02%)</title><rect x="7.7505%" y="453" width="0.0198%" height="15" fill="rgb(236,23,11)" fg:x="2347" fg:w="6"/><text x="8.0005%" y="463.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (27 samples, 0.09%)</title><rect x="7.6844%" y="469" width="0.0892%" height="15" fill="rgb(205,117,38)" fg:x="2327" fg:w="27"/><text x="7.9344%" y="479.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (7 samples, 0.02%)</title><rect x="7.7868%" y="469" width="0.0231%" height="15" fill="rgb(237,72,25)" fg:x="2358" fg:w="7"/><text x="8.0368%" y="479.50"></text></g><g><title>pthread_cond_signal (6 samples, 0.02%)</title><rect x="7.8264%" y="389" width="0.0198%" height="15" fill="rgb(244,70,9)" fg:x="2370" fg:w="6"/><text x="8.0764%" y="399.50"></text></g><g><title>__psynch_cvsignal (6 samples, 0.02%)</title><rect x="7.8264%" y="373" width="0.0198%" height="15" fill="rgb(217,125,39)" fg:x="2370" fg:w="6"/><text x="8.0764%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 0.02%)</title><rect x="7.8264%" y="405" width="0.0231%" height="15" fill="rgb(235,36,10)" fg:x="2370" fg:w="7"/><text x="8.0764%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (12 samples, 0.04%)</title><rect x="7.8165%" y="453" width="0.0396%" height="15" fill="rgb(251,123,47)" fg:x="2367" fg:w="12"/><text x="8.0665%" y="463.50"></text></g><g><title>tokio::runtime::context::with_scheduler (12 samples, 0.04%)</title><rect x="7.8165%" y="437" width="0.0396%" height="15" fill="rgb(221,13,13)" fg:x="2367" fg:w="12"/><text x="8.0665%" y="447.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (11 samples, 0.04%)</title><rect x="7.8198%" y="421" width="0.0363%" height="15" fill="rgb(238,131,9)" fg:x="2368" fg:w="11"/><text x="8.0698%" y="431.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (79 samples, 0.26%)</title><rect x="7.5986%" y="485" width="0.2609%" height="15" fill="rgb(211,50,8)" fg:x="2301" fg:w="79"/><text x="7.8486%" y="495.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (14 samples, 0.05%)</title><rect x="7.8132%" y="469" width="0.0462%" height="15" fill="rgb(245,182,24)" fg:x="2366" fg:w="14"/><text x="8.0632%" y="479.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (86 samples, 0.28%)</title><rect x="7.5821%" y="501" width="0.2840%" height="15" fill="rgb(242,14,37)" fg:x="2296" fg:w="86"/><text x="7.8321%" y="511.50"></text></g><g><title>&lt;hyper::body::incoming::Incoming as http_body::Body&gt;::poll_frame (102 samples, 0.34%)</title><rect x="7.5325%" y="517" width="0.3368%" height="15" fill="rgb(246,228,12)" fg:x="2281" fg:w="102"/><text x="7.7825%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.03%)</title><rect x="7.8793%" y="485" width="0.0297%" height="15" fill="rgb(213,55,15)" fg:x="2386" fg:w="9"/><text x="8.1293%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 0.04%)</title><rect x="7.8760%" y="501" width="0.0396%" height="15" fill="rgb(209,9,3)" fg:x="2385" fg:w="12"/><text x="8.1260%" y="511.50"></text></g><g><title>&lt;http_body_util::combinators::collect::Collect&lt;T&gt; as core::future::future::Future&gt;::poll (126 samples, 0.42%)</title><rect x="7.5028%" y="533" width="0.4161%" height="15" fill="rgb(230,59,30)" fg:x="2272" fg:w="126"/><text x="7.7528%" y="543.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (15 samples, 0.05%)</title><rect x="7.8694%" y="517" width="0.0495%" height="15" fill="rgb(209,121,21)" fg:x="2383" fg:w="15"/><text x="8.1194%" y="527.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::ResponseFuture as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="7.9222%" y="533" width="0.0330%" height="15" fill="rgb(220,109,13)" fg:x="2399" fg:w="10"/><text x="8.1722%" y="543.50"></text></g><g><title>_platform_memmove (20 samples, 0.07%)</title><rect x="7.9618%" y="533" width="0.0660%" height="15" fill="rgb(232,18,1)" fg:x="2411" fg:w="20"/><text x="8.2118%" y="543.50"></text></g><g><title>_mi_heap_delayed_free_partial (11 samples, 0.04%)</title><rect x="8.0312%" y="469" width="0.0363%" height="15" fill="rgb(215,41,42)" fg:x="2432" fg:w="11"/><text x="8.2812%" y="479.50"></text></g><g><title>_mi_free_delayed_block (11 samples, 0.04%)</title><rect x="8.0312%" y="453" width="0.0363%" height="15" fill="rgb(224,123,36)" fg:x="2432" fg:w="11"/><text x="8.2812%" y="463.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (11 samples, 0.04%)</title><rect x="8.0312%" y="437" width="0.0363%" height="15" fill="rgb(240,125,3)" fg:x="2432" fg:w="11"/><text x="8.2812%" y="447.50"></text></g><g><title>_mi_malloc_generic (14 samples, 0.05%)</title><rect x="8.0279%" y="485" width="0.0462%" height="15" fill="rgb(205,98,50)" fg:x="2431" fg:w="14"/><text x="8.2779%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (21 samples, 0.07%)</title><rect x="8.0279%" y="533" width="0.0693%" height="15" fill="rgb(205,185,37)" fg:x="2431" fg:w="21"/><text x="8.2779%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 0.07%)</title><rect x="8.0279%" y="517" width="0.0693%" height="15" fill="rgb(238,207,15)" fg:x="2431" fg:w="21"/><text x="8.2779%" y="527.50"></text></g><g><title>_mi_heap_realloc_zero (21 samples, 0.07%)</title><rect x="8.0279%" y="501" width="0.0693%" height="15" fill="rgb(213,199,42)" fg:x="2431" fg:w="21"/><text x="8.2779%" y="511.50"></text></g><g><title>_platform_memmove (7 samples, 0.02%)</title><rect x="8.0741%" y="485" width="0.0231%" height="15" fill="rgb(235,201,11)" fg:x="2445" fg:w="7"/><text x="8.3241%" y="495.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (7 samples, 0.02%)</title><rect x="8.1104%" y="533" width="0.0231%" height="15" fill="rgb(207,46,11)" fg:x="2456" fg:w="7"/><text x="8.3604%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.11%)</title><rect x="8.1468%" y="517" width="0.1090%" height="15" fill="rgb(241,35,35)" fg:x="2467" fg:w="33"/><text x="8.3968%" y="527.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (28 samples, 0.09%)</title><rect x="8.1633%" y="501" width="0.0925%" height="15" fill="rgb(243,32,47)" fg:x="2472" fg:w="28"/><text x="8.4133%" y="511.50"></text></g><g><title>mi_free_block_delayed_mt (7 samples, 0.02%)</title><rect x="8.2689%" y="517" width="0.0231%" height="15" fill="rgb(247,202,23)" fg:x="2504" fg:w="7"/><text x="8.5189%" y="527.50"></text></g><g><title>mi_free_block_mt (4 samples, 0.01%)</title><rect x="8.2921%" y="517" width="0.0132%" height="15" fill="rgb(219,102,11)" fg:x="2511" fg:w="4"/><text x="8.5421%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (59 samples, 0.19%)</title><rect x="8.1335%" y="533" width="0.1948%" height="15" fill="rgb(243,110,44)" fg:x="2463" fg:w="59"/><text x="8.3835%" y="543.50"></text></g><g><title>mi_free_generic_mt (7 samples, 0.02%)</title><rect x="8.3053%" y="517" width="0.0231%" height="15" fill="rgb(222,74,54)" fg:x="2515" fg:w="7"/><text x="8.5553%" y="527.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="8.3416%" y="517" width="0.0132%" height="15" fill="rgb(216,99,12)" fg:x="2526" fg:w="4"/><text x="8.5916%" y="527.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (4 samples, 0.01%)</title><rect x="8.3614%" y="517" width="0.0132%" height="15" fill="rgb(226,22,26)" fg:x="2532" fg:w="4"/><text x="8.6114%" y="527.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.01%)</title><rect x="8.4043%" y="453" width="0.0132%" height="15" fill="rgb(217,163,10)" fg:x="2545" fg:w="4"/><text x="8.6543%" y="463.50"></text></g><g><title>pthread_cond_signal (4 samples, 0.01%)</title><rect x="8.4043%" y="437" width="0.0132%" height="15" fill="rgb(213,25,53)" fg:x="2545" fg:w="4"/><text x="8.6543%" y="447.50"></text></g><g><title>__psynch_cvsignal (4 samples, 0.01%)</title><rect x="8.4043%" y="421" width="0.0132%" height="15" fill="rgb(252,105,26)" fg:x="2545" fg:w="4"/><text x="8.6543%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (12 samples, 0.04%)</title><rect x="8.3812%" y="501" width="0.0396%" height="15" fill="rgb(220,39,43)" fg:x="2538" fg:w="12"/><text x="8.6312%" y="511.50"></text></g><g><title>tokio::runtime::context::with_scheduler (12 samples, 0.04%)</title><rect x="8.3812%" y="485" width="0.0396%" height="15" fill="rgb(229,68,48)" fg:x="2538" fg:w="12"/><text x="8.6312%" y="495.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (7 samples, 0.02%)</title><rect x="8.3977%" y="469" width="0.0231%" height="15" fill="rgb(252,8,32)" fg:x="2543" fg:w="7"/><text x="8.6477%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (29 samples, 0.10%)</title><rect x="8.3284%" y="533" width="0.0958%" height="15" fill="rgb(223,20,43)" fg:x="2522" fg:w="29"/><text x="8.5784%" y="543.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (13 samples, 0.04%)</title><rect x="8.3812%" y="517" width="0.0429%" height="15" fill="rgb(229,81,49)" fg:x="2538" fg:w="13"/><text x="8.6312%" y="527.50"></text></g><g><title>http::request::Builder::uri (33 samples, 0.11%)</title><rect x="8.4539%" y="533" width="0.1090%" height="15" fill="rgb(236,28,36)" fg:x="2560" fg:w="33"/><text x="8.7039%" y="543.50"></text></g><g><title>http::request::Builder::version (8 samples, 0.03%)</title><rect x="8.5628%" y="533" width="0.0264%" height="15" fill="rgb(249,185,26)" fg:x="2593" fg:w="8"/><text x="8.8128%" y="543.50"></text></g><g><title>http::request::Parts::new (8 samples, 0.03%)</title><rect x="8.5893%" y="533" width="0.0264%" height="15" fill="rgb(249,174,33)" fg:x="2601" fg:w="8"/><text x="8.8393%" y="543.50"></text></g><g><title>_platform_memmove (63 samples, 0.21%)</title><rect x="8.6619%" y="517" width="0.2080%" height="15" fill="rgb(233,201,37)" fg:x="2623" fg:w="63"/><text x="8.9119%" y="527.50"></text></g><g><title>mi_free (4 samples, 0.01%)</title><rect x="8.8733%" y="501" width="0.0132%" height="15" fill="rgb(221,78,26)" fg:x="2687" fg:w="4"/><text x="9.1233%" y="511.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (5 samples, 0.02%)</title><rect x="8.8733%" y="517" width="0.0165%" height="15" fill="rgb(250,127,30)" fg:x="2687" fg:w="5"/><text x="9.1233%" y="527.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (12 samples, 0.04%)</title><rect x="8.8997%" y="453" width="0.0396%" height="15" fill="rgb(230,49,44)" fg:x="2695" fg:w="12"/><text x="9.1497%" y="463.50"></text></g><g><title>_mi_heap_delayed_free_partial (15 samples, 0.05%)</title><rect x="8.8997%" y="485" width="0.0495%" height="15" fill="rgb(229,67,23)" fg:x="2695" fg:w="15"/><text x="9.1497%" y="495.50"></text></g><g><title>_mi_free_delayed_block (15 samples, 0.05%)</title><rect x="8.8997%" y="469" width="0.0495%" height="15" fill="rgb(249,83,47)" fg:x="2695" fg:w="15"/><text x="9.1497%" y="479.50"></text></g><g><title>mi_page_fresh_alloc (5 samples, 0.02%)</title><rect x="8.9525%" y="469" width="0.0165%" height="15" fill="rgb(215,43,3)" fg:x="2711" fg:w="5"/><text x="9.2025%" y="479.50"></text></g><g><title>mi_page_free_list_extend (5 samples, 0.02%)</title><rect x="8.9525%" y="453" width="0.0165%" height="15" fill="rgb(238,154,13)" fg:x="2711" fg:w="5"/><text x="9.2025%" y="463.50"></text></g><g><title>http_body_util::collected::Collected&lt;B&gt;::to_bytes (108 samples, 0.36%)</title><rect x="8.6157%" y="533" width="0.3566%" height="15" fill="rgb(219,56,2)" fg:x="2609" fg:w="108"/><text x="8.8657%" y="543.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (22 samples, 0.07%)</title><rect x="8.8997%" y="517" width="0.0727%" height="15" fill="rgb(233,0,4)" fg:x="2695" fg:w="22"/><text x="9.1497%" y="527.50"></text></g><g><title>_mi_malloc_generic (22 samples, 0.07%)</title><rect x="8.8997%" y="501" width="0.0727%" height="15" fill="rgb(235,30,7)" fg:x="2695" fg:w="22"/><text x="9.1497%" y="511.50"></text></g><g><title>mi_find_page (7 samples, 0.02%)</title><rect x="8.9492%" y="485" width="0.0231%" height="15" fill="rgb(250,79,13)" fg:x="2710" fg:w="7"/><text x="9.1992%" y="495.50"></text></g><g><title>_platform_memmove (46 samples, 0.15%)</title><rect x="9.0450%" y="517" width="0.1519%" height="15" fill="rgb(211,146,34)" fg:x="2739" fg:w="46"/><text x="9.2950%" y="527.50"></text></g><g><title>hyper_util::client::legacy::client::extract_domain (12 samples, 0.04%)</title><rect x="9.1969%" y="517" width="0.0396%" height="15" fill="rgb(228,22,38)" fg:x="2785" fg:w="12"/><text x="9.4469%" y="527.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (118 samples, 0.39%)</title><rect x="9.2827%" y="453" width="0.3897%" height="15" fill="rgb(235,168,5)" fg:x="2811" fg:w="118"/><text x="9.5327%" y="463.50"></text></g><g><title>_mi_page_retire (10 samples, 0.03%)</title><rect x="9.6724%" y="453" width="0.0330%" height="15" fill="rgb(221,155,16)" fg:x="2929" fg:w="10"/><text x="9.9224%" y="463.50"></text></g><g><title>mi_segment_page_clear (10 samples, 0.03%)</title><rect x="9.6724%" y="437" width="0.0330%" height="15" fill="rgb(215,215,53)" fg:x="2929" fg:w="10"/><text x="9.9224%" y="447.50"></text></g><g><title>mi_segment_span_free_coalesce (10 samples, 0.03%)</title><rect x="9.6724%" y="421" width="0.0330%" height="15" fill="rgb(223,4,10)" fg:x="2929" fg:w="10"/><text x="9.9224%" y="431.50"></text></g><g><title>mi_segment_span_free (9 samples, 0.03%)</title><rect x="9.6757%" y="405" width="0.0297%" height="15" fill="rgb(234,103,6)" fg:x="2930" fg:w="9"/><text x="9.9257%" y="415.50"></text></g><g><title>mi_segment_try_purge (6 samples, 0.02%)</title><rect x="9.6856%" y="389" width="0.0198%" height="15" fill="rgb(227,97,0)" fg:x="2933" fg:w="6"/><text x="9.9356%" y="399.50"></text></g><g><title>mi_segment_purge (6 samples, 0.02%)</title><rect x="9.6856%" y="373" width="0.0198%" height="15" fill="rgb(234,150,53)" fg:x="2933" fg:w="6"/><text x="9.9356%" y="383.50"></text></g><g><title>_mi_os_purge_ex (6 samples, 0.02%)</title><rect x="9.6856%" y="357" width="0.0198%" height="15" fill="rgb(228,201,54)" fg:x="2933" fg:w="6"/><text x="9.9356%" y="367.50"></text></g><g><title>mi_os_decommit_ex (6 samples, 0.02%)</title><rect x="9.6856%" y="341" width="0.0198%" height="15" fill="rgb(222,22,37)" fg:x="2933" fg:w="6"/><text x="9.9356%" y="351.50"></text></g><g><title>madvise (6 samples, 0.02%)</title><rect x="9.6856%" y="325" width="0.0198%" height="15" fill="rgb(237,53,32)" fg:x="2933" fg:w="6"/><text x="9.9356%" y="335.50"></text></g><g><title>_mi_heap_delayed_free_partial (130 samples, 0.43%)</title><rect x="9.2827%" y="485" width="0.4293%" height="15" fill="rgb(233,25,53)" fg:x="2811" fg:w="130"/><text x="9.5327%" y="495.50"></text></g><g><title>_mi_free_delayed_block (130 samples, 0.43%)</title><rect x="9.2827%" y="469" width="0.4293%" height="15" fill="rgb(210,40,34)" fg:x="2811" fg:w="130"/><text x="9.5327%" y="479.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (168 samples, 0.55%)</title><rect x="9.2365%" y="517" width="0.5548%" height="15" fill="rgb(241,220,44)" fg:x="2797" fg:w="168"/><text x="9.4865%" y="527.50"></text></g><g><title>_mi_malloc_generic (167 samples, 0.55%)</title><rect x="9.2398%" y="501" width="0.5515%" height="15" fill="rgb(235,28,35)" fg:x="2798" fg:w="167"/><text x="9.4898%" y="511.50"></text></g><g><title>mi_find_page (24 samples, 0.08%)</title><rect x="9.7120%" y="485" width="0.0793%" height="15" fill="rgb(210,56,17)" fg:x="2941" fg:w="24"/><text x="9.9620%" y="495.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::request (249 samples, 0.82%)</title><rect x="8.9723%" y="533" width="0.8223%" height="15" fill="rgb(224,130,29)" fg:x="2717" fg:w="249"/><text x="9.2223%" y="543.50"></text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (28 samples, 0.09%)</title><rect x="10.4617%" y="485" width="0.0925%" height="15" fill="rgb(235,212,8)" fg:x="3168" fg:w="28"/><text x="10.7117%" y="495.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="10.5541%" y="485" width="0.0132%" height="15" fill="rgb(223,33,50)" fg:x="3196" fg:w="4"/><text x="10.8041%" y="495.50"></text></g><g><title>_tlv_get_addr (6 samples, 0.02%)</title><rect x="10.5673%" y="485" width="0.0198%" height="15" fill="rgb(219,149,13)" fg:x="3200" fg:w="6"/><text x="10.8173%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.02%)</title><rect x="10.5871%" y="485" width="0.0231%" height="15" fill="rgb(250,156,29)" fg:x="3206" fg:w="7"/><text x="10.8371%" y="495.50"></text></g><g><title>mi_free (7 samples, 0.02%)</title><rect x="10.6103%" y="485" width="0.0231%" height="15" fill="rgb(216,193,19)" fg:x="3213" fg:w="7"/><text x="10.8603%" y="495.50"></text></g><g><title>mi_free_block_delayed_mt (8 samples, 0.03%)</title><rect x="10.6334%" y="485" width="0.0264%" height="15" fill="rgb(216,135,14)" fg:x="3220" fg:w="8"/><text x="10.8834%" y="495.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (116 samples, 0.38%)</title><rect x="10.2932%" y="501" width="0.3831%" height="15" fill="rgb(241,47,5)" fg:x="3117" fg:w="116"/><text x="10.5432%" y="511.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (155 samples, 0.51%)</title><rect x="10.1777%" y="517" width="0.5119%" height="15" fill="rgb(233,42,35)" fg:x="3082" fg:w="155"/><text x="10.4277%" y="527.50"></text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="10.6763%" y="501" width="0.0132%" height="15" fill="rgb(231,13,6)" fg:x="3233" fg:w="4"/><text x="10.9263%" y="511.50"></text></g><g><title>&lt;http::uri::authority::Authority as core::cmp::PartialEq&gt;::eq (8 samples, 0.03%)</title><rect x="10.7886%" y="485" width="0.0264%" height="15" fill="rgb(207,181,40)" fg:x="3267" fg:w="8"/><text x="11.0386%" y="495.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (17 samples, 0.06%)</title><rect x="10.8183%" y="485" width="0.0561%" height="15" fill="rgb(254,173,49)" fg:x="3276" fg:w="17"/><text x="11.0683%" y="495.50"></text></g><g><title>_pthread_mutex_firstfit_wake (17 samples, 0.06%)</title><rect x="10.8183%" y="469" width="0.0561%" height="15" fill="rgb(221,1,38)" fg:x="3276" fg:w="17"/><text x="11.0683%" y="479.50"></text></g><g><title>__psynch_mutexdrop (17 samples, 0.06%)</title><rect x="10.8183%" y="453" width="0.0561%" height="15" fill="rgb(206,124,46)" fg:x="3276" fg:w="17"/><text x="11.0683%" y="463.50"></text></g><g><title>&lt;http::uri::scheme::Scheme as core::hash::Hash&gt;::hash (5 samples, 0.02%)</title><rect x="10.8910%" y="469" width="0.0165%" height="15" fill="rgb(249,21,11)" fg:x="3298" fg:w="5"/><text x="11.1410%" y="479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="10.8910%" y="453" width="0.0165%" height="15" fill="rgb(222,201,40)" fg:x="3298" fg:w="5"/><text x="11.1410%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (23 samples, 0.08%)</title><rect x="10.8744%" y="485" width="0.0760%" height="15" fill="rgb(235,61,29)" fg:x="3293" fg:w="23"/><text x="11.1244%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.04%)</title><rect x="10.9075%" y="469" width="0.0429%" height="15" fill="rgb(219,207,3)" fg:x="3303" fg:w="13"/><text x="11.1575%" y="479.50"></text></g><g><title>clock_gettime_nsec_np (34 samples, 0.11%)</title><rect x="10.9570%" y="437" width="0.1123%" height="15" fill="rgb(222,56,46)" fg:x="3318" fg:w="34"/><text x="11.2070%" y="447.50"></text></g><g><title>mach_absolute_time (29 samples, 0.10%)</title><rect x="10.9735%" y="421" width="0.0958%" height="15" fill="rgb(239,76,54)" fg:x="3323" fg:w="29"/><text x="11.2235%" y="431.50"></text></g><g><title>hyper_util::client::legacy::pool::Expiration::expires (37 samples, 0.12%)</title><rect x="10.9504%" y="485" width="0.1222%" height="15" fill="rgb(231,124,27)" fg:x="3316" fg:w="37"/><text x="11.2004%" y="495.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (35 samples, 0.12%)</title><rect x="10.9570%" y="469" width="0.1156%" height="15" fill="rgb(249,195,6)" fg:x="3318" fg:w="35"/><text x="11.2070%" y="479.50"></text></g><g><title>clock_gettime (35 samples, 0.12%)</title><rect x="10.9570%" y="453" width="0.1156%" height="15" fill="rgb(237,174,47)" fg:x="3318" fg:w="35"/><text x="11.2070%" y="463.50"></text></g><g><title>hyper_util::client::legacy::pool::Pool&lt;T,K&gt;::reuse (8 samples, 0.03%)</title><rect x="11.0726%" y="485" width="0.0264%" height="15" fill="rgb(206,201,31)" fg:x="3353" fg:w="8"/><text x="11.3226%" y="495.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (33 samples, 0.11%)</title><rect x="11.1023%" y="469" width="0.1090%" height="15" fill="rgb(231,57,52)" fg:x="3362" fg:w="33"/><text x="11.3523%" y="479.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (31 samples, 0.10%)</title><rect x="11.1089%" y="453" width="0.1024%" height="15" fill="rgb(248,177,22)" fg:x="3364" fg:w="31"/><text x="11.3589%" y="463.50"></text></g><g><title>__psynch_mutexwait (31 samples, 0.10%)</title><rect x="11.1089%" y="437" width="0.1024%" height="15" fill="rgb(215,211,37)" fg:x="3364" fg:w="31"/><text x="11.3589%" y="447.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (38 samples, 0.13%)</title><rect x="11.1023%" y="485" width="0.1255%" height="15" fill="rgb(241,128,51)" fg:x="3362" fg:w="38"/><text x="11.3523%" y="495.50"></text></g><g><title>pthread_mutex_lock (5 samples, 0.02%)</title><rect x="11.2113%" y="469" width="0.0165%" height="15" fill="rgb(227,165,31)" fg:x="3395" fg:w="5"/><text x="11.4613%" y="479.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Checkout&lt;T,K&gt; as core::future::future::Future&gt;::poll (156 samples, 0.52%)</title><rect x="10.7159%" y="501" width="0.5152%" height="15" fill="rgb(228,167,24)" fg:x="3245" fg:w="156"/><text x="10.9659%" y="511.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (180 samples, 0.59%)</title><rect x="10.6895%" y="517" width="0.5944%" height="15" fill="rgb(228,143,12)" fg:x="3237" fg:w="180"/><text x="10.9395%" y="527.50"></text></g><g><title>_platform_memmove (12 samples, 0.04%)</title><rect x="11.2443%" y="501" width="0.0396%" height="15" fill="rgb(249,149,8)" fg:x="3405" fg:w="12"/><text x="11.4943%" y="511.50"></text></g><g><title>&lt;http::uri::Uri as core::clone::Clone&gt;::clone (13 samples, 0.04%)</title><rect x="11.2839%" y="517" width="0.0429%" height="15" fill="rgb(243,35,44)" fg:x="3417" fg:w="13"/><text x="11.5339%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.01%)</title><rect x="11.3467%" y="469" width="0.0132%" height="15" fill="rgb(246,89,9)" fg:x="3436" fg:w="4"/><text x="11.5967%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.01%)</title><rect x="11.3467%" y="453" width="0.0132%" height="15" fill="rgb(233,213,13)" fg:x="3436" fg:w="4"/><text x="11.5967%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.01%)</title><rect x="11.3731%" y="453" width="0.0132%" height="15" fill="rgb(233,141,41)" fg:x="3444" fg:w="4"/><text x="11.6231%" y="463.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="11.3863%" y="453" width="0.0132%" height="15" fill="rgb(239,167,4)" fg:x="3448" fg:w="4"/><text x="11.6363%" y="463.50"></text></g><g><title>_mi_malloc_generic (4 samples, 0.01%)</title><rect x="11.3863%" y="437" width="0.0132%" height="15" fill="rgb(209,217,16)" fg:x="3448" fg:w="4"/><text x="11.6363%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (18 samples, 0.06%)</title><rect x="11.3434%" y="485" width="0.0594%" height="15" fill="rgb(219,88,35)" fg:x="3435" fg:w="18"/><text x="11.5934%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.04%)</title><rect x="11.3599%" y="469" width="0.0429%" height="15" fill="rgb(220,193,23)" fg:x="3440" fg:w="13"/><text x="11.6099%" y="479.50"></text></g><g><title>http::extensions::Extensions::insert (30 samples, 0.10%)</title><rect x="11.3302%" y="501" width="0.0991%" height="15" fill="rgb(230,90,52)" fg:x="3431" fg:w="30"/><text x="11.5802%" y="511.50"></text></g><g><title>mi_malloc_aligned (6 samples, 0.02%)</title><rect x="11.4094%" y="485" width="0.0198%" height="15" fill="rgb(252,106,19)" fg:x="3455" fg:w="6"/><text x="11.6594%" y="495.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::ExtraEnvelope&lt;T&gt; as hyper_util::client::legacy::connect::ExtraInner&gt;::set (35 samples, 0.12%)</title><rect x="11.3269%" y="517" width="0.1156%" height="15" fill="rgb(206,74,20)" fg:x="3430" fg:w="35"/><text x="11.5769%" y="527.50"></text></g><g><title>mi_malloc_aligned (4 samples, 0.01%)</title><rect x="11.4292%" y="501" width="0.0132%" height="15" fill="rgb(230,138,44)" fg:x="3461" fg:w="4"/><text x="11.6792%" y="511.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioExecutor as hyper::rt::Executor&lt;Fut&gt;&gt;::execute (17 samples, 0.06%)</title><rect x="11.4457%" y="517" width="0.0561%" height="15" fill="rgb(235,182,43)" fg:x="3466" fg:w="17"/><text x="11.6957%" y="527.50"></text></g><g><title>tokio::task::spawn::spawn (14 samples, 0.05%)</title><rect x="11.4557%" y="501" width="0.0462%" height="15" fill="rgb(242,16,51)" fg:x="3469" fg:w="14"/><text x="11.7057%" y="511.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::bind_new_task (10 samples, 0.03%)</title><rect x="11.4689%" y="485" width="0.0330%" height="15" fill="rgb(248,9,4)" fg:x="3473" fg:w="10"/><text x="11.7189%" y="495.50"></text></g><g><title>_platform_memmove (21 samples, 0.07%)</title><rect x="11.5118%" y="517" width="0.0693%" height="15" fill="rgb(210,31,22)" fg:x="3486" fg:w="21"/><text x="11.7618%" y="527.50"></text></g><g><title>bytes::bytes::shared_drop (18 samples, 0.06%)</title><rect x="11.5877%" y="517" width="0.0594%" height="15" fill="rgb(239,54,39)" fg:x="3509" fg:w="18"/><text x="11.8377%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (4 samples, 0.01%)</title><rect x="11.6505%" y="517" width="0.0132%" height="15" fill="rgb(230,99,41)" fg:x="3528" fg:w="4"/><text x="11.9005%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;hyper_util::client::legacy::connect::http::HttpConnector,http_body_util::full::Full&lt;bytes::bytes::Bytes&gt;&gt;&gt; (18 samples, 0.06%)</title><rect x="11.6835%" y="517" width="0.0594%" height="15" fill="rgb(253,106,12)" fg:x="3538" fg:w="18"/><text x="11.9335%" y="527.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (26 samples, 0.09%)</title><rect x="11.7760%" y="485" width="0.0859%" height="15" fill="rgb(213,46,41)" fg:x="3566" fg:w="26"/><text x="12.0260%" y="495.50"></text></g><g><title>_pthread_mutex_firstfit_wake (26 samples, 0.09%)</title><rect x="11.7760%" y="469" width="0.0859%" height="15" fill="rgb(215,133,35)" fg:x="3566" fg:w="26"/><text x="12.0260%" y="479.50"></text></g><g><title>__psynch_mutexdrop (26 samples, 0.09%)</title><rect x="11.7760%" y="453" width="0.0859%" height="15" fill="rgb(213,28,5)" fg:x="3566" fg:w="26"/><text x="12.0260%" y="463.50"></text></g><g><title>&lt;http::uri::authority::Authority as core::cmp::PartialEq&gt;::eq (17 samples, 0.06%)</title><rect x="11.9411%" y="469" width="0.0561%" height="15" fill="rgb(215,77,49)" fg:x="3616" fg:w="17"/><text x="12.1911%" y="479.50"></text></g><g><title>&lt;http::uri::scheme::Scheme as core::cmp::PartialEq&gt;::eq (5 samples, 0.02%)</title><rect x="11.9972%" y="469" width="0.0165%" height="15" fill="rgb(248,100,22)" fg:x="3633" fg:w="5"/><text x="12.2472%" y="479.50"></text></g><g><title>&lt;http::uri::scheme::Scheme as core::hash::Hash&gt;::hash (4 samples, 0.01%)</title><rect x="12.0402%" y="453" width="0.0132%" height="15" fill="rgb(208,67,9)" fg:x="3646" fg:w="4"/><text x="12.2902%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (39 samples, 0.13%)</title><rect x="12.0236%" y="469" width="0.1288%" height="15" fill="rgb(219,133,21)" fg:x="3641" fg:w="39"/><text x="12.2736%" y="479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 0.10%)</title><rect x="12.0534%" y="453" width="0.0991%" height="15" fill="rgb(246,46,29)" fg:x="3650" fg:w="30"/><text x="12.3034%" y="463.50"></text></g><g><title>mach_absolute_time (5 samples, 0.02%)</title><rect x="12.1855%" y="421" width="0.0165%" height="15" fill="rgb(246,185,52)" fg:x="3690" fg:w="5"/><text x="12.4355%" y="431.50"></text></g><g><title>clock_gettime_nsec_np (13 samples, 0.04%)</title><rect x="12.1623%" y="437" width="0.0429%" height="15" fill="rgb(252,136,11)" fg:x="3683" fg:w="13"/><text x="12.4123%" y="447.50"></text></g><g><title>hyper_util::client::legacy::pool::PoolInner&lt;T,K&gt;::put (100 samples, 0.33%)</title><rect x="11.8783%" y="485" width="0.3302%" height="15" fill="rgb(219,138,53)" fg:x="3597" fg:w="100"/><text x="12.1283%" y="495.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (17 samples, 0.06%)</title><rect x="12.1524%" y="469" width="0.0561%" height="15" fill="rgb(211,51,23)" fg:x="3680" fg:w="17"/><text x="12.4024%" y="479.50"></text></g><g><title>clock_gettime (15 samples, 0.05%)</title><rect x="12.1590%" y="453" width="0.0495%" height="15" fill="rgb(247,221,28)" fg:x="3682" fg:w="15"/><text x="12.4090%" y="463.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (30 samples, 0.10%)</title><rect x="12.2119%" y="469" width="0.0991%" height="15" fill="rgb(251,222,45)" fg:x="3698" fg:w="30"/><text x="12.4619%" y="479.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (30 samples, 0.10%)</title><rect x="12.2119%" y="453" width="0.0991%" height="15" fill="rgb(217,162,53)" fg:x="3698" fg:w="30"/><text x="12.4619%" y="463.50"></text></g><g><title>__psynch_mutexwait (30 samples, 0.10%)</title><rect x="12.2119%" y="437" width="0.0991%" height="15" fill="rgb(229,93,14)" fg:x="3698" fg:w="30"/><text x="12.4619%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;http_body_util::full::Full&lt;bytes::bytes::Bytes&gt;&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (178 samples, 0.59%)</title><rect x="11.7429%" y="517" width="0.5878%" height="15" fill="rgb(209,67,49)" fg:x="3556" fg:w="178"/><text x="11.9929%" y="527.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Pooled&lt;T,K&gt; as core::ops::drop::Drop&gt;::drop (176 samples, 0.58%)</title><rect x="11.7496%" y="501" width="0.5812%" height="15" fill="rgb(213,87,29)" fg:x="3558" fg:w="176"/><text x="11.9996%" y="511.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (37 samples, 0.12%)</title><rect x="12.2086%" y="485" width="0.1222%" height="15" fill="rgb(205,151,52)" fg:x="3697" fg:w="37"/><text x="12.4586%" y="495.50"></text></g><g><title>pthread_mutex_lock (6 samples, 0.02%)</title><rect x="12.3109%" y="469" width="0.0198%" height="15" fill="rgb(253,215,39)" fg:x="3728" fg:w="6"/><text x="12.5609%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.01%)</title><rect x="12.3737%" y="469" width="0.0132%" height="15" fill="rgb(221,220,41)" fg:x="3747" fg:w="4"/><text x="12.6237%" y="479.50"></text></g><g><title>_mi_heap_realloc_zero (5 samples, 0.02%)</title><rect x="12.4166%" y="405" width="0.0165%" height="15" fill="rgb(218,133,21)" fg:x="3760" fg:w="5"/><text x="12.6666%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (11 samples, 0.04%)</title><rect x="12.4034%" y="453" width="0.0363%" height="15" fill="rgb(221,193,43)" fg:x="3756" fg:w="11"/><text x="12.6534%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (7 samples, 0.02%)</title><rect x="12.4166%" y="437" width="0.0231%" height="15" fill="rgb(240,128,52)" fg:x="3760" fg:w="7"/><text x="12.6666%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.02%)</title><rect x="12.4166%" y="421" width="0.0231%" height="15" fill="rgb(253,114,12)" fg:x="3760" fg:w="7"/><text x="12.6666%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (31 samples, 0.10%)</title><rect x="12.3572%" y="501" width="0.1024%" height="15" fill="rgb(215,223,47)" fg:x="3742" fg:w="31"/><text x="12.6072%" y="511.50"></text></g><g><title>core::fmt::write (27 samples, 0.09%)</title><rect x="12.3704%" y="485" width="0.0892%" height="15" fill="rgb(248,225,23)" fg:x="3746" fg:w="27"/><text x="12.6204%" y="495.50"></text></g><g><title>core::fmt::num::imp::_&lt;impl u16&gt;::_fmt (18 samples, 0.06%)</title><rect x="12.4001%" y="469" width="0.0594%" height="15" fill="rgb(250,108,0)" fg:x="3755" fg:w="18"/><text x="12.6501%" y="479.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (6 samples, 0.02%)</title><rect x="12.4595%" y="501" width="0.0198%" height="15" fill="rgb(228,208,7)" fg:x="3773" fg:w="6"/><text x="12.7095%" y="511.50"></text></g><g><title>_mi_heap_delayed_free_partial (6 samples, 0.02%)</title><rect x="12.5421%" y="421" width="0.0198%" height="15" fill="rgb(244,45,10)" fg:x="3798" fg:w="6"/><text x="12.7921%" y="431.50"></text></g><g><title>_mi_free_delayed_block (6 samples, 0.02%)</title><rect x="12.5421%" y="405" width="0.0198%" height="15" fill="rgb(207,125,25)" fg:x="3798" fg:w="6"/><text x="12.7921%" y="415.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (6 samples, 0.02%)</title><rect x="12.5421%" y="389" width="0.0198%" height="15" fill="rgb(210,195,18)" fg:x="3798" fg:w="6"/><text x="12.7921%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (30 samples, 0.10%)</title><rect x="12.4827%" y="485" width="0.0991%" height="15" fill="rgb(249,80,12)" fg:x="3780" fg:w="30"/><text x="12.7327%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (17 samples, 0.06%)</title><rect x="12.5256%" y="469" width="0.0561%" height="15" fill="rgb(221,65,9)" fg:x="3793" fg:w="17"/><text x="12.7756%" y="479.50"></text></g><g><title>_mi_heap_realloc_zero (17 samples, 0.06%)</title><rect x="12.5256%" y="453" width="0.0561%" height="15" fill="rgb(235,49,36)" fg:x="3793" fg:w="17"/><text x="12.7756%" y="463.50"></text></g><g><title>_mi_malloc_generic (12 samples, 0.04%)</title><rect x="12.5421%" y="437" width="0.0396%" height="15" fill="rgb(225,32,20)" fg:x="3798" fg:w="12"/><text x="12.7921%" y="447.50"></text></g><g><title>mi_find_page (6 samples, 0.02%)</title><rect x="12.5619%" y="421" width="0.0198%" height="15" fill="rgb(215,141,46)" fg:x="3804" fg:w="6"/><text x="12.8119%" y="431.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert_entry (32 samples, 0.11%)</title><rect x="12.4794%" y="501" width="0.1057%" height="15" fill="rgb(250,160,47)" fg:x="3779" fg:w="32"/><text x="12.7294%" y="511.50"></text></g><g><title>http::uri::authority::Authority::port (4 samples, 0.01%)</title><rect x="12.5850%" y="501" width="0.0132%" height="15" fill="rgb(216,222,40)" fg:x="3811" fg:w="4"/><text x="12.8350%" y="511.50"></text></g><g><title>http::uri::authority::host (5 samples, 0.02%)</title><rect x="12.5982%" y="501" width="0.0165%" height="15" fill="rgb(234,217,39)" fg:x="3815" fg:w="5"/><text x="12.8482%" y="511.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (5 samples, 0.02%)</title><rect x="12.5982%" y="485" width="0.0165%" height="15" fill="rgb(207,178,40)" fg:x="3815" fg:w="5"/><text x="12.8482%" y="495.50"></text></g><g><title>hyper_util::client::legacy::client::get_non_default_port (4 samples, 0.01%)</title><rect x="12.6148%" y="501" width="0.0132%" height="15" fill="rgb(221,136,13)" fg:x="3820" fg:w="4"/><text x="12.8648%" y="511.50"></text></g><g><title>http::uri::authority::Authority::port (4 samples, 0.01%)</title><rect x="12.6148%" y="485" width="0.0132%" height="15" fill="rgb(249,199,10)" fg:x="3820" fg:w="4"/><text x="12.8648%" y="495.50"></text></g><g><title>http::header::map::Entry&lt;T&gt;::or_insert_with (91 samples, 0.30%)</title><rect x="12.3341%" y="517" width="0.3005%" height="15" fill="rgb(249,222,13)" fg:x="3735" fg:w="91"/><text x="12.5841%" y="527.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_entry2 (6 samples, 0.02%)</title><rect x="12.6346%" y="517" width="0.0198%" height="15" fill="rgb(244,185,38)" fg:x="3826" fg:w="6"/><text x="12.8846%" y="527.50"></text></g><g><title>_platform_memmove (7 samples, 0.02%)</title><rect x="12.6841%" y="501" width="0.0231%" height="15" fill="rgb(236,202,9)" fg:x="3841" fg:w="7"/><text x="12.9341%" y="511.50"></text></g><g><title>_mi_heap_delayed_free_partial (4 samples, 0.01%)</title><rect x="12.7105%" y="469" width="0.0132%" height="15" fill="rgb(250,229,37)" fg:x="3849" fg:w="4"/><text x="12.9605%" y="479.50"></text></g><g><title>_mi_free_delayed_block (4 samples, 0.01%)</title><rect x="12.7105%" y="453" width="0.0132%" height="15" fill="rgb(206,174,23)" fg:x="3849" fg:w="4"/><text x="12.9605%" y="463.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (4 samples, 0.01%)</title><rect x="12.7105%" y="437" width="0.0132%" height="15" fill="rgb(211,33,43)" fg:x="3849" fg:w="4"/><text x="12.9605%" y="447.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (9 samples, 0.03%)</title><rect x="12.7072%" y="501" width="0.0297%" height="15" fill="rgb(245,58,50)" fg:x="3848" fg:w="9"/><text x="12.9572%" y="511.50"></text></g><g><title>_mi_malloc_generic (9 samples, 0.03%)</title><rect x="12.7072%" y="485" width="0.0297%" height="15" fill="rgb(244,68,36)" fg:x="3848" fg:w="9"/><text x="12.9572%" y="495.50"></text></g><g><title>mi_find_page (4 samples, 0.01%)</title><rect x="12.7237%" y="469" width="0.0132%" height="15" fill="rgb(232,229,15)" fg:x="3853" fg:w="4"/><text x="12.9737%" y="479.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (5 samples, 0.02%)</title><rect x="12.7402%" y="501" width="0.0165%" height="15" fill="rgb(254,30,23)" fg:x="3858" fg:w="5"/><text x="12.9902%" y="511.50"></text></g><g><title>_platform_memmove (13 samples, 0.04%)</title><rect x="12.7700%" y="485" width="0.0429%" height="15" fill="rgb(235,160,14)" fg:x="3867" fg:w="13"/><text x="13.0200%" y="495.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (8 samples, 0.03%)</title><rect x="12.8558%" y="421" width="0.0264%" height="15" fill="rgb(212,155,44)" fg:x="3893" fg:w="8"/><text x="13.1058%" y="431.50"></text></g><g><title>mio::waker::Waker::wake (8 samples, 0.03%)</title><rect x="12.8558%" y="405" width="0.0264%" height="15" fill="rgb(226,2,50)" fg:x="3893" fg:w="8"/><text x="13.1058%" y="415.50"></text></g><g><title>kevent (8 samples, 0.03%)</title><rect x="12.8558%" y="389" width="0.0264%" height="15" fill="rgb(234,177,6)" fg:x="3893" fg:w="8"/><text x="13.1058%" y="399.50"></text></g><g><title>pthread_cond_signal (11 samples, 0.04%)</title><rect x="12.8888%" y="405" width="0.0363%" height="15" fill="rgb(217,24,9)" fg:x="3903" fg:w="11"/><text x="13.1388%" y="415.50"></text></g><g><title>__psynch_cvsignal (11 samples, 0.04%)</title><rect x="12.8888%" y="389" width="0.0363%" height="15" fill="rgb(220,13,46)" fg:x="3903" fg:w="11"/><text x="13.1388%" y="399.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (17 samples, 0.06%)</title><rect x="12.8822%" y="421" width="0.0561%" height="15" fill="rgb(239,221,27)" fg:x="3901" fg:w="17"/><text x="13.1322%" y="431.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4 samples, 0.01%)</title><rect x="12.9252%" y="405" width="0.0132%" height="15" fill="rgb(222,198,25)" fg:x="3914" fg:w="4"/><text x="13.1752%" y="415.50"></text></g><g><title>clock_gettime (4 samples, 0.01%)</title><rect x="12.9252%" y="389" width="0.0132%" height="15" fill="rgb(211,99,13)" fg:x="3914" fg:w="4"/><text x="13.1752%" y="399.50"></text></g><g><title>clock_gettime_nsec_np (4 samples, 0.01%)</title><rect x="12.9252%" y="373" width="0.0132%" height="15" fill="rgb(232,111,31)" fg:x="3914" fg:w="4"/><text x="13.1752%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (43 samples, 0.14%)</title><rect x="12.8162%" y="469" width="0.1420%" height="15" fill="rgb(245,82,37)" fg:x="3881" fg:w="43"/><text x="13.0662%" y="479.50"></text></g><g><title>tokio::runtime::context::with_scheduler (43 samples, 0.14%)</title><rect x="12.8162%" y="453" width="0.1420%" height="15" fill="rgb(227,149,46)" fg:x="3881" fg:w="43"/><text x="13.0662%" y="463.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (33 samples, 0.11%)</title><rect x="12.8492%" y="437" width="0.1090%" height="15" fill="rgb(218,36,50)" fg:x="3891" fg:w="33"/><text x="13.0992%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (6 samples, 0.02%)</title><rect x="12.9384%" y="421" width="0.0198%" height="15" fill="rgb(226,80,48)" fg:x="3918" fg:w="6"/><text x="13.1884%" y="431.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (56 samples, 0.18%)</title><rect x="12.8129%" y="485" width="0.1849%" height="15" fill="rgb(238,224,15)" fg:x="3880" fg:w="56"/><text x="13.0629%" y="495.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (12 samples, 0.04%)</title><rect x="12.9582%" y="469" width="0.0396%" height="15" fill="rgb(241,136,10)" fg:x="3924" fg:w="12"/><text x="13.2082%" y="479.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (14 samples, 0.05%)</title><rect x="12.9978%" y="485" width="0.0462%" height="15" fill="rgb(208,32,45)" fg:x="3936" fg:w="14"/><text x="13.2478%" y="495.50"></text></g><g><title>hyper::client::dispatch::Sender&lt;T,U&gt;::try_send (127 samples, 0.42%)</title><rect x="12.6577%" y="517" width="0.4194%" height="15" fill="rgb(207,135,9)" fg:x="3833" fg:w="127"/><text x="12.9077%" y="527.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (97 samples, 0.32%)</title><rect x="12.7568%" y="501" width="0.3203%" height="15" fill="rgb(206,86,44)" fg:x="3863" fg:w="97"/><text x="13.0068%" y="511.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (10 samples, 0.03%)</title><rect x="13.0441%" y="485" width="0.0330%" height="15" fill="rgb(245,177,15)" fg:x="3950" fg:w="10"/><text x="13.2941%" y="495.50"></text></g><g><title>http::uri::builder::Builder::build (8 samples, 0.03%)</title><rect x="13.1068%" y="485" width="0.0264%" height="15" fill="rgb(206,64,50)" fg:x="3969" fg:w="8"/><text x="13.3568%" y="495.50"></text></g><g><title>http::uri::Uri::from_parts (6 samples, 0.02%)</title><rect x="13.1134%" y="469" width="0.0198%" height="15" fill="rgb(234,36,40)" fg:x="3971" fg:w="6"/><text x="13.3634%" y="479.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (5 samples, 0.02%)</title><rect x="13.1662%" y="469" width="0.0165%" height="15" fill="rgb(213,64,8)" fg:x="3987" fg:w="5"/><text x="13.4162%" y="479.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::connect_to (36 samples, 0.12%)</title><rect x="13.0771%" y="517" width="0.1189%" height="15" fill="rgb(210,75,36)" fg:x="3960" fg:w="36"/><text x="13.3271%" y="527.50"></text></g><g><title>hyper_util::client::legacy::client::domain_as_uri (29 samples, 0.10%)</title><rect x="13.1002%" y="501" width="0.0958%" height="15" fill="rgb(229,88,21)" fg:x="3967" fg:w="29"/><text x="13.3502%" y="511.50"></text></g><g><title>http::uri::builder::Builder::map (19 samples, 0.06%)</title><rect x="13.1332%" y="485" width="0.0627%" height="15" fill="rgb(252,204,47)" fg:x="3977" fg:w="19"/><text x="13.3832%" y="495.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (4 samples, 0.01%)</title><rect x="13.1827%" y="469" width="0.0132%" height="15" fill="rgb(208,77,27)" fg:x="3992" fg:w="4"/><text x="13.4327%" y="479.50"></text></g><g><title>hyper_util::client::legacy::client::origin_form (16 samples, 0.05%)</title><rect x="13.1993%" y="517" width="0.0528%" height="15" fill="rgb(221,76,26)" fg:x="3997" fg:w="16"/><text x="13.4493%" y="527.50"></text></g><g><title>http::uri::Uri::from_parts (6 samples, 0.02%)</title><rect x="13.2323%" y="501" width="0.0198%" height="15" fill="rgb(225,139,18)" fg:x="4007" fg:w="6"/><text x="13.4823%" y="511.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::_{{closure}} (1,051 samples, 3.47%)</title><rect x="9.7946%" y="533" width="3.4707%" height="15" fill="rgb(230,137,11)" fg:x="2966" fg:w="1051"/><text x="10.0446%" y="543.50">hyp..</text></g><g><title>mi_free (12 samples, 0.04%)</title><rect x="13.2653%" y="533" width="0.0396%" height="15" fill="rgb(212,28,1)" fg:x="4017" fg:w="12"/><text x="13.5153%" y="543.50"></text></g><g><title>mi_free_block_delayed_mt (13 samples, 0.04%)</title><rect x="13.3049%" y="533" width="0.0429%" height="15" fill="rgb(248,164,17)" fg:x="4029" fg:w="13"/><text x="13.5549%" y="543.50"></text></g><g><title>mi_free_generic_mt (10 samples, 0.03%)</title><rect x="13.3479%" y="533" width="0.0330%" height="15" fill="rgb(222,171,42)" fg:x="4042" fg:w="10"/><text x="13.5979%" y="543.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (117 samples, 0.39%)</title><rect x="13.3809%" y="469" width="0.3864%" height="15" fill="rgb(243,84,45)" fg:x="4052" fg:w="117"/><text x="13.6309%" y="479.50"></text></g><g><title>_mi_page_retire (9 samples, 0.03%)</title><rect x="13.7673%" y="469" width="0.0297%" height="15" fill="rgb(252,49,23)" fg:x="4169" fg:w="9"/><text x="14.0173%" y="479.50"></text></g><g><title>mi_segment_page_clear (8 samples, 0.03%)</title><rect x="13.7706%" y="453" width="0.0264%" height="15" fill="rgb(215,19,7)" fg:x="4170" fg:w="8"/><text x="14.0206%" y="463.50"></text></g><g><title>mi_segment_span_free_coalesce (8 samples, 0.03%)</title><rect x="13.7706%" y="437" width="0.0264%" height="15" fill="rgb(238,81,41)" fg:x="4170" fg:w="8"/><text x="14.0206%" y="447.50"></text></g><g><title>mi_segment_span_free (8 samples, 0.03%)</title><rect x="13.7706%" y="421" width="0.0264%" height="15" fill="rgb(210,199,37)" fg:x="4170" fg:w="8"/><text x="14.0206%" y="431.50"></text></g><g><title>mi_segment_try_purge (7 samples, 0.02%)</title><rect x="13.7739%" y="405" width="0.0231%" height="15" fill="rgb(244,192,49)" fg:x="4171" fg:w="7"/><text x="14.0239%" y="415.50"></text></g><g><title>mi_segment_purge (7 samples, 0.02%)</title><rect x="13.7739%" y="389" width="0.0231%" height="15" fill="rgb(226,211,11)" fg:x="4171" fg:w="7"/><text x="14.0239%" y="399.50"></text></g><g><title>_mi_os_purge_ex (7 samples, 0.02%)</title><rect x="13.7739%" y="373" width="0.0231%" height="15" fill="rgb(236,162,54)" fg:x="4171" fg:w="7"/><text x="14.0239%" y="383.50"></text></g><g><title>mi_os_decommit_ex (7 samples, 0.02%)</title><rect x="13.7739%" y="357" width="0.0231%" height="15" fill="rgb(220,229,9)" fg:x="4171" fg:w="7"/><text x="14.0239%" y="367.50"></text></g><g><title>madvise (7 samples, 0.02%)</title><rect x="13.7739%" y="341" width="0.0231%" height="15" fill="rgb(250,87,22)" fg:x="4171" fg:w="7"/><text x="14.0239%" y="351.50"></text></g><g><title>_mi_heap_delayed_free_partial (129 samples, 0.43%)</title><rect x="13.3809%" y="501" width="0.4260%" height="15" fill="rgb(239,43,17)" fg:x="4052" fg:w="129"/><text x="13.6309%" y="511.50"></text></g><g><title>_mi_free_delayed_block (129 samples, 0.43%)</title><rect x="13.3809%" y="485" width="0.4260%" height="15" fill="rgb(231,177,25)" fg:x="4052" fg:w="129"/><text x="13.6309%" y="495.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (134 samples, 0.44%)</title><rect x="13.3809%" y="533" width="0.4425%" height="15" fill="rgb(219,179,1)" fg:x="4052" fg:w="134"/><text x="13.6309%" y="543.50"></text></g><g><title>_mi_malloc_generic (134 samples, 0.44%)</title><rect x="13.3809%" y="517" width="0.4425%" height="15" fill="rgb(238,219,53)" fg:x="4052" fg:w="134"/><text x="13.6309%" y="527.50"></text></g><g><title>mi_find_page (5 samples, 0.02%)</title><rect x="13.8069%" y="501" width="0.0165%" height="15" fill="rgb(232,167,36)" fg:x="4181" fg:w="5"/><text x="14.0569%" y="511.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.04%)</title><rect x="14.2659%" y="453" width="0.0396%" height="15" fill="rgb(244,19,51)" fg:x="4320" fg:w="12"/><text x="14.5159%" y="463.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.04%)</title><rect x="16.1053%" y="373" width="0.0396%" height="15" fill="rgb(224,6,22)" fg:x="4877" fg:w="12"/><text x="16.3553%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (21 samples, 0.07%)</title><rect x="16.2572%" y="341" width="0.0693%" height="15" fill="rgb(224,145,5)" fg:x="4923" fg:w="21"/><text x="16.5072%" y="351.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="16.3067%" y="325" width="0.0198%" height="15" fill="rgb(234,130,49)" fg:x="4938" fg:w="6"/><text x="16.5567%" y="335.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (8 samples, 0.03%)</title><rect x="16.3265%" y="277" width="0.0264%" height="15" fill="rgb(254,6,2)" fg:x="4944" fg:w="8"/><text x="16.5765%" y="287.50"></text></g><g><title>_mi_heap_delayed_free_partial (9 samples, 0.03%)</title><rect x="16.3265%" y="309" width="0.0297%" height="15" fill="rgb(208,96,46)" fg:x="4944" fg:w="9"/><text x="16.5765%" y="319.50"></text></g><g><title>_mi_free_delayed_block (9 samples, 0.03%)</title><rect x="16.3265%" y="293" width="0.0297%" height="15" fill="rgb(239,3,39)" fg:x="4944" fg:w="9"/><text x="16.5765%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (50 samples, 0.17%)</title><rect x="16.2043%" y="357" width="0.1651%" height="15" fill="rgb(233,210,1)" fg:x="4907" fg:w="50"/><text x="16.4543%" y="367.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (13 samples, 0.04%)</title><rect x="16.3265%" y="341" width="0.0429%" height="15" fill="rgb(244,137,37)" fg:x="4944" fg:w="13"/><text x="16.5765%" y="351.50"></text></g><g><title>_mi_malloc_generic (13 samples, 0.04%)</title><rect x="16.3265%" y="325" width="0.0429%" height="15" fill="rgb(240,136,2)" fg:x="4944" fg:w="13"/><text x="16.5765%" y="335.50"></text></g><g><title>mi_find_page (4 samples, 0.01%)</title><rect x="16.3563%" y="309" width="0.0132%" height="15" fill="rgb(239,18,37)" fg:x="4953" fg:w="4"/><text x="16.6063%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (69 samples, 0.23%)</title><rect x="16.1482%" y="373" width="0.2279%" height="15" fill="rgb(218,185,22)" fg:x="4890" fg:w="69"/><text x="16.3982%" y="383.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 0.05%)</title><rect x="16.7591%" y="341" width="0.0528%" height="15" fill="rgb(225,218,4)" fg:x="5075" fg:w="16"/><text x="17.0091%" y="351.50"></text></g><g><title>_platform_memmove (8 samples, 0.03%)</title><rect x="16.8153%" y="341" width="0.0264%" height="15" fill="rgb(230,182,32)" fg:x="5092" fg:w="8"/><text x="17.0653%" y="351.50"></text></g><g><title>_platform_memcmp (8 samples, 0.03%)</title><rect x="16.8879%" y="325" width="0.0264%" height="15" fill="rgb(242,56,43)" fg:x="5114" fg:w="8"/><text x="17.1379%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (9 samples, 0.03%)</title><rect x="16.9441%" y="309" width="0.0297%" height="15" fill="rgb(233,99,24)" fg:x="5131" fg:w="9"/><text x="17.1941%" y="319.50"></text></g><g><title>_mi_heap_delayed_free_partial (12 samples, 0.04%)</title><rect x="16.9738%" y="277" width="0.0396%" height="15" fill="rgb(234,209,42)" fg:x="5140" fg:w="12"/><text x="17.2238%" y="287.50"></text></g><g><title>_mi_free_delayed_block (12 samples, 0.04%)</title><rect x="16.9738%" y="261" width="0.0396%" height="15" fill="rgb(227,7,12)" fg:x="5140" fg:w="12"/><text x="17.2238%" y="271.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (12 samples, 0.04%)</title><rect x="16.9738%" y="245" width="0.0396%" height="15" fill="rgb(245,203,43)" fg:x="5140" fg:w="12"/><text x="17.2238%" y="255.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (15 samples, 0.05%)</title><rect x="16.9738%" y="309" width="0.0495%" height="15" fill="rgb(238,205,33)" fg:x="5140" fg:w="15"/><text x="17.2238%" y="319.50"></text></g><g><title>_mi_malloc_generic (15 samples, 0.05%)</title><rect x="16.9738%" y="293" width="0.0495%" height="15" fill="rgb(231,56,7)" fg:x="5140" fg:w="15"/><text x="17.2238%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (35 samples, 0.12%)</title><rect x="16.9143%" y="325" width="0.1156%" height="15" fill="rgb(244,186,29)" fg:x="5122" fg:w="35"/><text x="17.1643%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (61 samples, 0.20%)</title><rect x="16.8417%" y="341" width="0.2014%" height="15" fill="rgb(234,111,31)" fg:x="5100" fg:w="61"/><text x="17.0917%" y="351.50"></text></g><g><title>_mi_heap_delayed_free_partial (6 samples, 0.02%)</title><rect x="17.0464%" y="309" width="0.0198%" height="15" fill="rgb(241,149,10)" fg:x="5162" fg:w="6"/><text x="17.2964%" y="319.50"></text></g><g><title>_mi_free_delayed_block (6 samples, 0.02%)</title><rect x="17.0464%" y="293" width="0.0198%" height="15" fill="rgb(249,206,44)" fg:x="5162" fg:w="6"/><text x="17.2964%" y="303.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (6 samples, 0.02%)</title><rect x="17.0464%" y="277" width="0.0198%" height="15" fill="rgb(251,153,30)" fg:x="5162" fg:w="6"/><text x="17.2964%" y="287.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (13 samples, 0.04%)</title><rect x="17.0464%" y="341" width="0.0429%" height="15" fill="rgb(239,152,38)" fg:x="5162" fg:w="13"/><text x="17.2964%" y="351.50"></text></g><g><title>_mi_malloc_generic (13 samples, 0.04%)</title><rect x="17.0464%" y="325" width="0.0429%" height="15" fill="rgb(249,139,47)" fg:x="5162" fg:w="13"/><text x="17.2964%" y="335.50"></text></g><g><title>mi_find_page (7 samples, 0.02%)</title><rect x="17.0662%" y="309" width="0.0231%" height="15" fill="rgb(244,64,35)" fg:x="5168" fg:w="7"/><text x="17.3162%" y="319.50"></text></g><g><title>mi_malloc_aligned (10 samples, 0.03%)</title><rect x="17.0894%" y="341" width="0.0330%" height="15" fill="rgb(216,46,15)" fg:x="5175" fg:w="10"/><text x="17.3394%" y="351.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (24 samples, 0.08%)</title><rect x="17.5847%" y="277" width="0.0793%" height="15" fill="rgb(250,74,19)" fg:x="5325" fg:w="24"/><text x="17.8347%" y="287.50"></text></g><g><title>mi_malloc_aligned (4 samples, 0.01%)</title><rect x="17.6507%" y="261" width="0.0132%" height="15" fill="rgb(249,42,33)" fg:x="5345" fg:w="4"/><text x="17.9007%" y="271.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="17.6640%" y="277" width="0.0198%" height="15" fill="rgb(242,149,17)" fg:x="5349" fg:w="6"/><text x="17.9140%" y="287.50"></text></g><g><title>_platform_memcmp (6 samples, 0.02%)</title><rect x="17.7630%" y="261" width="0.0198%" height="15" fill="rgb(244,29,21)" fg:x="5379" fg:w="6"/><text x="18.0130%" y="271.50"></text></g><g><title>DYLD-STUB$$memmove (4 samples, 0.01%)</title><rect x="17.9711%" y="229" width="0.0132%" height="15" fill="rgb(220,130,37)" fg:x="5442" fg:w="4"/><text x="18.2211%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (55 samples, 0.18%)</title><rect x="17.8753%" y="245" width="0.1816%" height="15" fill="rgb(211,67,2)" fg:x="5413" fg:w="55"/><text x="18.1253%" y="255.50"></text></g><g><title>_platform_memmove (22 samples, 0.07%)</title><rect x="17.9843%" y="229" width="0.0727%" height="15" fill="rgb(235,68,52)" fg:x="5446" fg:w="22"/><text x="18.2343%" y="239.50"></text></g><g><title>_mi_heap_delayed_free_partial (37 samples, 0.12%)</title><rect x="18.0635%" y="213" width="0.1222%" height="15" fill="rgb(246,142,3)" fg:x="5470" fg:w="37"/><text x="18.3135%" y="223.50"></text></g><g><title>_mi_free_delayed_block (37 samples, 0.12%)</title><rect x="18.0635%" y="197" width="0.1222%" height="15" fill="rgb(241,25,7)" fg:x="5470" fg:w="37"/><text x="18.3135%" y="207.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (37 samples, 0.12%)</title><rect x="18.0635%" y="181" width="0.1222%" height="15" fill="rgb(242,119,39)" fg:x="5470" fg:w="37"/><text x="18.3135%" y="191.50"></text></g><g><title>mi_page_free_list_extend (4 samples, 0.01%)</title><rect x="18.2320%" y="197" width="0.0132%" height="15" fill="rgb(241,98,45)" fg:x="5521" fg:w="4"/><text x="18.4820%" y="207.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (58 samples, 0.19%)</title><rect x="18.0569%" y="245" width="0.1915%" height="15" fill="rgb(254,28,30)" fg:x="5468" fg:w="58"/><text x="18.3069%" y="255.50"></text></g><g><title>_mi_malloc_generic (57 samples, 0.19%)</title><rect x="18.0602%" y="229" width="0.1882%" height="15" fill="rgb(241,142,54)" fg:x="5469" fg:w="57"/><text x="18.3102%" y="239.50"></text></g><g><title>mi_find_page (19 samples, 0.06%)</title><rect x="18.1857%" y="213" width="0.0627%" height="15" fill="rgb(222,85,15)" fg:x="5507" fg:w="19"/><text x="18.4357%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (148 samples, 0.49%)</title><rect x="17.7828%" y="261" width="0.4887%" height="15" fill="rgb(210,85,47)" fg:x="5385" fg:w="148"/><text x="18.0328%" y="271.50"></text></g><g><title>mi_malloc_aligned (7 samples, 0.02%)</title><rect x="18.2485%" y="245" width="0.0231%" height="15" fill="rgb(224,206,25)" fg:x="5526" fg:w="7"/><text x="18.4985%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (5 samples, 0.02%)</title><rect x="18.2716%" y="261" width="0.0165%" height="15" fill="rgb(243,201,19)" fg:x="5533" fg:w="5"/><text x="18.5216%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (184 samples, 0.61%)</title><rect x="17.6838%" y="277" width="0.6076%" height="15" fill="rgb(236,59,4)" fg:x="5355" fg:w="184"/><text x="17.9338%" y="287.50"></text></g><g><title>mi_malloc_aligned (7 samples, 0.02%)</title><rect x="18.3046%" y="277" width="0.0231%" height="15" fill="rgb(254,179,45)" fg:x="5543" fg:w="7"/><text x="18.5546%" y="287.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="19.3514%" y="229" width="0.0198%" height="15" fill="rgb(226,14,10)" fg:x="5860" fg:w="6"/><text x="19.6014%" y="239.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (53 samples, 0.18%)</title><rect x="19.2226%" y="245" width="0.1750%" height="15" fill="rgb(244,27,41)" fg:x="5821" fg:w="53"/><text x="19.4726%" y="255.50"></text></g><g><title>mi_malloc_aligned (6 samples, 0.02%)</title><rect x="19.3778%" y="229" width="0.0198%" height="15" fill="rgb(235,35,32)" fg:x="5868" fg:w="6"/><text x="19.6278%" y="239.50"></text></g><g><title>_platform_memmove (31 samples, 0.10%)</title><rect x="19.3977%" y="245" width="0.1024%" height="15" fill="rgb(218,68,31)" fg:x="5874" fg:w="31"/><text x="19.6477%" y="255.50"></text></g><g><title>_platform_memcmp (10 samples, 0.03%)</title><rect x="19.6354%" y="229" width="0.0330%" height="15" fill="rgb(207,120,37)" fg:x="5946" fg:w="10"/><text x="19.8854%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (23 samples, 0.08%)</title><rect x="19.7444%" y="213" width="0.0760%" height="15" fill="rgb(227,98,0)" fg:x="5979" fg:w="23"/><text x="19.9944%" y="223.50"></text></g><g><title>_mi_heap_delayed_free_partial (33 samples, 0.11%)</title><rect x="19.8204%" y="181" width="0.1090%" height="15" fill="rgb(207,7,3)" fg:x="6002" fg:w="33"/><text x="20.0704%" y="191.50"></text></g><g><title>_mi_free_delayed_block (33 samples, 0.11%)</title><rect x="19.8204%" y="165" width="0.1090%" height="15" fill="rgb(206,98,19)" fg:x="6002" fg:w="33"/><text x="20.0704%" y="175.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (32 samples, 0.11%)</title><rect x="19.8237%" y="149" width="0.1057%" height="15" fill="rgb(217,5,26)" fg:x="6003" fg:w="32"/><text x="20.0737%" y="159.50"></text></g><g><title>mi_page_free_list_extend (7 samples, 0.02%)</title><rect x="19.9491%" y="165" width="0.0231%" height="15" fill="rgb(235,190,38)" fg:x="6041" fg:w="7"/><text x="20.1991%" y="175.50"></text></g><g><title>_mi_malloc_generic (51 samples, 0.17%)</title><rect x="19.8204%" y="197" width="0.1684%" height="15" fill="rgb(247,86,24)" fg:x="6002" fg:w="51"/><text x="20.0704%" y="207.50"></text></g><g><title>mi_find_page (18 samples, 0.06%)</title><rect x="19.9293%" y="181" width="0.0594%" height="15" fill="rgb(205,101,16)" fg:x="6035" fg:w="18"/><text x="20.1793%" y="191.50"></text></g><g><title>mi_page_fresh_alloc (5 samples, 0.02%)</title><rect x="19.9723%" y="165" width="0.0165%" height="15" fill="rgb(246,168,33)" fg:x="6048" fg:w="5"/><text x="20.2223%" y="175.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (52 samples, 0.17%)</title><rect x="19.8204%" y="213" width="0.1717%" height="15" fill="rgb(231,114,1)" fg:x="6002" fg:w="52"/><text x="20.0704%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (103 samples, 0.34%)</title><rect x="19.6684%" y="229" width="0.3401%" height="15" fill="rgb(207,184,53)" fg:x="5956" fg:w="103"/><text x="19.9184%" y="239.50"></text></g><g><title>mi_malloc_aligned (5 samples, 0.02%)</title><rect x="19.9921%" y="213" width="0.0165%" height="15" fill="rgb(224,95,51)" fg:x="6054" fg:w="5"/><text x="20.2421%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (9 samples, 0.03%)</title><rect x="20.0086%" y="229" width="0.0297%" height="15" fill="rgb(212,188,45)" fg:x="6059" fg:w="9"/><text x="20.2586%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (164 samples, 0.54%)</title><rect x="19.5000%" y="245" width="0.5416%" height="15" fill="rgb(223,154,38)" fg:x="5905" fg:w="164"/><text x="19.7500%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (7 samples, 0.02%)</title><rect x="20.0416%" y="245" width="0.0231%" height="15" fill="rgb(251,22,52)" fg:x="6069" fg:w="7"/><text x="20.2916%" y="255.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (23 samples, 0.08%)</title><rect x="20.0647%" y="181" width="0.0760%" height="15" fill="rgb(229,209,22)" fg:x="6076" fg:w="23"/><text x="20.3147%" y="191.50"></text></g><g><title>_mi_heap_delayed_free_partial (24 samples, 0.08%)</title><rect x="20.0647%" y="213" width="0.0793%" height="15" fill="rgb(234,138,34)" fg:x="6076" fg:w="24"/><text x="20.3147%" y="223.50"></text></g><g><title>_mi_free_delayed_block (24 samples, 0.08%)</title><rect x="20.0647%" y="197" width="0.0793%" height="15" fill="rgb(212,95,11)" fg:x="6076" fg:w="24"/><text x="20.3147%" y="207.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (35 samples, 0.12%)</title><rect x="20.0647%" y="245" width="0.1156%" height="15" fill="rgb(240,179,47)" fg:x="6076" fg:w="35"/><text x="20.3147%" y="255.50"></text></g><g><title>_mi_malloc_generic (35 samples, 0.12%)</title><rect x="20.0647%" y="229" width="0.1156%" height="15" fill="rgb(240,163,11)" fg:x="6076" fg:w="35"/><text x="20.3147%" y="239.50"></text></g><g><title>mi_find_page (11 samples, 0.04%)</title><rect x="20.1440%" y="213" width="0.0363%" height="15" fill="rgb(236,37,12)" fg:x="6100" fg:w="11"/><text x="20.3940%" y="223.50"></text></g><g><title>mi_malloc_aligned (14 samples, 0.05%)</title><rect x="20.1803%" y="245" width="0.0462%" height="15" fill="rgb(232,164,16)" fg:x="6111" fg:w="14"/><text x="20.4303%" y="255.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.01%)</title><rect x="20.6856%" y="213" width="0.0132%" height="15" fill="rgb(244,205,15)" fg:x="6264" fg:w="4"/><text x="20.9356%" y="223.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (32 samples, 0.11%)</title><rect x="21.0917%" y="181" width="0.1057%" height="15" fill="rgb(223,117,47)" fg:x="6387" fg:w="32"/><text x="21.3417%" y="191.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="21.1974%" y="181" width="0.0132%" height="15" fill="rgb(244,107,35)" fg:x="6419" fg:w="4"/><text x="21.4474%" y="191.50"></text></g><g><title>DYLD-STUB$$memcmp (4 samples, 0.01%)</title><rect x="21.3460%" y="165" width="0.0132%" height="15" fill="rgb(205,140,8)" fg:x="6464" fg:w="4"/><text x="21.5960%" y="175.50"></text></g><g><title>_platform_memcmp (7 samples, 0.02%)</title><rect x="21.3592%" y="165" width="0.0231%" height="15" fill="rgb(228,84,46)" fg:x="6468" fg:w="7"/><text x="21.6092%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (61 samples, 0.20%)</title><rect x="21.5045%" y="149" width="0.2014%" height="15" fill="rgb(254,188,9)" fg:x="6512" fg:w="61"/><text x="21.7545%" y="159.50"></text></g><g><title>_platform_memmove (18 samples, 0.06%)</title><rect x="21.6465%" y="133" width="0.0594%" height="15" fill="rgb(206,112,54)" fg:x="6555" fg:w="18"/><text x="21.8965%" y="143.50"></text></g><g><title>_mi_heap_delayed_free_partial (37 samples, 0.12%)</title><rect x="21.7060%" y="117" width="0.1222%" height="15" fill="rgb(216,84,49)" fg:x="6573" fg:w="37"/><text x="21.9560%" y="127.50"></text></g><g><title>_mi_free_delayed_block (37 samples, 0.12%)</title><rect x="21.7060%" y="101" width="0.1222%" height="15" fill="rgb(214,194,35)" fg:x="6573" fg:w="37"/><text x="21.9560%" y="111.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (37 samples, 0.12%)</title><rect x="21.7060%" y="85" width="0.1222%" height="15" fill="rgb(249,28,3)" fg:x="6573" fg:w="37"/><text x="21.9560%" y="95.50"></text></g><g><title>mi_page_free_list_extend (9 samples, 0.03%)</title><rect x="21.8645%" y="101" width="0.0297%" height="15" fill="rgb(222,56,52)" fg:x="6621" fg:w="9"/><text x="22.1145%" y="111.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (63 samples, 0.21%)</title><rect x="21.7060%" y="149" width="0.2080%" height="15" fill="rgb(245,217,50)" fg:x="6573" fg:w="63"/><text x="21.9560%" y="159.50"></text></g><g><title>_mi_malloc_generic (63 samples, 0.21%)</title><rect x="21.7060%" y="133" width="0.2080%" height="15" fill="rgb(213,201,24)" fg:x="6573" fg:w="63"/><text x="21.9560%" y="143.50"></text></g><g><title>mi_find_page (26 samples, 0.09%)</title><rect x="21.8281%" y="117" width="0.0859%" height="15" fill="rgb(248,116,28)" fg:x="6610" fg:w="26"/><text x="22.0781%" y="127.50"></text></g><g><title>mi_page_fresh_alloc (6 samples, 0.02%)</title><rect x="21.8942%" y="101" width="0.0198%" height="15" fill="rgb(219,72,43)" fg:x="6630" fg:w="6"/><text x="22.1442%" y="111.50"></text></g><g><title>mi_segments_page_alloc (5 samples, 0.02%)</title><rect x="21.8975%" y="85" width="0.0165%" height="15" fill="rgb(209,138,14)" fg:x="6631" fg:w="5"/><text x="22.1475%" y="95.50"></text></g><g><title>mi_segment_span_allocate (4 samples, 0.01%)</title><rect x="21.9008%" y="69" width="0.0132%" height="15" fill="rgb(222,18,33)" fg:x="6632" fg:w="4"/><text x="22.1508%" y="79.50"></text></g><g><title>clock_gettime (4 samples, 0.01%)</title><rect x="21.9008%" y="53" width="0.0132%" height="15" fill="rgb(213,199,7)" fg:x="6632" fg:w="4"/><text x="22.1508%" y="63.50"></text></g><g><title>_mach_boottime_usec (4 samples, 0.01%)</title><rect x="21.9008%" y="37" width="0.0132%" height="15" fill="rgb(250,110,10)" fg:x="6632" fg:w="4"/><text x="22.1508%" y="47.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (173 samples, 0.57%)</title><rect x="21.3823%" y="165" width="0.5713%" height="15" fill="rgb(248,123,6)" fg:x="6475" fg:w="173"/><text x="21.6323%" y="175.50"></text></g><g><title>mi_malloc_aligned (12 samples, 0.04%)</title><rect x="21.9140%" y="149" width="0.0396%" height="15" fill="rgb(206,91,31)" fg:x="6636" fg:w="12"/><text x="22.1640%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.01%)</title><rect x="21.9536%" y="165" width="0.0132%" height="15" fill="rgb(211,154,13)" fg:x="6648" fg:w="4"/><text x="22.2036%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (230 samples, 0.76%)</title><rect x="21.2106%" y="181" width="0.7595%" height="15" fill="rgb(225,148,7)" fg:x="6423" fg:w="230"/><text x="21.4606%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (6 samples, 0.02%)</title><rect x="21.9701%" y="181" width="0.0198%" height="15" fill="rgb(220,160,43)" fg:x="6653" fg:w="6"/><text x="22.2201%" y="191.50"></text></g><g><title>mi_malloc_aligned (9 samples, 0.03%)</title><rect x="21.9900%" y="181" width="0.0297%" height="15" fill="rgb(213,52,39)" fg:x="6659" fg:w="9"/><text x="22.2400%" y="191.50"></text></g><g><title>_platform_memmove (14 samples, 0.05%)</title><rect x="23.3340%" y="133" width="0.0462%" height="15" fill="rgb(243,137,7)" fg:x="7066" fg:w="14"/><text x="23.5840%" y="143.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (72 samples, 0.24%)</title><rect x="23.1854%" y="149" width="0.2378%" height="15" fill="rgb(230,79,13)" fg:x="7021" fg:w="72"/><text x="23.4354%" y="159.50"></text></g><g><title>mi_malloc_aligned (11 samples, 0.04%)</title><rect x="23.3868%" y="133" width="0.0363%" height="15" fill="rgb(247,105,23)" fg:x="7082" fg:w="11"/><text x="23.6368%" y="143.50"></text></g><g><title>_platform_memmove (21 samples, 0.07%)</title><rect x="23.4331%" y="149" width="0.0693%" height="15" fill="rgb(223,179,41)" fg:x="7096" fg:w="21"/><text x="23.6831%" y="159.50"></text></g><g><title>_platform_memcmp (4 samples, 0.01%)</title><rect x="23.6048%" y="133" width="0.0132%" height="15" fill="rgb(218,9,34)" fg:x="7148" fg:w="4"/><text x="23.8548%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (13 samples, 0.04%)</title><rect x="23.6939%" y="117" width="0.0429%" height="15" fill="rgb(222,106,8)" fg:x="7175" fg:w="13"/><text x="23.9439%" y="127.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (39 samples, 0.13%)</title><rect x="23.7534%" y="53" width="0.1288%" height="15" fill="rgb(211,220,0)" fg:x="7193" fg:w="39"/><text x="24.0034%" y="63.50"></text></g><g><title>_mi_heap_delayed_free_partial (40 samples, 0.13%)</title><rect x="23.7534%" y="85" width="0.1321%" height="15" fill="rgb(229,52,16)" fg:x="7193" fg:w="40"/><text x="24.0034%" y="95.50"></text></g><g><title>_mi_free_delayed_block (40 samples, 0.13%)</title><rect x="23.7534%" y="69" width="0.1321%" height="15" fill="rgb(212,155,18)" fg:x="7193" fg:w="40"/><text x="24.0034%" y="79.50"></text></g><g><title>mi_page_free_list_extend (6 samples, 0.02%)</title><rect x="23.9119%" y="69" width="0.0198%" height="15" fill="rgb(242,21,14)" fg:x="7241" fg:w="6"/><text x="24.1619%" y="79.50"></text></g><g><title>mi_page_free_list_extend (5 samples, 0.02%)</title><rect x="23.9350%" y="53" width="0.0165%" height="15" fill="rgb(222,19,48)" fg:x="7248" fg:w="5"/><text x="24.1850%" y="63.50"></text></g><g><title>_mi_malloc_generic (66 samples, 0.22%)</title><rect x="23.7402%" y="101" width="0.2180%" height="15" fill="rgb(232,45,27)" fg:x="7189" fg:w="66"/><text x="23.9902%" y="111.50"></text></g><g><title>mi_find_page (22 samples, 0.07%)</title><rect x="23.8855%" y="85" width="0.0727%" height="15" fill="rgb(249,103,42)" fg:x="7233" fg:w="22"/><text x="24.1355%" y="95.50"></text></g><g><title>mi_page_fresh_alloc (8 samples, 0.03%)</title><rect x="23.9317%" y="69" width="0.0264%" height="15" fill="rgb(246,81,33)" fg:x="7247" fg:w="8"/><text x="24.1817%" y="79.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (68 samples, 0.22%)</title><rect x="23.7369%" y="117" width="0.2246%" height="15" fill="rgb(252,33,42)" fg:x="7188" fg:w="68"/><text x="23.9869%" y="127.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (109 samples, 0.36%)</title><rect x="23.6180%" y="133" width="0.3599%" height="15" fill="rgb(209,212,41)" fg:x="7152" fg:w="109"/><text x="23.8680%" y="143.50"></text></g><g><title>mi_malloc_aligned (5 samples, 0.02%)</title><rect x="23.9614%" y="117" width="0.0165%" height="15" fill="rgb(207,154,6)" fg:x="7256" fg:w="5"/><text x="24.2114%" y="127.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (5 samples, 0.02%)</title><rect x="23.9779%" y="133" width="0.0165%" height="15" fill="rgb(223,64,47)" fg:x="7261" fg:w="5"/><text x="24.2279%" y="143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (152 samples, 0.50%)</title><rect x="23.5024%" y="149" width="0.5019%" height="15" fill="rgb(211,161,38)" fg:x="7117" fg:w="152"/><text x="23.7524%" y="159.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (29 samples, 0.10%)</title><rect x="24.0143%" y="85" width="0.0958%" height="15" fill="rgb(219,138,40)" fg:x="7272" fg:w="29"/><text x="24.2643%" y="95.50"></text></g><g><title>_mi_heap_delayed_free_partial (32 samples, 0.11%)</title><rect x="24.0143%" y="117" width="0.1057%" height="15" fill="rgb(241,228,46)" fg:x="7272" fg:w="32"/><text x="24.2643%" y="127.50"></text></g><g><title>_mi_free_delayed_block (32 samples, 0.11%)</title><rect x="24.0143%" y="101" width="0.1057%" height="15" fill="rgb(223,209,38)" fg:x="7272" fg:w="32"/><text x="24.2643%" y="111.50"></text></g><g><title>mi_page_free_list_extend (4 samples, 0.01%)</title><rect x="24.1926%" y="101" width="0.0132%" height="15" fill="rgb(236,164,45)" fg:x="7326" fg:w="4"/><text x="24.4426%" y="111.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (60 samples, 0.20%)</title><rect x="24.0110%" y="149" width="0.1981%" height="15" fill="rgb(231,15,5)" fg:x="7271" fg:w="60"/><text x="24.2610%" y="159.50"></text></g><g><title>_mi_malloc_generic (60 samples, 0.20%)</title><rect x="24.0110%" y="133" width="0.1981%" height="15" fill="rgb(252,35,15)" fg:x="7271" fg:w="60"/><text x="24.2610%" y="143.50"></text></g><g><title>mi_find_page (27 samples, 0.09%)</title><rect x="24.1199%" y="117" width="0.0892%" height="15" fill="rgb(248,181,18)" fg:x="7304" fg:w="27"/><text x="24.3699%" y="127.50"></text></g><g><title>mi_malloc_aligned (26 samples, 0.09%)</title><rect x="24.2091%" y="149" width="0.0859%" height="15" fill="rgb(233,39,42)" fg:x="7331" fg:w="26"/><text x="24.4591%" y="159.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (45 samples, 0.15%)</title><rect x="24.5096%" y="133" width="0.1486%" height="15" fill="rgb(238,110,33)" fg:x="7422" fg:w="45"/><text x="24.7596%" y="143.50"></text></g><g><title>mi_malloc_aligned (10 samples, 0.03%)</title><rect x="24.6252%" y="117" width="0.0330%" height="15" fill="rgb(233,195,10)" fg:x="7457" fg:w="10"/><text x="24.8752%" y="127.50"></text></g><g><title>_platform_memmove (5 samples, 0.02%)</title><rect x="24.6582%" y="133" width="0.0165%" height="15" fill="rgb(254,105,3)" fg:x="7467" fg:w="5"/><text x="24.9082%" y="143.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (126 samples, 0.42%)</title><rect x="24.2950%" y="149" width="0.4161%" height="15" fill="rgb(221,225,9)" fg:x="7357" fg:w="126"/><text x="24.5450%" y="159.50"></text></g><g><title>mi_malloc_aligned (9 samples, 0.03%)</title><rect x="24.6813%" y="133" width="0.0297%" height="15" fill="rgb(224,227,45)" fg:x="7474" fg:w="9"/><text x="24.9313%" y="143.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (718 samples, 2.37%)</title><rect x="22.3532%" y="165" width="2.3710%" height="15" fill="rgb(229,198,43)" fg:x="6769" fg:w="718"/><text x="22.6032%" y="175.50">&lt;&amp;..</text></g><g><title>sonic_rs::serde::de::Deserializer&lt;R&gt;::end_map (4 samples, 0.01%)</title><rect x="24.7110%" y="149" width="0.0132%" height="15" fill="rgb(206,209,35)" fg:x="7483" fg:w="4"/><text x="24.9610%" y="159.50"></text></g><g><title>_platform_memmove (15 samples, 0.05%)</title><rect x="24.7309%" y="165" width="0.0495%" height="15" fill="rgb(245,195,53)" fg:x="7489" fg:w="15"/><text x="24.9809%" y="175.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (6 samples, 0.02%)</title><rect x="24.7903%" y="165" width="0.0198%" height="15" fill="rgb(240,92,26)" fg:x="7507" fg:w="6"/><text x="25.0403%" y="175.50"></text></g><g><title>_mi_malloc_generic (6 samples, 0.02%)</title><rect x="24.7903%" y="149" width="0.0198%" height="15" fill="rgb(207,40,23)" fg:x="7507" fg:w="6"/><text x="25.0403%" y="159.50"></text></g><g><title>mi_find_page (6 samples, 0.02%)</title><rect x="24.7903%" y="133" width="0.0198%" height="15" fill="rgb(223,111,35)" fg:x="7507" fg:w="6"/><text x="25.0403%" y="143.50"></text></g><g><title>mi_malloc_aligned (13 samples, 0.04%)</title><rect x="24.8101%" y="165" width="0.0429%" height="15" fill="rgb(229,147,28)" fg:x="7513" fg:w="13"/><text x="25.0601%" y="175.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (864 samples, 2.85%)</title><rect x="22.0197%" y="181" width="2.8532%" height="15" fill="rgb(211,29,28)" fg:x="6668" fg:w="864"/><text x="22.2697%" y="191.50">se..</text></g><g><title>serde::de::MapAccess::next_entry_seed (6 samples, 0.02%)</title><rect x="24.8530%" y="165" width="0.0198%" height="15" fill="rgb(228,72,33)" fg:x="7526" fg:w="6"/><text x="25.1030%" y="175.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,260 samples, 4.16%)</title><rect x="20.7285%" y="197" width="4.1609%" height="15" fill="rgb(205,214,31)" fg:x="6277" fg:w="1260"/><text x="20.9785%" y="207.50">&lt;&amp;mut..</text></g><g><title>sonic_rs::serde::de::Deserializer&lt;R&gt;::end_map (5 samples, 0.02%)</title><rect x="24.8729%" y="181" width="0.0165%" height="15" fill="rgb(224,111,15)" fg:x="7532" fg:w="5"/><text x="25.1229%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.02%)</title><rect x="24.8894%" y="197" width="0.0165%" height="15" fill="rgb(253,21,26)" fg:x="7537" fg:w="5"/><text x="25.1394%" y="207.50"></text></g><g><title>&lt;sonic_rs::serde::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,285 samples, 4.24%)</title><rect x="20.6988%" y="213" width="4.2434%" height="15" fill="rgb(245,139,43)" fg:x="6268" fg:w="1285"/><text x="20.9488%" y="223.50">&lt;soni..</text></g><g><title>serde::de::MapAccess::next_entry_seed (8 samples, 0.03%)</title><rect x="24.9158%" y="197" width="0.0264%" height="15" fill="rgb(252,170,7)" fg:x="7545" fg:w="8"/><text x="25.1658%" y="207.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="24.9488%" y="213" width="0.0198%" height="15" fill="rgb(231,118,14)" fg:x="7555" fg:w="6"/><text x="25.1988%" y="223.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (14 samples, 0.05%)</title><rect x="25.0050%" y="181" width="0.0462%" height="15" fill="rgb(238,83,0)" fg:x="7572" fg:w="14"/><text x="25.2550%" y="191.50"></text></g><g><title>_mi_malloc_generic (14 samples, 0.05%)</title><rect x="25.0050%" y="165" width="0.0462%" height="15" fill="rgb(221,39,39)" fg:x="7572" fg:w="14"/><text x="25.2550%" y="175.50"></text></g><g><title>mi_find_page (11 samples, 0.04%)</title><rect x="25.0149%" y="149" width="0.0363%" height="15" fill="rgb(222,119,46)" fg:x="7575" fg:w="11"/><text x="25.2649%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 0.08%)</title><rect x="24.9950%" y="197" width="0.0793%" height="15" fill="rgb(222,165,49)" fg:x="7569" fg:w="24"/><text x="25.2450%" y="207.50"></text></g><g><title>mi_malloc_aligned (7 samples, 0.02%)</title><rect x="25.0512%" y="181" width="0.0231%" height="15" fill="rgb(219,113,52)" fg:x="7586" fg:w="7"/><text x="25.3012%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (34 samples, 0.11%)</title><rect x="24.9686%" y="213" width="0.1123%" height="15" fill="rgb(214,7,15)" fg:x="7561" fg:w="34"/><text x="25.2186%" y="223.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="25.0842%" y="213" width="0.0132%" height="15" fill="rgb(235,32,4)" fg:x="7596" fg:w="4"/><text x="25.3342%" y="223.50"></text></g><g><title>_mi_malloc_generic (4 samples, 0.01%)</title><rect x="25.0842%" y="197" width="0.0132%" height="15" fill="rgb(238,90,54)" fg:x="7596" fg:w="4"/><text x="25.3342%" y="207.50"></text></g><g><title>mi_find_page (4 samples, 0.01%)</title><rect x="25.0842%" y="181" width="0.0132%" height="15" fill="rgb(213,208,19)" fg:x="7596" fg:w="4"/><text x="25.3342%" y="191.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,403 samples, 4.63%)</title><rect x="20.4940%" y="229" width="4.6331%" height="15" fill="rgb(233,156,4)" fg:x="6206" fg:w="1403"/><text x="20.7440%" y="239.50">&lt;&amp;mut..</text></g><g><title>mi_malloc_aligned (9 samples, 0.03%)</title><rect x="25.0974%" y="213" width="0.0297%" height="15" fill="rgb(207,194,5)" fg:x="7600" fg:w="9"/><text x="25.3474%" y="223.50"></text></g><g><title>_platform_memmove (12 samples, 0.04%)</title><rect x="25.1370%" y="229" width="0.0396%" height="15" fill="rgb(206,111,30)" fg:x="7612" fg:w="12"/><text x="25.3870%" y="239.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (1,514 samples, 5.00%)</title><rect x="20.2265%" y="245" width="4.9997%" height="15" fill="rgb(243,70,54)" fg:x="6125" fg:w="1514"/><text x="20.4765%" y="255.50">serde:..</text></g><g><title>mi_malloc_aligned (12 samples, 0.04%)</title><rect x="25.1866%" y="229" width="0.0396%" height="15" fill="rgb(242,28,8)" fg:x="7627" fg:w="12"/><text x="25.4366%" y="239.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2,007 samples, 6.63%)</title><rect x="18.6084%" y="261" width="6.6277%" height="15" fill="rgb(219,106,18)" fg:x="5635" fg:w="2007"/><text x="18.8584%" y="271.50">&lt;&amp;mut son..</text></g><g><title>_platform_memmove (15 samples, 0.05%)</title><rect x="25.2460%" y="261" width="0.0495%" height="15" fill="rgb(244,222,10)" fg:x="7645" fg:w="15"/><text x="25.4960%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (7 samples, 0.02%)</title><rect x="25.2956%" y="261" width="0.0231%" height="15" fill="rgb(236,179,52)" fg:x="7660" fg:w="7"/><text x="25.5456%" y="271.50"></text></g><g><title>mi_malloc_aligned (13 samples, 0.04%)</title><rect x="25.3220%" y="261" width="0.0429%" height="15" fill="rgb(213,23,39)" fg:x="7668" fg:w="13"/><text x="25.5720%" y="271.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (2,136 samples, 7.05%)</title><rect x="18.3277%" y="277" width="7.0537%" height="15" fill="rgb(238,48,10)" fg:x="5550" fg:w="2136"/><text x="18.5777%" y="287.50">serde::de..</text></g><g><title>serde::de::MapAccess::next_entry_seed (5 samples, 0.02%)</title><rect x="25.3649%" y="261" width="0.0165%" height="15" fill="rgb(251,196,23)" fg:x="7681" fg:w="5"/><text x="25.6149%" y="271.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2,437 samples, 8.05%)</title><rect x="17.3370%" y="293" width="8.0477%" height="15" fill="rgb(250,152,24)" fg:x="5250" fg:w="2437"/><text x="17.5870%" y="303.50">&lt;&amp;mut sonic..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.01%)</title><rect x="25.3847%" y="293" width="0.0132%" height="15" fill="rgb(209,150,17)" fg:x="7687" fg:w="4"/><text x="25.6347%" y="303.50"></text></g><g><title>&lt;sonic_rs::serde::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2,456 samples, 8.11%)</title><rect x="17.3139%" y="309" width="8.1104%" height="15" fill="rgb(234,202,34)" fg:x="5243" fg:w="2456"/><text x="17.5639%" y="319.50">&lt;sonic_rs::..</text></g><g><title>serde::de::MapAccess::next_entry_seed (5 samples, 0.02%)</title><rect x="25.4078%" y="293" width="0.0165%" height="15" fill="rgb(253,148,53)" fg:x="7694" fg:w="5"/><text x="25.6578%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.02%)</title><rect x="25.4343%" y="309" width="0.0198%" height="15" fill="rgb(218,129,16)" fg:x="7702" fg:w="6"/><text x="25.6843%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="25.4409%" y="293" width="0.0132%" height="15" fill="rgb(216,85,19)" fg:x="7704" fg:w="4"/><text x="25.6909%" y="303.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="25.4409%" y="277" width="0.0132%" height="15" fill="rgb(235,228,7)" fg:x="7704" fg:w="4"/><text x="25.6909%" y="287.50"></text></g><g><title>_mi_malloc_generic (4 samples, 0.01%)</title><rect x="25.4409%" y="261" width="0.0132%" height="15" fill="rgb(245,175,0)" fg:x="7704" fg:w="4"/><text x="25.6909%" y="271.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2,495 samples, 8.24%)</title><rect x="17.2314%" y="325" width="8.2392%" height="15" fill="rgb(208,168,36)" fg:x="5218" fg:w="2495"/><text x="17.4814%" y="335.50">&lt;&amp;mut sonic..</text></g><g><title>mi_malloc_aligned (4 samples, 0.01%)</title><rect x="25.4574%" y="309" width="0.0132%" height="15" fill="rgb(246,171,24)" fg:x="7709" fg:w="4"/><text x="25.7074%" y="319.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="25.4739%" y="325" width="0.0198%" height="15" fill="rgb(215,142,24)" fg:x="7714" fg:w="6"/><text x="25.7239%" y="335.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (2,542 samples, 8.39%)</title><rect x="17.1224%" y="341" width="8.3944%" height="15" fill="rgb(250,187,7)" fg:x="5185" fg:w="2542"/><text x="17.3724%" y="351.50">serde::de::M..</text></g><g><title>mi_malloc_aligned (4 samples, 0.01%)</title><rect x="25.5036%" y="325" width="0.0132%" height="15" fill="rgb(228,66,33)" fg:x="7723" fg:w="4"/><text x="25.7536%" y="335.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2,729 samples, 9.01%)</title><rect x="16.5082%" y="357" width="9.0120%" height="15" fill="rgb(234,215,21)" fg:x="4999" fg:w="2729"/><text x="16.7582%" y="367.50">&lt;&amp;mut sonic_r..</text></g><g><title>_platform_memmove (5 samples, 0.02%)</title><rect x="25.5234%" y="357" width="0.0165%" height="15" fill="rgb(222,191,20)" fg:x="7729" fg:w="5"/><text x="25.7734%" y="367.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (2,775 samples, 9.16%)</title><rect x="16.3926%" y="373" width="9.1639%" height="15" fill="rgb(245,79,54)" fg:x="4964" fg:w="2775"/><text x="16.6426%" y="383.50">serde::de::Ma..</text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2,898 samples, 9.57%)</title><rect x="15.9930%" y="389" width="9.5700%" height="15" fill="rgb(240,10,37)" fg:x="4843" fg:w="2898"/><text x="16.2430%" y="399.50">&lt;&amp;mut sonic_rs..</text></g><g><title>&lt;sonic_rs::serde::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2,905 samples, 9.59%)</title><rect x="15.9732%" y="405" width="9.5932%" height="15" fill="rgb(214,192,32)" fg:x="4837" fg:w="2905"/><text x="16.2232%" y="415.50">&lt;sonic_rs::ser..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.01%)</title><rect x="25.5762%" y="405" width="0.0132%" height="15" fill="rgb(209,36,54)" fg:x="7745" fg:w="4"/><text x="25.8262%" y="415.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3,014 samples, 9.95%)</title><rect x="15.6496%" y="421" width="9.9531%" height="15" fill="rgb(220,10,11)" fg:x="4739" fg:w="3014"/><text x="15.8996%" y="431.50">&lt;&amp;mut sonic_rs..</text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="25.6027%" y="421" width="0.0132%" height="15" fill="rgb(221,106,17)" fg:x="7753" fg:w="4"/><text x="25.8527%" y="431.50"></text></g><g><title>_platform_memmove (44 samples, 0.15%)</title><rect x="25.6159%" y="421" width="0.1453%" height="15" fill="rgb(251,142,44)" fg:x="7757" fg:w="44"/><text x="25.8659%" y="431.50"></text></g><g><title>DYLD-STUB$$memcmp (6 samples, 0.02%)</title><rect x="26.1575%" y="405" width="0.0198%" height="15" fill="rgb(238,13,15)" fg:x="7921" fg:w="6"/><text x="26.4075%" y="415.50"></text></g><g><title>_platform_memcmp (15 samples, 0.05%)</title><rect x="26.1773%" y="405" width="0.0495%" height="15" fill="rgb(208,107,27)" fg:x="7927" fg:w="15"/><text x="26.4273%" y="415.50"></text></g><g><title>DYLD-STUB$$memmove (4 samples, 0.01%)</title><rect x="26.7552%" y="373" width="0.0132%" height="15" fill="rgb(205,136,37)" fg:x="8102" fg:w="4"/><text x="27.0052%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (74 samples, 0.24%)</title><rect x="26.5801%" y="389" width="0.2444%" height="15" fill="rgb(250,205,27)" fg:x="8049" fg:w="74"/><text x="26.8301%" y="399.50"></text></g><g><title>_platform_memmove (17 samples, 0.06%)</title><rect x="26.7684%" y="373" width="0.0561%" height="15" fill="rgb(210,80,43)" fg:x="8106" fg:w="17"/><text x="27.0184%" y="383.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (128 samples, 0.42%)</title><rect x="26.8641%" y="325" width="0.4227%" height="15" fill="rgb(247,160,36)" fg:x="8135" fg:w="128"/><text x="27.1141%" y="335.50"></text></g><g><title>_mi_page_retire (7 samples, 0.02%)</title><rect x="27.2868%" y="325" width="0.0231%" height="15" fill="rgb(234,13,49)" fg:x="8263" fg:w="7"/><text x="27.5368%" y="335.50"></text></g><g><title>mi_segment_page_clear (7 samples, 0.02%)</title><rect x="27.2868%" y="309" width="0.0231%" height="15" fill="rgb(234,122,0)" fg:x="8263" fg:w="7"/><text x="27.5368%" y="319.50"></text></g><g><title>mi_segment_span_free_coalesce (7 samples, 0.02%)</title><rect x="27.2868%" y="293" width="0.0231%" height="15" fill="rgb(207,146,38)" fg:x="8263" fg:w="7"/><text x="27.5368%" y="303.50"></text></g><g><title>mi_segment_span_free (7 samples, 0.02%)</title><rect x="27.2868%" y="277" width="0.0231%" height="15" fill="rgb(207,177,25)" fg:x="8263" fg:w="7"/><text x="27.5368%" y="287.50"></text></g><g><title>mi_segment_try_purge (4 samples, 0.01%)</title><rect x="27.2967%" y="261" width="0.0132%" height="15" fill="rgb(211,178,42)" fg:x="8266" fg:w="4"/><text x="27.5467%" y="271.50"></text></g><g><title>mi_segment_purge (4 samples, 0.01%)</title><rect x="27.2967%" y="245" width="0.0132%" height="15" fill="rgb(230,69,54)" fg:x="8266" fg:w="4"/><text x="27.5467%" y="255.50"></text></g><g><title>_mi_os_purge_ex (4 samples, 0.01%)</title><rect x="27.2967%" y="229" width="0.0132%" height="15" fill="rgb(214,135,41)" fg:x="8266" fg:w="4"/><text x="27.5467%" y="239.50"></text></g><g><title>mi_os_decommit_ex (4 samples, 0.01%)</title><rect x="27.2967%" y="213" width="0.0132%" height="15" fill="rgb(237,67,25)" fg:x="8266" fg:w="4"/><text x="27.5467%" y="223.50"></text></g><g><title>madvise (4 samples, 0.01%)</title><rect x="27.2967%" y="197" width="0.0132%" height="15" fill="rgb(222,189,50)" fg:x="8266" fg:w="4"/><text x="27.5467%" y="207.50"></text></g><g><title>_mi_heap_delayed_free_partial (136 samples, 0.45%)</title><rect x="26.8641%" y="357" width="0.4491%" height="15" fill="rgb(245,148,34)" fg:x="8135" fg:w="136"/><text x="27.1141%" y="367.50"></text></g><g><title>_mi_free_delayed_block (136 samples, 0.45%)</title><rect x="26.8641%" y="341" width="0.4491%" height="15" fill="rgb(222,29,6)" fg:x="8135" fg:w="136"/><text x="27.1141%" y="351.50"></text></g><g><title>mi_page_free_list_extend (12 samples, 0.04%)</title><rect x="27.4553%" y="341" width="0.0396%" height="15" fill="rgb(221,189,43)" fg:x="8314" fg:w="12"/><text x="27.7053%" y="351.50"></text></g><g><title>mi_segment_span_allocate (6 samples, 0.02%)</title><rect x="27.5048%" y="309" width="0.0198%" height="15" fill="rgb(207,36,27)" fg:x="8329" fg:w="6"/><text x="27.7548%" y="319.50"></text></g><g><title>mi_page_fresh_alloc (11 samples, 0.04%)</title><rect x="27.4949%" y="341" width="0.0363%" height="15" fill="rgb(217,90,24)" fg:x="8326" fg:w="11"/><text x="27.7449%" y="351.50"></text></g><g><title>mi_segments_page_alloc (10 samples, 0.03%)</title><rect x="27.4982%" y="325" width="0.0330%" height="15" fill="rgb(224,66,35)" fg:x="8327" fg:w="10"/><text x="27.7482%" y="335.50"></text></g><g><title>mi_find_page (74 samples, 0.24%)</title><rect x="27.3133%" y="357" width="0.2444%" height="15" fill="rgb(221,13,50)" fg:x="8271" fg:w="74"/><text x="27.5633%" y="367.50"></text></g><g><title>mi_page_to_full (8 samples, 0.03%)</title><rect x="27.5312%" y="341" width="0.0264%" height="15" fill="rgb(236,68,49)" fg:x="8337" fg:w="8"/><text x="27.7812%" y="351.50"></text></g><g><title>mi_page_queue_enqueue_from_ex (8 samples, 0.03%)</title><rect x="27.5312%" y="325" width="0.0264%" height="15" fill="rgb(229,146,28)" fg:x="8337" fg:w="8"/><text x="27.7812%" y="335.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (224 samples, 0.74%)</title><rect x="26.8245%" y="389" width="0.7397%" height="15" fill="rgb(225,31,38)" fg:x="8123" fg:w="224"/><text x="27.0745%" y="399.50"></text></g><g><title>_mi_malloc_generic (219 samples, 0.72%)</title><rect x="26.8410%" y="373" width="0.7232%" height="15" fill="rgb(250,208,3)" fg:x="8128" fg:w="219"/><text x="27.0910%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (429 samples, 1.42%)</title><rect x="26.2268%" y="405" width="1.4167%" height="15" fill="rgb(246,54,23)" fg:x="7942" fg:w="429"/><text x="26.4768%" y="415.50"></text></g><g><title>mi_malloc_aligned (24 samples, 0.08%)</title><rect x="27.5642%" y="389" width="0.0793%" height="15" fill="rgb(243,76,11)" fg:x="8347" fg:w="24"/><text x="27.8142%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (12 samples, 0.04%)</title><rect x="27.6435%" y="405" width="0.0396%" height="15" fill="rgb(245,21,50)" fg:x="8371" fg:w="12"/><text x="27.8935%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (588 samples, 1.94%)</title><rect x="25.7612%" y="421" width="1.9417%" height="15" fill="rgb(228,9,43)" fg:x="7801" fg:w="588"/><text x="26.0112%" y="431.50">a..</text></g><g><title>mi_malloc_aligned (6 samples, 0.02%)</title><rect x="27.6831%" y="405" width="0.0198%" height="15" fill="rgb(208,100,47)" fg:x="8383" fg:w="6"/><text x="27.9331%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (7 samples, 0.02%)</title><rect x="27.7029%" y="421" width="0.0231%" height="15" fill="rgb(232,26,8)" fg:x="8389" fg:w="7"/><text x="27.9529%" y="431.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (14 samples, 0.05%)</title><rect x="27.7260%" y="421" width="0.0462%" height="15" fill="rgb(216,166,38)" fg:x="8396" fg:w="14"/><text x="27.9760%" y="431.50"></text></g><g><title>_mi_malloc_generic (14 samples, 0.05%)</title><rect x="27.7260%" y="405" width="0.0462%" height="15" fill="rgb(251,202,51)" fg:x="8396" fg:w="14"/><text x="27.9760%" y="415.50"></text></g><g><title>mi_find_page (12 samples, 0.04%)</title><rect x="27.7326%" y="389" width="0.0396%" height="15" fill="rgb(254,216,34)" fg:x="8398" fg:w="12"/><text x="27.9826%" y="399.50"></text></g><g><title>mi_malloc_aligned (48 samples, 0.16%)</title><rect x="27.7723%" y="421" width="0.1585%" height="15" fill="rgb(251,32,27)" fg:x="8410" fg:w="48"/><text x="28.0223%" y="431.50"></text></g><g><title>mi_malloc_aligned (5 samples, 0.02%)</title><rect x="27.9143%" y="405" width="0.0165%" height="15" fill="rgb(208,127,28)" fg:x="8453" fg:w="5"/><text x="28.1643%" y="415.50"></text></g><g><title>_platform_memmove (18 samples, 0.06%)</title><rect x="29.1493%" y="389" width="0.0594%" height="15" fill="rgb(224,137,22)" fg:x="8827" fg:w="18"/><text x="29.3993%" y="399.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="29.2088%" y="389" width="0.0132%" height="15" fill="rgb(254,70,32)" fg:x="8845" fg:w="4"/><text x="29.4588%" y="399.50"></text></g><g><title>_mi_malloc_generic (4 samples, 0.01%)</title><rect x="29.2088%" y="373" width="0.0132%" height="15" fill="rgb(229,75,37)" fg:x="8845" fg:w="4"/><text x="29.4588%" y="383.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (133 samples, 0.44%)</title><rect x="28.8422%" y="405" width="0.4392%" height="15" fill="rgb(252,64,23)" fg:x="8734" fg:w="133"/><text x="29.0922%" y="415.50"></text></g><g><title>mi_malloc_aligned (18 samples, 0.06%)</title><rect x="29.2220%" y="389" width="0.0594%" height="15" fill="rgb(232,162,48)" fg:x="8849" fg:w="18"/><text x="29.4720%" y="399.50"></text></g><g><title>DYLD-STUB$$memcpy (7 samples, 0.02%)</title><rect x="29.2847%" y="405" width="0.0231%" height="15" fill="rgb(246,160,12)" fg:x="8868" fg:w="7"/><text x="29.5347%" y="415.50"></text></g><g><title>_platform_memmove (22 samples, 0.07%)</title><rect x="29.3078%" y="405" width="0.0727%" height="15" fill="rgb(247,166,0)" fg:x="8875" fg:w="22"/><text x="29.5578%" y="415.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (14 samples, 0.05%)</title><rect x="29.3805%" y="405" width="0.0462%" height="15" fill="rgb(249,219,21)" fg:x="8897" fg:w="14"/><text x="29.6305%" y="415.50"></text></g><g><title>_mi_malloc_generic (14 samples, 0.05%)</title><rect x="29.3805%" y="389" width="0.0462%" height="15" fill="rgb(205,209,3)" fg:x="8897" fg:w="14"/><text x="29.6305%" y="399.50"></text></g><g><title>mi_find_page (11 samples, 0.04%)</title><rect x="29.3904%" y="373" width="0.0363%" height="15" fill="rgb(243,44,1)" fg:x="8900" fg:w="11"/><text x="29.6404%" y="383.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (478 samples, 1.58%)</title><rect x="27.9308%" y="421" width="1.5785%" height="15" fill="rgb(206,159,16)" fg:x="8458" fg:w="478"/><text x="28.1808%" y="431.50"></text></g><g><title>mi_malloc_aligned (25 samples, 0.08%)</title><rect x="29.4267%" y="405" width="0.0826%" height="15" fill="rgb(244,77,30)" fg:x="8911" fg:w="25"/><text x="29.6767%" y="415.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4,590 samples, 15.16%)</title><rect x="14.4079%" y="437" width="15.1575%" height="15" fill="rgb(218,69,12)" fg:x="4363" fg:w="4590"/><text x="14.6579%" y="447.50">&lt;&amp;mut sonic_rs::serde::..</text></g><g><title>sonic_rs::serde::de::Deserializer&lt;R&gt;::end_map (17 samples, 0.06%)</title><rect x="29.5093%" y="421" width="0.0561%" height="15" fill="rgb(212,87,7)" fg:x="8936" fg:w="17"/><text x="29.7593%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (18 samples, 0.06%)</title><rect x="29.5654%" y="437" width="0.0594%" height="15" fill="rgb(245,114,25)" fg:x="8953" fg:w="18"/><text x="29.8154%" y="447.50"></text></g><g><title>OUTLINED_FUNCTION_37 (5 samples, 0.02%)</title><rect x="29.6249%" y="421" width="0.0165%" height="15" fill="rgb(210,61,42)" fg:x="8971" fg:w="5"/><text x="29.8749%" y="431.50"></text></g><g><title>mi_malloc_aligned (9 samples, 0.03%)</title><rect x="29.6249%" y="437" width="0.0297%" height="15" fill="rgb(211,52,33)" fg:x="8971" fg:w="9"/><text x="29.8749%" y="447.50"></text></g><g><title>mi_malloc_aligned (4 samples, 0.01%)</title><rect x="29.6414%" y="421" width="0.0132%" height="15" fill="rgb(234,58,33)" fg:x="8976" fg:w="4"/><text x="29.8914%" y="431.50"></text></g><g><title>&lt;sonic_rs::serde::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (4,659 samples, 15.39%)</title><rect x="14.3055%" y="453" width="15.3854%" height="15" fill="rgb(220,115,36)" fg:x="4332" fg:w="4659"/><text x="14.5555%" y="463.50">&lt;sonic_rs::serde::de::Se..</text></g><g><title>serde::de::MapAccess::next_entry_seed (11 samples, 0.04%)</title><rect x="29.6546%" y="437" width="0.0363%" height="15" fill="rgb(243,153,54)" fg:x="8980" fg:w="11"/><text x="29.9046%" y="447.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (58 samples, 0.19%)</title><rect x="29.8032%" y="357" width="0.1915%" height="15" fill="rgb(251,47,18)" fg:x="9025" fg:w="58"/><text x="30.0532%" y="367.50"></text></g><g><title>_mi_heap_delayed_free_partial (61 samples, 0.20%)</title><rect x="29.8032%" y="389" width="0.2014%" height="15" fill="rgb(242,102,42)" fg:x="9025" fg:w="61"/><text x="30.0532%" y="399.50"></text></g><g><title>_mi_free_delayed_block (61 samples, 0.20%)</title><rect x="29.8032%" y="373" width="0.2014%" height="15" fill="rgb(234,31,38)" fg:x="9025" fg:w="61"/><text x="30.0532%" y="383.50"></text></g><g><title>_mi_malloc_generic (68 samples, 0.22%)</title><rect x="29.7933%" y="405" width="0.2246%" height="15" fill="rgb(221,117,51)" fg:x="9022" fg:w="68"/><text x="30.0433%" y="415.50"></text></g><g><title>mi_find_page (4 samples, 0.01%)</title><rect x="30.0046%" y="389" width="0.0132%" height="15" fill="rgb(212,20,18)" fg:x="9086" fg:w="4"/><text x="30.2546%" y="399.50"></text></g><g><title>_platform_memmove (21 samples, 0.07%)</title><rect x="30.0178%" y="405" width="0.0693%" height="15" fill="rgb(245,133,36)" fg:x="9090" fg:w="21"/><text x="30.2678%" y="415.50"></text></g><g><title>_mi_heap_realloc_zero (105 samples, 0.35%)</title><rect x="29.7437%" y="421" width="0.3467%" height="15" fill="rgb(212,6,19)" fg:x="9007" fg:w="105"/><text x="29.9937%" y="431.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="30.0938%" y="421" width="0.0132%" height="15" fill="rgb(218,1,36)" fg:x="9113" fg:w="4"/><text x="30.3438%" y="431.50"></text></g><g><title>_mi_malloc_generic (4 samples, 0.01%)</title><rect x="30.0938%" y="405" width="0.0132%" height="15" fill="rgb(246,84,54)" fg:x="9113" fg:w="4"/><text x="30.3438%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (129 samples, 0.43%)</title><rect x="29.6909%" y="453" width="0.4260%" height="15" fill="rgb(242,110,6)" fg:x="8991" fg:w="129"/><text x="29.9409%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (114 samples, 0.38%)</title><rect x="29.7404%" y="437" width="0.3765%" height="15" fill="rgb(214,47,5)" fg:x="9006" fg:w="114"/><text x="29.9904%" y="447.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4,857 samples, 16.04%)</title><rect x="14.0843%" y="469" width="16.0392%" height="15" fill="rgb(218,159,25)" fg:x="4265" fg:w="4857"/><text x="14.3343%" y="479.50">&lt;&amp;mut sonic_rs::serde::de..</text></g><g><title>_mi_heap_delayed_free_partial (6 samples, 0.02%)</title><rect x="30.1400%" y="405" width="0.0198%" height="15" fill="rgb(215,211,28)" fg:x="9127" fg:w="6"/><text x="30.3900%" y="415.50"></text></g><g><title>_mi_free_delayed_block (6 samples, 0.02%)</title><rect x="30.1400%" y="389" width="0.0198%" height="15" fill="rgb(238,59,32)" fg:x="9127" fg:w="6"/><text x="30.3900%" y="399.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (6 samples, 0.02%)</title><rect x="30.1400%" y="373" width="0.0198%" height="15" fill="rgb(226,82,3)" fg:x="9127" fg:w="6"/><text x="30.3900%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (14 samples, 0.05%)</title><rect x="30.1334%" y="469" width="0.0462%" height="15" fill="rgb(240,164,32)" fg:x="9125" fg:w="14"/><text x="30.3834%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (12 samples, 0.04%)</title><rect x="30.1400%" y="453" width="0.0396%" height="15" fill="rgb(232,46,7)" fg:x="9127" fg:w="12"/><text x="30.3900%" y="463.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (12 samples, 0.04%)</title><rect x="30.1400%" y="437" width="0.0396%" height="15" fill="rgb(229,129,53)" fg:x="9127" fg:w="12"/><text x="30.3900%" y="447.50"></text></g><g><title>_mi_malloc_generic (12 samples, 0.04%)</title><rect x="30.1400%" y="421" width="0.0396%" height="15" fill="rgb(234,188,29)" fg:x="9127" fg:w="12"/><text x="30.3900%" y="431.50"></text></g><g><title>mi_find_page (6 samples, 0.02%)</title><rect x="30.1598%" y="405" width="0.0198%" height="15" fill="rgb(246,141,4)" fg:x="9133" fg:w="6"/><text x="30.4098%" y="415.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4,904 samples, 16.19%)</title><rect x="13.9918%" y="501" width="16.1944%" height="15" fill="rgb(229,23,39)" fg:x="4237" fg:w="4904"/><text x="14.2418%" y="511.50">&lt;core::marker::PhantomDat..</text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4,898 samples, 16.17%)</title><rect x="14.0116%" y="485" width="16.1746%" height="15" fill="rgb(206,12,3)" fg:x="4243" fg:w="4898"/><text x="14.2616%" y="495.50">&lt;&amp;mut sonic_rs::serde::de..</text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (4,945 samples, 16.33%)</title><rect x="13.8663%" y="517" width="16.3298%" height="15" fill="rgb(252,226,20)" fg:x="4199" fg:w="4945"/><text x="14.1163%" y="527.50">&lt;&amp;mut sonic_rs::serde::de..</text></g><g><title>core::ptr::drop_in_place&lt;sonic_rs::serde::de::Deserializer&lt;sonic_rs::reader::Read&gt;&gt; (5 samples, 0.02%)</title><rect x="30.1962%" y="517" width="0.0165%" height="15" fill="rgb(216,123,35)" fg:x="9144" fg:w="5"/><text x="30.4462%" y="527.50"></text></g><g><title>&lt;query_plan_executor::executors::http::HTTPSubgraphExecutor as query_plan_executor::executors::common::SubgraphExecutor&gt;::execute::_{{closure}} (7,051 samples, 23.28%)</title><rect x="6.9546%" y="549" width="23.2845%" height="15" fill="rgb(212,68,40)" fg:x="2106" fg:w="7051"/><text x="7.2046%" y="559.50">&lt;query_plan_executor::executors::http..</text></g><g><title>sonic_rs::serde::de::from_slice_unchecked (4,966 samples, 16.40%)</title><rect x="13.8399%" y="533" width="16.3992%" height="15" fill="rgb(254,125,32)" fg:x="4191" fg:w="4966"/><text x="14.0899%" y="543.50">sonic_rs::serde::de::from..</text></g><g><title>sonic_rs::reader::Read::new_in (7 samples, 0.02%)</title><rect x="30.2160%" y="517" width="0.0231%" height="15" fill="rgb(253,97,22)" fg:x="9150" fg:w="7"/><text x="30.4660%" y="527.50"></text></g><g><title>_platform_memmove (12 samples, 0.04%)</title><rect x="30.2424%" y="533" width="0.0396%" height="15" fill="rgb(241,101,14)" fg:x="9158" fg:w="12"/><text x="30.4924%" y="543.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (113 samples, 0.37%)</title><rect x="30.2952%" y="469" width="0.3732%" height="15" fill="rgb(238,103,29)" fg:x="9174" fg:w="113"/><text x="30.5452%" y="479.50"></text></g><g><title>_mi_heap_delayed_free_partial (129 samples, 0.43%)</title><rect x="30.2919%" y="501" width="0.4260%" height="15" fill="rgb(233,195,47)" fg:x="9173" fg:w="129"/><text x="30.5419%" y="511.50"></text></g><g><title>_mi_free_delayed_block (129 samples, 0.43%)</title><rect x="30.2919%" y="485" width="0.4260%" height="15" fill="rgb(246,218,30)" fg:x="9173" fg:w="129"/><text x="30.5419%" y="495.50"></text></g><g><title>_mi_page_retire (15 samples, 0.05%)</title><rect x="30.6684%" y="469" width="0.0495%" height="15" fill="rgb(219,145,47)" fg:x="9287" fg:w="15"/><text x="30.9184%" y="479.50"></text></g><g><title>mi_segment_page_clear (14 samples, 0.05%)</title><rect x="30.6717%" y="453" width="0.0462%" height="15" fill="rgb(243,12,26)" fg:x="9288" fg:w="14"/><text x="30.9217%" y="463.50"></text></g><g><title>mi_segment_span_free_coalesce (14 samples, 0.05%)</title><rect x="30.6717%" y="437" width="0.0462%" height="15" fill="rgb(214,87,16)" fg:x="9288" fg:w="14"/><text x="30.9217%" y="447.50"></text></g><g><title>mi_segment_span_free (14 samples, 0.05%)</title><rect x="30.6717%" y="421" width="0.0462%" height="15" fill="rgb(208,99,42)" fg:x="9288" fg:w="14"/><text x="30.9217%" y="431.50"></text></g><g><title>mi_segment_try_purge (11 samples, 0.04%)</title><rect x="30.6816%" y="405" width="0.0363%" height="15" fill="rgb(253,99,2)" fg:x="9291" fg:w="11"/><text x="30.9316%" y="415.50"></text></g><g><title>mi_segment_purge (11 samples, 0.04%)</title><rect x="30.6816%" y="389" width="0.0363%" height="15" fill="rgb(220,168,23)" fg:x="9291" fg:w="11"/><text x="30.9316%" y="399.50"></text></g><g><title>_mi_os_purge_ex (11 samples, 0.04%)</title><rect x="30.6816%" y="373" width="0.0363%" height="15" fill="rgb(242,38,24)" fg:x="9291" fg:w="11"/><text x="30.9316%" y="383.50"></text></g><g><title>mi_os_decommit_ex (11 samples, 0.04%)</title><rect x="30.6816%" y="357" width="0.0363%" height="15" fill="rgb(225,182,9)" fg:x="9291" fg:w="11"/><text x="30.9316%" y="367.50"></text></g><g><title>madvise (11 samples, 0.04%)</title><rect x="30.6816%" y="341" width="0.0363%" height="15" fill="rgb(243,178,37)" fg:x="9291" fg:w="11"/><text x="30.9316%" y="351.50"></text></g><g><title>&lt;query_plan_executor::executors::http::HTTPSubgraphExecutor as query_plan_executor::executors::common::SubgraphExecutor&gt;::execute (156 samples, 0.52%)</title><rect x="30.2391%" y="549" width="0.5152%" height="15" fill="rgb(232,139,19)" fg:x="9157" fg:w="156"/><text x="30.4891%" y="559.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (143 samples, 0.47%)</title><rect x="30.2820%" y="533" width="0.4722%" height="15" fill="rgb(225,201,24)" fg:x="9170" fg:w="143"/><text x="30.5320%" y="543.50"></text></g><g><title>_mi_malloc_generic (141 samples, 0.47%)</title><rect x="30.2886%" y="517" width="0.4656%" height="15" fill="rgb(221,47,46)" fg:x="9172" fg:w="141"/><text x="30.5386%" y="527.50"></text></g><g><title>mi_find_page (11 samples, 0.04%)</title><rect x="30.7179%" y="501" width="0.0363%" height="15" fill="rgb(249,23,13)" fg:x="9302" fg:w="11"/><text x="30.9679%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="30.7575%" y="549" width="0.0165%" height="15" fill="rgb(219,9,5)" fg:x="9314" fg:w="5"/><text x="31.0075%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="30.7575%" y="533" width="0.0165%" height="15" fill="rgb(254,171,16)" fg:x="9314" fg:w="5"/><text x="31.0075%" y="543.50"></text></g><g><title>mi_free (5 samples, 0.02%)</title><rect x="30.7840%" y="549" width="0.0165%" height="15" fill="rgb(230,171,20)" fg:x="9322" fg:w="5"/><text x="31.0340%" y="559.50"></text></g><g><title>mi_free_block_delayed_mt (5 samples, 0.02%)</title><rect x="30.8005%" y="549" width="0.0165%" height="15" fill="rgb(210,71,41)" fg:x="9327" fg:w="5"/><text x="31.0505%" y="559.50"></text></g><g><title>&lt;query_planner::planner::plan_nodes::FetchNode as query_plan_executor::ExecutableFetchNode&gt;::execute_for_projected_representations::_{{closure}} (7,347 samples, 24.26%)</title><rect x="6.5716%" y="581" width="24.2619%" height="15" fill="rgb(206,173,20)" fg:x="1990" fg:w="7347"/><text x="6.8216%" y="591.50">&lt;query_planner::planner::plan_nodes::Fe..</text></g><g><title>query_plan_executor::executors::map::SubgraphExecutorMap::execute::_{{closure}} (7,265 samples, 23.99%)</title><rect x="6.8423%" y="565" width="23.9911%" height="15" fill="rgb(233,88,34)" fg:x="2072" fg:w="7265"/><text x="7.0923%" y="575.50">query_plan_executor::executors::map::S..</text></g><g><title>mi_free_generic_mt (5 samples, 0.02%)</title><rect x="30.8170%" y="549" width="0.0165%" height="15" fill="rgb(223,209,46)" fg:x="9332" fg:w="5"/><text x="31.0670%" y="559.50"></text></g><g><title>&lt;http_body_util::combinators::collect::Collect&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.04%)</title><rect x="30.9656%" y="533" width="0.0363%" height="15" fill="rgb(250,43,18)" fg:x="9377" fg:w="11"/><text x="31.2156%" y="543.50"></text></g><g><title>&lt;hyper::body::incoming::Incoming as http_body::Body&gt;::poll_frame (8 samples, 0.03%)</title><rect x="30.9755%" y="517" width="0.0264%" height="15" fill="rgb(208,13,10)" fg:x="9380" fg:w="8"/><text x="31.2255%" y="527.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (6 samples, 0.02%)</title><rect x="30.9821%" y="501" width="0.0198%" height="15" fill="rgb(212,200,36)" fg:x="9382" fg:w="6"/><text x="31.2321%" y="511.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (5 samples, 0.02%)</title><rect x="30.9854%" y="485" width="0.0165%" height="15" fill="rgb(225,90,30)" fg:x="9383" fg:w="5"/><text x="31.2354%" y="495.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::ResponseFuture as core::future::future::Future&gt;::poll (4 samples, 0.01%)</title><rect x="31.0052%" y="533" width="0.0132%" height="15" fill="rgb(236,182,39)" fg:x="9389" fg:w="4"/><text x="31.2552%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.03%)</title><rect x="31.0349%" y="517" width="0.0264%" height="15" fill="rgb(212,144,35)" fg:x="9398" fg:w="8"/><text x="31.2849%" y="527.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (6 samples, 0.02%)</title><rect x="31.0415%" y="501" width="0.0198%" height="15" fill="rgb(228,63,44)" fg:x="9400" fg:w="6"/><text x="31.2915%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (11 samples, 0.04%)</title><rect x="31.0316%" y="533" width="0.0363%" height="15" fill="rgb(228,109,6)" fg:x="9397" fg:w="11"/><text x="31.2816%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (4 samples, 0.01%)</title><rect x="31.0680%" y="533" width="0.0132%" height="15" fill="rgb(238,117,24)" fg:x="9408" fg:w="4"/><text x="31.3180%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;query_plan_executor::SubgraphExecutionRequest&gt; (5 samples, 0.02%)</title><rect x="31.0812%" y="533" width="0.0165%" height="15" fill="rgb(242,26,26)" fg:x="9412" fg:w="5"/><text x="31.3312%" y="543.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="31.1307%" y="517" width="0.0198%" height="15" fill="rgb(221,92,48)" fg:x="9427" fg:w="6"/><text x="31.3807%" y="527.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (19 samples, 0.06%)</title><rect x="31.1571%" y="453" width="0.0627%" height="15" fill="rgb(209,209,32)" fg:x="9435" fg:w="19"/><text x="31.4071%" y="463.50"></text></g><g><title>_mi_heap_delayed_free_partial (21 samples, 0.07%)</title><rect x="31.1571%" y="485" width="0.0693%" height="15" fill="rgb(221,70,22)" fg:x="9435" fg:w="21"/><text x="31.4071%" y="495.50"></text></g><g><title>_mi_free_delayed_block (21 samples, 0.07%)</title><rect x="31.1571%" y="469" width="0.0693%" height="15" fill="rgb(248,145,5)" fg:x="9435" fg:w="21"/><text x="31.4071%" y="479.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (29 samples, 0.10%)</title><rect x="31.1538%" y="517" width="0.0958%" height="15" fill="rgb(226,116,26)" fg:x="9434" fg:w="29"/><text x="31.4038%" y="527.50"></text></g><g><title>_mi_malloc_generic (29 samples, 0.10%)</title><rect x="31.1538%" y="501" width="0.0958%" height="15" fill="rgb(244,5,17)" fg:x="9434" fg:w="29"/><text x="31.4038%" y="511.50"></text></g><g><title>mi_find_page (7 samples, 0.02%)</title><rect x="31.2265%" y="485" width="0.0231%" height="15" fill="rgb(252,159,33)" fg:x="9456" fg:w="7"/><text x="31.4765%" y="495.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::request (40 samples, 0.13%)</title><rect x="31.1208%" y="533" width="0.1321%" height="15" fill="rgb(206,71,0)" fg:x="9424" fg:w="40"/><text x="31.3708%" y="543.50"></text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="31.3817%" y="485" width="0.0165%" height="15" fill="rgb(233,118,54)" fg:x="9503" fg:w="5"/><text x="31.6317%" y="495.50"></text></g><g><title>_tlv_get_addr (5 samples, 0.02%)</title><rect x="31.3982%" y="485" width="0.0165%" height="15" fill="rgb(234,83,48)" fg:x="9508" fg:w="5"/><text x="31.6482%" y="495.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.08%)</title><rect x="31.3454%" y="501" width="0.0826%" height="15" fill="rgb(228,3,54)" fg:x="9492" fg:w="25"/><text x="31.5954%" y="511.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (31 samples, 0.10%)</title><rect x="31.3288%" y="517" width="0.1024%" height="15" fill="rgb(226,155,13)" fg:x="9487" fg:w="31"/><text x="31.5788%" y="527.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (7 samples, 0.02%)</title><rect x="31.4543%" y="485" width="0.0231%" height="15" fill="rgb(241,28,37)" fg:x="9525" fg:w="7"/><text x="31.7043%" y="495.50"></text></g><g><title>_pthread_mutex_firstfit_wake (7 samples, 0.02%)</title><rect x="31.4543%" y="469" width="0.0231%" height="15" fill="rgb(233,93,10)" fg:x="9525" fg:w="7"/><text x="31.7043%" y="479.50"></text></g><g><title>__psynch_mutexdrop (7 samples, 0.02%)</title><rect x="31.4543%" y="453" width="0.0231%" height="15" fill="rgb(225,113,19)" fg:x="9525" fg:w="7"/><text x="31.7043%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.03%)</title><rect x="31.4774%" y="485" width="0.0297%" height="15" fill="rgb(241,2,18)" fg:x="9532" fg:w="9"/><text x="31.7274%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="31.4907%" y="469" width="0.0165%" height="15" fill="rgb(228,207,21)" fg:x="9536" fg:w="5"/><text x="31.7407%" y="479.50"></text></g><g><title>hyper_util::client::legacy::pool::Expiration::expires (9 samples, 0.03%)</title><rect x="31.5072%" y="485" width="0.0297%" height="15" fill="rgb(213,211,35)" fg:x="9541" fg:w="9"/><text x="31.7572%" y="495.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (9 samples, 0.03%)</title><rect x="31.5072%" y="469" width="0.0297%" height="15" fill="rgb(209,83,10)" fg:x="9541" fg:w="9"/><text x="31.7572%" y="479.50"></text></g><g><title>clock_gettime (9 samples, 0.03%)</title><rect x="31.5072%" y="453" width="0.0297%" height="15" fill="rgb(209,164,1)" fg:x="9541" fg:w="9"/><text x="31.7572%" y="463.50"></text></g><g><title>clock_gettime_nsec_np (9 samples, 0.03%)</title><rect x="31.5072%" y="437" width="0.0297%" height="15" fill="rgb(213,184,43)" fg:x="9541" fg:w="9"/><text x="31.7572%" y="447.50"></text></g><g><title>mach_absolute_time (9 samples, 0.03%)</title><rect x="31.5072%" y="421" width="0.0297%" height="15" fill="rgb(231,61,34)" fg:x="9541" fg:w="9"/><text x="31.7572%" y="431.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Checkout&lt;T,K&gt; as core::future::future::Future&gt;::poll (35 samples, 0.12%)</title><rect x="31.4411%" y="501" width="0.1156%" height="15" fill="rgb(235,75,3)" fg:x="9521" fg:w="35"/><text x="31.6911%" y="511.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (6 samples, 0.02%)</title><rect x="31.5369%" y="485" width="0.0198%" height="15" fill="rgb(220,106,47)" fg:x="9550" fg:w="6"/><text x="31.7869%" y="495.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.02%)</title><rect x="31.5369%" y="469" width="0.0198%" height="15" fill="rgb(210,196,33)" fg:x="9550" fg:w="6"/><text x="31.7869%" y="479.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (6 samples, 0.02%)</title><rect x="31.5369%" y="453" width="0.0198%" height="15" fill="rgb(229,154,42)" fg:x="9550" fg:w="6"/><text x="31.7869%" y="463.50"></text></g><g><title>__psynch_mutexwait (5 samples, 0.02%)</title><rect x="31.5402%" y="437" width="0.0165%" height="15" fill="rgb(228,114,26)" fg:x="9551" fg:w="5"/><text x="31.7902%" y="447.50"></text></g><g><title>&lt;hyper_util::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (4 samples, 0.01%)</title><rect x="31.5567%" y="501" width="0.0132%" height="15" fill="rgb(208,144,1)" fg:x="9556" fg:w="4"/><text x="31.8067%" y="511.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (4 samples, 0.01%)</title><rect x="31.5567%" y="485" width="0.0132%" height="15" fill="rgb(239,112,37)" fg:x="9556" fg:w="4"/><text x="31.8067%" y="495.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.01%)</title><rect x="31.5567%" y="469" width="0.0132%" height="15" fill="rgb(210,96,50)" fg:x="9556" fg:w="4"/><text x="31.8067%" y="479.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.01%)</title><rect x="31.5567%" y="453" width="0.0132%" height="15" fill="rgb(222,178,2)" fg:x="9556" fg:w="4"/><text x="31.8067%" y="463.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (4 samples, 0.01%)</title><rect x="31.5567%" y="437" width="0.0132%" height="15" fill="rgb(226,74,18)" fg:x="9556" fg:w="4"/><text x="31.8067%" y="447.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (46 samples, 0.15%)</title><rect x="31.4312%" y="517" width="0.1519%" height="15" fill="rgb(225,67,54)" fg:x="9518" fg:w="46"/><text x="31.6812%" y="527.50"></text></g><g><title>&lt;hyper_util::client::legacy::connect::ExtraEnvelope&lt;T&gt; as hyper_util::client::legacy::connect::ExtraInner&gt;::set (4 samples, 0.01%)</title><rect x="31.5897%" y="517" width="0.0132%" height="15" fill="rgb(251,92,32)" fg:x="9566" fg:w="4"/><text x="31.8397%" y="527.50"></text></g><g><title>http::extensions::Extensions::insert (4 samples, 0.01%)</title><rect x="31.5897%" y="501" width="0.0132%" height="15" fill="rgb(228,149,22)" fg:x="9566" fg:w="4"/><text x="31.8397%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::client::Client&lt;hyper_util::client::legacy::connect::http::HttpConnector,http_body_util::full::Full&lt;bytes::bytes::Bytes&gt;&gt;::connect_to::{{closure}}&gt; (4 samples, 0.01%)</title><rect x="31.6227%" y="517" width="0.0132%" height="15" fill="rgb(243,54,13)" fg:x="9576" fg:w="4"/><text x="31.8727%" y="527.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (7 samples, 0.02%)</title><rect x="31.6657%" y="485" width="0.0231%" height="15" fill="rgb(243,180,28)" fg:x="9589" fg:w="7"/><text x="31.9157%" y="495.50"></text></g><g><title>_pthread_mutex_firstfit_wake (6 samples, 0.02%)</title><rect x="31.6690%" y="469" width="0.0198%" height="15" fill="rgb(208,167,24)" fg:x="9590" fg:w="6"/><text x="31.9190%" y="479.50"></text></g><g><title>__psynch_mutexdrop (6 samples, 0.02%)</title><rect x="31.6690%" y="453" width="0.0198%" height="15" fill="rgb(245,73,45)" fg:x="9590" fg:w="6"/><text x="31.9190%" y="463.50"></text></g><g><title>&lt;http::uri::authority::Authority as core::cmp::PartialEq&gt;::eq (6 samples, 0.02%)</title><rect x="31.7086%" y="469" width="0.0198%" height="15" fill="rgb(237,203,48)" fg:x="9602" fg:w="6"/><text x="31.9586%" y="479.50"></text></g><g><title>hyper_util::client::legacy::pool::PoolInner&lt;T,K&gt;::put (14 samples, 0.05%)</title><rect x="31.6954%" y="485" width="0.0462%" height="15" fill="rgb(211,197,16)" fg:x="9598" fg:w="14"/><text x="31.9454%" y="495.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (9 samples, 0.03%)</title><rect x="31.7416%" y="469" width="0.0297%" height="15" fill="rgb(243,99,51)" fg:x="9612" fg:w="9"/><text x="31.9916%" y="479.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (9 samples, 0.03%)</title><rect x="31.7416%" y="453" width="0.0297%" height="15" fill="rgb(215,123,29)" fg:x="9612" fg:w="9"/><text x="31.9916%" y="463.50"></text></g><g><title>__psynch_mutexwait (9 samples, 0.03%)</title><rect x="31.7416%" y="437" width="0.0297%" height="15" fill="rgb(239,186,37)" fg:x="9612" fg:w="9"/><text x="31.9916%" y="447.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Pooled&lt;T,K&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.12%)</title><rect x="31.6591%" y="501" width="0.1156%" height="15" fill="rgb(252,136,39)" fg:x="9587" fg:w="35"/><text x="31.9091%" y="511.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (10 samples, 0.03%)</title><rect x="31.7416%" y="485" width="0.0330%" height="15" fill="rgb(223,213,32)" fg:x="9612" fg:w="10"/><text x="31.9916%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;http_body_util::full::Full&lt;bytes::bytes::Bytes&gt;&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (37 samples, 0.12%)</title><rect x="31.6558%" y="517" width="0.1222%" height="15" fill="rgb(233,115,5)" fg:x="9586" fg:w="37"/><text x="31.9058%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (8 samples, 0.03%)</title><rect x="31.7813%" y="501" width="0.0264%" height="15" fill="rgb(207,226,44)" fg:x="9624" fg:w="8"/><text x="32.0313%" y="511.50"></text></g><g><title>core::fmt::write (8 samples, 0.03%)</title><rect x="31.7813%" y="485" width="0.0264%" height="15" fill="rgb(208,126,0)" fg:x="9624" fg:w="8"/><text x="32.0313%" y="495.50"></text></g><g><title>core::fmt::num::imp::_&lt;impl u16&gt;::_fmt (5 samples, 0.02%)</title><rect x="31.7912%" y="469" width="0.0165%" height="15" fill="rgb(244,66,21)" fg:x="9627" fg:w="5"/><text x="32.0412%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.02%)</title><rect x="31.8176%" y="485" width="0.0198%" height="15" fill="rgb(222,97,12)" fg:x="9635" fg:w="6"/><text x="32.0676%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.02%)</title><rect x="31.8176%" y="469" width="0.0198%" height="15" fill="rgb(219,213,19)" fg:x="9635" fg:w="6"/><text x="32.0676%" y="479.50"></text></g><g><title>_mi_heap_realloc_zero (6 samples, 0.02%)</title><rect x="31.8176%" y="453" width="0.0198%" height="15" fill="rgb(252,169,30)" fg:x="9635" fg:w="6"/><text x="32.0676%" y="463.50"></text></g><g><title>_mi_malloc_generic (5 samples, 0.02%)</title><rect x="31.8209%" y="437" width="0.0165%" height="15" fill="rgb(206,32,51)" fg:x="9636" fg:w="5"/><text x="32.0709%" y="447.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert_entry (7 samples, 0.02%)</title><rect x="31.8176%" y="501" width="0.0231%" height="15" fill="rgb(250,172,42)" fg:x="9635" fg:w="7"/><text x="32.0676%" y="511.50"></text></g><g><title>http::uri::authority::host (5 samples, 0.02%)</title><rect x="31.8473%" y="501" width="0.0165%" height="15" fill="rgb(209,34,43)" fg:x="9644" fg:w="5"/><text x="32.0973%" y="511.50"></text></g><g><title>http::header::map::Entry&lt;T&gt;::or_insert_with (27 samples, 0.09%)</title><rect x="31.7780%" y="517" width="0.0892%" height="15" fill="rgb(223,11,35)" fg:x="9623" fg:w="27"/><text x="32.0280%" y="527.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="31.8737%" y="501" width="0.0132%" height="15" fill="rgb(251,219,26)" fg:x="9652" fg:w="4"/><text x="32.1237%" y="511.50"></text></g><g><title>_mi_malloc_generic (4 samples, 0.01%)</title><rect x="31.8737%" y="485" width="0.0132%" height="15" fill="rgb(231,119,3)" fg:x="9652" fg:w="4"/><text x="32.1237%" y="495.50"></text></g><g><title>mi_find_page (4 samples, 0.01%)</title><rect x="31.8737%" y="469" width="0.0132%" height="15" fill="rgb(216,97,11)" fg:x="9652" fg:w="4"/><text x="32.1237%" y="479.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="31.8935%" y="485" width="0.0132%" height="15" fill="rgb(223,59,9)" fg:x="9658" fg:w="4"/><text x="32.1435%" y="495.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.01%)</title><rect x="31.9167%" y="421" width="0.0132%" height="15" fill="rgb(233,93,31)" fg:x="9665" fg:w="4"/><text x="32.1667%" y="431.50"></text></g><g><title>pthread_cond_signal (4 samples, 0.01%)</title><rect x="31.9167%" y="405" width="0.0132%" height="15" fill="rgb(239,81,33)" fg:x="9665" fg:w="4"/><text x="32.1667%" y="415.50"></text></g><g><title>__psynch_cvsignal (4 samples, 0.01%)</title><rect x="31.9167%" y="389" width="0.0132%" height="15" fill="rgb(213,120,34)" fg:x="9665" fg:w="4"/><text x="32.1667%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (8 samples, 0.03%)</title><rect x="31.9067%" y="469" width="0.0264%" height="15" fill="rgb(243,49,53)" fg:x="9662" fg:w="8"/><text x="32.1567%" y="479.50"></text></g><g><title>tokio::runtime::context::with_scheduler (8 samples, 0.03%)</title><rect x="31.9067%" y="453" width="0.0264%" height="15" fill="rgb(247,216,33)" fg:x="9662" fg:w="8"/><text x="32.1567%" y="463.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (8 samples, 0.03%)</title><rect x="31.9067%" y="437" width="0.0264%" height="15" fill="rgb(226,26,14)" fg:x="9662" fg:w="8"/><text x="32.1567%" y="447.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (10 samples, 0.03%)</title><rect x="31.9067%" y="485" width="0.0330%" height="15" fill="rgb(215,49,53)" fg:x="9662" fg:w="10"/><text x="32.1567%" y="495.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (5 samples, 0.02%)</title><rect x="31.9398%" y="485" width="0.0165%" height="15" fill="rgb(245,162,40)" fg:x="9672" fg:w="5"/><text x="32.1898%" y="495.50"></text></g><g><title>hyper::client::dispatch::Sender&lt;T,U&gt;::try_send (27 samples, 0.09%)</title><rect x="31.8737%" y="517" width="0.0892%" height="15" fill="rgb(229,68,17)" fg:x="9652" fg:w="27"/><text x="32.1237%" y="527.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (23 samples, 0.08%)</title><rect x="31.8869%" y="501" width="0.0760%" height="15" fill="rgb(213,182,10)" fg:x="9656" fg:w="23"/><text x="32.1369%" y="511.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::connect_to (13 samples, 0.04%)</title><rect x="31.9629%" y="517" width="0.0429%" height="15" fill="rgb(245,125,30)" fg:x="9679" fg:w="13"/><text x="32.2129%" y="527.50"></text></g><g><title>hyper_util::client::legacy::client::domain_as_uri (8 samples, 0.03%)</title><rect x="31.9794%" y="501" width="0.0264%" height="15" fill="rgb(232,202,2)" fg:x="9684" fg:w="8"/><text x="32.2294%" y="511.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::_{{closure}} (232 samples, 0.77%)</title><rect x="31.2529%" y="533" width="0.7661%" height="15" fill="rgb(237,140,51)" fg:x="9464" fg:w="232"/><text x="31.5029%" y="543.50"></text></g><g><title>hyper_util::client::legacy::client::origin_form (4 samples, 0.01%)</title><rect x="32.0058%" y="517" width="0.0132%" height="15" fill="rgb(236,157,25)" fg:x="9692" fg:w="4"/><text x="32.2558%" y="527.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (16 samples, 0.05%)</title><rect x="32.0256%" y="469" width="0.0528%" height="15" fill="rgb(219,209,0)" fg:x="9698" fg:w="16"/><text x="32.2756%" y="479.50"></text></g><g><title>_mi_heap_delayed_free_partial (19 samples, 0.06%)</title><rect x="32.0256%" y="501" width="0.0627%" height="15" fill="rgb(240,116,54)" fg:x="9698" fg:w="19"/><text x="32.2756%" y="511.50"></text></g><g><title>_mi_free_delayed_block (19 samples, 0.06%)</title><rect x="32.0256%" y="485" width="0.0627%" height="15" fill="rgb(216,10,36)" fg:x="9698" fg:w="19"/><text x="32.2756%" y="495.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (20 samples, 0.07%)</title><rect x="32.0256%" y="533" width="0.0660%" height="15" fill="rgb(222,72,44)" fg:x="9698" fg:w="20"/><text x="32.2756%" y="543.50"></text></g><g><title>_mi_malloc_generic (20 samples, 0.07%)</title><rect x="32.0256%" y="517" width="0.0660%" height="15" fill="rgb(232,159,9)" fg:x="9698" fg:w="20"/><text x="32.2756%" y="527.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 0.04%)</title><rect x="32.2106%" y="421" width="0.0429%" height="15" fill="rgb(210,39,32)" fg:x="9754" fg:w="13"/><text x="32.4606%" y="431.50"></text></g><g><title>_platform_memcmp (5 samples, 0.02%)</title><rect x="32.3129%" y="405" width="0.0165%" height="15" fill="rgb(216,194,45)" fg:x="9785" fg:w="5"/><text x="32.5629%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (11 samples, 0.04%)</title><rect x="32.3526%" y="389" width="0.0363%" height="15" fill="rgb(218,18,35)" fg:x="9797" fg:w="11"/><text x="32.6026%" y="399.50"></text></g><g><title>_platform_memmove (5 samples, 0.02%)</title><rect x="32.3724%" y="373" width="0.0165%" height="15" fill="rgb(207,83,51)" fg:x="9803" fg:w="5"/><text x="32.6224%" y="383.50"></text></g><g><title>_mi_heap_delayed_free_partial (4 samples, 0.01%)</title><rect x="32.3889%" y="357" width="0.0132%" height="15" fill="rgb(225,63,43)" fg:x="9808" fg:w="4"/><text x="32.6389%" y="367.50"></text></g><g><title>_mi_free_delayed_block (4 samples, 0.01%)</title><rect x="32.3889%" y="341" width="0.0132%" height="15" fill="rgb(207,57,36)" fg:x="9808" fg:w="4"/><text x="32.6389%" y="351.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (4 samples, 0.01%)</title><rect x="32.3889%" y="325" width="0.0132%" height="15" fill="rgb(216,99,33)" fg:x="9808" fg:w="4"/><text x="32.6389%" y="335.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (8 samples, 0.03%)</title><rect x="32.3889%" y="389" width="0.0264%" height="15" fill="rgb(225,42,16)" fg:x="9808" fg:w="8"/><text x="32.6389%" y="399.50"></text></g><g><title>_mi_malloc_generic (8 samples, 0.03%)</title><rect x="32.3889%" y="373" width="0.0264%" height="15" fill="rgb(220,201,45)" fg:x="9808" fg:w="8"/><text x="32.6389%" y="383.50"></text></g><g><title>mi_find_page (4 samples, 0.01%)</title><rect x="32.4021%" y="357" width="0.0132%" height="15" fill="rgb(225,33,4)" fg:x="9812" fg:w="4"/><text x="32.6521%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (27 samples, 0.09%)</title><rect x="32.3294%" y="405" width="0.0892%" height="15" fill="rgb(224,33,50)" fg:x="9790" fg:w="27"/><text x="32.5794%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (50 samples, 0.17%)</title><rect x="32.2601%" y="421" width="0.1651%" height="15" fill="rgb(246,198,51)" fg:x="9769" fg:w="50"/><text x="32.5101%" y="431.50"></text></g><g><title>_platform_memmove (7 samples, 0.02%)</title><rect x="32.5210%" y="389" width="0.0231%" height="15" fill="rgb(205,22,4)" fg:x="9848" fg:w="7"/><text x="32.7710%" y="399.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (24 samples, 0.08%)</title><rect x="32.4714%" y="405" width="0.0793%" height="15" fill="rgb(206,3,8)" fg:x="9833" fg:w="24"/><text x="32.7214%" y="415.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (43 samples, 0.14%)</title><rect x="32.4384%" y="421" width="0.1420%" height="15" fill="rgb(251,23,15)" fg:x="9823" fg:w="43"/><text x="32.6884%" y="431.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (129 samples, 0.43%)</title><rect x="32.1577%" y="437" width="0.4260%" height="15" fill="rgb(252,88,28)" fg:x="9738" fg:w="129"/><text x="32.4077%" y="447.50"></text></g><g><title>&lt;sonic_rs::serde::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (133 samples, 0.44%)</title><rect x="32.1478%" y="453" width="0.4392%" height="15" fill="rgb(212,127,14)" fg:x="9735" fg:w="133"/><text x="32.3978%" y="463.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (142 samples, 0.47%)</title><rect x="32.1280%" y="469" width="0.4689%" height="15" fill="rgb(247,145,37)" fg:x="9729" fg:w="142"/><text x="32.3780%" y="479.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (156 samples, 0.52%)</title><rect x="32.0983%" y="517" width="0.5152%" height="15" fill="rgb(209,117,53)" fg:x="9720" fg:w="156"/><text x="32.3483%" y="527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (155 samples, 0.51%)</title><rect x="32.1016%" y="501" width="0.5119%" height="15" fill="rgb(212,90,42)" fg:x="9721" fg:w="155"/><text x="32.3516%" y="511.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (154 samples, 0.51%)</title><rect x="32.1049%" y="485" width="0.5086%" height="15" fill="rgb(218,164,37)" fg:x="9722" fg:w="154"/><text x="32.3549%" y="495.50"></text></g><g><title>&lt;query_plan_executor::executors::http::HTTPSubgraphExecutor as query_plan_executor::executors::common::SubgraphExecutor&gt;::execute::_{{closure}} (522 samples, 1.72%)</title><rect x="30.8929%" y="549" width="1.7238%" height="15" fill="rgb(246,65,34)" fg:x="9355" fg:w="522"/><text x="31.1429%" y="559.50"></text></g><g><title>sonic_rs::serde::de::from_slice_unchecked (159 samples, 0.53%)</title><rect x="32.0917%" y="533" width="0.5251%" height="15" fill="rgb(231,100,33)" fg:x="9718" fg:w="159"/><text x="32.3417%" y="543.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="32.6167%" y="533" width="0.0198%" height="15" fill="rgb(228,126,14)" fg:x="9877" fg:w="6"/><text x="32.8667%" y="543.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (24 samples, 0.08%)</title><rect x="32.6365%" y="469" width="0.0793%" height="15" fill="rgb(215,173,21)" fg:x="9883" fg:w="24"/><text x="32.8865%" y="479.50"></text></g><g><title>&lt;query_plan_executor::executors::http::HTTPSubgraphExecutor as query_plan_executor::executors::common::SubgraphExecutor&gt;::execute (32 samples, 0.11%)</title><rect x="32.6167%" y="549" width="0.1057%" height="15" fill="rgb(210,6,40)" fg:x="9877" fg:w="32"/><text x="32.8667%" y="559.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (26 samples, 0.09%)</title><rect x="32.6365%" y="533" width="0.0859%" height="15" fill="rgb(212,48,18)" fg:x="9883" fg:w="26"/><text x="32.8865%" y="543.50"></text></g><g><title>_mi_malloc_generic (26 samples, 0.09%)</title><rect x="32.6365%" y="517" width="0.0859%" height="15" fill="rgb(230,214,11)" fg:x="9883" fg:w="26"/><text x="32.8865%" y="527.50"></text></g><g><title>_mi_heap_delayed_free_partial (26 samples, 0.09%)</title><rect x="32.6365%" y="501" width="0.0859%" height="15" fill="rgb(254,105,39)" fg:x="9883" fg:w="26"/><text x="32.8865%" y="511.50"></text></g><g><title>_mi_free_delayed_block (26 samples, 0.09%)</title><rect x="32.6365%" y="485" width="0.0859%" height="15" fill="rgb(245,158,5)" fg:x="9883" fg:w="26"/><text x="32.8865%" y="495.50"></text></g><g><title>&lt;query_planner::planner::plan_nodes::FetchNode as query_plan_executor::ExecutableFetchNode&gt;::execute_for_root::_{{closure}} (580 samples, 1.92%)</title><rect x="30.8335%" y="581" width="1.9153%" height="15" fill="rgb(249,208,11)" fg:x="9337" fg:w="580"/><text x="31.0835%" y="591.50">&lt;..</text></g><g><title>query_plan_executor::executors::map::SubgraphExecutorMap::execute::_{{closure}} (570 samples, 1.88%)</title><rect x="30.8665%" y="565" width="1.8823%" height="15" fill="rgb(210,39,28)" fg:x="9347" fg:w="570"/><text x="31.1165%" y="575.50">q..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (7,948 samples, 26.25%)</title><rect x="6.5286%" y="597" width="26.2466%" height="15" fill="rgb(211,56,53)" fg:x="1977" fg:w="7948"/><text x="6.7786%" y="607.50">&lt;futures_util::future::future::map::Map&lt;Fu..</text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (43 samples, 0.14%)</title><rect x="32.7785%" y="597" width="0.1420%" height="15" fill="rgb(226,201,30)" fg:x="9926" fg:w="43"/><text x="33.0285%" y="607.50"></text></g><g><title>mi_free (4 samples, 0.01%)</title><rect x="32.9569%" y="581" width="0.0132%" height="15" fill="rgb(239,101,34)" fg:x="9980" fg:w="4"/><text x="33.2069%" y="591.50"></text></g><g><title>mi_free_block_delayed_mt (6 samples, 0.02%)</title><rect x="32.9701%" y="581" width="0.0198%" height="15" fill="rgb(226,209,5)" fg:x="9984" fg:w="6"/><text x="33.2201%" y="591.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (8,151 samples, 26.92%)</title><rect x="6.0894%" y="613" width="26.9170%" height="15" fill="rgb(250,105,47)" fg:x="1844" fg:w="8151"/><text x="6.3394%" y="623.50">futures_util::stream::stream::StreamExt::po..</text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (26 samples, 0.09%)</title><rect x="32.9205%" y="597" width="0.0859%" height="15" fill="rgb(230,72,3)" fg:x="9969" fg:w="26"/><text x="33.1705%" y="607.50"></text></g><g><title>mi_free_generic_mt (5 samples, 0.02%)</title><rect x="32.9899%" y="581" width="0.0165%" height="15" fill="rgb(232,218,39)" fg:x="9990" fg:w="5"/><text x="33.2399%" y="591.50"></text></g><g><title>mi_free (4 samples, 0.01%)</title><rect x="33.0064%" y="613" width="0.0132%" height="15" fill="rgb(248,166,6)" fg:x="9995" fg:w="4"/><text x="33.2564%" y="623.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (9 samples, 0.03%)</title><rect x="33.0328%" y="549" width="0.0297%" height="15" fill="rgb(247,89,20)" fg:x="10003" fg:w="9"/><text x="33.2828%" y="559.50"></text></g><g><title>_mi_heap_delayed_free_partial (10 samples, 0.03%)</title><rect x="33.0328%" y="581" width="0.0330%" height="15" fill="rgb(248,130,54)" fg:x="10003" fg:w="10"/><text x="33.2828%" y="591.50"></text></g><g><title>_mi_free_delayed_block (10 samples, 0.03%)</title><rect x="33.0328%" y="565" width="0.0330%" height="15" fill="rgb(234,196,4)" fg:x="10003" fg:w="10"/><text x="33.2828%" y="575.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (16 samples, 0.05%)</title><rect x="33.0328%" y="613" width="0.0528%" height="15" fill="rgb(250,143,31)" fg:x="10003" fg:w="16"/><text x="33.2828%" y="623.50"></text></g><g><title>_mi_malloc_generic (16 samples, 0.05%)</title><rect x="33.0328%" y="597" width="0.0528%" height="15" fill="rgb(211,110,34)" fg:x="10003" fg:w="16"/><text x="33.2828%" y="607.50"></text></g><g><title>mi_find_page (6 samples, 0.02%)</title><rect x="33.0658%" y="581" width="0.0198%" height="15" fill="rgb(215,124,48)" fg:x="10013" fg:w="6"/><text x="33.3158%" y="591.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge (8 samples, 0.03%)</title><rect x="33.0956%" y="613" width="0.0264%" height="15" fill="rgb(216,46,13)" fg:x="10022" fg:w="8"/><text x="33.3456%" y="623.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge_objects (6 samples, 0.02%)</title><rect x="33.1022%" y="597" width="0.0198%" height="15" fill="rgb(205,184,25)" fg:x="10024" fg:w="6"/><text x="33.3522%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (9 samples, 0.03%)</title><rect x="33.2178%" y="581" width="0.0297%" height="15" fill="rgb(228,1,10)" fg:x="10059" fg:w="9"/><text x="33.4678%" y="591.50"></text></g><g><title>_platform_memcmp (20 samples, 0.07%)</title><rect x="33.4126%" y="533" width="0.0660%" height="15" fill="rgb(213,116,27)" fg:x="10118" fg:w="20"/><text x="33.6626%" y="543.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires_map_mut (73 samples, 0.24%)</title><rect x="33.2937%" y="549" width="0.2411%" height="15" fill="rgb(241,95,50)" fg:x="10082" fg:w="73"/><text x="33.5437%" y="559.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires (17 samples, 0.06%)</title><rect x="33.4786%" y="533" width="0.0561%" height="15" fill="rgb(238,48,32)" fg:x="10138" fg:w="17"/><text x="33.7286%" y="543.50"></text></g><g><title>core::fmt::write (10 samples, 0.03%)</title><rect x="33.5018%" y="517" width="0.0330%" height="15" fill="rgb(235,113,49)" fg:x="10145" fg:w="10"/><text x="33.7518%" y="527.50"></text></g><g><title>&lt;serde_json::number::Number as core::fmt::Display&gt;::fmt (6 samples, 0.02%)</title><rect x="33.5150%" y="501" width="0.0198%" height="15" fill="rgb(205,127,43)" fg:x="10149" fg:w="6"/><text x="33.7650%" y="511.50"></text></g><g><title>&lt;query_planner::planner::plan_nodes::ParallelNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}}::_{{closure}}::_{{closure}} (101 samples, 0.33%)</title><rect x="33.2145%" y="597" width="0.3335%" height="15" fill="rgb(250,162,2)" fg:x="10058" fg:w="101"/><text x="33.4645%" y="607.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires (91 samples, 0.30%)</title><rect x="33.2475%" y="581" width="0.3005%" height="15" fill="rgb(220,13,41)" fg:x="10068" fg:w="91"/><text x="33.4975%" y="591.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires_map_mut (89 samples, 0.29%)</title><rect x="33.2541%" y="565" width="0.2939%" height="15" fill="rgb(249,221,25)" fg:x="10070" fg:w="89"/><text x="33.5041%" y="575.50"></text></g><g><title>query_plan_executor::schema_metadata::PossibleTypes::entity_satisfies_type_condition (4 samples, 0.01%)</title><rect x="33.5348%" y="549" width="0.0132%" height="15" fill="rgb(215,208,19)" fg:x="10155" fg:w="4"/><text x="33.7848%" y="559.50"></text></g><g><title>_platform_memcmp (10 samples, 0.03%)</title><rect x="33.5546%" y="597" width="0.0330%" height="15" fill="rgb(236,175,2)" fg:x="10161" fg:w="10"/><text x="33.8046%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (7 samples, 0.02%)</title><rect x="33.9938%" y="549" width="0.0231%" height="15" fill="rgb(241,52,2)" fg:x="10294" fg:w="7"/><text x="34.2438%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (21 samples, 0.07%)</title><rect x="33.9509%" y="565" width="0.0693%" height="15" fill="rgb(248,140,14)" fg:x="10281" fg:w="21"/><text x="34.2009%" y="575.50"></text></g><g><title>_platform_memcmp (11 samples, 0.04%)</title><rect x="34.0697%" y="533" width="0.0363%" height="15" fill="rgb(253,22,42)" fg:x="10317" fg:w="11"/><text x="34.3197%" y="543.50"></text></g><g><title>_platform_memcmp (50 samples, 0.17%)</title><rect x="34.3240%" y="517" width="0.1651%" height="15" fill="rgb(234,61,47)" fg:x="10394" fg:w="50"/><text x="34.5740%" y="527.50"></text></g><g><title>_platform_memmove (5 samples, 0.02%)</title><rect x="34.4891%" y="517" width="0.0165%" height="15" fill="rgb(208,226,15)" fg:x="10444" fg:w="5"/><text x="34.7391%" y="527.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires_map_mut (150 samples, 0.50%)</title><rect x="34.1094%" y="533" width="0.4953%" height="15" fill="rgb(217,221,4)" fg:x="10329" fg:w="150"/><text x="34.3594%" y="543.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires (29 samples, 0.10%)</title><rect x="34.5089%" y="517" width="0.0958%" height="15" fill="rgb(212,174,34)" fg:x="10450" fg:w="29"/><text x="34.7589%" y="527.50"></text></g><g><title>core::fmt::write (8 samples, 0.03%)</title><rect x="34.5783%" y="501" width="0.0264%" height="15" fill="rgb(253,83,4)" fg:x="10471" fg:w="8"/><text x="34.8283%" y="511.50"></text></g><g><title>&lt;serde_json::number::Number as core::fmt::Display&gt;::fmt (4 samples, 0.01%)</title><rect x="34.5915%" y="485" width="0.0132%" height="15" fill="rgb(250,195,49)" fg:x="10475" fg:w="4"/><text x="34.8415%" y="495.50"></text></g><g><title>&lt;query_planner::planner::plan_nodes::ParallelNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}}::_{{closure}}::_{{closure}} (212 samples, 0.70%)</title><rect x="33.9443%" y="581" width="0.7001%" height="15" fill="rgb(241,192,25)" fg:x="10279" fg:w="212"/><text x="34.1943%" y="591.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires (189 samples, 0.62%)</title><rect x="34.0202%" y="565" width="0.6241%" height="15" fill="rgb(208,124,10)" fg:x="10302" fg:w="189"/><text x="34.2702%" y="575.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires_map_mut (186 samples, 0.61%)</title><rect x="34.0301%" y="549" width="0.6142%" height="15" fill="rgb(222,33,0)" fg:x="10305" fg:w="186"/><text x="34.2801%" y="559.50"></text></g><g><title>query_plan_executor::schema_metadata::PossibleTypes::entity_satisfies_type_condition (12 samples, 0.04%)</title><rect x="34.6047%" y="533" width="0.0396%" height="15" fill="rgb(234,209,28)" fg:x="10479" fg:w="12"/><text x="34.8547%" y="543.50"></text></g><g><title>_platform_memcmp (11 samples, 0.04%)</title><rect x="34.6080%" y="517" width="0.0363%" height="15" fill="rgb(224,11,23)" fg:x="10480" fg:w="11"/><text x="34.8580%" y="527.50"></text></g><g><title>DYLD-STUB$$memcmp (5 samples, 0.02%)</title><rect x="34.6443%" y="581" width="0.0165%" height="15" fill="rgb(232,99,1)" fg:x="10491" fg:w="5"/><text x="34.8943%" y="591.50"></text></g><g><title>_platform_memcmp (88 samples, 0.29%)</title><rect x="34.6609%" y="581" width="0.2906%" height="15" fill="rgb(237,95,45)" fg:x="10496" fg:w="88"/><text x="34.9109%" y="591.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (10 samples, 0.03%)</title><rect x="35.0869%" y="549" width="0.0330%" height="15" fill="rgb(208,109,11)" fg:x="10625" fg:w="10"/><text x="35.3369%" y="559.50"></text></g><g><title>_platform_memcmp (21 samples, 0.07%)</title><rect x="35.1199%" y="549" width="0.0693%" height="15" fill="rgb(216,190,48)" fg:x="10635" fg:w="21"/><text x="35.3699%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (17 samples, 0.06%)</title><rect x="35.2123%" y="533" width="0.0561%" height="15" fill="rgb(251,171,36)" fg:x="10663" fg:w="17"/><text x="35.4623%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (11 samples, 0.04%)</title><rect x="35.2322%" y="517" width="0.0363%" height="15" fill="rgb(230,62,22)" fg:x="10669" fg:w="11"/><text x="35.4822%" y="527.50"></text></g><g><title>_platform_memmove (8 samples, 0.03%)</title><rect x="35.2421%" y="501" width="0.0264%" height="15" fill="rgb(225,114,35)" fg:x="10672" fg:w="8"/><text x="35.4921%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (26 samples, 0.09%)</title><rect x="35.1892%" y="549" width="0.0859%" height="15" fill="rgb(215,118,42)" fg:x="10656" fg:w="26"/><text x="35.4392%" y="559.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge (95 samples, 0.31%)</title><rect x="34.9647%" y="581" width="0.3137%" height="15" fill="rgb(243,119,21)" fg:x="10588" fg:w="95"/><text x="35.2147%" y="591.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge_objects (89 samples, 0.29%)</title><rect x="34.9845%" y="565" width="0.2939%" height="15" fill="rgb(252,177,53)" fg:x="10594" fg:w="89"/><text x="35.2345%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (15 samples, 0.05%)</title><rect x="36.3913%" y="533" width="0.0495%" height="15" fill="rgb(237,209,29)" fg:x="11020" fg:w="15"/><text x="36.6413%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (64 samples, 0.21%)</title><rect x="36.2327%" y="549" width="0.2113%" height="15" fill="rgb(212,65,23)" fg:x="10972" fg:w="64"/><text x="36.4827%" y="559.50"></text></g><g><title>_platform_memcmp (30 samples, 0.10%)</title><rect x="36.6092%" y="517" width="0.0991%" height="15" fill="rgb(230,222,46)" fg:x="11086" fg:w="30"/><text x="36.8592%" y="527.50"></text></g><g><title>DYLD-STUB$$memcmp (6 samples, 0.02%)</title><rect x="37.1145%" y="501" width="0.0198%" height="15" fill="rgb(215,135,32)" fg:x="11239" fg:w="6"/><text x="37.3645%" y="511.50"></text></g><g><title>_platform_memcmp (87 samples, 0.29%)</title><rect x="37.1343%" y="501" width="0.2873%" height="15" fill="rgb(246,101,22)" fg:x="11245" fg:w="87"/><text x="37.3843%" y="511.50"></text></g><g><title>_platform_memmove (11 samples, 0.04%)</title><rect x="37.4216%" y="501" width="0.0363%" height="15" fill="rgb(206,107,13)" fg:x="11332" fg:w="11"/><text x="37.6716%" y="511.50"></text></g><g><title>_mi_heap_delayed_free_partial (14 samples, 0.05%)</title><rect x="37.4645%" y="437" width="0.0462%" height="15" fill="rgb(250,100,44)" fg:x="11345" fg:w="14"/><text x="37.7145%" y="447.50"></text></g><g><title>_mi_free_delayed_block (14 samples, 0.05%)</title><rect x="37.4645%" y="421" width="0.0462%" height="15" fill="rgb(231,147,38)" fg:x="11345" fg:w="14"/><text x="37.7145%" y="431.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (14 samples, 0.05%)</title><rect x="37.4645%" y="405" width="0.0462%" height="15" fill="rgb(229,8,40)" fg:x="11345" fg:w="14"/><text x="37.7145%" y="415.50"></text></g><g><title>_mi_heap_realloc_zero (15 samples, 0.05%)</title><rect x="37.4645%" y="469" width="0.0495%" height="15" fill="rgb(221,135,30)" fg:x="11345" fg:w="15"/><text x="37.7145%" y="479.50"></text></g><g><title>_mi_malloc_generic (15 samples, 0.05%)</title><rect x="37.4645%" y="453" width="0.0495%" height="15" fill="rgb(249,193,18)" fg:x="11345" fg:w="15"/><text x="37.7145%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (18 samples, 0.06%)</title><rect x="37.4579%" y="501" width="0.0594%" height="15" fill="rgb(209,133,39)" fg:x="11343" fg:w="18"/><text x="37.7079%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.05%)</title><rect x="37.4645%" y="485" width="0.0528%" height="15" fill="rgb(232,100,14)" fg:x="11345" fg:w="16"/><text x="37.7145%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (17 samples, 0.06%)</title><rect x="37.5173%" y="501" width="0.0561%" height="15" fill="rgb(224,185,1)" fg:x="11361" fg:w="17"/><text x="37.7673%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.05%)</title><rect x="37.5206%" y="485" width="0.0528%" height="15" fill="rgb(223,139,8)" fg:x="11362" fg:w="16"/><text x="37.7706%" y="495.50"></text></g><g><title>_mi_heap_realloc_zero (15 samples, 0.05%)</title><rect x="37.5239%" y="469" width="0.0495%" height="15" fill="rgb(232,213,38)" fg:x="11363" fg:w="15"/><text x="37.7739%" y="479.50"></text></g><g><title>_mi_malloc_generic (13 samples, 0.04%)</title><rect x="37.5305%" y="453" width="0.0429%" height="15" fill="rgb(207,94,22)" fg:x="11365" fg:w="13"/><text x="37.7805%" y="463.50"></text></g><g><title>_mi_heap_delayed_free_partial (13 samples, 0.04%)</title><rect x="37.5305%" y="437" width="0.0429%" height="15" fill="rgb(219,183,54)" fg:x="11365" fg:w="13"/><text x="37.7805%" y="447.50"></text></g><g><title>_mi_free_delayed_block (13 samples, 0.04%)</title><rect x="37.5305%" y="421" width="0.0429%" height="15" fill="rgb(216,185,54)" fg:x="11365" fg:w="13"/><text x="37.7805%" y="431.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (13 samples, 0.04%)</title><rect x="37.5305%" y="405" width="0.0429%" height="15" fill="rgb(254,217,39)" fg:x="11365" fg:w="13"/><text x="37.7805%" y="415.50"></text></g><g><title>DYLD-STUB$$memcpy (5 samples, 0.02%)</title><rect x="37.7089%" y="485" width="0.0165%" height="15" fill="rgb(240,178,23)" fg:x="11419" fg:w="5"/><text x="37.9589%" y="495.50"></text></g><g><title>_platform_memmove (7 samples, 0.02%)</title><rect x="37.7254%" y="485" width="0.0231%" height="15" fill="rgb(218,11,47)" fg:x="11424" fg:w="7"/><text x="37.9754%" y="495.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires_map_mut (325 samples, 1.07%)</title><rect x="36.7149%" y="517" width="1.0732%" height="15" fill="rgb(218,51,51)" fg:x="11118" fg:w="325"/><text x="36.9649%" y="527.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires (65 samples, 0.21%)</title><rect x="37.5735%" y="501" width="0.2146%" height="15" fill="rgb(238,126,27)" fg:x="11378" fg:w="65"/><text x="37.8235%" y="511.50"></text></g><g><title>core::fmt::write (12 samples, 0.04%)</title><rect x="37.7485%" y="485" width="0.0396%" height="15" fill="rgb(249,202,22)" fg:x="11431" fg:w="12"/><text x="37.9985%" y="495.50"></text></g><g><title>&lt;serde_json::number::Number as core::fmt::Display&gt;::fmt (8 samples, 0.03%)</title><rect x="37.7617%" y="469" width="0.0264%" height="15" fill="rgb(254,195,49)" fg:x="11435" fg:w="8"/><text x="38.0117%" y="479.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires_map_mut (417 samples, 1.38%)</title><rect x="36.4870%" y="533" width="1.3771%" height="15" fill="rgb(208,123,14)" fg:x="11049" fg:w="417"/><text x="36.7370%" y="543.50"></text></g><g><title>query_plan_executor::schema_metadata::PossibleTypes::entity_satisfies_type_condition (23 samples, 0.08%)</title><rect x="37.7881%" y="517" width="0.0760%" height="15" fill="rgb(224,200,8)" fg:x="11443" fg:w="23"/><text x="38.0381%" y="527.50"></text></g><g><title>_platform_memcmp (14 samples, 0.05%)</title><rect x="37.8178%" y="501" width="0.0462%" height="15" fill="rgb(217,61,36)" fg:x="11452" fg:w="14"/><text x="38.0678%" y="511.50"></text></g><g><title>&lt;query_planner::planner::plan_nodes::ParallelNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}}::_{{closure}}::_{{closure}} (507 samples, 1.67%)</title><rect x="36.1964%" y="565" width="1.6743%" height="15" fill="rgb(206,35,45)" fg:x="10961" fg:w="507"/><text x="36.4464%" y="575.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires (432 samples, 1.43%)</title><rect x="36.4441%" y="549" width="1.4266%" height="15" fill="rgb(217,65,33)" fg:x="11036" fg:w="432"/><text x="36.6941%" y="559.50"></text></g><g><title>DYLD-STUB$$memcmp (12 samples, 0.04%)</title><rect x="37.8707%" y="565" width="0.0396%" height="15" fill="rgb(222,158,48)" fg:x="11468" fg:w="12"/><text x="38.1207%" y="575.50"></text></g><g><title>_platform_memcmp (188 samples, 0.62%)</title><rect x="37.9103%" y="565" width="0.6208%" height="15" fill="rgb(254,2,54)" fg:x="11480" fg:w="188"/><text x="38.1603%" y="575.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (7 samples, 0.02%)</title><rect x="38.5972%" y="549" width="0.0231%" height="15" fill="rgb(250,143,38)" fg:x="11688" fg:w="7"/><text x="38.8472%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="38.8383%" y="533" width="0.0132%" height="15" fill="rgb(248,25,0)" fg:x="11761" fg:w="4"/><text x="39.0883%" y="543.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (22 samples, 0.07%)</title><rect x="38.8515%" y="533" width="0.0727%" height="15" fill="rgb(206,152,27)" fg:x="11765" fg:w="22"/><text x="39.1015%" y="543.50"></text></g><g><title>mi_free (5 samples, 0.02%)</title><rect x="38.9076%" y="517" width="0.0165%" height="15" fill="rgb(240,77,30)" fg:x="11782" fg:w="5"/><text x="39.1576%" y="527.50"></text></g><g><title>DYLD-STUB$$memcmp (5 samples, 0.02%)</title><rect x="38.9241%" y="533" width="0.0165%" height="15" fill="rgb(231,5,3)" fg:x="11787" fg:w="5"/><text x="39.1741%" y="543.50"></text></g><g><title>_platform_memcmp (58 samples, 0.19%)</title><rect x="38.9406%" y="533" width="0.1915%" height="15" fill="rgb(207,226,32)" fg:x="11792" fg:w="58"/><text x="39.1906%" y="543.50"></text></g><g><title>_platform_memcmp (14 samples, 0.05%)</title><rect x="39.2676%" y="517" width="0.0462%" height="15" fill="rgb(222,207,47)" fg:x="11891" fg:w="14"/><text x="39.5176%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (50 samples, 0.17%)</title><rect x="39.3138%" y="517" width="0.1651%" height="15" fill="rgb(229,115,45)" fg:x="11905" fg:w="50"/><text x="39.5638%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (42 samples, 0.14%)</title><rect x="39.3402%" y="501" width="0.1387%" height="15" fill="rgb(224,191,6)" fg:x="11913" fg:w="42"/><text x="39.5902%" y="511.50"></text></g><g><title>_platform_memmove (21 samples, 0.07%)</title><rect x="39.4096%" y="485" width="0.0693%" height="15" fill="rgb(230,227,24)" fg:x="11934" fg:w="21"/><text x="39.6596%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (106 samples, 0.35%)</title><rect x="39.1322%" y="533" width="0.3500%" height="15" fill="rgb(228,80,19)" fg:x="11850" fg:w="106"/><text x="39.3822%" y="543.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge (286 samples, 0.94%)</title><rect x="38.5443%" y="565" width="0.9445%" height="15" fill="rgb(247,229,0)" fg:x="11672" fg:w="286"/><text x="38.7943%" y="575.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge_objects (262 samples, 0.87%)</title><rect x="38.6236%" y="549" width="0.8652%" height="15" fill="rgb(237,194,15)" fg:x="11696" fg:w="262"/><text x="38.8736%" y="559.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (5 samples, 0.02%)</title><rect x="41.4834%" y="501" width="0.0165%" height="15" fill="rgb(219,203,20)" fg:x="12562" fg:w="5"/><text x="41.7334%" y="511.50"></text></g><g><title>_mi_malloc_generic (5 samples, 0.02%)</title><rect x="41.4834%" y="485" width="0.0165%" height="15" fill="rgb(234,128,8)" fg:x="12562" fg:w="5"/><text x="41.7334%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (43 samples, 0.14%)</title><rect x="41.3645%" y="517" width="0.1420%" height="15" fill="rgb(248,202,8)" fg:x="12526" fg:w="43"/><text x="41.6145%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (172 samples, 0.57%)</title><rect x="40.9451%" y="533" width="0.5680%" height="15" fill="rgb(206,104,37)" fg:x="12399" fg:w="172"/><text x="41.1951%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.01%)</title><rect x="41.5131%" y="533" width="0.0132%" height="15" fill="rgb(223,8,27)" fg:x="12571" fg:w="4"/><text x="41.7631%" y="543.50"></text></g><g><title>DYLD-STUB$$memcmp (4 samples, 0.01%)</title><rect x="41.8830%" y="501" width="0.0132%" height="15" fill="rgb(216,217,28)" fg:x="12683" fg:w="4"/><text x="42.1330%" y="511.50"></text></g><g><title>_platform_memcmp (74 samples, 0.24%)</title><rect x="41.8962%" y="501" width="0.2444%" height="15" fill="rgb(249,199,1)" fg:x="12687" fg:w="74"/><text x="42.1462%" y="511.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires (11 samples, 0.04%)</title><rect x="42.1405%" y="501" width="0.0363%" height="15" fill="rgb(240,85,17)" fg:x="12761" fg:w="11"/><text x="42.3905%" y="511.50"></text></g><g><title>DYLD-STUB$$memcmp (42 samples, 0.14%)</title><rect x="43.3129%" y="485" width="0.1387%" height="15" fill="rgb(206,108,45)" fg:x="13116" fg:w="42"/><text x="43.5629%" y="495.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="43.4516%" y="485" width="0.0132%" height="15" fill="rgb(245,210,41)" fg:x="13158" fg:w="4"/><text x="43.7016%" y="495.50"></text></g><g><title>_platform_memcmp (247 samples, 0.82%)</title><rect x="43.4648%" y="485" width="0.8157%" height="15" fill="rgb(206,13,37)" fg:x="13162" fg:w="247"/><text x="43.7148%" y="495.50"></text></g><g><title>_platform_memmove (14 samples, 0.05%)</title><rect x="44.2804%" y="485" width="0.0462%" height="15" fill="rgb(250,61,18)" fg:x="13409" fg:w="14"/><text x="44.5304%" y="495.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (47 samples, 0.16%)</title><rect x="44.3828%" y="389" width="0.1552%" height="15" fill="rgb(235,172,48)" fg:x="13440" fg:w="47"/><text x="44.6328%" y="399.50"></text></g><g><title>_mi_heap_delayed_free_partial (50 samples, 0.17%)</title><rect x="44.3795%" y="421" width="0.1651%" height="15" fill="rgb(249,201,17)" fg:x="13439" fg:w="50"/><text x="44.6295%" y="431.50"></text></g><g><title>_mi_free_delayed_block (49 samples, 0.16%)</title><rect x="44.3828%" y="405" width="0.1618%" height="15" fill="rgb(219,208,6)" fg:x="13440" fg:w="49"/><text x="44.6328%" y="415.50"></text></g><g><title>_mi_malloc_generic (54 samples, 0.18%)</title><rect x="44.3762%" y="437" width="0.1783%" height="15" fill="rgb(248,31,23)" fg:x="13438" fg:w="54"/><text x="44.6262%" y="447.50"></text></g><g><title>_mi_heap_realloc_zero (70 samples, 0.23%)</title><rect x="44.3564%" y="453" width="0.2312%" height="15" fill="rgb(245,15,42)" fg:x="13432" fg:w="70"/><text x="44.6064%" y="463.50"></text></g><g><title>_platform_memmove (10 samples, 0.03%)</title><rect x="44.5545%" y="437" width="0.0330%" height="15" fill="rgb(222,217,39)" fg:x="13492" fg:w="10"/><text x="44.8045%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (81 samples, 0.27%)</title><rect x="44.3267%" y="485" width="0.2675%" height="15" fill="rgb(210,219,27)" fg:x="13423" fg:w="81"/><text x="44.5767%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (72 samples, 0.24%)</title><rect x="44.3564%" y="469" width="0.2378%" height="15" fill="rgb(252,166,36)" fg:x="13432" fg:w="72"/><text x="44.6064%" y="479.50"></text></g><g><title>DYLD-STUB$$memcpy (5 samples, 0.02%)</title><rect x="44.8187%" y="469" width="0.0165%" height="15" fill="rgb(245,132,34)" fg:x="13572" fg:w="5"/><text x="45.0687%" y="479.50"></text></g><g><title>_platform_memmove (34 samples, 0.11%)</title><rect x="44.8352%" y="469" width="0.1123%" height="15" fill="rgb(236,54,3)" fg:x="13577" fg:w="34"/><text x="45.0852%" y="479.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires_map_mut (901 samples, 2.98%)</title><rect x="42.1769%" y="501" width="2.9754%" height="15" fill="rgb(241,173,43)" fg:x="12772" fg:w="901"/><text x="42.4269%" y="511.50">que..</text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires (168 samples, 0.55%)</title><rect x="44.5975%" y="485" width="0.5548%" height="15" fill="rgb(215,190,9)" fg:x="13505" fg:w="168"/><text x="44.8475%" y="495.50"></text></g><g><title>core::fmt::write (62 samples, 0.20%)</title><rect x="44.9475%" y="469" width="0.2047%" height="15" fill="rgb(242,101,16)" fg:x="13611" fg:w="62"/><text x="45.1975%" y="479.50"></text></g><g><title>&lt;serde_json::number::Number as core::fmt::Display&gt;::fmt (43 samples, 0.14%)</title><rect x="45.0102%" y="453" width="0.1420%" height="15" fill="rgb(223,190,21)" fg:x="13630" fg:w="43"/><text x="45.2602%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (22 samples, 0.07%)</title><rect x="45.0796%" y="437" width="0.0727%" height="15" fill="rgb(215,228,25)" fg:x="13651" fg:w="22"/><text x="45.3296%" y="447.50"></text></g><g><title>_platform_memmove (14 samples, 0.05%)</title><rect x="45.1060%" y="421" width="0.0462%" height="15" fill="rgb(225,36,22)" fg:x="13659" fg:w="14"/><text x="45.3560%" y="431.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires_map_mut (1,122 samples, 3.71%)</title><rect x="41.5990%" y="517" width="3.7052%" height="15" fill="rgb(251,106,46)" fg:x="12597" fg:w="1122"/><text x="41.8490%" y="527.50">quer..</text></g><g><title>query_plan_executor::schema_metadata::PossibleTypes::entity_satisfies_type_condition (46 samples, 0.15%)</title><rect x="45.1522%" y="501" width="0.1519%" height="15" fill="rgb(208,90,1)" fg:x="13673" fg:w="46"/><text x="45.4022%" y="511.50"></text></g><g><title>_platform_memcmp (32 samples, 0.11%)</title><rect x="45.1985%" y="485" width="0.1057%" height="15" fill="rgb(243,10,4)" fg:x="13687" fg:w="32"/><text x="45.4485%" y="495.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires (1,154 samples, 3.81%)</title><rect x="41.5263%" y="533" width="3.8108%" height="15" fill="rgb(212,137,27)" fg:x="12575" fg:w="1154"/><text x="41.7763%" y="543.50">quer..</text></g><g><title>query_plan_executor::schema_metadata::PossibleTypes::entity_satisfies_type_condition (10 samples, 0.03%)</title><rect x="45.3041%" y="517" width="0.0330%" height="15" fill="rgb(231,220,49)" fg:x="13719" fg:w="10"/><text x="45.5541%" y="527.50"></text></g><g><title>&lt;query_planner::planner::plan_nodes::ParallelNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}}::_{{closure}}::_{{closure}} (1,349 samples, 4.45%)</title><rect x="40.8956%" y="549" width="4.4548%" height="15" fill="rgb(237,96,20)" fg:x="12384" fg:w="1349"/><text x="41.1456%" y="559.50">&lt;quer..</text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires_map_mut (4 samples, 0.01%)</title><rect x="45.3372%" y="533" width="0.0132%" height="15" fill="rgb(239,229,30)" fg:x="13729" fg:w="4"/><text x="45.5872%" y="543.50"></text></g><g><title>DYLD-STUB$$memcmp (17 samples, 0.06%)</title><rect x="45.3504%" y="549" width="0.0561%" height="15" fill="rgb(219,65,33)" fg:x="13733" fg:w="17"/><text x="45.6004%" y="559.50"></text></g><g><title>_platform_memcmp (244 samples, 0.81%)</title><rect x="45.4065%" y="549" width="0.8058%" height="15" fill="rgb(243,134,7)" fg:x="13750" fg:w="244"/><text x="45.6565%" y="559.50"></text></g><g><title>query_plan_executor::QueryPlanExecutionContext::project_requires (9 samples, 0.03%)</title><rect x="46.2189%" y="549" width="0.0297%" height="15" fill="rgb(216,177,54)" fg:x="13996" fg:w="9"/><text x="46.4689%" y="559.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (23 samples, 0.08%)</title><rect x="46.3047%" y="533" width="0.0760%" height="15" fill="rgb(211,160,20)" fg:x="14022" fg:w="23"/><text x="46.5547%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.02%)</title><rect x="46.3840%" y="533" width="0.0165%" height="15" fill="rgb(239,85,39)" fg:x="14046" fg:w="5"/><text x="46.6340%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="46.8463%" y="517" width="0.0132%" height="15" fill="rgb(232,125,22)" fg:x="14186" fg:w="4"/><text x="47.0963%" y="527.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (54 samples, 0.18%)</title><rect x="46.8595%" y="517" width="0.1783%" height="15" fill="rgb(244,57,34)" fg:x="14190" fg:w="54"/><text x="47.1095%" y="527.50"></text></g><g><title>mi_free (14 samples, 0.05%)</title><rect x="46.9916%" y="501" width="0.0462%" height="15" fill="rgb(214,203,32)" fg:x="14230" fg:w="14"/><text x="47.2416%" y="511.50"></text></g><g><title>DYLD-STUB$$memcmp (15 samples, 0.05%)</title><rect x="47.0378%" y="517" width="0.0495%" height="15" fill="rgb(207,58,43)" fg:x="14244" fg:w="15"/><text x="47.2878%" y="527.50"></text></g><g><title>_platform_memcmp (92 samples, 0.30%)</title><rect x="47.0874%" y="517" width="0.3038%" height="15" fill="rgb(215,193,15)" fg:x="14259" fg:w="92"/><text x="47.3374%" y="527.50"></text></g><g><title>DYLD-STUB$$memcmp (6 samples, 0.02%)</title><rect x="47.5365%" y="501" width="0.0198%" height="15" fill="rgb(232,15,44)" fg:x="14395" fg:w="6"/><text x="47.7865%" y="511.50"></text></g><g><title>_platform_memcmp (52 samples, 0.17%)</title><rect x="47.5563%" y="501" width="0.1717%" height="15" fill="rgb(212,3,48)" fg:x="14401" fg:w="52"/><text x="47.8063%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (67 samples, 0.22%)</title><rect x="47.7280%" y="501" width="0.2213%" height="15" fill="rgb(218,128,7)" fg:x="14453" fg:w="67"/><text x="47.9780%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (56 samples, 0.18%)</title><rect x="47.7643%" y="485" width="0.1849%" height="15" fill="rgb(226,216,39)" fg:x="14464" fg:w="56"/><text x="48.0143%" y="495.50"></text></g><g><title>_platform_memmove (27 samples, 0.09%)</title><rect x="47.8601%" y="469" width="0.0892%" height="15" fill="rgb(243,47,51)" fg:x="14493" fg:w="27"/><text x="48.1101%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (171 samples, 0.56%)</title><rect x="47.3912%" y="517" width="0.5647%" height="15" fill="rgb(241,183,40)" fg:x="14351" fg:w="171"/><text x="47.6412%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (5 samples, 0.02%)</title><rect x="47.9559%" y="517" width="0.0165%" height="15" fill="rgb(231,217,32)" fg:x="14522" fg:w="5"/><text x="48.2059%" y="527.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge (524 samples, 1.73%)</title><rect x="46.2486%" y="549" width="1.7304%" height="15" fill="rgb(229,61,38)" fg:x="14005" fg:w="524"/><text x="46.4986%" y="559.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge_objects (478 samples, 1.58%)</title><rect x="46.4005%" y="533" width="1.5785%" height="15" fill="rgb(225,210,5)" fg:x="14051" fg:w="478"/><text x="46.6505%" y="543.50"></text></g><g><title>DYLD-STUB$$memcmp (16 samples, 0.05%)</title><rect x="49.6334%" y="533" width="0.0528%" height="15" fill="rgb(231,79,45)" fg:x="15030" fg:w="16"/><text x="49.8834%" y="543.50"></text></g><g><title>_platform_memcmp (152 samples, 0.50%)</title><rect x="49.6863%" y="533" width="0.5019%" height="15" fill="rgb(224,100,7)" fg:x="15046" fg:w="152"/><text x="49.9363%" y="543.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (12 samples, 0.04%)</title><rect x="50.3005%" y="517" width="0.0396%" height="15" fill="rgb(241,198,18)" fg:x="15232" fg:w="12"/><text x="50.5505%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (9 samples, 0.03%)</title><rect x="50.3434%" y="517" width="0.0297%" height="15" fill="rgb(252,97,53)" fg:x="15245" fg:w="9"/><text x="50.5934%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.05%)</title><rect x="51.3572%" y="501" width="0.0462%" height="15" fill="rgb(220,88,7)" fg:x="15552" fg:w="14"/><text x="51.6072%" y="511.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (5 samples, 0.02%)</title><rect x="51.3870%" y="485" width="0.0165%" height="15" fill="rgb(213,176,14)" fg:x="15561" fg:w="5"/><text x="51.6370%" y="495.50"></text></g><g><title>_mi_page_retire (4 samples, 0.01%)</title><rect x="51.6908%" y="485" width="0.0132%" height="15" fill="rgb(246,73,7)" fg:x="15653" fg:w="4"/><text x="51.9408%" y="495.50"></text></g><g><title>mi_free (21 samples, 0.07%)</title><rect x="51.7106%" y="485" width="0.0693%" height="15" fill="rgb(245,64,36)" fg:x="15659" fg:w="21"/><text x="51.9606%" y="495.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (117 samples, 0.39%)</title><rect x="51.4035%" y="501" width="0.3864%" height="15" fill="rgb(245,80,10)" fg:x="15566" fg:w="117"/><text x="51.6535%" y="511.50"></text></g><g><title>DYLD-STUB$$memcmp (43 samples, 0.14%)</title><rect x="51.7898%" y="501" width="0.1420%" height="15" fill="rgb(232,107,50)" fg:x="15683" fg:w="43"/><text x="52.0398%" y="511.50"></text></g><g><title>_platform_memcmp (206 samples, 0.68%)</title><rect x="51.9318%" y="501" width="0.6803%" height="15" fill="rgb(253,3,0)" fg:x="15726" fg:w="206"/><text x="52.1818%" y="511.50"></text></g><g><title>DYLD-STUB$$memcmp (27 samples, 0.09%)</title><rect x="53.0117%" y="485" width="0.0892%" height="15" fill="rgb(212,99,53)" fg:x="16053" fg:w="27"/><text x="53.2617%" y="495.50"></text></g><g><title>_platform_memcmp (55 samples, 0.18%)</title><rect x="53.1009%" y="485" width="0.1816%" height="15" fill="rgb(249,111,54)" fg:x="16080" fg:w="55"/><text x="53.3509%" y="495.50"></text></g><g><title>DYLD-STUB$$memmove (12 samples, 0.04%)</title><rect x="53.5566%" y="453" width="0.0396%" height="15" fill="rgb(249,55,30)" fg:x="16218" fg:w="12"/><text x="53.8066%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (198 samples, 0.65%)</title><rect x="53.2825%" y="485" width="0.6539%" height="15" fill="rgb(237,47,42)" fg:x="16135" fg:w="198"/><text x="53.5325%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (156 samples, 0.52%)</title><rect x="53.4212%" y="469" width="0.5152%" height="15" fill="rgb(211,20,18)" fg:x="16177" fg:w="156"/><text x="53.6712%" y="479.50"></text></g><g><title>_platform_memmove (103 samples, 0.34%)</title><rect x="53.5962%" y="453" width="0.3401%" height="15" fill="rgb(231,203,46)" fg:x="16230" fg:w="103"/><text x="53.8462%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (415 samples, 1.37%)</title><rect x="52.6121%" y="501" width="1.3705%" height="15" fill="rgb(237,142,3)" fg:x="15932" fg:w="415"/><text x="52.8621%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (14 samples, 0.05%)</title><rect x="53.9363%" y="485" width="0.0462%" height="15" fill="rgb(241,107,1)" fg:x="16333" fg:w="14"/><text x="54.1863%" y="495.50"></text></g><g><title>query_plan_executor::deep_merge::deep_merge (1,156 samples, 3.82%)</title><rect x="50.1882%" y="533" width="3.8174%" height="15" fill="rgb(229,83,13)" fg:x="15198" fg:w="1156"/><text x="50.4382%" y="543.50">quer..</text></g><g><title>query_plan_executor::deep_merge::deep_merge_objects (1,100 samples, 3.63%)</title><rect x="50.3732%" y="517" width="3.6325%" height="15" fill="rgb(241,91,40)" fg:x="15254" fg:w="1100"/><text x="50.6232%" y="527.50">quer..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (7 samples, 0.02%)</title><rect x="53.9826%" y="501" width="0.0231%" height="15" fill="rgb(225,3,45)" fg:x="16347" fg:w="7"/><text x="54.2326%" y="511.50"></text></g><g><title>query_plan_executor::traverse_and_callback (6,329 samples, 20.90%)</title><rect x="33.1220%" y="613" width="20.9002%" height="15" fill="rgb(244,223,14)" fg:x="10030" fg:w="6329"/><text x="33.3720%" y="623.50">query_plan_executor::traverse_and..</text></g><g><title>query_plan_executor::traverse_and_callback (6,188 samples, 20.43%)</title><rect x="33.5876%" y="597" width="20.4346%" height="15" fill="rgb(224,124,37)" fg:x="10171" fg:w="6188"/><text x="33.8376%" y="607.50">query_plan_executor::traverse_an..</text></g><g><title>query_plan_executor::traverse_and_callback (5,675 samples, 18.74%)</title><rect x="35.2817%" y="581" width="18.7405%" height="15" fill="rgb(251,171,30)" fg:x="10684" fg:w="5675"/><text x="35.5317%" y="591.50">query_plan_executor::traverse..</text></g><g><title>query_plan_executor::traverse_and_callback (4,400 samples, 14.53%)</title><rect x="39.4921%" y="565" width="14.5301%" height="15" fill="rgb(236,46,54)" fg:x="11959" fg:w="4400"/><text x="39.7421%" y="575.50">query_plan_executor::t..</text></g><g><title>query_plan_executor::traverse_and_callback (1,828 samples, 6.04%)</title><rect x="47.9856%" y="549" width="6.0366%" height="15" fill="rgb(245,213,5)" fg:x="14531" fg:w="1828"/><text x="48.2356%" y="559.50">query_pl..</text></g><g><title>query_plan_executor::deep_merge::deep_merge_objects (5 samples, 0.02%)</title><rect x="54.0057%" y="533" width="0.0165%" height="15" fill="rgb(230,144,27)" fg:x="16354" fg:w="5"/><text x="54.2557%" y="543.50"></text></g><g><title>mach_absolute_time (11 samples, 0.04%)</title><rect x="54.0321%" y="565" width="0.0363%" height="15" fill="rgb(220,86,6)" fg:x="16362" fg:w="11"/><text x="54.2821%" y="575.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (16 samples, 0.05%)</title><rect x="54.0222%" y="613" width="0.0528%" height="15" fill="rgb(240,20,13)" fg:x="16359" fg:w="16"/><text x="54.2722%" y="623.50"></text></g><g><title>clock_gettime (16 samples, 0.05%)</title><rect x="54.0222%" y="597" width="0.0528%" height="15" fill="rgb(217,89,34)" fg:x="16359" fg:w="16"/><text x="54.2722%" y="607.50"></text></g><g><title>clock_gettime_nsec_np (15 samples, 0.05%)</title><rect x="54.0255%" y="581" width="0.0495%" height="15" fill="rgb(229,13,5)" fg:x="16360" fg:w="15"/><text x="54.2755%" y="591.50"></text></g><g><title>&lt;query_planner::planner::plan_nodes::ParallelNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}} (14,728 samples, 48.64%)</title><rect x="5.4620%" y="629" width="48.6362%" height="15" fill="rgb(244,67,35)" fg:x="1654" fg:w="14728"/><text x="5.7120%" y="639.50">&lt;query_planner::planner::plan_nodes::ParallelNode as query_plan_executor::Execut..</text></g><g><title>std::time::Instant::now (7 samples, 0.02%)</title><rect x="54.0750%" y="613" width="0.0231%" height="15" fill="rgb(221,40,2)" fg:x="16375" fg:w="7"/><text x="54.3250%" y="623.50"></text></g><g><title>&lt;query_planner::planner::plan_nodes::PlanNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}} (14,764 samples, 48.76%)</title><rect x="5.3761%" y="645" width="48.7550%" height="15" fill="rgb(237,157,21)" fg:x="1628" fg:w="14764"/><text x="5.6261%" y="655.50">&lt;query_planner::planner::plan_nodes::PlanNode as query_plan_executor::Executable..</text></g><g><title>&lt;query_planner::planner::plan_nodes::SequenceNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}} (14,794 samples, 48.85%)</title><rect x="5.2804%" y="661" width="48.8541%" height="15" fill="rgb(222,94,11)" fg:x="1599" fg:w="14794"/><text x="5.5304%" y="671.50">&lt;query_planner::planner::plan_nodes::SequenceNode as query_plan_executor::Execut..</text></g><g><title>&lt;query_planner::planner::plan_nodes::PlanNode as query_plan_executor::ExecutablePlanNode&gt;::execute::_{{closure}} (14,830 samples, 48.97%)</title><rect x="5.1648%" y="677" width="48.9730%" height="15" fill="rgb(249,113,6)" fg:x="1564" fg:w="14830"/><text x="5.4148%" y="687.50">&lt;query_planner::planner::plan_nodes::PlanNode as query_plan_executor::ExecutableP..</text></g><g><title>&lt;query_planner::planner::plan_nodes::QueryPlan as query_plan_executor::ExecutableQueryPlan&gt;::execute::_{{closure}} (14,851 samples, 49.04%)</title><rect x="5.0987%" y="693" width="49.0423%" height="15" fill="rgb(238,137,36)" fg:x="1544" fg:w="14851"/><text x="5.3487%" y="703.50">&lt;query_planner::planner::plan_nodes::QueryPlan as query_plan_executor::Executable..</text></g><g><title>&lt;deduplicated_symbol&gt; (5 samples, 0.02%)</title><rect x="54.1873%" y="629" width="0.0165%" height="15" fill="rgb(210,102,26)" fg:x="16409" fg:w="5"/><text x="54.4373%" y="639.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (26 samples, 0.09%)</title><rect x="54.2302%" y="613" width="0.0859%" height="15" fill="rgb(218,30,30)" fg:x="16422" fg:w="26"/><text x="54.4802%" y="623.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (5 samples, 0.02%)</title><rect x="54.3755%" y="581" width="0.0165%" height="15" fill="rgb(214,67,26)" fg:x="16466" fg:w="5"/><text x="54.6255%" y="591.50"></text></g><g><title>mi_free_block_delayed_mt (5 samples, 0.02%)</title><rect x="54.4878%" y="549" width="0.0165%" height="15" fill="rgb(251,9,53)" fg:x="16500" fg:w="5"/><text x="54.7378%" y="559.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (33 samples, 0.11%)</title><rect x="54.4053%" y="565" width="0.1090%" height="15" fill="rgb(228,204,25)" fg:x="16475" fg:w="33"/><text x="54.6553%" y="575.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (34 samples, 0.11%)</title><rect x="54.5836%" y="549" width="0.1123%" height="15" fill="rgb(207,153,8)" fg:x="16529" fg:w="34"/><text x="54.8336%" y="559.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (22 samples, 0.07%)</title><rect x="54.8114%" y="517" width="0.0727%" height="15" fill="rgb(242,9,16)" fg:x="16598" fg:w="22"/><text x="55.0614%" y="527.50"></text></g><g><title>mi_free_block_delayed_mt (11 samples, 0.04%)</title><rect x="55.1086%" y="485" width="0.0363%" height="15" fill="rgb(217,211,10)" fg:x="16688" fg:w="11"/><text x="55.3586%" y="495.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (74 samples, 0.24%)</title><rect x="54.9204%" y="501" width="0.2444%" height="15" fill="rgb(219,228,52)" fg:x="16631" fg:w="74"/><text x="55.1704%" y="511.50"></text></g><g><title>mi_free (12 samples, 0.04%)</title><rect x="55.7130%" y="469" width="0.0396%" height="15" fill="rgb(231,92,29)" fg:x="16871" fg:w="12"/><text x="55.9630%" y="479.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (133 samples, 0.44%)</title><rect x="55.3497%" y="485" width="0.4392%" height="15" fill="rgb(232,8,23)" fg:x="16761" fg:w="133"/><text x="55.5997%" y="495.50"></text></g><g><title>mi_free_generic_mt (5 samples, 0.02%)</title><rect x="55.7724%" y="469" width="0.0165%" height="15" fill="rgb(216,211,34)" fg:x="16889" fg:w="5"/><text x="56.0224%" y="479.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (8 samples, 0.03%)</title><rect x="55.9276%" y="453" width="0.0264%" height="15" fill="rgb(236,151,0)" fg:x="16936" fg:w="8"/><text x="56.1776%" y="463.50"></text></g><g><title>mi_free (8 samples, 0.03%)</title><rect x="56.3107%" y="421" width="0.0264%" height="15" fill="rgb(209,168,3)" fg:x="17052" fg:w="8"/><text x="56.5607%" y="431.50"></text></g><g><title>mi_free_block_delayed_mt (32 samples, 0.11%)</title><rect x="56.3371%" y="421" width="0.1057%" height="15" fill="rgb(208,129,28)" fg:x="17060" fg:w="32"/><text x="56.5871%" y="431.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (131 samples, 0.43%)</title><rect x="56.0234%" y="437" width="0.4326%" height="15" fill="rgb(229,78,22)" fg:x="16965" fg:w="131"/><text x="56.2734%" y="447.50"></text></g><g><title>mi_free (6 samples, 0.02%)</title><rect x="57.1825%" y="405" width="0.0198%" height="15" fill="rgb(228,187,13)" fg:x="17316" fg:w="6"/><text x="57.4325%" y="415.50"></text></g><g><title>mi_free_block_delayed_mt (8 samples, 0.03%)</title><rect x="57.2023%" y="405" width="0.0264%" height="15" fill="rgb(240,119,24)" fg:x="17322" fg:w="8"/><text x="57.4523%" y="415.50"></text></g><g><title>mi_free_block_mt (6 samples, 0.02%)</title><rect x="57.2287%" y="405" width="0.0198%" height="15" fill="rgb(209,194,42)" fg:x="17330" fg:w="6"/><text x="57.4787%" y="415.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (163 samples, 0.54%)</title><rect x="56.7235%" y="421" width="0.5383%" height="15" fill="rgb(247,200,46)" fg:x="17177" fg:w="163"/><text x="56.9735%" y="431.50"></text></g><g><title>mi_free_generic_mt (4 samples, 0.01%)</title><rect x="57.2485%" y="405" width="0.0132%" height="15" fill="rgb(218,76,16)" fg:x="17336" fg:w="4"/><text x="57.4985%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (27 samples, 0.09%)</title><rect x="57.2617%" y="421" width="0.0892%" height="15" fill="rgb(225,21,48)" fg:x="17340" fg:w="27"/><text x="57.5117%" y="431.50"></text></g><g><title>mi_free (92 samples, 0.30%)</title><rect x="57.3509%" y="421" width="0.3038%" height="15" fill="rgb(239,223,50)" fg:x="17367" fg:w="92"/><text x="57.6009%" y="431.50"></text></g><g><title>mi_free_block_delayed_mt (158 samples, 0.52%)</title><rect x="57.6547%" y="421" width="0.5218%" height="15" fill="rgb(244,45,21)" fg:x="17459" fg:w="158"/><text x="57.9047%" y="431.50"></text></g><g><title>mi_free_block_mt (35 samples, 0.12%)</title><rect x="58.1765%" y="421" width="0.1156%" height="15" fill="rgb(232,33,43)" fg:x="17617" fg:w="35"/><text x="58.4265%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (593 samples, 1.96%)</title><rect x="56.4560%" y="437" width="1.9583%" height="15" fill="rgb(209,8,3)" fg:x="17096" fg:w="593"/><text x="56.7060%" y="447.50">c..</text></g><g><title>mi_free_generic_mt (37 samples, 0.12%)</title><rect x="58.2921%" y="421" width="0.1222%" height="15" fill="rgb(214,25,53)" fg:x="17652" fg:w="37"/><text x="58.5421%" y="431.50"></text></g><g><title>OUTLINED_FUNCTION_5 (19 samples, 0.06%)</title><rect x="58.5496%" y="421" width="0.0627%" height="15" fill="rgb(254,186,54)" fg:x="17730" fg:w="19"/><text x="58.7996%" y="431.50"></text></g><g><title>mi_free (80 samples, 0.26%)</title><rect x="58.4142%" y="437" width="0.2642%" height="15" fill="rgb(208,174,49)" fg:x="17689" fg:w="80"/><text x="58.6642%" y="447.50"></text></g><g><title>OUTLINED_FUNCTION_9 (20 samples, 0.07%)</title><rect x="58.6124%" y="421" width="0.0660%" height="15" fill="rgb(233,191,51)" fg:x="17749" fg:w="20"/><text x="58.8624%" y="431.50"></text></g><g><title>mi_free_block_delayed_mt (85 samples, 0.28%)</title><rect x="58.6784%" y="437" width="0.2807%" height="15" fill="rgb(222,134,10)" fg:x="17769" fg:w="85"/><text x="58.9284%" y="447.50"></text></g><g><title>mi_free_block_mt (31 samples, 0.10%)</title><rect x="58.9591%" y="437" width="0.1024%" height="15" fill="rgb(230,226,20)" fg:x="17854" fg:w="31"/><text x="59.2091%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (953 samples, 3.15%)</title><rect x="55.9540%" y="453" width="3.1471%" height="15" fill="rgb(251,111,25)" fg:x="16944" fg:w="953"/><text x="56.2040%" y="463.50">cor..</text></g><g><title>mi_free_generic_mt (12 samples, 0.04%)</title><rect x="59.0615%" y="437" width="0.0396%" height="15" fill="rgb(224,40,46)" fg:x="17885" fg:w="12"/><text x="59.3115%" y="447.50"></text></g><g><title>OUTLINED_FUNCTION_5 (8 samples, 0.03%)</title><rect x="59.1110%" y="437" width="0.0264%" height="15" fill="rgb(236,108,47)" fg:x="17900" fg:w="8"/><text x="59.3610%" y="447.50"></text></g><g><title>OUTLINED_FUNCTION_9 (5 samples, 0.02%)</title><rect x="59.1374%" y="437" width="0.0165%" height="15" fill="rgb(234,93,0)" fg:x="17908" fg:w="5"/><text x="59.3874%" y="447.50"></text></g><g><title>mi_free (14 samples, 0.05%)</title><rect x="59.1110%" y="453" width="0.0462%" height="15" fill="rgb(224,213,32)" fg:x="17900" fg:w="14"/><text x="59.3610%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,021 samples, 3.37%)</title><rect x="55.7889%" y="485" width="3.3716%" height="15" fill="rgb(251,11,48)" fg:x="16894" fg:w="1021"/><text x="56.0389%" y="495.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (984 samples, 3.25%)</title><rect x="55.9111%" y="469" width="3.2495%" height="15" fill="rgb(236,173,5)" fg:x="16931" fg:w="984"/><text x="56.1611%" y="479.50">cor..</text></g><g><title>mi_free (55 samples, 0.18%)</title><rect x="59.1606%" y="485" width="0.1816%" height="15" fill="rgb(230,95,12)" fg:x="17915" fg:w="55"/><text x="59.4106%" y="495.50"></text></g><g><title>mi_free_block_delayed_mt (124 samples, 0.41%)</title><rect x="59.3422%" y="485" width="0.4095%" height="15" fill="rgb(232,209,1)" fg:x="17970" fg:w="124"/><text x="59.5922%" y="495.50"></text></g><g><title>mi_free_block_mt (13 samples, 0.04%)</title><rect x="59.7517%" y="485" width="0.0429%" height="15" fill="rgb(232,6,1)" fg:x="18094" fg:w="13"/><text x="60.0017%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,436 samples, 4.74%)</title><rect x="55.1648%" y="501" width="4.7421%" height="15" fill="rgb(210,224,50)" fg:x="16705" fg:w="1436"/><text x="55.4148%" y="511.50">core::..</text></g><g><title>mi_free_generic_mt (34 samples, 0.11%)</title><rect x="59.7946%" y="485" width="0.1123%" height="15" fill="rgb(228,127,35)" fg:x="18107" fg:w="34"/><text x="60.0446%" y="495.50"></text></g><g><title>OUTLINED_FUNCTION_5 (7 samples, 0.02%)</title><rect x="59.9927%" y="485" width="0.0231%" height="15" fill="rgb(245,102,45)" fg:x="18167" fg:w="7"/><text x="60.2427%" y="495.50"></text></g><g><title>OUTLINED_FUNCTION_9 (9 samples, 0.03%)</title><rect x="60.0159%" y="485" width="0.0297%" height="15" fill="rgb(214,1,49)" fg:x="18174" fg:w="9"/><text x="60.2659%" y="495.50"></text></g><g><title>mi_free (47 samples, 0.16%)</title><rect x="59.9069%" y="501" width="0.1552%" height="15" fill="rgb(226,163,40)" fg:x="18141" fg:w="47"/><text x="60.1569%" y="511.50"></text></g><g><title>mi_free (5 samples, 0.02%)</title><rect x="60.0456%" y="485" width="0.0165%" height="15" fill="rgb(239,212,28)" fg:x="18183" fg:w="5"/><text x="60.2956%" y="495.50"></text></g><g><title>mi_free_block_delayed_mt (36 samples, 0.12%)</title><rect x="60.0621%" y="501" width="0.1189%" height="15" fill="rgb(220,20,13)" fg:x="18188" fg:w="36"/><text x="60.3121%" y="511.50"></text></g><g><title>mi_free_block_mt (16 samples, 0.05%)</title><rect x="60.1810%" y="501" width="0.0528%" height="15" fill="rgb(210,164,35)" fg:x="18224" fg:w="16"/><text x="60.4310%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1,632 samples, 5.39%)</title><rect x="54.8841%" y="517" width="5.3893%" height="15" fill="rgb(248,109,41)" fg:x="16620" fg:w="1632"/><text x="55.1341%" y="527.50">core::p..</text></g><g><title>mi_free_generic_mt (12 samples, 0.04%)</title><rect x="60.2338%" y="501" width="0.0396%" height="15" fill="rgb(238,23,50)" fg:x="18240" fg:w="12"/><text x="60.4838%" y="511.50"></text></g><g><title>mi_free (6 samples, 0.02%)</title><rect x="60.2734%" y="517" width="0.0198%" height="15" fill="rgb(211,48,49)" fg:x="18252" fg:w="6"/><text x="60.5234%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,695 samples, 5.60%)</title><rect x="54.6992%" y="549" width="5.5974%" height="15" fill="rgb(223,36,21)" fg:x="16564" fg:w="1695"/><text x="54.9492%" y="559.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,667 samples, 5.50%)</title><rect x="54.7916%" y="533" width="5.5049%" height="15" fill="rgb(207,123,46)" fg:x="16592" fg:w="1667"/><text x="55.0416%" y="543.50">core::p..</text></g><g><title>mi_free (31 samples, 0.10%)</title><rect x="60.2965%" y="549" width="0.1024%" height="15" fill="rgb(240,218,32)" fg:x="18259" fg:w="31"/><text x="60.5465%" y="559.50"></text></g><g><title>mi_free_block_delayed_mt (33 samples, 0.11%)</title><rect x="60.3989%" y="549" width="0.1090%" height="15" fill="rgb(252,5,43)" fg:x="18290" fg:w="33"/><text x="60.6489%" y="559.50"></text></g><g><title>mi_free_block_mt (5 samples, 0.02%)</title><rect x="60.5079%" y="549" width="0.0165%" height="15" fill="rgb(252,84,19)" fg:x="18323" fg:w="5"/><text x="60.7579%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,831 samples, 6.05%)</title><rect x="54.5142%" y="565" width="6.0465%" height="15" fill="rgb(243,152,39)" fg:x="16508" fg:w="1831"/><text x="54.7642%" y="575.50">core::pt..</text></g><g><title>mi_free_generic_mt (11 samples, 0.04%)</title><rect x="60.5244%" y="549" width="0.0363%" height="15" fill="rgb(234,160,15)" fg:x="18328" fg:w="11"/><text x="60.7744%" y="559.50"></text></g><g><title>mi_free (12 samples, 0.04%)</title><rect x="60.5607%" y="565" width="0.0396%" height="15" fill="rgb(237,34,20)" fg:x="18339" fg:w="12"/><text x="60.8107%" y="575.50"></text></g><g><title>mi_free_block_delayed_mt (10 samples, 0.03%)</title><rect x="60.6004%" y="565" width="0.0330%" height="15" fill="rgb(229,97,13)" fg:x="18351" fg:w="10"/><text x="60.8504%" y="575.50"></text></g><g><title>mi_free_block_mt (4 samples, 0.01%)</title><rect x="60.6334%" y="565" width="0.0132%" height="15" fill="rgb(234,71,50)" fg:x="18361" fg:w="4"/><text x="60.8834%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1,900 samples, 6.27%)</title><rect x="54.3920%" y="581" width="6.2744%" height="15" fill="rgb(253,155,4)" fg:x="16471" fg:w="1900"/><text x="54.6420%" y="591.50">core::pt..</text></g><g><title>mi_free_generic_mt (6 samples, 0.02%)</title><rect x="60.6466%" y="565" width="0.0198%" height="15" fill="rgb(222,185,37)" fg:x="18365" fg:w="6"/><text x="60.8966%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,926 samples, 6.36%)</title><rect x="54.3161%" y="613" width="6.3602%" height="15" fill="rgb(251,177,13)" fg:x="16448" fg:w="1926"/><text x="54.5661%" y="623.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,911 samples, 6.31%)</title><rect x="54.3656%" y="597" width="6.3107%" height="15" fill="rgb(250,179,40)" fg:x="16463" fg:w="1911"/><text x="54.6156%" y="607.50">core::pt..</text></g><g><title>mi_free (11 samples, 0.04%)</title><rect x="60.6763%" y="613" width="0.0363%" height="15" fill="rgb(242,44,2)" fg:x="18374" fg:w="11"/><text x="60.9263%" y="623.50"></text></g><g><title>mi_free_block_delayed_mt (29 samples, 0.10%)</title><rect x="60.7126%" y="613" width="0.0958%" height="15" fill="rgb(216,177,13)" fg:x="18385" fg:w="29"/><text x="60.9626%" y="623.50"></text></g><g><title>mi_free_block_mt (7 samples, 0.02%)</title><rect x="60.8084%" y="613" width="0.0231%" height="15" fill="rgb(216,106,43)" fg:x="18414" fg:w="7"/><text x="61.0584%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,018 samples, 6.66%)</title><rect x="54.2038%" y="629" width="6.6640%" height="15" fill="rgb(216,183,2)" fg:x="16414" fg:w="2018"/><text x="54.4538%" y="639.50">core::ptr..</text></g><g><title>mi_free_generic_mt (11 samples, 0.04%)</title><rect x="60.8315%" y="613" width="0.0363%" height="15" fill="rgb(249,75,3)" fg:x="18421" fg:w="11"/><text x="61.0815%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.01%)</title><rect x="60.8678%" y="629" width="0.0132%" height="15" fill="rgb(219,67,39)" fg:x="18432" fg:w="4"/><text x="61.1178%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,041 samples, 6.74%)</title><rect x="54.1576%" y="661" width="6.7400%" height="15" fill="rgb(253,228,2)" fg:x="16400" fg:w="2041"/><text x="54.4076%" y="671.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,038 samples, 6.73%)</title><rect x="54.1675%" y="645" width="6.7301%" height="15" fill="rgb(235,138,27)" fg:x="16403" fg:w="2038"/><text x="54.4175%" y="655.50">core::ptr..</text></g><g><title>mi_free (5 samples, 0.02%)</title><rect x="60.8811%" y="629" width="0.0165%" height="15" fill="rgb(236,97,51)" fg:x="18436" fg:w="5"/><text x="61.1311%" y="639.50"></text></g><g><title>mi_free (4 samples, 0.01%)</title><rect x="60.8844%" y="613" width="0.0132%" height="15" fill="rgb(240,80,30)" fg:x="18437" fg:w="4"/><text x="61.1344%" y="623.50"></text></g><g><title>core::mem::drop (2,047 samples, 6.76%)</title><rect x="54.1510%" y="693" width="6.7598%" height="15" fill="rgb(230,178,19)" fg:x="16398" fg:w="2047"/><text x="54.4010%" y="703.50">core::mem..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,047 samples, 6.76%)</title><rect x="54.1510%" y="677" width="6.7598%" height="15" fill="rgb(210,190,27)" fg:x="16398" fg:w="2047"/><text x="54.4010%" y="687.50">core::ptr..</text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (5 samples, 0.02%)</title><rect x="60.9504%" y="661" width="0.0165%" height="15" fill="rgb(222,107,31)" fg:x="18457" fg:w="5"/><text x="61.2004%" y="671.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (4 samples, 0.01%)</title><rect x="60.9702%" y="661" width="0.0132%" height="15" fill="rgb(216,127,34)" fg:x="18463" fg:w="4"/><text x="61.2202%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (35 samples, 0.12%)</title><rect x="60.9339%" y="677" width="0.1156%" height="15" fill="rgb(234,116,52)" fg:x="18452" fg:w="35"/><text x="61.1839%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::request::Parts&gt; (44 samples, 0.15%)</title><rect x="60.9141%" y="693" width="0.1453%" height="15" fill="rgb(222,124,15)" fg:x="18446" fg:w="44"/><text x="61.1641%" y="703.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (4 samples, 0.01%)</title><rect x="61.0891%" y="677" width="0.0132%" height="15" fill="rgb(231,179,28)" fg:x="18499" fg:w="4"/><text x="61.3391%" y="687.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert2 (7 samples, 0.02%)</title><rect x="61.0858%" y="693" width="0.0231%" height="15" fill="rgb(226,93,45)" fg:x="18498" fg:w="7"/><text x="61.3358%" y="703.50"></text></g><g><title>_mi_heap_delayed_free_partial (6 samples, 0.02%)</title><rect x="61.1287%" y="661" width="0.0198%" height="15" fill="rgb(215,8,51)" fg:x="18511" fg:w="6"/><text x="61.3787%" y="671.50"></text></g><g><title>_mi_free_delayed_block (6 samples, 0.02%)</title><rect x="61.1287%" y="645" width="0.0198%" height="15" fill="rgb(223,106,5)" fg:x="18511" fg:w="6"/><text x="61.3787%" y="655.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (6 samples, 0.02%)</title><rect x="61.1287%" y="629" width="0.0198%" height="15" fill="rgb(250,191,5)" fg:x="18511" fg:w="6"/><text x="61.3787%" y="639.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (8 samples, 0.03%)</title><rect x="61.1254%" y="693" width="0.0264%" height="15" fill="rgb(242,132,44)" fg:x="18510" fg:w="8"/><text x="61.3754%" y="703.50"></text></g><g><title>_mi_malloc_generic (8 samples, 0.03%)</title><rect x="61.1254%" y="677" width="0.0264%" height="15" fill="rgb(251,152,29)" fg:x="18510" fg:w="8"/><text x="61.3754%" y="687.50"></text></g><g><title>DYLD-STUB$$memcmp (7 samples, 0.02%)</title><rect x="61.2377%" y="597" width="0.0231%" height="15" fill="rgb(218,179,5)" fg:x="18544" fg:w="7"/><text x="61.4877%" y="607.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (39 samples, 0.13%)</title><rect x="61.2311%" y="613" width="0.1288%" height="15" fill="rgb(227,67,19)" fg:x="18542" fg:w="39"/><text x="61.4811%" y="623.50"></text></g><g><title>_platform_memcmp (30 samples, 0.10%)</title><rect x="61.2608%" y="597" width="0.0991%" height="15" fill="rgb(233,119,31)" fg:x="18551" fg:w="30"/><text x="61.5108%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6 samples, 0.02%)</title><rect x="61.3599%" y="613" width="0.0198%" height="15" fill="rgb(241,120,22)" fg:x="18581" fg:w="6"/><text x="61.6099%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.03%)</title><rect x="61.3797%" y="613" width="0.0330%" height="15" fill="rgb(224,102,30)" fg:x="18587" fg:w="10"/><text x="61.6297%" y="623.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (7 samples, 0.02%)</title><rect x="61.4193%" y="613" width="0.0231%" height="15" fill="rgb(210,164,37)" fg:x="18599" fg:w="7"/><text x="61.6693%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.05%)</title><rect x="61.4656%" y="613" width="0.0495%" height="15" fill="rgb(226,191,16)" fg:x="18613" fg:w="15"/><text x="61.7156%" y="623.50"></text></g><g><title>_platform_memmove (13 samples, 0.04%)</title><rect x="61.4722%" y="597" width="0.0429%" height="15" fill="rgb(214,40,45)" fg:x="18615" fg:w="13"/><text x="61.7222%" y="607.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (7 samples, 0.02%)</title><rect x="61.5778%" y="597" width="0.0231%" height="15" fill="rgb(244,29,26)" fg:x="18647" fg:w="7"/><text x="61.8278%" y="607.50"></text></g><g><title>&lt;serde_json::number::Number as core::fmt::Display&gt;::fmt (6 samples, 0.02%)</title><rect x="61.5811%" y="581" width="0.0198%" height="15" fill="rgb(216,16,5)" fg:x="18648" fg:w="6"/><text x="61.8311%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (4 samples, 0.01%)</title><rect x="61.6175%" y="597" width="0.0132%" height="15" fill="rgb(249,76,35)" fg:x="18659" fg:w="4"/><text x="61.8675%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.02%)</title><rect x="61.6373%" y="597" width="0.0198%" height="15" fill="rgb(207,11,44)" fg:x="18665" fg:w="6"/><text x="61.8873%" y="607.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="61.6439%" y="581" width="0.0132%" height="15" fill="rgb(228,190,49)" fg:x="18667" fg:w="4"/><text x="61.8939%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.01%)</title><rect x="61.6604%" y="597" width="0.0132%" height="15" fill="rgb(214,173,12)" fg:x="18672" fg:w="4"/><text x="61.9104%" y="607.50"></text></g><g><title>query_plan_executor::json_writer::write_and_escape_string_writer (9 samples, 0.03%)</title><rect x="61.6901%" y="597" width="0.0297%" height="15" fill="rgb(218,26,35)" fg:x="18681" fg:w="9"/><text x="61.9401%" y="607.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (16 samples, 0.05%)</title><rect x="61.7330%" y="565" width="0.0528%" height="15" fill="rgb(220,200,19)" fg:x="18694" fg:w="16"/><text x="61.9830%" y="575.50"></text></g><g><title>_platform_memcmp (15 samples, 0.05%)</title><rect x="61.7363%" y="549" width="0.0495%" height="15" fill="rgb(239,95,49)" fg:x="18695" fg:w="15"/><text x="61.9863%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (14 samples, 0.05%)</title><rect x="61.7859%" y="565" width="0.0462%" height="15" fill="rgb(235,85,53)" fg:x="18710" fg:w="14"/><text x="62.0359%" y="575.50"></text></g><g><title>_platform_memcmp (10 samples, 0.03%)</title><rect x="61.7991%" y="549" width="0.0330%" height="15" fill="rgb(233,133,31)" fg:x="18714" fg:w="10"/><text x="62.0491%" y="559.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (9 samples, 0.03%)</title><rect x="61.8387%" y="565" width="0.0297%" height="15" fill="rgb(218,25,20)" fg:x="18726" fg:w="9"/><text x="62.0887%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (4 samples, 0.01%)</title><rect x="61.8684%" y="565" width="0.0132%" height="15" fill="rgb(252,210,38)" fg:x="18735" fg:w="4"/><text x="62.1184%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.02%)</title><rect x="61.8949%" y="565" width="0.0198%" height="15" fill="rgb(242,134,21)" fg:x="18743" fg:w="6"/><text x="62.1449%" y="575.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="61.9015%" y="549" width="0.0132%" height="15" fill="rgb(213,28,48)" fg:x="18745" fg:w="4"/><text x="62.1515%" y="559.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_plan_executor::projection::IncludeOrSkipByVariable&gt;::include_or_skip_by_variable (5 samples, 0.02%)</title><rect x="62.0005%" y="549" width="0.0165%" height="15" fill="rgb(250,196,2)" fg:x="18775" fg:w="5"/><text x="62.2505%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.03%)</title><rect x="62.0269%" y="549" width="0.0264%" height="15" fill="rgb(227,5,17)" fg:x="18783" fg:w="8"/><text x="62.2769%" y="559.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="62.0336%" y="533" width="0.0198%" height="15" fill="rgb(221,226,24)" fg:x="18785" fg:w="6"/><text x="62.2836%" y="543.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (5 samples, 0.02%)</title><rect x="62.0732%" y="549" width="0.0165%" height="15" fill="rgb(211,5,48)" fg:x="18797" fg:w="5"/><text x="62.3232%" y="559.50"></text></g><g><title>query_plan_executor::json_writer::write_and_escape_string_writer (141 samples, 0.47%)</title><rect x="62.0963%" y="549" width="0.4656%" height="15" fill="rgb(219,150,6)" fg:x="18804" fg:w="141"/><text x="62.3463%" y="559.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (53 samples, 0.18%)</title><rect x="62.5619%" y="533" width="0.1750%" height="15" fill="rgb(251,46,16)" fg:x="18945" fg:w="53"/><text x="62.8119%" y="543.50"></text></g><g><title>_platform_memcmp (48 samples, 0.16%)</title><rect x="62.5784%" y="517" width="0.1585%" height="15" fill="rgb(220,204,40)" fg:x="18950" fg:w="48"/><text x="62.8284%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (18 samples, 0.06%)</title><rect x="62.7369%" y="533" width="0.0594%" height="15" fill="rgb(211,85,2)" fg:x="18998" fg:w="18"/><text x="62.9869%" y="543.50"></text></g><g><title>_platform_memcmp (12 samples, 0.04%)</title><rect x="62.7568%" y="517" width="0.0396%" height="15" fill="rgb(229,17,7)" fg:x="19004" fg:w="12"/><text x="63.0068%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.02%)</title><rect x="62.7964%" y="533" width="0.0231%" height="15" fill="rgb(239,72,28)" fg:x="19016" fg:w="7"/><text x="63.0464%" y="543.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (26 samples, 0.09%)</title><rect x="62.8426%" y="533" width="0.0859%" height="15" fill="rgb(230,47,54)" fg:x="19030" fg:w="26"/><text x="63.0926%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (4 samples, 0.01%)</title><rect x="62.9417%" y="533" width="0.0132%" height="15" fill="rgb(214,50,8)" fg:x="19060" fg:w="4"/><text x="63.1917%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.05%)</title><rect x="62.9582%" y="533" width="0.0528%" height="15" fill="rgb(216,198,43)" fg:x="19065" fg:w="16"/><text x="63.2082%" y="543.50"></text></g><g><title>_platform_memmove (14 samples, 0.05%)</title><rect x="62.9648%" y="517" width="0.0462%" height="15" fill="rgb(234,20,35)" fg:x="19067" fg:w="14"/><text x="63.2148%" y="527.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (5 samples, 0.02%)</title><rect x="63.0110%" y="533" width="0.0165%" height="15" fill="rgb(254,45,19)" fg:x="19081" fg:w="5"/><text x="63.2610%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (6 samples, 0.02%)</title><rect x="63.0408%" y="533" width="0.0198%" height="15" fill="rgb(219,14,44)" fg:x="19090" fg:w="6"/><text x="63.2908%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (7 samples, 0.02%)</title><rect x="63.0738%" y="533" width="0.0231%" height="15" fill="rgb(217,220,26)" fg:x="19100" fg:w="7"/><text x="63.3238%" y="543.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="63.1827%" y="437" width="0.0132%" height="15" fill="rgb(213,158,28)" fg:x="19133" fg:w="4"/><text x="63.4327%" y="447.50"></text></g><g><title>_mi_malloc_generic (4 samples, 0.01%)</title><rect x="63.1827%" y="421" width="0.0132%" height="15" fill="rgb(252,51,52)" fg:x="19133" fg:w="4"/><text x="63.4327%" y="431.50"></text></g><g><title>mi_find_page (4 samples, 0.01%)</title><rect x="63.1827%" y="405" width="0.0132%" height="15" fill="rgb(246,89,16)" fg:x="19133" fg:w="4"/><text x="63.4327%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (6 samples, 0.02%)</title><rect x="63.1794%" y="469" width="0.0198%" height="15" fill="rgb(216,158,49)" fg:x="19132" fg:w="6"/><text x="63.4294%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.02%)</title><rect x="63.1794%" y="453" width="0.0198%" height="15" fill="rgb(236,107,19)" fg:x="19132" fg:w="6"/><text x="63.4294%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (8 samples, 0.03%)</title><rect x="63.1761%" y="485" width="0.0264%" height="15" fill="rgb(228,185,30)" fg:x="19131" fg:w="8"/><text x="63.4261%" y="495.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (13 samples, 0.04%)</title><rect x="63.1629%" y="517" width="0.0429%" height="15" fill="rgb(246,134,8)" fg:x="19127" fg:w="13"/><text x="63.4129%" y="527.50"></text></g><g><title>&lt;serde_json::number::Number as core::fmt::Display&gt;::fmt (12 samples, 0.04%)</title><rect x="63.1662%" y="501" width="0.0396%" height="15" fill="rgb(214,143,50)" fg:x="19128" fg:w="12"/><text x="63.4162%" y="511.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_plan_executor::projection::IncludeOrSkipByVariable&gt;::include_or_skip_by_variable (9 samples, 0.03%)</title><rect x="63.2092%" y="517" width="0.0297%" height="15" fill="rgb(228,75,8)" fg:x="19141" fg:w="9"/><text x="63.4592%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.05%)</title><rect x="63.2653%" y="517" width="0.0495%" height="15" fill="rgb(207,175,4)" fg:x="19158" fg:w="15"/><text x="63.5153%" y="527.50"></text></g><g><title>_platform_memmove (13 samples, 0.04%)</title><rect x="63.2719%" y="501" width="0.0429%" height="15" fill="rgb(205,108,24)" fg:x="19160" fg:w="13"/><text x="63.5219%" y="511.50"></text></g><g><title>query_plan_executor::json_writer::write_and_escape_string_writer (9 samples, 0.03%)</title><rect x="63.3479%" y="517" width="0.0297%" height="15" fill="rgb(244,120,49)" fg:x="19183" fg:w="9"/><text x="63.5979%" y="527.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (66 samples, 0.22%)</title><rect x="63.4040%" y="485" width="0.2180%" height="15" fill="rgb(223,47,38)" fg:x="19200" fg:w="66"/><text x="63.6540%" y="495.50"></text></g><g><title>_platform_memcmp (62 samples, 0.20%)</title><rect x="63.4172%" y="469" width="0.2047%" height="15" fill="rgb(229,179,11)" fg:x="19204" fg:w="62"/><text x="63.6672%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (30 samples, 0.10%)</title><rect x="63.6220%" y="485" width="0.0991%" height="15" fill="rgb(231,122,1)" fg:x="19266" fg:w="30"/><text x="63.8720%" y="495.50"></text></g><g><title>_platform_memcmp (21 samples, 0.07%)</title><rect x="63.6517%" y="469" width="0.0693%" height="15" fill="rgb(245,119,9)" fg:x="19275" fg:w="21"/><text x="63.9017%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="63.7210%" y="485" width="0.0165%" height="15" fill="rgb(241,163,25)" fg:x="19296" fg:w="5"/><text x="63.9710%" y="495.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (14 samples, 0.05%)</title><rect x="63.7739%" y="485" width="0.0462%" height="15" fill="rgb(217,214,3)" fg:x="19312" fg:w="14"/><text x="64.0239%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (4 samples, 0.01%)</title><rect x="63.8267%" y="485" width="0.0132%" height="15" fill="rgb(240,86,28)" fg:x="19328" fg:w="4"/><text x="64.0767%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.01%)</title><rect x="63.8399%" y="485" width="0.0132%" height="15" fill="rgb(215,47,9)" fg:x="19332" fg:w="4"/><text x="64.0899%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (4 samples, 0.01%)</title><rect x="63.8531%" y="485" width="0.0132%" height="15" fill="rgb(252,25,45)" fg:x="19336" fg:w="4"/><text x="64.1031%" y="495.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (9 samples, 0.03%)</title><rect x="63.8663%" y="485" width="0.0297%" height="15" fill="rgb(251,164,9)" fg:x="19340" fg:w="9"/><text x="64.1163%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.09%)</title><rect x="63.8960%" y="485" width="0.0892%" height="15" fill="rgb(233,194,0)" fg:x="19349" fg:w="27"/><text x="64.1460%" y="495.50"></text></g><g><title>_platform_memmove (24 samples, 0.08%)</title><rect x="63.9060%" y="469" width="0.0793%" height="15" fill="rgb(249,111,24)" fg:x="19352" fg:w="24"/><text x="64.1560%" y="479.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (12 samples, 0.04%)</title><rect x="63.9885%" y="485" width="0.0396%" height="15" fill="rgb(250,223,3)" fg:x="19377" fg:w="12"/><text x="64.2385%" y="495.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (6 samples, 0.02%)</title><rect x="64.0380%" y="485" width="0.0198%" height="15" fill="rgb(236,178,37)" fg:x="19392" fg:w="6"/><text x="64.2880%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 0.02%)</title><rect x="64.0711%" y="485" width="0.0165%" height="15" fill="rgb(241,158,50)" fg:x="19402" fg:w="5"/><text x="64.3211%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (14 samples, 0.05%)</title><rect x="64.0876%" y="485" width="0.0462%" height="15" fill="rgb(213,121,41)" fg:x="19407" fg:w="14"/><text x="64.3376%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.01%)</title><rect x="64.1437%" y="485" width="0.0132%" height="15" fill="rgb(240,92,3)" fg:x="19424" fg:w="4"/><text x="64.3937%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="64.2362%" y="469" width="0.0264%" height="15" fill="rgb(205,123,3)" fg:x="19452" fg:w="8"/><text x="64.4862%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.02%)</title><rect x="64.2725%" y="469" width="0.0231%" height="15" fill="rgb(205,97,47)" fg:x="19463" fg:w="7"/><text x="64.5225%" y="479.50"></text></g><g><title>&lt;foldhash::fast::FoldHasher as core::hash::Hasher&gt;::write (4 samples, 0.01%)</title><rect x="64.2956%" y="469" width="0.0132%" height="15" fill="rgb(247,152,14)" fg:x="19470" fg:w="4"/><text x="64.5456%" y="479.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_plan_executor::projection::IncludeOrSkipByVariable&gt;::include_or_skip_by_variable (10 samples, 0.03%)</title><rect x="64.3121%" y="469" width="0.0330%" height="15" fill="rgb(248,195,53)" fg:x="19475" fg:w="10"/><text x="64.5621%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (9 samples, 0.03%)</title><rect x="64.3452%" y="469" width="0.0297%" height="15" fill="rgb(226,201,16)" fg:x="19485" fg:w="9"/><text x="64.5952%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (8 samples, 0.03%)</title><rect x="64.3749%" y="469" width="0.0264%" height="15" fill="rgb(205,98,0)" fg:x="19494" fg:w="8"/><text x="64.6249%" y="479.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (16 samples, 0.05%)</title><rect x="64.4046%" y="357" width="0.0528%" height="15" fill="rgb(214,191,48)" fg:x="19503" fg:w="16"/><text x="64.6546%" y="367.50"></text></g><g><title>_mi_heap_delayed_free_partial (17 samples, 0.06%)</title><rect x="64.4046%" y="389" width="0.0561%" height="15" fill="rgb(237,112,39)" fg:x="19503" fg:w="17"/><text x="64.6546%" y="399.50"></text></g><g><title>_mi_free_delayed_block (17 samples, 0.06%)</title><rect x="64.4046%" y="373" width="0.0561%" height="15" fill="rgb(247,203,27)" fg:x="19503" fg:w="17"/><text x="64.6546%" y="383.50"></text></g><g><title>_mi_malloc_generic (19 samples, 0.06%)</title><rect x="64.4046%" y="405" width="0.0627%" height="15" fill="rgb(235,124,28)" fg:x="19503" fg:w="19"/><text x="64.6546%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (32 samples, 0.11%)</title><rect x="64.4013%" y="469" width="0.1057%" height="15" fill="rgb(208,207,46)" fg:x="19502" fg:w="32"/><text x="64.6513%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (31 samples, 0.10%)</title><rect x="64.4046%" y="453" width="0.1024%" height="15" fill="rgb(234,176,4)" fg:x="19503" fg:w="31"/><text x="64.6546%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (31 samples, 0.10%)</title><rect x="64.4046%" y="437" width="0.1024%" height="15" fill="rgb(230,133,28)" fg:x="19503" fg:w="31"/><text x="64.6546%" y="447.50"></text></g><g><title>_mi_heap_realloc_zero (31 samples, 0.10%)</title><rect x="64.4046%" y="421" width="0.1024%" height="15" fill="rgb(211,137,40)" fg:x="19503" fg:w="31"/><text x="64.6546%" y="431.50"></text></g><g><title>_platform_memmove (12 samples, 0.04%)</title><rect x="64.4673%" y="405" width="0.0396%" height="15" fill="rgb(254,35,13)" fg:x="19522" fg:w="12"/><text x="64.7173%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7 samples, 0.02%)</title><rect x="64.5070%" y="469" width="0.0231%" height="15" fill="rgb(225,49,51)" fg:x="19534" fg:w="7"/><text x="64.7570%" y="479.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="64.5466%" y="453" width="0.0132%" height="15" fill="rgb(251,10,15)" fg:x="19546" fg:w="4"/><text x="64.7966%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.08%)</title><rect x="64.5433%" y="469" width="0.0760%" height="15" fill="rgb(228,207,15)" fg:x="19545" fg:w="23"/><text x="64.7933%" y="479.50"></text></g><g><title>_platform_memmove (18 samples, 0.06%)</title><rect x="64.5598%" y="453" width="0.0594%" height="15" fill="rgb(241,99,19)" fg:x="19550" fg:w="18"/><text x="64.8098%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (9 samples, 0.03%)</title><rect x="64.6259%" y="469" width="0.0297%" height="15" fill="rgb(207,104,49)" fg:x="19570" fg:w="9"/><text x="64.8759%" y="479.50"></text></g><g><title>foldhash::fast::FoldHasher::with_seed (8 samples, 0.03%)</title><rect x="64.6556%" y="469" width="0.0264%" height="15" fill="rgb(234,99,18)" fg:x="19579" fg:w="8"/><text x="64.9056%" y="479.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (7 samples, 0.02%)</title><rect x="64.6820%" y="469" width="0.0231%" height="15" fill="rgb(213,191,49)" fg:x="19587" fg:w="7"/><text x="64.9320%" y="479.50"></text></g><g><title>query_plan_executor::json_writer::write_and_escape_string_writer (391 samples, 1.29%)</title><rect x="64.7183%" y="469" width="1.2912%" height="15" fill="rgb(210,226,19)" fg:x="19598" fg:w="391"/><text x="64.9683%" y="479.50"></text></g><g><title>DYLD-STUB$$memcmp (15 samples, 0.05%)</title><rect x="66.0194%" y="437" width="0.0495%" height="15" fill="rgb(229,97,18)" fg:x="19992" fg:w="15"/><text x="66.2694%" y="447.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (149 samples, 0.49%)</title><rect x="66.0161%" y="453" width="0.4920%" height="15" fill="rgb(211,167,15)" fg:x="19991" fg:w="149"/><text x="66.2661%" y="463.50"></text></g><g><title>_platform_memcmp (133 samples, 0.44%)</title><rect x="66.0690%" y="437" width="0.4392%" height="15" fill="rgb(210,169,34)" fg:x="20007" fg:w="133"/><text x="66.3190%" y="447.50"></text></g><g><title>DYLD-STUB$$memcmp (6 samples, 0.02%)</title><rect x="66.5478%" y="437" width="0.0198%" height="15" fill="rgb(241,121,31)" fg:x="20152" fg:w="6"/><text x="66.7978%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (35 samples, 0.12%)</title><rect x="66.5082%" y="453" width="0.1156%" height="15" fill="rgb(232,40,11)" fg:x="20140" fg:w="35"/><text x="66.7582%" y="463.50"></text></g><g><title>_platform_memcmp (17 samples, 0.06%)</title><rect x="66.5676%" y="437" width="0.0561%" height="15" fill="rgb(205,86,26)" fg:x="20158" fg:w="17"/><text x="66.8176%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.06%)</title><rect x="66.6237%" y="453" width="0.0594%" height="15" fill="rgb(231,126,28)" fg:x="20175" fg:w="18"/><text x="66.8737%" y="463.50"></text></g><g><title>&lt;foldhash::fast::FoldHasher as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="66.6832%" y="453" width="0.0198%" height="15" fill="rgb(219,221,18)" fg:x="20193" fg:w="6"/><text x="66.9332%" y="463.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_plan_executor::projection::IncludeOrSkipByVariable&gt;::include_or_skip_by_variable (8 samples, 0.03%)</title><rect x="66.7030%" y="453" width="0.0264%" height="15" fill="rgb(211,40,0)" fg:x="20199" fg:w="8"/><text x="66.9530%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::reborrow (4 samples, 0.01%)</title><rect x="66.7393%" y="453" width="0.0132%" height="15" fill="rgb(239,85,43)" fg:x="20210" fg:w="4"/><text x="66.9893%" y="463.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (45 samples, 0.15%)</title><rect x="66.7558%" y="453" width="0.1486%" height="15" fill="rgb(231,55,21)" fg:x="20215" fg:w="45"/><text x="67.0058%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (9 samples, 0.03%)</title><rect x="66.9044%" y="453" width="0.0297%" height="15" fill="rgb(225,184,43)" fg:x="20260" fg:w="9"/><text x="67.1544%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (8 samples, 0.03%)</title><rect x="66.9342%" y="453" width="0.0264%" height="15" fill="rgb(251,158,41)" fg:x="20269" fg:w="8"/><text x="67.1842%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (4 samples, 0.01%)</title><rect x="66.9639%" y="453" width="0.0132%" height="15" fill="rgb(234,159,37)" fg:x="20278" fg:w="4"/><text x="67.2139%" y="463.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (6 samples, 0.02%)</title><rect x="66.9771%" y="453" width="0.0198%" height="15" fill="rgb(216,204,22)" fg:x="20282" fg:w="6"/><text x="67.2271%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.06%)</title><rect x="66.9969%" y="453" width="0.0561%" height="15" fill="rgb(214,17,3)" fg:x="20288" fg:w="17"/><text x="67.2469%" y="463.50"></text></g><g><title>_platform_memmove (13 samples, 0.04%)</title><rect x="67.0101%" y="437" width="0.0429%" height="15" fill="rgb(212,111,17)" fg:x="20292" fg:w="13"/><text x="67.2601%" y="447.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (11 samples, 0.04%)</title><rect x="67.0629%" y="453" width="0.0363%" height="15" fill="rgb(221,157,24)" fg:x="20308" fg:w="11"/><text x="67.3129%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (8 samples, 0.03%)</title><rect x="67.0993%" y="453" width="0.0264%" height="15" fill="rgb(252,16,13)" fg:x="20319" fg:w="8"/><text x="67.3493%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::_&lt;impl *mut T&gt;::add (8 samples, 0.03%)</title><rect x="67.1257%" y="453" width="0.0264%" height="15" fill="rgb(221,62,2)" fg:x="20327" fg:w="8"/><text x="67.3757%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (12 samples, 0.04%)</title><rect x="67.1521%" y="453" width="0.0396%" height="15" fill="rgb(247,87,22)" fg:x="20335" fg:w="12"/><text x="67.4021%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (17 samples, 0.06%)</title><rect x="67.2115%" y="453" width="0.0561%" height="15" fill="rgb(215,73,9)" fg:x="20353" fg:w="17"/><text x="67.4615%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.01%)</title><rect x="67.2776%" y="453" width="0.0132%" height="15" fill="rgb(207,175,33)" fg:x="20373" fg:w="4"/><text x="67.5276%" y="463.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (4 samples, 0.01%)</title><rect x="67.2908%" y="453" width="0.0132%" height="15" fill="rgb(243,129,54)" fg:x="20377" fg:w="4"/><text x="67.5408%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4 samples, 0.01%)</title><rect x="67.4328%" y="389" width="0.0132%" height="15" fill="rgb(227,119,45)" fg:x="20420" fg:w="4"/><text x="67.6828%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="67.4328%" y="373" width="0.0132%" height="15" fill="rgb(205,109,36)" fg:x="20420" fg:w="4"/><text x="67.6828%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (8 samples, 0.03%)</title><rect x="67.4295%" y="405" width="0.0264%" height="15" fill="rgb(205,6,39)" fg:x="20419" fg:w="8"/><text x="67.6795%" y="415.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (15 samples, 0.05%)</title><rect x="67.4130%" y="437" width="0.0495%" height="15" fill="rgb(221,32,16)" fg:x="20414" fg:w="15"/><text x="67.6630%" y="447.50"></text></g><g><title>&lt;serde_json::number::Number as core::fmt::Display&gt;::fmt (14 samples, 0.05%)</title><rect x="67.4163%" y="421" width="0.0462%" height="15" fill="rgb(228,144,50)" fg:x="20415" fg:w="14"/><text x="67.6663%" y="431.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_plan_executor::projection::IncludeOrSkipByVariable&gt;::include_or_skip_by_variable (11 samples, 0.04%)</title><rect x="67.4790%" y="437" width="0.0363%" height="15" fill="rgb(229,201,53)" fg:x="20434" fg:w="11"/><text x="67.7290%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (7 samples, 0.02%)</title><rect x="67.5187%" y="437" width="0.0231%" height="15" fill="rgb(249,153,27)" fg:x="20446" fg:w="7"/><text x="67.7687%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (8 samples, 0.03%)</title><rect x="67.5418%" y="437" width="0.0264%" height="15" fill="rgb(227,106,25)" fg:x="20453" fg:w="8"/><text x="67.7918%" y="447.50"></text></g><g><title>DYLD-STUB$$memcpy (10 samples, 0.03%)</title><rect x="67.6045%" y="421" width="0.0330%" height="15" fill="rgb(230,65,29)" fg:x="20472" fg:w="10"/><text x="67.8545%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 0.12%)</title><rect x="67.5913%" y="437" width="0.1222%" height="15" fill="rgb(221,57,46)" fg:x="20468" fg:w="37"/><text x="67.8413%" y="447.50"></text></g><g><title>_platform_memmove (23 samples, 0.08%)</title><rect x="67.6375%" y="421" width="0.0760%" height="15" fill="rgb(229,161,17)" fg:x="20482" fg:w="23"/><text x="67.8875%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (9 samples, 0.03%)</title><rect x="67.7168%" y="437" width="0.0297%" height="15" fill="rgb(222,213,11)" fg:x="20506" fg:w="9"/><text x="67.9668%" y="447.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (11 samples, 0.04%)</title><rect x="67.7465%" y="437" width="0.0363%" height="15" fill="rgb(235,35,13)" fg:x="20515" fg:w="11"/><text x="67.9965%" y="447.50"></text></g><g><title>query_plan_executor::json_writer::write_and_escape_string_writer (39 samples, 0.13%)</title><rect x="67.8060%" y="437" width="0.1288%" height="15" fill="rgb(233,158,34)" fg:x="20533" fg:w="39"/><text x="68.0560%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.01%)</title><rect x="67.9480%" y="421" width="0.0132%" height="15" fill="rgb(215,151,48)" fg:x="20576" fg:w="4"/><text x="68.1980%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.02%)</title><rect x="67.9612%" y="421" width="0.0198%" height="15" fill="rgb(229,84,14)" fg:x="20580" fg:w="6"/><text x="68.2112%" y="431.50"></text></g><g><title>DYLD-STUB$$memcmp (9 samples, 0.03%)</title><rect x="67.9843%" y="389" width="0.0297%" height="15" fill="rgb(229,68,14)" fg:x="20587" fg:w="9"/><text x="68.2343%" y="399.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (77 samples, 0.25%)</title><rect x="67.9843%" y="405" width="0.2543%" height="15" fill="rgb(243,106,26)" fg:x="20587" fg:w="77"/><text x="68.2343%" y="415.50"></text></g><g><title>_platform_memcmp (68 samples, 0.22%)</title><rect x="68.0140%" y="389" width="0.2246%" height="15" fill="rgb(206,45,38)" fg:x="20596" fg:w="68"/><text x="68.2640%" y="399.50"></text></g><g><title>DYLD-STUB$$memcmp (7 samples, 0.02%)</title><rect x="68.2749%" y="389" width="0.0231%" height="15" fill="rgb(226,6,15)" fg:x="20675" fg:w="7"/><text x="68.5249%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (38 samples, 0.13%)</title><rect x="68.2386%" y="405" width="0.1255%" height="15" fill="rgb(232,22,54)" fg:x="20664" fg:w="38"/><text x="68.4886%" y="415.50"></text></g><g><title>_platform_memcmp (20 samples, 0.07%)</title><rect x="68.2980%" y="389" width="0.0660%" height="15" fill="rgb(229,222,32)" fg:x="20682" fg:w="20"/><text x="68.5480%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="68.3640%" y="405" width="0.0198%" height="15" fill="rgb(228,62,29)" fg:x="20702" fg:w="6"/><text x="68.6140%" y="415.50"></text></g><g><title>&lt;foldhash::fast::FoldHasher as core::hash::Hasher&gt;::write (4 samples, 0.01%)</title><rect x="68.3839%" y="405" width="0.0132%" height="15" fill="rgb(251,103,34)" fg:x="20708" fg:w="4"/><text x="68.6339%" y="415.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_plan_executor::projection::IncludeOrSkipByVariable&gt;::include_or_skip_by_variable (5 samples, 0.02%)</title><rect x="68.4037%" y="405" width="0.0165%" height="15" fill="rgb(233,12,30)" fg:x="20714" fg:w="5"/><text x="68.6537%" y="415.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (8 samples, 0.03%)</title><rect x="68.4301%" y="405" width="0.0264%" height="15" fill="rgb(238,52,0)" fg:x="20722" fg:w="8"/><text x="68.6801%" y="415.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (19 samples, 0.06%)</title><rect x="68.4565%" y="405" width="0.0627%" height="15" fill="rgb(223,98,5)" fg:x="20730" fg:w="19"/><text x="68.7065%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (4 samples, 0.01%)</title><rect x="68.5193%" y="405" width="0.0132%" height="15" fill="rgb(228,75,37)" fg:x="20749" fg:w="4"/><text x="68.7693%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (7 samples, 0.02%)</title><rect x="68.5325%" y="405" width="0.0231%" height="15" fill="rgb(205,115,49)" fg:x="20753" fg:w="7"/><text x="68.7825%" y="415.50"></text></g><g><title>_mi_heap_delayed_free_partial (15 samples, 0.05%)</title><rect x="68.5688%" y="325" width="0.0495%" height="15" fill="rgb(250,154,43)" fg:x="20764" fg:w="15"/><text x="68.8188%" y="335.50"></text></g><g><title>_mi_free_delayed_block (15 samples, 0.05%)</title><rect x="68.5688%" y="309" width="0.0495%" height="15" fill="rgb(226,43,29)" fg:x="20764" fg:w="15"/><text x="68.8188%" y="319.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (14 samples, 0.05%)</title><rect x="68.5721%" y="293" width="0.0462%" height="15" fill="rgb(249,228,39)" fg:x="20765" fg:w="14"/><text x="68.8221%" y="303.50"></text></g><g><title>mi_segment_span_allocate (4 samples, 0.01%)</title><rect x="68.6447%" y="277" width="0.0132%" height="15" fill="rgb(216,79,43)" fg:x="20787" fg:w="4"/><text x="68.8947%" y="287.50"></text></g><g><title>_mi_malloc_generic (31 samples, 0.10%)</title><rect x="68.5655%" y="341" width="0.1024%" height="15" fill="rgb(228,95,12)" fg:x="20763" fg:w="31"/><text x="68.8155%" y="351.50"></text></g><g><title>mi_large_huge_page_alloc (15 samples, 0.05%)</title><rect x="68.6183%" y="325" width="0.0495%" height="15" fill="rgb(249,221,15)" fg:x="20779" fg:w="15"/><text x="68.8683%" y="335.50"></text></g><g><title>mi_page_fresh_alloc (13 samples, 0.04%)</title><rect x="68.6249%" y="309" width="0.0429%" height="15" fill="rgb(233,34,13)" fg:x="20781" fg:w="13"/><text x="68.8749%" y="319.50"></text></g><g><title>mi_segments_page_alloc (7 samples, 0.02%)</title><rect x="68.6447%" y="293" width="0.0231%" height="15" fill="rgb(214,103,39)" fg:x="20787" fg:w="7"/><text x="68.8947%" y="303.50"></text></g><g><title>_mi_heap_realloc_zero (81 samples, 0.27%)</title><rect x="68.5622%" y="357" width="0.2675%" height="15" fill="rgb(251,126,39)" fg:x="20762" fg:w="81"/><text x="68.8122%" y="367.50"></text></g><g><title>_platform_memmove (49 samples, 0.16%)</title><rect x="68.6679%" y="341" width="0.1618%" height="15" fill="rgb(214,216,36)" fg:x="20794" fg:w="49"/><text x="68.9179%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (85 samples, 0.28%)</title><rect x="68.5556%" y="405" width="0.2807%" height="15" fill="rgb(220,221,8)" fg:x="20760" fg:w="85"/><text x="68.8056%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (83 samples, 0.27%)</title><rect x="68.5622%" y="389" width="0.2741%" height="15" fill="rgb(240,216,3)" fg:x="20762" fg:w="83"/><text x="68.8122%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (83 samples, 0.27%)</title><rect x="68.5622%" y="373" width="0.2741%" height="15" fill="rgb(232,218,17)" fg:x="20762" fg:w="83"/><text x="68.8122%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.01%)</title><rect x="68.8363%" y="405" width="0.0132%" height="15" fill="rgb(229,163,45)" fg:x="20845" fg:w="4"/><text x="69.0863%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (4 samples, 0.01%)</title><rect x="68.8495%" y="405" width="0.0132%" height="15" fill="rgb(231,110,42)" fg:x="20849" fg:w="4"/><text x="69.0995%" y="415.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (5 samples, 0.02%)</title><rect x="68.8627%" y="405" width="0.0165%" height="15" fill="rgb(208,170,48)" fg:x="20853" fg:w="5"/><text x="69.1127%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.07%)</title><rect x="68.8792%" y="405" width="0.0727%" height="15" fill="rgb(239,116,25)" fg:x="20858" fg:w="22"/><text x="69.1292%" y="415.50"></text></g><g><title>_platform_memmove (19 samples, 0.06%)</title><rect x="68.8891%" y="389" width="0.0627%" height="15" fill="rgb(219,200,50)" fg:x="20861" fg:w="19"/><text x="69.1391%" y="399.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (19 samples, 0.06%)</title><rect x="68.9585%" y="405" width="0.0627%" height="15" fill="rgb(245,200,0)" fg:x="20882" fg:w="19"/><text x="69.2085%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::_&lt;impl *mut T&gt;::add (7 samples, 0.02%)</title><rect x="69.0245%" y="405" width="0.0231%" height="15" fill="rgb(245,119,33)" fg:x="20902" fg:w="7"/><text x="69.2745%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (9 samples, 0.03%)</title><rect x="69.0476%" y="405" width="0.0297%" height="15" fill="rgb(231,125,12)" fg:x="20909" fg:w="9"/><text x="69.2976%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (12 samples, 0.04%)</title><rect x="69.1104%" y="405" width="0.0396%" height="15" fill="rgb(216,96,41)" fg:x="20928" fg:w="12"/><text x="69.3604%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="69.2491%" y="389" width="0.0297%" height="15" fill="rgb(248,43,45)" fg:x="20970" fg:w="9"/><text x="69.4991%" y="399.50"></text></g><g><title>&lt;foldhash::fast::FoldHasher as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="69.2788%" y="389" width="0.0198%" height="15" fill="rgb(217,222,7)" fg:x="20979" fg:w="6"/><text x="69.5288%" y="399.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (4 samples, 0.01%)</title><rect x="69.2986%" y="389" width="0.0132%" height="15" fill="rgb(233,28,6)" fg:x="20985" fg:w="4"/><text x="69.5486%" y="399.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_plan_executor::projection::IncludeOrSkipByVariable&gt;::include_or_skip_by_variable (12 samples, 0.04%)</title><rect x="69.3118%" y="389" width="0.0396%" height="15" fill="rgb(231,218,15)" fg:x="20989" fg:w="12"/><text x="69.5618%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (9 samples, 0.03%)</title><rect x="69.3580%" y="389" width="0.0297%" height="15" fill="rgb(226,171,48)" fg:x="21003" fg:w="9"/><text x="69.6080%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (16 samples, 0.05%)</title><rect x="69.3878%" y="389" width="0.0528%" height="15" fill="rgb(235,201,9)" fg:x="21012" fg:w="16"/><text x="69.6378%" y="399.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (28 samples, 0.09%)</title><rect x="69.4505%" y="277" width="0.0925%" height="15" fill="rgb(217,80,15)" fg:x="21031" fg:w="28"/><text x="69.7005%" y="287.50"></text></g><g><title>_mi_heap_delayed_free_partial (29 samples, 0.10%)</title><rect x="69.4505%" y="309" width="0.0958%" height="15" fill="rgb(219,152,8)" fg:x="21031" fg:w="29"/><text x="69.7005%" y="319.50"></text></g><g><title>_mi_free_delayed_block (29 samples, 0.10%)</title><rect x="69.4505%" y="293" width="0.0958%" height="15" fill="rgb(243,107,38)" fg:x="21031" fg:w="29"/><text x="69.7005%" y="303.50"></text></g><g><title>_mi_malloc_generic (34 samples, 0.11%)</title><rect x="69.4472%" y="325" width="0.1123%" height="15" fill="rgb(231,17,5)" fg:x="21030" fg:w="34"/><text x="69.6972%" y="335.50"></text></g><g><title>_platform_memmove (39 samples, 0.13%)</title><rect x="69.5595%" y="325" width="0.1288%" height="15" fill="rgb(209,25,54)" fg:x="21064" fg:w="39"/><text x="69.8095%" y="335.50"></text></g><g><title>_mi_heap_realloc_zero (75 samples, 0.25%)</title><rect x="69.4439%" y="341" width="0.2477%" height="15" fill="rgb(219,0,2)" fg:x="21029" fg:w="75"/><text x="69.6939%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (77 samples, 0.25%)</title><rect x="69.4406%" y="389" width="0.2543%" height="15" fill="rgb(246,9,5)" fg:x="21028" fg:w="77"/><text x="69.6906%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (76 samples, 0.25%)</title><rect x="69.4439%" y="373" width="0.2510%" height="15" fill="rgb(226,159,4)" fg:x="21029" fg:w="76"/><text x="69.6939%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (76 samples, 0.25%)</title><rect x="69.4439%" y="357" width="0.2510%" height="15" fill="rgb(219,175,34)" fg:x="21029" fg:w="76"/><text x="69.6939%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.01%)</title><rect x="69.6982%" y="389" width="0.0132%" height="15" fill="rgb(236,10,46)" fg:x="21106" fg:w="4"/><text x="69.9482%" y="399.50"></text></g><g><title>DYLD-STUB$$memcpy (10 samples, 0.03%)</title><rect x="69.7246%" y="373" width="0.0330%" height="15" fill="rgb(240,211,16)" fg:x="21114" fg:w="10"/><text x="69.9746%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (48 samples, 0.16%)</title><rect x="69.7246%" y="389" width="0.1585%" height="15" fill="rgb(205,3,43)" fg:x="21114" fg:w="48"/><text x="69.9746%" y="399.50"></text></g><g><title>_platform_memmove (38 samples, 0.13%)</title><rect x="69.7576%" y="373" width="0.1255%" height="15" fill="rgb(245,7,22)" fg:x="21124" fg:w="38"/><text x="70.0076%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.03%)</title><rect x="69.8963%" y="389" width="0.0264%" height="15" fill="rgb(239,132,32)" fg:x="21166" fg:w="8"/><text x="70.1463%" y="399.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (11 samples, 0.04%)</title><rect x="69.9326%" y="389" width="0.0363%" height="15" fill="rgb(228,202,34)" fg:x="21177" fg:w="11"/><text x="70.1826%" y="399.50"></text></g><g><title>query_plan_executor::json_writer::write_and_escape_string_writer (598 samples, 1.97%)</title><rect x="69.9888%" y="389" width="1.9748%" height="15" fill="rgb(254,200,22)" fg:x="21194" fg:w="598"/><text x="70.2388%" y="399.50">q..</text></g><g><title>DYLD-STUB$$memcmp (29 samples, 0.10%)</title><rect x="71.9768%" y="357" width="0.0958%" height="15" fill="rgb(219,10,39)" fg:x="21796" fg:w="29"/><text x="72.2268%" y="367.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (231 samples, 0.76%)</title><rect x="71.9734%" y="373" width="0.7628%" height="15" fill="rgb(226,210,39)" fg:x="21795" fg:w="231"/><text x="72.2234%" y="383.50"></text></g><g><title>_platform_memcmp (201 samples, 0.66%)</title><rect x="72.0725%" y="357" width="0.6638%" height="15" fill="rgb(208,219,16)" fg:x="21825" fg:w="201"/><text x="72.3225%" y="367.50"></text></g><g><title>DYLD-STUB$$memcmp (6 samples, 0.02%)</title><rect x="72.7792%" y="357" width="0.0198%" height="15" fill="rgb(216,158,51)" fg:x="22039" fg:w="6"/><text x="73.0292%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (74 samples, 0.24%)</title><rect x="72.7363%" y="373" width="0.2444%" height="15" fill="rgb(233,14,44)" fg:x="22026" fg:w="74"/><text x="72.9863%" y="383.50"></text></g><g><title>_platform_memcmp (55 samples, 0.18%)</title><rect x="72.7990%" y="357" width="0.1816%" height="15" fill="rgb(237,97,39)" fg:x="22045" fg:w="55"/><text x="73.0490%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.14%)</title><rect x="72.9806%" y="373" width="0.1354%" height="15" fill="rgb(218,198,43)" fg:x="22100" fg:w="41"/><text x="73.2306%" y="383.50"></text></g><g><title>&lt;foldhash::fast::FoldHasher as core::hash::Hasher&gt;::write (7 samples, 0.02%)</title><rect x="73.1160%" y="373" width="0.0231%" height="15" fill="rgb(231,104,20)" fg:x="22141" fg:w="7"/><text x="73.3660%" y="383.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_plan_executor::projection::IncludeOrSkipByVariable&gt;::include_or_skip_by_variable (8 samples, 0.03%)</title><rect x="73.1392%" y="373" width="0.0264%" height="15" fill="rgb(254,36,13)" fg:x="22148" fg:w="8"/><text x="73.3892%" y="383.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (7 samples, 0.02%)</title><rect x="73.1722%" y="373" width="0.0231%" height="15" fill="rgb(248,14,50)" fg:x="22158" fg:w="7"/><text x="73.4222%" y="383.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (105 samples, 0.35%)</title><rect x="73.1953%" y="373" width="0.3467%" height="15" fill="rgb(217,107,29)" fg:x="22165" fg:w="105"/><text x="73.4453%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (18 samples, 0.06%)</title><rect x="73.5420%" y="373" width="0.0594%" height="15" fill="rgb(251,169,33)" fg:x="22270" fg:w="18"/><text x="73.7920%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (12 samples, 0.04%)</title><rect x="73.6015%" y="373" width="0.0396%" height="15" fill="rgb(217,108,32)" fg:x="22288" fg:w="12"/><text x="73.8515%" y="383.50"></text></g><g><title>_mi_heap_delayed_free_partial (7 samples, 0.02%)</title><rect x="73.6411%" y="293" width="0.0231%" height="15" fill="rgb(219,66,42)" fg:x="22300" fg:w="7"/><text x="73.8911%" y="303.50"></text></g><g><title>_mi_free_delayed_block (7 samples, 0.02%)</title><rect x="73.6411%" y="277" width="0.0231%" height="15" fill="rgb(206,180,7)" fg:x="22300" fg:w="7"/><text x="73.8911%" y="287.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (7 samples, 0.02%)</title><rect x="73.6411%" y="261" width="0.0231%" height="15" fill="rgb(208,226,31)" fg:x="22300" fg:w="7"/><text x="73.8911%" y="271.50"></text></g><g><title>_mi_malloc_generic (8 samples, 0.03%)</title><rect x="73.6411%" y="309" width="0.0264%" height="15" fill="rgb(218,26,49)" fg:x="22300" fg:w="8"/><text x="73.8911%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (31 samples, 0.10%)</title><rect x="73.6411%" y="357" width="0.1024%" height="15" fill="rgb(233,197,48)" fg:x="22300" fg:w="31"/><text x="73.8911%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (31 samples, 0.10%)</title><rect x="73.6411%" y="341" width="0.1024%" height="15" fill="rgb(252,181,51)" fg:x="22300" fg:w="31"/><text x="73.8911%" y="351.50"></text></g><g><title>_mi_heap_realloc_zero (31 samples, 0.10%)</title><rect x="73.6411%" y="325" width="0.1024%" height="15" fill="rgb(253,90,19)" fg:x="22300" fg:w="31"/><text x="73.8911%" y="335.50"></text></g><g><title>_platform_memmove (23 samples, 0.08%)</title><rect x="73.6675%" y="309" width="0.0760%" height="15" fill="rgb(215,171,30)" fg:x="22308" fg:w="23"/><text x="73.9175%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (32 samples, 0.11%)</title><rect x="73.6411%" y="373" width="0.1057%" height="15" fill="rgb(214,222,9)" fg:x="22300" fg:w="32"/><text x="73.8911%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (8 samples, 0.03%)</title><rect x="73.7468%" y="373" width="0.0264%" height="15" fill="rgb(223,3,22)" fg:x="22332" fg:w="8"/><text x="73.9968%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (9 samples, 0.03%)</title><rect x="73.7732%" y="373" width="0.0297%" height="15" fill="rgb(225,196,46)" fg:x="22340" fg:w="9"/><text x="74.0232%" y="383.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (15 samples, 0.05%)</title><rect x="73.8062%" y="373" width="0.0495%" height="15" fill="rgb(209,110,37)" fg:x="22350" fg:w="15"/><text x="74.0562%" y="383.50"></text></g><g><title>DYLD-STUB$$memcpy (5 samples, 0.02%)</title><rect x="73.8558%" y="357" width="0.0165%" height="15" fill="rgb(249,89,12)" fg:x="22365" fg:w="5"/><text x="74.1058%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 0.15%)</title><rect x="73.8558%" y="373" width="0.1486%" height="15" fill="rgb(226,27,33)" fg:x="22365" fg:w="45"/><text x="74.1058%" y="383.50"></text></g><g><title>_platform_memmove (40 samples, 0.13%)</title><rect x="73.8723%" y="357" width="0.1321%" height="15" fill="rgb(213,82,22)" fg:x="22370" fg:w="40"/><text x="74.1223%" y="367.50"></text></g><g><title>core::num::_&lt;impl u128&gt;::wrapping_mul (7 samples, 0.02%)</title><rect x="74.0044%" y="373" width="0.0231%" height="15" fill="rgb(248,140,0)" fg:x="22410" fg:w="7"/><text x="74.2544%" y="383.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (31 samples, 0.10%)</title><rect x="74.0275%" y="373" width="0.1024%" height="15" fill="rgb(228,106,3)" fg:x="22417" fg:w="31"/><text x="74.2775%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (5 samples, 0.02%)</title><rect x="74.1298%" y="373" width="0.0165%" height="15" fill="rgb(209,23,37)" fg:x="22448" fg:w="5"/><text x="74.3798%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::_&lt;impl *mut T&gt;::add (12 samples, 0.04%)</title><rect x="74.1497%" y="373" width="0.0396%" height="15" fill="rgb(241,93,50)" fg:x="22454" fg:w="12"/><text x="74.3997%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (19 samples, 0.06%)</title><rect x="74.1893%" y="373" width="0.0627%" height="15" fill="rgb(253,46,43)" fg:x="22466" fg:w="19"/><text x="74.4393%" y="383.50"></text></g><g><title>foldhash::fast::FoldHasher::with_seed (5 samples, 0.02%)</title><rect x="74.2619%" y="373" width="0.0165%" height="15" fill="rgb(226,206,43)" fg:x="22488" fg:w="5"/><text x="74.5119%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (22 samples, 0.07%)</title><rect x="74.2884%" y="373" width="0.0727%" height="15" fill="rgb(217,54,7)" fg:x="22496" fg:w="22"/><text x="74.5384%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (11 samples, 0.04%)</title><rect x="74.3610%" y="373" width="0.0363%" height="15" fill="rgb(223,5,52)" fg:x="22518" fg:w="11"/><text x="74.6110%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5 samples, 0.02%)</title><rect x="74.3973%" y="373" width="0.0165%" height="15" fill="rgb(206,52,46)" fg:x="22529" fg:w="5"/><text x="74.6473%" y="383.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (6 samples, 0.02%)</title><rect x="74.4171%" y="373" width="0.0198%" height="15" fill="rgb(253,136,11)" fg:x="22535" fg:w="6"/><text x="74.6671%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (4 samples, 0.01%)</title><rect x="74.6780%" y="325" width="0.0132%" height="15" fill="rgb(208,106,33)" fg:x="22614" fg:w="4"/><text x="74.9280%" y="335.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (8 samples, 0.03%)</title><rect x="74.7408%" y="277" width="0.0264%" height="15" fill="rgb(206,54,4)" fg:x="22633" fg:w="8"/><text x="74.9908%" y="287.50"></text></g><g><title>_mi_malloc_generic (8 samples, 0.03%)</title><rect x="74.7408%" y="261" width="0.0264%" height="15" fill="rgb(213,3,15)" fg:x="22633" fg:w="8"/><text x="74.9908%" y="271.50"></text></g><g><title>mi_find_page (6 samples, 0.02%)</title><rect x="74.7474%" y="245" width="0.0198%" height="15" fill="rgb(252,211,39)" fg:x="22635" fg:w="6"/><text x="74.9974%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (33 samples, 0.11%)</title><rect x="74.7243%" y="293" width="0.1090%" height="15" fill="rgb(223,6,36)" fg:x="22628" fg:w="33"/><text x="74.9743%" y="303.50"></text></g><g><title>mi_malloc_aligned (20 samples, 0.07%)</title><rect x="74.7672%" y="277" width="0.0660%" height="15" fill="rgb(252,169,45)" fg:x="22641" fg:w="20"/><text x="75.0172%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (38 samples, 0.13%)</title><rect x="74.7243%" y="309" width="0.1255%" height="15" fill="rgb(212,48,26)" fg:x="22628" fg:w="38"/><text x="74.9743%" y="319.50"></text></g><g><title>mi_malloc_aligned (5 samples, 0.02%)</title><rect x="74.8332%" y="293" width="0.0165%" height="15" fill="rgb(251,102,48)" fg:x="22661" fg:w="5"/><text x="75.0832%" y="303.50"></text></g><g><title>mi_malloc_aligned (4 samples, 0.01%)</title><rect x="74.8365%" y="277" width="0.0132%" height="15" fill="rgb(243,208,16)" fg:x="22662" fg:w="4"/><text x="75.0865%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (49 samples, 0.16%)</title><rect x="74.7077%" y="325" width="0.1618%" height="15" fill="rgb(219,96,24)" fg:x="22623" fg:w="49"/><text x="74.9577%" y="335.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (86 samples, 0.28%)</title><rect x="74.6351%" y="357" width="0.2840%" height="15" fill="rgb(219,33,29)" fg:x="22601" fg:w="86"/><text x="74.8851%" y="367.50"></text></g><g><title>&lt;serde_json::number::Number as core::fmt::Display&gt;::fmt (86 samples, 0.28%)</title><rect x="74.6351%" y="341" width="0.2840%" height="15" fill="rgb(223,176,5)" fg:x="22601" fg:w="86"/><text x="74.8851%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.04%)</title><rect x="74.8762%" y="325" width="0.0429%" height="15" fill="rgb(228,140,14)" fg:x="22674" fg:w="13"/><text x="75.1262%" y="335.50"></text></g><g><title>_platform_memmove (10 samples, 0.03%)</title><rect x="74.8861%" y="309" width="0.0330%" height="15" fill="rgb(217,179,31)" fg:x="22677" fg:w="10"/><text x="75.1361%" y="319.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.05%)</title><rect x="74.9323%" y="357" width="0.0462%" height="15" fill="rgb(230,9,30)" fg:x="22691" fg:w="14"/><text x="75.1823%" y="367.50"></text></g><g><title>mi_free (14 samples, 0.05%)</title><rect x="74.9323%" y="341" width="0.0462%" height="15" fill="rgb(230,136,20)" fg:x="22691" fg:w="14"/><text x="75.1823%" y="351.50"></text></g><g><title>&lt;query_planner::ast::selection_item::SelectionItem as query_plan_executor::projection::IncludeOrSkipByVariable&gt;::include_or_skip_by_variable (22 samples, 0.07%)</title><rect x="74.9785%" y="357" width="0.0727%" height="15" fill="rgb(215,210,22)" fg:x="22705" fg:w="22"/><text x="75.2285%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (6 samples, 0.02%)</title><rect x="75.0611%" y="357" width="0.0198%" height="15" fill="rgb(218,43,5)" fg:x="22730" fg:w="6"/><text x="75.3111%" y="367.50"></text></g><g><title>core::fmt::Formatter::new (4 samples, 0.01%)</title><rect x="75.1106%" y="357" width="0.0132%" height="15" fill="rgb(216,11,5)" fg:x="22745" fg:w="4"/><text x="75.3606%" y="367.50"></text></g><g><title>DYLD-STUB$$memcpy (10 samples, 0.03%)</title><rect x="75.1238%" y="341" width="0.0330%" height="15" fill="rgb(209,82,29)" fg:x="22749" fg:w="10"/><text x="75.3738%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (55 samples, 0.18%)</title><rect x="75.1238%" y="357" width="0.1816%" height="15" fill="rgb(244,115,12)" fg:x="22749" fg:w="55"/><text x="75.3738%" y="367.50"></text></g><g><title>_platform_memmove (45 samples, 0.15%)</title><rect x="75.1569%" y="341" width="0.1486%" height="15" fill="rgb(222,82,18)" fg:x="22759" fg:w="45"/><text x="75.4069%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (6 samples, 0.02%)</title><rect x="75.3253%" y="357" width="0.0198%" height="15" fill="rgb(249,227,8)" fg:x="22810" fg:w="6"/><text x="75.5753%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.05%)</title><rect x="75.3451%" y="357" width="0.0528%" height="15" fill="rgb(253,141,45)" fg:x="22816" fg:w="16"/><text x="75.5951%" y="367.50"></text></g><g><title>query_plan_executor::json_writer::write_and_escape_string_writer (21 samples, 0.07%)</title><rect x="75.4309%" y="357" width="0.0693%" height="15" fill="rgb(234,184,4)" fg:x="22842" fg:w="21"/><text x="75.6809%" y="367.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (46 samples, 0.15%)</title><rect x="75.5003%" y="357" width="0.1519%" height="15" fill="rgb(218,194,23)" fg:x="22863" fg:w="46"/><text x="75.7503%" y="367.50"></text></g><g><title>query_plan_executor::projection::project_object (1,118 samples, 3.69%)</title><rect x="71.9635%" y="389" width="3.6920%" height="15" fill="rgb(235,66,41)" fg:x="21792" fg:w="1118"/><text x="72.2135%" y="399.50">quer..</text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (369 samples, 1.22%)</title><rect x="74.4370%" y="373" width="1.2185%" height="15" fill="rgb(245,217,1)" fg:x="22541" fg:w="369"/><text x="74.6870%" y="383.50"></text></g><g><title>query_plan_executor::projection::project_object (2,349 samples, 7.76%)</title><rect x="67.9810%" y="421" width="7.7571%" height="15" fill="rgb(229,91,1)" fg:x="20586" fg:w="2349"/><text x="68.2310%" y="431.50">query_plan_..</text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (1,990 samples, 6.57%)</title><rect x="69.1665%" y="405" width="6.5716%" height="15" fill="rgb(207,101,30)" fg:x="20945" fg:w="1990"/><text x="69.4165%" y="415.50">query_pla..</text></g><g><title>query_plan_executor::projection::project_selection_set (25 samples, 0.08%)</title><rect x="75.6555%" y="389" width="0.0826%" height="15" fill="rgb(223,82,49)" fg:x="22910" fg:w="25"/><text x="75.9055%" y="399.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (15 samples, 0.05%)</title><rect x="75.7381%" y="421" width="0.0495%" height="15" fill="rgb(218,167,17)" fg:x="22935" fg:w="15"/><text x="75.9881%" y="431.50"></text></g><g><title>query_plan_executor::projection::project_array (2,381 samples, 7.86%)</title><rect x="67.9347%" y="437" width="7.8628%" height="15" fill="rgb(208,103,14)" fg:x="20572" fg:w="2381"/><text x="68.1847%" y="447.50">query_plan_..</text></g><g><title>query_plan_executor::projection::project_object (2,994 samples, 9.89%)</title><rect x="66.0095%" y="469" width="9.8871%" height="15" fill="rgb(238,20,8)" fg:x="19989" fg:w="2994"/><text x="66.2595%" y="479.50">query_plan_exe..</text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (2,602 samples, 8.59%)</title><rect x="67.3040%" y="453" width="8.5926%" height="15" fill="rgb(218,80,54)" fg:x="20381" fg:w="2602"/><text x="67.5540%" y="463.50">query_plan_e..</text></g><g><title>query_plan_executor::projection::project_selection_set (30 samples, 0.10%)</title><rect x="75.7975%" y="437" width="0.0991%" height="15" fill="rgb(240,144,17)" fg:x="22953" fg:w="30"/><text x="76.0475%" y="447.50"></text></g><g><title>query_plan_executor::projection::project_selection_set (17 samples, 0.06%)</title><rect x="75.8966%" y="469" width="0.0561%" height="15" fill="rgb(245,27,50)" fg:x="22983" fg:w="17"/><text x="76.1466%" y="479.50"></text></g><g><title>query_plan_executor::projection::project_object (3,804 samples, 12.56%)</title><rect x="63.3974%" y="501" width="12.5619%" height="15" fill="rgb(251,51,7)" fg:x="19198" fg:w="3804"/><text x="63.6474%" y="511.50">query_plan_executor..</text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (3,572 samples, 11.80%)</title><rect x="64.1635%" y="485" width="11.7958%" height="15" fill="rgb(245,217,29)" fg:x="19430" fg:w="3572"/><text x="64.4135%" y="495.50">query_plan_execut..</text></g><g><title>query_plan_executor::projection::project_selection_set (7 samples, 0.02%)</title><rect x="75.9593%" y="501" width="0.0231%" height="15" fill="rgb(221,176,29)" fg:x="23002" fg:w="7"/><text x="76.2093%" y="511.50"></text></g><g><title>query_plan_executor::projection::project_array (3,821 samples, 12.62%)</title><rect x="63.3776%" y="517" width="12.6181%" height="15" fill="rgb(212,180,24)" fg:x="19192" fg:w="3821"/><text x="63.6276%" y="527.50">query_plan_executor..</text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (4 samples, 0.01%)</title><rect x="75.9824%" y="501" width="0.0132%" height="15" fill="rgb(254,24,2)" fg:x="23009" fg:w="4"/><text x="76.2324%" y="511.50"></text></g><g><title>query_plan_executor::projection::project_object (4,084 samples, 13.49%)</title><rect x="62.5619%" y="549" width="13.4866%" height="15" fill="rgb(230,100,2)" fg:x="18945" fg:w="4084"/><text x="62.8119%" y="559.50">query_plan_executor:..</text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (3,918 samples, 12.94%)</title><rect x="63.1101%" y="533" width="12.9384%" height="15" fill="rgb(219,142,25)" fg:x="19111" fg:w="3918"/><text x="63.3601%" y="543.50">query_plan_executor..</text></g><g><title>query_plan_executor::projection::project_selection_set (16 samples, 0.05%)</title><rect x="75.9956%" y="517" width="0.0528%" height="15" fill="rgb(240,73,43)" fg:x="23013" fg:w="16"/><text x="76.2456%" y="527.50"></text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (4,274 samples, 14.11%)</title><rect x="61.9510%" y="565" width="14.1140%" height="15" fill="rgb(214,114,15)" fg:x="18760" fg:w="4274"/><text x="62.2010%" y="575.50">query_plan_executor::..</text></g><g><title>query_plan_executor::projection::project_selection_set (5 samples, 0.02%)</title><rect x="76.0485%" y="549" width="0.0165%" height="15" fill="rgb(207,130,4)" fg:x="23029" fg:w="5"/><text x="76.2985%" y="559.50"></text></g><g><title>query_plan_executor::projection::project_object (4,341 samples, 14.34%)</title><rect x="61.7330%" y="581" width="14.3352%" height="15" fill="rgb(221,25,40)" fg:x="18694" fg:w="4341"/><text x="61.9830%" y="591.50">query_plan_executor::p..</text></g><g><title>query_plan_executor::projection::project_array (4,349 samples, 14.36%)</title><rect x="61.7198%" y="597" width="14.3617%" height="15" fill="rgb(241,184,7)" fg:x="18690" fg:w="4349"/><text x="61.9698%" y="607.50">query_plan_executor::p..</text></g><g><title>query_plan_executor::projection::project_selection_set (4 samples, 0.01%)</title><rect x="76.0683%" y="581" width="0.0132%" height="15" fill="rgb(235,159,4)" fg:x="23035" fg:w="4"/><text x="76.3183%" y="591.50"></text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (4,406 samples, 14.55%)</title><rect x="61.5547%" y="613" width="14.5499%" height="15" fill="rgb(214,87,48)" fg:x="18640" fg:w="4406"/><text x="61.8047%" y="623.50">query_plan_executor::p..</text></g><g><title>query_plan_executor::projection::project_selection_set (7 samples, 0.02%)</title><rect x="76.0815%" y="597" width="0.0231%" height="15" fill="rgb(246,198,24)" fg:x="23039" fg:w="7"/><text x="76.3315%" y="607.50"></text></g><g><title>query_plan_executor::projection::project_object (4,505 samples, 14.88%)</title><rect x="61.2311%" y="629" width="14.8768%" height="15" fill="rgb(209,66,40)" fg:x="18542" fg:w="4505"/><text x="61.4811%" y="639.50">query_plan_executor::pr..</text></g><g><title>query_plan_executor::projection::project_selection_set_with_map (4,517 samples, 14.92%)</title><rect x="61.1948%" y="661" width="14.9165%" height="15" fill="rgb(233,147,39)" fg:x="18531" fg:w="4517"/><text x="61.4448%" y="671.50">query_plan_executor::pr..</text></g><g><title>query_plan_executor::projection::project_array (4,510 samples, 14.89%)</title><rect x="61.2179%" y="645" width="14.8933%" height="15" fill="rgb(231,145,52)" fg:x="18538" fg:w="4510"/><text x="61.4679%" y="655.50">query_plan_executor::pr..</text></g><g><title>query_plan_executor::projection::project_object (4,527 samples, 14.95%)</title><rect x="61.1650%" y="677" width="14.9495%" height="15" fill="rgb(206,20,26)" fg:x="18522" fg:w="4527"/><text x="61.4150%" y="687.50">query_plan_executor::pr..</text></g><g><title>&lt;gateway::pipeline::execution_service::ExecutionService as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;::call::_{{closure}} (21,556 samples, 71.18%)</title><rect x="4.9402%" y="709" width="71.1842%" height="15" fill="rgb(238,220,4)" fg:x="1496" fg:w="21556"/><text x="5.1902%" y="719.50">&lt;gateway::pipeline::execution_service::ExecutionService as tower_service::Service&lt;http::request::Request&lt;axum_core::bo..</text></g><g><title>query_plan_executor::projection::project_by_operation (4,534 samples, 14.97%)</title><rect x="61.1518%" y="693" width="14.9726%" height="15" fill="rgb(252,195,42)" fg:x="18518" fg:w="4534"/><text x="61.4018%" y="703.50">query_plan_executor::pr..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (21,567 samples, 71.22%)</title><rect x="4.9138%" y="725" width="71.2205%" height="15" fill="rgb(209,10,6)" fg:x="1488" fg:w="21567"/><text x="5.1638%" y="735.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;tower_http::request_id::PropagateRequestIdResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (21 samples, 0.07%)</title><rect x="76.1608%" y="725" width="0.0693%" height="15" fill="rgb(229,3,52)" fg:x="23063" fg:w="21"/><text x="76.4108%" y="735.50"></text></g><g><title>&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;::call::_{{closure}} (21,619 samples, 71.39%)</title><rect x="4.8445%" y="741" width="71.3922%" height="15" fill="rgb(253,49,37)" fg:x="1467" fg:w="21619"/><text x="5.0945%" y="751.50">&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::bo..</text></g><g><title>_mi_free_delayed_block.cold.1 (18 samples, 0.06%)</title><rect x="76.2367%" y="661" width="0.0594%" height="15" fill="rgb(240,103,49)" fg:x="23086" fg:w="18"/><text x="76.4867%" y="671.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (19 samples, 0.06%)</title><rect x="76.2367%" y="741" width="0.0627%" height="15" fill="rgb(250,182,30)" fg:x="23086" fg:w="19"/><text x="76.4867%" y="751.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (19 samples, 0.06%)</title><rect x="76.2367%" y="725" width="0.0627%" height="15" fill="rgb(248,8,30)" fg:x="23086" fg:w="19"/><text x="76.4867%" y="735.50"></text></g><g><title>_mi_malloc_generic (19 samples, 0.06%)</title><rect x="76.2367%" y="709" width="0.0627%" height="15" fill="rgb(237,120,30)" fg:x="23086" fg:w="19"/><text x="76.4867%" y="719.50"></text></g><g><title>_mi_heap_delayed_free_partial (19 samples, 0.06%)</title><rect x="76.2367%" y="693" width="0.0627%" height="15" fill="rgb(221,146,34)" fg:x="23086" fg:w="19"/><text x="76.4867%" y="703.50"></text></g><g><title>_mi_free_delayed_block (19 samples, 0.06%)</title><rect x="76.2367%" y="677" width="0.0627%" height="15" fill="rgb(242,55,13)" fg:x="23086" fg:w="19"/><text x="76.4867%" y="687.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (21,725 samples, 71.74%)</title><rect x="4.5770%" y="757" width="71.7423%" height="15" fill="rgb(242,112,31)" fg:x="1386" fg:w="21725"/><text x="4.8270%" y="767.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;::call::_{{closure}} (20 samples, 0.07%)</title><rect x="76.3193%" y="757" width="0.0660%" height="15" fill="rgb(249,192,27)" fg:x="23111" fg:w="20"/><text x="76.5693%" y="767.50"></text></g><g><title>&lt;gateway::pipeline::normalize_service::GraphQLOperationNormalizationService as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}}::_{{closure}} (4 samples, 0.01%)</title><rect x="76.3952%" y="741" width="0.0132%" height="15" fill="rgb(208,204,44)" fg:x="23134" fg:w="4"/><text x="76.6452%" y="751.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="76.4084%" y="741" width="0.0132%" height="15" fill="rgb(208,93,54)" fg:x="23138" fg:w="4"/><text x="76.6584%" y="751.50"></text></g><g><title>moka::cht::segment::HashMap&lt;K,V,S&gt;::get_key_value_and_then (6 samples, 0.02%)</title><rect x="76.4315%" y="741" width="0.0198%" height="15" fill="rgb(242,1,31)" fg:x="23145" fg:w="6"/><text x="76.6815%" y="751.50"></text></g><g><title>moka::future::base_cache::BaseCache&lt;K,V,S&gt;::get_with_hash::_{{closure}} (11 samples, 0.04%)</title><rect x="76.4514%" y="741" width="0.0363%" height="15" fill="rgb(241,83,25)" fg:x="23151" fg:w="11"/><text x="76.7014%" y="751.50"></text></g><g><title>&lt;gateway::pipeline::normalize_service::GraphQLOperationNormalizationService as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}} (32 samples, 0.11%)</title><rect x="76.3853%" y="757" width="0.1057%" height="15" fill="rgb(205,169,50)" fg:x="23131" fg:w="32"/><text x="76.6353%" y="767.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (21,782 samples, 71.93%)</title><rect x="4.5704%" y="773" width="71.9305%" height="15" fill="rgb(239,186,37)" fg:x="1384" fg:w="21782"/><text x="4.8204%" y="783.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;::call::_{{closure}} (12 samples, 0.04%)</title><rect x="76.5042%" y="773" width="0.0396%" height="15" fill="rgb(205,221,10)" fg:x="23167" fg:w="12"/><text x="76.7542%" y="783.50"></text></g><g><title>&lt;gateway::pipeline::progressive_override_service::ProgressiveOverrideExtractor as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}} (9 samples, 0.03%)</title><rect x="76.5438%" y="773" width="0.0297%" height="15" fill="rgb(218,196,15)" fg:x="23179" fg:w="9"/><text x="76.7938%" y="783.50"></text></g><g><title>_mi_heap_delayed_free_partial (15 samples, 0.05%)</title><rect x="76.5735%" y="725" width="0.0495%" height="15" fill="rgb(218,196,35)" fg:x="23188" fg:w="15"/><text x="76.8235%" y="735.50"></text></g><g><title>_mi_free_delayed_block (15 samples, 0.05%)</title><rect x="76.5735%" y="709" width="0.0495%" height="15" fill="rgb(233,63,24)" fg:x="23188" fg:w="15"/><text x="76.8235%" y="719.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (15 samples, 0.05%)</title><rect x="76.5735%" y="693" width="0.0495%" height="15" fill="rgb(225,8,4)" fg:x="23188" fg:w="15"/><text x="76.8235%" y="703.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.05%)</title><rect x="76.5735%" y="773" width="0.0528%" height="15" fill="rgb(234,105,35)" fg:x="23188" fg:w="16"/><text x="76.8235%" y="783.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (16 samples, 0.05%)</title><rect x="76.5735%" y="757" width="0.0528%" height="15" fill="rgb(236,21,32)" fg:x="23188" fg:w="16"/><text x="76.8235%" y="767.50"></text></g><g><title>_mi_malloc_generic (16 samples, 0.05%)</title><rect x="76.5735%" y="741" width="0.0528%" height="15" fill="rgb(228,109,6)" fg:x="23188" fg:w="16"/><text x="76.8235%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.01%)</title><rect x="76.6297%" y="773" width="0.0132%" height="15" fill="rgb(229,215,31)" fg:x="23205" fg:w="4"/><text x="76.8797%" y="783.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="76.6297%" y="757" width="0.0132%" height="15" fill="rgb(221,52,54)" fg:x="23205" fg:w="4"/><text x="76.8797%" y="767.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (21,832 samples, 72.10%)</title><rect x="4.5572%" y="789" width="72.0956%" height="15" fill="rgb(252,129,43)" fg:x="1380" fg:w="21832"/><text x="4.8072%" y="799.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;::call::_{{closure}} (20 samples, 0.07%)</title><rect x="76.6528%" y="789" width="0.0660%" height="15" fill="rgb(248,183,27)" fg:x="23212" fg:w="20"/><text x="76.9028%" y="799.50"></text></g><g><title>moka::future::base_cache::BaseCache&lt;K,V,S&gt;::apply_reads_if_needed::_{{closure}} (4 samples, 0.01%)</title><rect x="76.7585%" y="757" width="0.0132%" height="15" fill="rgb(250,0,22)" fg:x="23244" fg:w="4"/><text x="77.0085%" y="767.50"></text></g><g><title>moka::future::base_cache::BaseCache&lt;K,V,S&gt;::get_with_hash::_{{closure}} (9 samples, 0.03%)</title><rect x="76.7552%" y="773" width="0.0297%" height="15" fill="rgb(213,166,10)" fg:x="23243" fg:w="9"/><text x="77.0052%" y="783.50"></text></g><g><title>&lt;gateway::pipeline::validation_service::GraphQLValidationService as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}} (22 samples, 0.07%)</title><rect x="76.7188%" y="789" width="0.0727%" height="15" fill="rgb(207,163,36)" fg:x="23232" fg:w="22"/><text x="76.9688%" y="799.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (21,879 samples, 72.25%)</title><rect x="4.5440%" y="805" width="72.2508%" height="15" fill="rgb(208,122,22)" fg:x="1376" fg:w="21879"/><text x="4.7940%" y="815.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;::call::_{{closure}} (18 samples, 0.06%)</title><rect x="76.7948%" y="805" width="0.0594%" height="15" fill="rgb(207,104,49)" fg:x="23255" fg:w="18"/><text x="77.0448%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (5 samples, 0.02%)</title><rect x="76.8608%" y="789" width="0.0165%" height="15" fill="rgb(248,211,50)" fg:x="23275" fg:w="5"/><text x="77.1108%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="76.8608%" y="773" width="0.0165%" height="15" fill="rgb(217,13,45)" fg:x="23275" fg:w="5"/><text x="77.1108%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.01%)</title><rect x="76.9071%" y="741" width="0.0132%" height="15" fill="rgb(211,216,49)" fg:x="23289" fg:w="4"/><text x="77.1571%" y="751.50"></text></g><g><title>&lt;gateway::pipeline::parser_service::GraphQLParserService as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}}::_{{closure}} (10 samples, 0.03%)</title><rect x="76.8906%" y="789" width="0.0330%" height="15" fill="rgb(221,58,53)" fg:x="23284" fg:w="10"/><text x="77.1406%" y="799.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (6 samples, 0.02%)</title><rect x="76.9038%" y="773" width="0.0198%" height="15" fill="rgb(220,112,41)" fg:x="23288" fg:w="6"/><text x="77.1538%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5 samples, 0.02%)</title><rect x="76.9071%" y="757" width="0.0165%" height="15" fill="rgb(236,38,28)" fg:x="23289" fg:w="5"/><text x="77.1571%" y="767.50"></text></g><g><title>moka::cht::segment::HashMap&lt;K,V,S&gt;::get_key_value_and_then (8 samples, 0.03%)</title><rect x="76.9368%" y="789" width="0.0264%" height="15" fill="rgb(227,195,22)" fg:x="23298" fg:w="8"/><text x="77.1868%" y="799.50"></text></g><g><title>moka::future::base_cache::BaseCache&lt;K,V,S&gt;::apply_reads_if_needed::_{{closure}} (4 samples, 0.01%)</title><rect x="76.9764%" y="773" width="0.0132%" height="15" fill="rgb(214,55,33)" fg:x="23310" fg:w="4"/><text x="77.2264%" y="783.50"></text></g><g><title>moka::future::base_cache::BaseCache&lt;K,V,S&gt;::get_with_hash::_{{closure}} (13 samples, 0.04%)</title><rect x="76.9632%" y="789" width="0.0429%" height="15" fill="rgb(248,80,13)" fg:x="23306" fg:w="13"/><text x="77.2132%" y="799.50"></text></g><g><title>&lt;gateway::pipeline::parser_service::GraphQLParserService as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}} (50 samples, 0.17%)</title><rect x="76.8542%" y="805" width="0.1651%" height="15" fill="rgb(238,52,6)" fg:x="23273" fg:w="50"/><text x="77.1042%" y="815.50"></text></g><g><title>_mi_heap_delayed_free_partial (18 samples, 0.06%)</title><rect x="77.0227%" y="757" width="0.0594%" height="15" fill="rgb(224,198,47)" fg:x="23324" fg:w="18"/><text x="77.2727%" y="767.50"></text></g><g><title>_mi_free_delayed_block (18 samples, 0.06%)</title><rect x="77.0227%" y="741" width="0.0594%" height="15" fill="rgb(233,171,20)" fg:x="23324" fg:w="18"/><text x="77.2727%" y="751.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (18 samples, 0.06%)</title><rect x="77.0227%" y="725" width="0.0594%" height="15" fill="rgb(241,30,25)" fg:x="23324" fg:w="18"/><text x="77.2727%" y="735.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (21 samples, 0.07%)</title><rect x="77.0194%" y="805" width="0.0693%" height="15" fill="rgb(207,171,38)" fg:x="23323" fg:w="21"/><text x="77.2694%" y="815.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (21 samples, 0.07%)</title><rect x="77.0194%" y="789" width="0.0693%" height="15" fill="rgb(234,70,1)" fg:x="23323" fg:w="21"/><text x="77.2694%" y="799.50"></text></g><g><title>_mi_malloc_generic (21 samples, 0.07%)</title><rect x="77.0194%" y="773" width="0.0693%" height="15" fill="rgb(232,178,18)" fg:x="23323" fg:w="21"/><text x="77.2694%" y="783.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (21,976 samples, 72.57%)</title><rect x="4.5373%" y="821" width="72.5712%" height="15" fill="rgb(241,78,40)" fg:x="1374" fg:w="21976"/><text x="4.7873%" y="831.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;::call::_{{closure}} (9 samples, 0.03%)</title><rect x="77.1085%" y="821" width="0.0297%" height="15" fill="rgb(222,35,25)" fg:x="23350" fg:w="9"/><text x="77.3585%" y="831.50"></text></g><g><title>&lt;http_body_util::combinators::box_body::UnsyncBoxBody&lt;D,E&gt; as http_body::Body&gt;::poll_frame (7 samples, 0.02%)</title><rect x="77.1845%" y="805" width="0.0231%" height="15" fill="rgb(207,92,16)" fg:x="23373" fg:w="7"/><text x="77.4345%" y="815.50"></text></g><g><title>&lt;http_body_util::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_frame (7 samples, 0.02%)</title><rect x="77.1845%" y="789" width="0.0231%" height="15" fill="rgb(216,59,51)" fg:x="23373" fg:w="7"/><text x="77.4345%" y="799.50"></text></g><g><title>&lt;hyper::body::incoming::Incoming as http_body::Body&gt;::poll_frame (7 samples, 0.02%)</title><rect x="77.1845%" y="773" width="0.0231%" height="15" fill="rgb(213,80,28)" fg:x="23373" fg:w="7"/><text x="77.4345%" y="783.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (6 samples, 0.02%)</title><rect x="77.1878%" y="757" width="0.0198%" height="15" fill="rgb(220,93,7)" fg:x="23374" fg:w="6"/><text x="77.4378%" y="767.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (5 samples, 0.02%)</title><rect x="77.1911%" y="741" width="0.0165%" height="15" fill="rgb(225,24,44)" fg:x="23375" fg:w="5"/><text x="77.4411%" y="751.50"></text></g><g><title>&lt;&amp;mut sonic_rs::serde::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (5 samples, 0.02%)</title><rect x="77.2175%" y="789" width="0.0165%" height="15" fill="rgb(243,74,40)" fg:x="23383" fg:w="5"/><text x="77.4675%" y="799.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (11 samples, 0.04%)</title><rect x="77.2769%" y="645" width="0.0363%" height="15" fill="rgb(228,39,7)" fg:x="23401" fg:w="11"/><text x="77.5269%" y="655.50"></text></g><g><title>_mi_heap_delayed_free_partial (13 samples, 0.04%)</title><rect x="77.2769%" y="677" width="0.0429%" height="15" fill="rgb(227,79,8)" fg:x="23401" fg:w="13"/><text x="77.5269%" y="687.50"></text></g><g><title>_mi_free_delayed_block (13 samples, 0.04%)</title><rect x="77.2769%" y="661" width="0.0429%" height="15" fill="rgb(236,58,11)" fg:x="23401" fg:w="13"/><text x="77.5269%" y="671.50"></text></g><g><title>_mi_malloc_generic (14 samples, 0.05%)</title><rect x="77.2769%" y="693" width="0.0462%" height="15" fill="rgb(249,63,35)" fg:x="23401" fg:w="14"/><text x="77.5269%" y="703.50"></text></g><g><title>_mi_heap_realloc_zero (17 samples, 0.06%)</title><rect x="77.2769%" y="709" width="0.0561%" height="15" fill="rgb(252,114,16)" fg:x="23401" fg:w="17"/><text x="77.5269%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (19 samples, 0.06%)</title><rect x="77.2736%" y="741" width="0.0627%" height="15" fill="rgb(254,151,24)" fg:x="23400" fg:w="19"/><text x="77.5236%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 0.06%)</title><rect x="77.2769%" y="725" width="0.0594%" height="15" fill="rgb(253,54,39)" fg:x="23401" fg:w="18"/><text x="77.5269%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (21 samples, 0.07%)</title><rect x="77.2736%" y="757" width="0.0693%" height="15" fill="rgb(243,25,45)" fg:x="23400" fg:w="21"/><text x="77.5236%" y="767.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::trailing_zeros (4 samples, 0.01%)</title><rect x="77.3661%" y="757" width="0.0132%" height="15" fill="rgb(234,134,9)" fg:x="23428" fg:w="4"/><text x="77.6161%" y="767.50"></text></g><g><title>&lt;sonic_rs::reader::Read as sonic_rs::reader::Reader&gt;::eat (5 samples, 0.02%)</title><rect x="77.3925%" y="741" width="0.0165%" height="15" fill="rgb(227,166,31)" fg:x="23436" fg:w="5"/><text x="77.6425%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.01%)</title><rect x="77.4222%" y="741" width="0.0132%" height="15" fill="rgb(245,143,41)" fg:x="23445" fg:w="4"/><text x="77.6722%" y="751.50"></text></g><g><title>sonic_rs::parser::Parser&lt;R&gt;::parse_string_escaped (18 samples, 0.06%)</title><rect x="77.3925%" y="757" width="0.0594%" height="15" fill="rgb(238,181,32)" fg:x="23436" fg:w="18"/><text x="77.6425%" y="767.50"></text></g><g><title>sonic_rs::parser::Parser&lt;R&gt;::parse_escaped_char (5 samples, 0.02%)</title><rect x="77.4354%" y="741" width="0.0165%" height="15" fill="rgb(224,113,18)" fg:x="23449" fg:w="5"/><text x="77.6854%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (67 samples, 0.22%)</title><rect x="77.2340%" y="789" width="0.2213%" height="15" fill="rgb(240,229,28)" fg:x="23388" fg:w="67"/><text x="77.4840%" y="799.50"></text></g><g><title>sonic_rs::parser::Parser&lt;R&gt;::parse_string_raw (60 samples, 0.20%)</title><rect x="77.2571%" y="773" width="0.1981%" height="15" fill="rgb(250,185,3)" fg:x="23395" fg:w="60"/><text x="77.5071%" y="783.50"></text></g><g><title>gateway::pipeline::graphql_request_params::_::_&lt;impl serde::de::Deserialize for gateway::pipeline::graphql_request_params::ExecutionRequest&gt;::deserialize (78 samples, 0.26%)</title><rect x="77.2175%" y="805" width="0.2576%" height="15" fill="rgb(212,59,25)" fg:x="23383" fg:w="78"/><text x="77.4675%" y="815.50"></text></g><g><title>&lt;gateway::pipeline::graphql_request_params::GraphQLRequestParamsExtractor as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}} (110 samples, 0.36%)</title><rect x="77.1382%" y="821" width="0.3633%" height="15" fill="rgb(221,87,20)" fg:x="23359" fg:w="110"/><text x="77.3882%" y="831.50"></text></g><g><title>_mi_heap_delayed_free_partial (13 samples, 0.04%)</title><rect x="77.5048%" y="773" width="0.0429%" height="15" fill="rgb(213,74,28)" fg:x="23470" fg:w="13"/><text x="77.7548%" y="783.50"></text></g><g><title>_mi_free_delayed_block (13 samples, 0.04%)</title><rect x="77.5048%" y="757" width="0.0429%" height="15" fill="rgb(224,132,34)" fg:x="23470" fg:w="13"/><text x="77.7548%" y="767.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (13 samples, 0.04%)</title><rect x="77.5048%" y="741" width="0.0429%" height="15" fill="rgb(222,101,24)" fg:x="23470" fg:w="13"/><text x="77.7548%" y="751.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (21 samples, 0.07%)</title><rect x="77.5015%" y="821" width="0.0693%" height="15" fill="rgb(254,142,4)" fg:x="23469" fg:w="21"/><text x="77.7515%" y="831.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (21 samples, 0.07%)</title><rect x="77.5015%" y="805" width="0.0693%" height="15" fill="rgb(230,229,49)" fg:x="23469" fg:w="21"/><text x="77.7515%" y="815.50"></text></g><g><title>_mi_malloc_generic (21 samples, 0.07%)</title><rect x="77.5015%" y="789" width="0.0693%" height="15" fill="rgb(238,70,47)" fg:x="23469" fg:w="21"/><text x="77.7515%" y="799.50"></text></g><g><title>mi_find_page (7 samples, 0.02%)</title><rect x="77.5477%" y="773" width="0.0231%" height="15" fill="rgb(231,160,17)" fg:x="23483" fg:w="7"/><text x="77.7977%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.01%)</title><rect x="77.5708%" y="821" width="0.0132%" height="15" fill="rgb(218,68,53)" fg:x="23490" fg:w="4"/><text x="77.8208%" y="831.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (22,123 samples, 73.06%)</title><rect x="4.5373%" y="837" width="73.0566%" height="15" fill="rgb(236,111,10)" fg:x="1374" fg:w="22123"/><text x="4.7873%" y="847.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;::call::_{{closure}} (20 samples, 0.07%)</title><rect x="77.6006%" y="837" width="0.0660%" height="15" fill="rgb(224,34,41)" fg:x="23499" fg:w="20"/><text x="77.8506%" y="847.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (22,157 samples, 73.17%)</title><rect x="4.5307%" y="853" width="73.1689%" height="15" fill="rgb(241,118,19)" fg:x="1372" fg:w="22157"/><text x="4.7807%" y="863.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;::call::_{{closure}} (15 samples, 0.05%)</title><rect x="77.7128%" y="853" width="0.0495%" height="15" fill="rgb(238,129,25)" fg:x="23533" fg:w="15"/><text x="77.9628%" y="863.50"></text></g><g><title>&lt;gateway::pipeline::http_request_params::HttpRequestParamsExtractor as gateway::pipeline::gateway_layer::GatewayPipelineLayer&gt;::process::_{{closure}}::_{{closure}} (5 samples, 0.02%)</title><rect x="77.7624%" y="853" width="0.0165%" height="15" fill="rgb(238,22,31)" fg:x="23548" fg:w="5"/><text x="78.0124%" y="863.50"></text></g><g><title>&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt;::call::_{{closure}} (22,226 samples, 73.40%)</title><rect x="4.4416%" y="869" width="73.3967%" height="15" fill="rgb(222,174,48)" fg:x="1345" fg:w="22226"/><text x="4.6916%" y="879.50">&lt;gateway::pipeline::gateway_layer::ProcessorService&lt;S,P&gt; as tower_service::Service&lt;http::request::Request&lt;axum_core::body:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (22,227 samples, 73.40%)</title><rect x="4.4416%" y="885" width="73.4000%" height="15" fill="rgb(206,152,40)" fg:x="1345" fg:w="22227"/><text x="4.6916%" y="895.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;tower_http::trace::future::ResponseFuture&lt;Fut,C,OnResponseT,OnBodyChunkT,OnEosT,OnFailureT&gt; as core::future::future::Future&gt;::poll (15 samples, 0.05%)</title><rect x="77.8449%" y="885" width="0.0495%" height="15" fill="rgb(218,99,54)" fg:x="23573" fg:w="15"/><text x="78.0949%" y="895.50"></text></g><g><title>&lt;axum::util::MapIntoResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (22,250 samples, 73.48%)</title><rect x="4.4383%" y="901" width="73.4760%" height="15" fill="rgb(220,174,26)" fg:x="1344" fg:w="22250"/><text x="4.6883%" y="911.50">&lt;axum::util::MapIntoResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.01%)</title><rect x="77.9011%" y="885" width="0.0132%" height="15" fill="rgb(245,116,9)" fg:x="23590" fg:w="4"/><text x="78.1511%" y="895.50"></text></g><g><title>&lt;core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.03%)</title><rect x="77.9143%" y="901" width="0.0297%" height="15" fill="rgb(209,72,35)" fg:x="23594" fg:w="9"/><text x="78.1643%" y="911.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (22,262 samples, 73.52%)</title><rect x="4.4383%" y="917" width="73.5156%" height="15" fill="rgb(226,126,21)" fg:x="1344" fg:w="22262"/><text x="4.6883%" y="927.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (6 samples, 0.02%)</title><rect x="77.9605%" y="917" width="0.0198%" height="15" fill="rgb(227,192,1)" fg:x="23608" fg:w="6"/><text x="78.2105%" y="927.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_reserve (5 samples, 0.02%)</title><rect x="78.0001%" y="917" width="0.0165%" height="15" fill="rgb(237,180,29)" fg:x="23620" fg:w="5"/><text x="78.2501%" y="927.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (22,325 samples, 73.72%)</title><rect x="4.3029%" y="949" width="73.7237%" height="15" fill="rgb(230,197,35)" fg:x="1303" fg:w="22325"/><text x="4.5529%" y="959.50">&lt;F as futures_core::future::TryFuture&gt;::try_poll</text></g><g><title>&lt;tower_http::cors::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (22,324 samples, 73.72%)</title><rect x="4.3062%" y="933" width="73.7204%" height="15" fill="rgb(246,193,31)" fg:x="1304" fg:w="22324"/><text x="4.5562%" y="943.50">&lt;tower_http::cors::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (12 samples, 0.04%)</title><rect x="78.0266%" y="949" width="0.0396%" height="15" fill="rgb(241,36,4)" fg:x="23628" fg:w="12"/><text x="78.2766%" y="959.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (22,350 samples, 73.81%)</title><rect x="4.2765%" y="981" width="73.8062%" height="15" fill="rgb(241,130,17)" fg:x="1295" fg:w="22350"/><text x="4.5265%" y="991.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (22,342 samples, 73.78%)</title><rect x="4.3029%" y="965" width="73.7798%" height="15" fill="rgb(206,137,32)" fg:x="1303" fg:w="22342"/><text x="4.5529%" y="975.50">&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;pin_project_lite::__private::UnsafeDropInPlaceGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="78.0662%" y="949" width="0.0165%" height="15" fill="rgb(237,228,51)" fg:x="23640" fg:w="5"/><text x="78.3162%" y="959.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (5 samples, 0.02%)</title><rect x="78.0926%" y="981" width="0.0165%" height="15" fill="rgb(243,6,42)" fg:x="23648" fg:w="5"/><text x="78.3426%" y="991.50"></text></g><g><title>core::pin::Pin&lt;Ptr&gt;::set (6 samples, 0.02%)</title><rect x="78.1091%" y="981" width="0.0198%" height="15" fill="rgb(251,74,28)" fg:x="23653" fg:w="6"/><text x="78.3591%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::oneshot::State&lt;tower::util::boxed_clone_sync::BoxCloneSyncService&lt;http::request::Request&lt;axum_core::body::Body&gt;,http::response::Response&lt;axum_core::body::Body&gt;,core::convert::Infallible&gt;,http::request::Request&lt;axum_core::body::Body&gt;&gt;&gt; (6 samples, 0.02%)</title><rect x="78.1091%" y="965" width="0.0198%" height="15" fill="rgb(218,20,49)" fg:x="23653" fg:w="6"/><text x="78.3591%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower_http::cors::CorsLayer&gt; (4 samples, 0.01%)</title><rect x="78.1157%" y="949" width="0.0132%" height="15" fill="rgb(238,28,14)" fg:x="23655" fg:w="4"/><text x="78.3657%" y="959.50"></text></g><g><title>&lt;hyper_util::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (22,426 samples, 74.06%)</title><rect x="4.0750%" y="997" width="74.0572%" height="15" fill="rgb(229,40,46)" fg:x="1234" fg:w="22426"/><text x="4.3250%" y="1007.50">&lt;hyper_util::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="78.1454%" y="933" width="0.0132%" height="15" fill="rgb(244,195,20)" fg:x="23664" fg:w="4"/><text x="78.3954%" y="943.50"></text></g><g><title>&lt;tower_http::cors::CorsLayer as core::clone::Clone&gt;::clone (12 samples, 0.04%)</title><rect x="78.1619%" y="933" width="0.0396%" height="15" fill="rgb(253,56,35)" fg:x="23669" fg:w="12"/><text x="78.4119%" y="943.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.01%)</title><rect x="78.2049%" y="933" width="0.0132%" height="15" fill="rgb(210,149,44)" fg:x="23682" fg:w="4"/><text x="78.4549%" y="943.50"></text></g><g><title>&lt;axum::routing::Fallback&lt;S,E&gt; as core::clone::Clone&gt;::clone (25 samples, 0.08%)</title><rect x="78.1421%" y="965" width="0.0826%" height="15" fill="rgb(240,135,12)" fg:x="23663" fg:w="25"/><text x="78.3921%" y="975.50"></text></g><g><title>&lt;T as tower::util::boxed_clone_sync::CloneService&lt;R&gt;&gt;::clone_box (25 samples, 0.08%)</title><rect x="78.1421%" y="949" width="0.0826%" height="15" fill="rgb(251,24,50)" fg:x="23663" fg:w="25"/><text x="78.3921%" y="959.50"></text></g><g><title>http::extensions::Extensions::insert (4 samples, 0.01%)</title><rect x="78.2313%" y="949" width="0.0132%" height="15" fill="rgb(243,200,47)" fg:x="23690" fg:w="4"/><text x="78.4813%" y="959.50"></text></g><g><title>axum::extract::matched_path::set_matched_path_for_request (7 samples, 0.02%)</title><rect x="78.2313%" y="965" width="0.0231%" height="15" fill="rgb(224,166,26)" fg:x="23690" fg:w="7"/><text x="78.4813%" y="975.50"></text></g><g><title>_platform_memmove (5 samples, 0.02%)</title><rect x="78.2544%" y="949" width="0.0165%" height="15" fill="rgb(233,0,47)" fg:x="23697" fg:w="5"/><text x="78.5044%" y="959.50"></text></g><g><title>axum::routing::method_routing::MethodRouter&lt;S,E&gt;::call_with_state (7 samples, 0.02%)</title><rect x="78.2544%" y="965" width="0.0231%" height="15" fill="rgb(253,80,5)" fg:x="23697" fg:w="7"/><text x="78.5044%" y="975.50"></text></g><g><title>axum::routing::path_router::Node::at (8 samples, 0.03%)</title><rect x="78.2775%" y="965" width="0.0264%" height="15" fill="rgb(214,133,25)" fg:x="23704" fg:w="8"/><text x="78.5275%" y="975.50"></text></g><g><title>matchit::tree::Node&lt;T&gt;::at (6 samples, 0.02%)</title><rect x="78.2841%" y="949" width="0.0198%" height="15" fill="rgb(209,27,14)" fg:x="23706" fg:w="6"/><text x="78.5341%" y="959.50"></text></g><g><title>axum::routing::url_params::insert_url_params (9 samples, 0.03%)</title><rect x="78.3039%" y="965" width="0.0297%" height="15" fill="rgb(219,102,51)" fg:x="23712" fg:w="9"/><text x="78.5539%" y="975.50"></text></g><g><title>axum::routing::path_router::PathRouter&lt;S,_&gt;::call_with_state (64 samples, 0.21%)</title><rect x="78.1355%" y="981" width="0.2113%" height="15" fill="rgb(237,18,16)" fg:x="23661" fg:w="64"/><text x="78.3855%" y="991.50"></text></g><g><title>axum::routing::Router&lt;S&gt;::call_with_state (68 samples, 0.22%)</title><rect x="78.1355%" y="997" width="0.2246%" height="15" fill="rgb(241,85,17)" fg:x="23661" fg:w="68"/><text x="78.3855%" y="1007.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.01%)</title><rect x="78.3469%" y="981" width="0.0132%" height="15" fill="rgb(236,90,42)" fg:x="23725" fg:w="4"/><text x="78.5969%" y="991.50"></text></g><g><title>&lt;hyper_util::service::glue::TowerToHyperServiceFuture&lt;S,R&gt; as core::future::future::Future&gt;::poll (22,505 samples, 74.32%)</title><rect x="4.0651%" y="1013" width="74.3181%" height="15" fill="rgb(249,57,21)" fg:x="1231" fg:w="22505"/><text x="4.3151%" y="1023.50">&lt;hyper_util::service::glue::TowerToHyperServiceFuture&lt;S,R&gt; as core::future::future::Future&gt;::poll</text></g><g><title>hyper_util::service::oneshot::_::_&lt;impl hyper_util::service::oneshot::Oneshot&lt;S,Req&gt;&gt;::project (4 samples, 0.01%)</title><rect x="78.3700%" y="997" width="0.0132%" height="15" fill="rgb(243,12,36)" fg:x="23732" fg:w="4"/><text x="78.6200%" y="1007.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_slices (5 samples, 0.02%)</title><rect x="78.3898%" y="1013" width="0.0165%" height="15" fill="rgb(253,128,47)" fg:x="23738" fg:w="5"/><text x="78.6398%" y="1023.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::can_read_head (7 samples, 0.02%)</title><rect x="78.4129%" y="1013" width="0.0231%" height="15" fill="rgb(207,33,20)" fg:x="23745" fg:w="7"/><text x="78.6629%" y="1023.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (15 samples, 0.05%)</title><rect x="78.4393%" y="997" width="0.0495%" height="15" fill="rgb(233,215,35)" fg:x="23753" fg:w="15"/><text x="78.6893%" y="1007.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (15 samples, 0.05%)</title><rect x="78.4393%" y="981" width="0.0495%" height="15" fill="rgb(249,188,52)" fg:x="23753" fg:w="15"/><text x="78.6893%" y="991.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (13 samples, 0.04%)</title><rect x="78.4459%" y="965" width="0.0429%" height="15" fill="rgb(225,12,32)" fg:x="23755" fg:w="13"/><text x="78.6959%" y="975.50"></text></g><g><title>_mi_malloc_generic (13 samples, 0.04%)</title><rect x="78.4459%" y="949" width="0.0429%" height="15" fill="rgb(247,98,14)" fg:x="23755" fg:w="13"/><text x="78.6959%" y="959.50"></text></g><g><title>_mi_heap_delayed_free_partial (13 samples, 0.04%)</title><rect x="78.4459%" y="933" width="0.0429%" height="15" fill="rgb(247,219,48)" fg:x="23755" fg:w="13"/><text x="78.6959%" y="943.50"></text></g><g><title>_mi_free_delayed_block (13 samples, 0.04%)</title><rect x="78.4459%" y="917" width="0.0429%" height="15" fill="rgb(253,60,48)" fg:x="23755" fg:w="13"/><text x="78.6959%" y="927.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (13 samples, 0.04%)</title><rect x="78.4459%" y="901" width="0.0429%" height="15" fill="rgb(245,15,52)" fg:x="23755" fg:w="13"/><text x="78.6959%" y="911.50"></text></g><g><title>_tlv_get_addr (9 samples, 0.03%)</title><rect x="78.5087%" y="933" width="0.0297%" height="15" fill="rgb(220,133,28)" fg:x="23774" fg:w="9"/><text x="78.7587%" y="943.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (18 samples, 0.06%)</title><rect x="78.4955%" y="981" width="0.0594%" height="15" fill="rgb(217,180,4)" fg:x="23770" fg:w="18"/><text x="78.7455%" y="991.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (17 samples, 0.06%)</title><rect x="78.4988%" y="965" width="0.0561%" height="15" fill="rgb(251,24,1)" fg:x="23771" fg:w="17"/><text x="78.7488%" y="975.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (15 samples, 0.05%)</title><rect x="78.5054%" y="949" width="0.0495%" height="15" fill="rgb(212,185,49)" fg:x="23773" fg:w="15"/><text x="78.7554%" y="959.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (5 samples, 0.02%)</title><rect x="78.5384%" y="933" width="0.0165%" height="15" fill="rgb(215,175,22)" fg:x="23783" fg:w="5"/><text x="78.7884%" y="943.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (39 samples, 0.13%)</title><rect x="78.4360%" y="1013" width="0.1288%" height="15" fill="rgb(250,205,14)" fg:x="23752" fg:w="39"/><text x="78.6860%" y="1023.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (23 samples, 0.08%)</title><rect x="78.4889%" y="997" width="0.0760%" height="15" fill="rgb(225,211,22)" fg:x="23768" fg:w="23"/><text x="78.7389%" y="1007.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write_vectored (504 samples, 1.66%)</title><rect x="78.5846%" y="933" width="1.6644%" height="15" fill="rgb(251,179,42)" fg:x="23797" fg:w="504"/><text x="78.8346%" y="943.50"></text></g><g><title>writev (504 samples, 1.66%)</title><rect x="78.5846%" y="917" width="1.6644%" height="15" fill="rgb(208,216,51)" fg:x="23797" fg:w="504"/><text x="78.8346%" y="927.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored (510 samples, 1.68%)</title><rect x="78.5846%" y="949" width="1.6842%" height="15" fill="rgb(235,36,11)" fg:x="23797" fg:w="510"/><text x="78.8346%" y="959.50"></text></g><g><title>writev (6 samples, 0.02%)</title><rect x="80.2490%" y="933" width="0.0198%" height="15" fill="rgb(213,189,28)" fg:x="24301" fg:w="6"/><text x="80.4990%" y="943.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Write&gt;::poll_write_vectored (512 samples, 1.69%)</title><rect x="78.5813%" y="997" width="1.6908%" height="15" fill="rgb(227,203,42)" fg:x="23796" fg:w="512"/><text x="78.8313%" y="1007.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (512 samples, 1.69%)</title><rect x="78.5813%" y="981" width="1.6908%" height="15" fill="rgb(244,72,36)" fg:x="23796" fg:w="512"/><text x="78.8313%" y="991.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_io (511 samples, 1.69%)</title><rect x="78.5846%" y="965" width="1.6875%" height="15" fill="rgb(213,53,17)" fg:x="23797" fg:w="511"/><text x="78.8346%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::encode::BufKind&lt;bytes::bytes::Bytes&gt;&gt; (4 samples, 0.01%)</title><rect x="80.2754%" y="997" width="0.0132%" height="15" fill="rgb(207,167,3)" fg:x="24309" fg:w="4"/><text x="80.5254%" y="1007.50"></text></g><g><title>bytes::bytes::shared_drop (4 samples, 0.01%)</title><rect x="80.2754%" y="981" width="0.0132%" height="15" fill="rgb(216,98,30)" fg:x="24309" fg:w="4"/><text x="80.5254%" y="991.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (522 samples, 1.72%)</title><rect x="78.5681%" y="1013" width="1.7238%" height="15" fill="rgb(236,123,15)" fg:x="23792" fg:w="522"/><text x="78.8181%" y="1023.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (119 samples, 0.39%)</title><rect x="80.3216%" y="917" width="0.3930%" height="15" fill="rgb(248,81,50)" fg:x="24323" fg:w="119"/><text x="80.5716%" y="927.50"></text></g><g><title>__recvfrom (118 samples, 0.39%)</title><rect x="80.3249%" y="901" width="0.3897%" height="15" fill="rgb(214,120,4)" fg:x="24324" fg:w="118"/><text x="80.5749%" y="911.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (121 samples, 0.40%)</title><rect x="80.3183%" y="933" width="0.3996%" height="15" fill="rgb(208,179,34)" fg:x="24322" fg:w="121"/><text x="80.5683%" y="943.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (122 samples, 0.40%)</title><rect x="80.3183%" y="965" width="0.4029%" height="15" fill="rgb(227,140,7)" fg:x="24322" fg:w="122"/><text x="80.5683%" y="975.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (122 samples, 0.40%)</title><rect x="80.3183%" y="949" width="0.4029%" height="15" fill="rgb(214,22,6)" fg:x="24322" fg:w="122"/><text x="80.5683%" y="959.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (130 samples, 0.43%)</title><rect x="80.3051%" y="997" width="0.4293%" height="15" fill="rgb(207,137,27)" fg:x="24318" fg:w="130"/><text x="80.5551%" y="1007.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (127 samples, 0.42%)</title><rect x="80.3150%" y="981" width="0.4194%" height="15" fill="rgb(210,8,46)" fg:x="24321" fg:w="127"/><text x="80.5650%" y="991.50"></text></g><g><title>http::uri::Uri::from_shared (6 samples, 0.02%)</title><rect x="80.7873%" y="965" width="0.0198%" height="15" fill="rgb(240,16,54)" fg:x="24464" fg:w="6"/><text x="81.0373%" y="975.50"></text></g><g><title>httparse::Request::parse_with_uninit_headers (7 samples, 0.02%)</title><rect x="80.8071%" y="965" width="0.0231%" height="15" fill="rgb(211,209,29)" fg:x="24470" fg:w="7"/><text x="81.0571%" y="975.50"></text></g><g><title>httparse::Request::parse_with_config_and_uninit_headers (7 samples, 0.02%)</title><rect x="80.8071%" y="949" width="0.0231%" height="15" fill="rgb(226,228,24)" fg:x="24470" fg:w="7"/><text x="81.0571%" y="959.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (165 samples, 0.54%)</title><rect x="80.2919%" y="1013" width="0.5449%" height="15" fill="rgb(222,84,9)" fg:x="24314" fg:w="165"/><text x="80.5419%" y="1023.50"></text></g><g><title>hyper::proto::h1::role::parse_headers (31 samples, 0.10%)</title><rect x="80.7344%" y="997" width="0.1024%" height="15" fill="rgb(234,203,30)" fg:x="24448" fg:w="31"/><text x="80.9844%" y="1007.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (31 samples, 0.10%)</title><rect x="80.7344%" y="981" width="0.1024%" height="15" fill="rgb(238,109,14)" fg:x="24448" fg:w="31"/><text x="80.9844%" y="991.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (4 samples, 0.01%)</title><rect x="80.8599%" y="1013" width="0.0132%" height="15" fill="rgb(233,206,34)" fg:x="24486" fg:w="4"/><text x="81.1099%" y="1023.50"></text></g><g><title>__commpage_gettimeofday (5 samples, 0.02%)</title><rect x="80.9194%" y="933" width="0.0165%" height="15" fill="rgb(220,167,47)" fg:x="24504" fg:w="5"/><text x="81.1694%" y="943.50"></text></g><g><title>__commpage_gettimeofday_internal (43 samples, 0.14%)</title><rect x="80.9359%" y="933" width="0.1420%" height="15" fill="rgb(238,105,10)" fg:x="24509" fg:w="43"/><text x="81.1859%" y="943.50"></text></g><g><title>mach_absolute_time (40 samples, 0.13%)</title><rect x="80.9458%" y="917" width="0.1321%" height="15" fill="rgb(213,227,17)" fg:x="24512" fg:w="40"/><text x="81.1958%" y="927.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (56 samples, 0.18%)</title><rect x="80.8962%" y="981" width="0.1849%" height="15" fill="rgb(217,132,38)" fg:x="24497" fg:w="56"/><text x="81.1462%" y="991.50"></text></g><g><title>clock_gettime (56 samples, 0.18%)</title><rect x="80.8962%" y="965" width="0.1849%" height="15" fill="rgb(242,146,4)" fg:x="24497" fg:w="56"/><text x="81.1462%" y="975.50"></text></g><g><title>gettimeofday (51 samples, 0.17%)</title><rect x="80.9128%" y="949" width="0.1684%" height="15" fill="rgb(212,61,9)" fg:x="24502" fg:w="51"/><text x="81.1628%" y="959.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (66 samples, 0.22%)</title><rect x="80.8731%" y="1013" width="0.2180%" height="15" fill="rgb(247,126,22)" fg:x="24490" fg:w="66"/><text x="81.1231%" y="1023.50"></text></g><g><title>hyper::common::date::update (64 samples, 0.21%)</title><rect x="80.8797%" y="997" width="0.2113%" height="15" fill="rgb(220,196,2)" fg:x="24492" fg:w="64"/><text x="81.1297%" y="1007.50"></text></g><g><title>hyper::body::incoming::Sender::try_send_data (5 samples, 0.02%)</title><rect x="81.1010%" y="997" width="0.0165%" height="15" fill="rgb(208,46,4)" fg:x="24559" fg:w="5"/><text x="81.3510%" y="1007.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (5 samples, 0.02%)</title><rect x="81.1010%" y="981" width="0.0165%" height="15" fill="rgb(252,104,46)" fg:x="24559" fg:w="5"/><text x="81.3510%" y="991.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (4 samples, 0.01%)</title><rect x="81.1241%" y="965" width="0.0132%" height="15" fill="rgb(237,152,48)" fg:x="24566" fg:w="4"/><text x="81.3741%" y="975.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (4 samples, 0.01%)</title><rect x="81.1241%" y="949" width="0.0132%" height="15" fill="rgb(221,59,37)" fg:x="24566" fg:w="4"/><text x="81.3741%" y="959.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (15 samples, 0.05%)</title><rect x="81.0911%" y="1013" width="0.0495%" height="15" fill="rgb(209,202,51)" fg:x="24556" fg:w="15"/><text x="81.3411%" y="1023.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (7 samples, 0.02%)</title><rect x="81.1175%" y="997" width="0.0231%" height="15" fill="rgb(228,81,30)" fg:x="24564" fg:w="7"/><text x="81.3675%" y="1007.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (7 samples, 0.02%)</title><rect x="81.1175%" y="981" width="0.0231%" height="15" fill="rgb(227,42,39)" fg:x="24564" fg:w="7"/><text x="81.3675%" y="991.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (13 samples, 0.04%)</title><rect x="81.1406%" y="1013" width="0.0429%" height="15" fill="rgb(221,26,2)" fg:x="24571" fg:w="13"/><text x="81.3906%" y="1023.50"></text></g><g><title>hyper::body::incoming::Incoming::new_channel (5 samples, 0.02%)</title><rect x="81.1670%" y="997" width="0.0165%" height="15" fill="rgb(254,61,31)" fg:x="24579" fg:w="5"/><text x="81.4170%" y="1007.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::encode (16 samples, 0.05%)</title><rect x="81.2034%" y="981" width="0.0528%" height="15" fill="rgb(222,173,38)" fg:x="24590" fg:w="16"/><text x="81.4534%" y="991.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (23 samples, 0.08%)</title><rect x="81.1835%" y="1013" width="0.0760%" height="15" fill="rgb(218,50,12)" fg:x="24584" fg:w="23"/><text x="81.4335%" y="1023.50"></text></g><g><title>hyper::proto::h1::role::encode_headers (17 samples, 0.06%)</title><rect x="81.2034%" y="997" width="0.0561%" height="15" fill="rgb(223,88,40)" fg:x="24590" fg:w="17"/><text x="81.4534%" y="1007.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (23,397 samples, 77.26%)</title><rect x="4.0189%" y="1029" width="77.2637%" height="15" fill="rgb(237,54,19)" fg:x="1217" fg:w="23397"/><text x="4.2689%" y="1039.50">&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (5 samples, 0.02%)</title><rect x="81.2661%" y="1013" width="0.0165%" height="15" fill="rgb(251,129,25)" fg:x="24609" fg:w="5"/><text x="81.5161%" y="1023.50"></text></g><g><title>&lt;hyper::server::conn::http1::UpgradeableConnection&lt;I,S&gt; as core::future::future::Future&gt;::poll (8 samples, 0.03%)</title><rect x="81.2826%" y="1029" width="0.0264%" height="15" fill="rgb(238,97,19)" fg:x="24614" fg:w="8"/><text x="81.5326%" y="1039.50"></text></g><g><title>&lt;hyper_util::server::conn::auto::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (23,412 samples, 77.31%)</title><rect x="3.9991%" y="1045" width="77.3133%" height="15" fill="rgb(240,169,18)" fg:x="1211" fg:w="23412"/><text x="4.2491%" y="1055.50">&lt;hyper_util::server::conn::auto::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll</text></g><g><title>core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt;::map_err (8 samples, 0.03%)</title><rect x="81.3123%" y="1045" width="0.0264%" height="15" fill="rgb(230,187,49)" fg:x="24623" fg:w="8"/><text x="81.5623%" y="1055.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (23,428 samples, 77.37%)</title><rect x="3.9991%" y="1061" width="77.3661%" height="15" fill="rgb(209,44,26)" fg:x="1211" fg:w="23428"/><text x="4.2491%" y="1071.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>hyper_util::server::conn::auto::_::_&lt;impl hyper_util::server::conn::auto::UpgradeableConnState&lt;I,S,E&gt;&gt;::project (8 samples, 0.03%)</title><rect x="81.3387%" y="1045" width="0.0264%" height="15" fill="rgb(244,0,6)" fg:x="24631" fg:w="8"/><text x="81.5887%" y="1055.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.02%)</title><rect x="81.3685%" y="1045" width="0.0165%" height="15" fill="rgb(248,18,21)" fg:x="24640" fg:w="5"/><text x="81.6185%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::task::coop::RestoreOnPending&gt; (5 samples, 0.02%)</title><rect x="81.3949%" y="1045" width="0.0165%" height="15" fill="rgb(245,180,19)" fg:x="24648" fg:w="5"/><text x="81.6449%" y="1055.50"></text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="81.3949%" y="1029" width="0.0165%" height="15" fill="rgb(252,118,36)" fg:x="24648" fg:w="5"/><text x="81.6449%" y="1039.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (31 samples, 0.10%)</title><rect x="81.3652%" y="1061" width="0.1024%" height="15" fill="rgb(210,224,19)" fg:x="24639" fg:w="31"/><text x="81.6152%" y="1071.50"></text></g><g><title>tokio::sync::watch::Sender&lt;T&gt;::closed::_{{closure}}::_{{closure}} (16 samples, 0.05%)</title><rect x="81.4147%" y="1045" width="0.0528%" height="15" fill="rgb(218,30,24)" fg:x="24654" fg:w="16"/><text x="81.6647%" y="1055.50"></text></g><g><title>tokio::sync::notify::Notified::poll_notified (13 samples, 0.04%)</title><rect x="81.4246%" y="1029" width="0.0429%" height="15" fill="rgb(219,75,50)" fg:x="24657" fg:w="13"/><text x="81.6746%" y="1039.50"></text></g><g><title>axum::serve::handle_connection::_{{closure}}::_{{closure}}::_{{closure}} (14 samples, 0.05%)</title><rect x="81.4675%" y="1061" width="0.0462%" height="15" fill="rgb(234,72,50)" fg:x="24670" fg:w="14"/><text x="81.7175%" y="1071.50"></text></g><g><title>tokio::macros::support::thread_rng_n (8 samples, 0.03%)</title><rect x="81.4874%" y="1045" width="0.0264%" height="15" fill="rgb(219,100,48)" fg:x="24676" fg:w="8"/><text x="81.7374%" y="1055.50"></text></g><g><title>_tlv_get_addr (8 samples, 0.03%)</title><rect x="81.4874%" y="1029" width="0.0264%" height="15" fill="rgb(253,5,41)" fg:x="24676" fg:w="8"/><text x="81.7374%" y="1039.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.02%)</title><rect x="81.5138%" y="1061" width="0.0165%" height="15" fill="rgb(247,181,11)" fg:x="24684" fg:w="5"/><text x="81.7638%" y="1071.50"></text></g><g><title>_tlv_get_addr (5 samples, 0.02%)</title><rect x="81.5138%" y="1045" width="0.0165%" height="15" fill="rgb(222,223,25)" fg:x="24684" fg:w="5"/><text x="81.7638%" y="1055.50"></text></g><g><title>axum::serve::handle_connection::_{{closure}}::_{{closure}} (23,510 samples, 77.64%)</title><rect x="3.9198%" y="1077" width="77.6369%" height="15" fill="rgb(214,198,28)" fg:x="1187" fg:w="23510"/><text x="4.1698%" y="1087.50">axum::serve::handle_connection::_{{closure}}::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (23,522 samples, 77.68%)</title><rect x="3.8901%" y="1093" width="77.6765%" height="15" fill="rgb(230,46,43)" fg:x="1178" fg:w="23522"/><text x="4.1401%" y="1103.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="82.3360%" y="997" width="0.0165%" height="15" fill="rgb(233,65,53)" fg:x="24933" fg:w="5"/><text x="82.5860%" y="1007.50"></text></g><g><title>_tlv_get_addr (5 samples, 0.02%)</title><rect x="82.3360%" y="981" width="0.0165%" height="15" fill="rgb(221,121,27)" fg:x="24933" fg:w="5"/><text x="82.5860%" y="991.50"></text></g><g><title>_tlv_get_addr (5 samples, 0.02%)</title><rect x="82.3526%" y="997" width="0.0165%" height="15" fill="rgb(247,70,47)" fg:x="24938" fg:w="5"/><text x="82.6026%" y="1007.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (28 samples, 0.09%)</title><rect x="82.2832%" y="1013" width="0.0925%" height="15" fill="rgb(228,85,35)" fg:x="24917" fg:w="28"/><text x="82.5332%" y="1023.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="82.4054%" y="981" width="0.0132%" height="15" fill="rgb(209,50,18)" fg:x="24954" fg:w="4"/><text x="82.6554%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::dispatch::Callback&lt;http::request::Request&lt;http_body_util::full::Full&lt;bytes::bytes::Bytes&gt;&gt;,http::response::Response&lt;hyper::body::incoming::Incoming&gt;&gt;&gt; (6 samples, 0.02%)</title><rect x="82.4186%" y="981" width="0.0198%" height="15" fill="rgb(250,19,35)" fg:x="24958" fg:w="6"/><text x="82.6686%" y="991.50"></text></g><g><title>_tlv_get_addr (6 samples, 0.02%)</title><rect x="82.5276%" y="901" width="0.0198%" height="15" fill="rgb(253,107,29)" fg:x="24991" fg:w="6"/><text x="82.7776%" y="911.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (21 samples, 0.07%)</title><rect x="82.4946%" y="933" width="0.0693%" height="15" fill="rgb(252,179,29)" fg:x="24981" fg:w="21"/><text x="82.7446%" y="943.50"></text></g><g><title>tokio::runtime::context::with_scheduler (18 samples, 0.06%)</title><rect x="82.5045%" y="917" width="0.0594%" height="15" fill="rgb(238,194,6)" fg:x="24984" fg:w="18"/><text x="82.7545%" y="927.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (5 samples, 0.02%)</title><rect x="82.5474%" y="901" width="0.0165%" height="15" fill="rgb(238,164,29)" fg:x="24997" fg:w="5"/><text x="82.7974%" y="911.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (45 samples, 0.15%)</title><rect x="82.4417%" y="965" width="0.1486%" height="15" fill="rgb(224,25,9)" fg:x="24965" fg:w="45"/><text x="82.6917%" y="975.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (31 samples, 0.10%)</title><rect x="82.4879%" y="949" width="0.1024%" height="15" fill="rgb(244,153,23)" fg:x="24979" fg:w="31"/><text x="82.7379%" y="959.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (7 samples, 0.02%)</title><rect x="82.5672%" y="933" width="0.0231%" height="15" fill="rgb(212,203,14)" fg:x="25003" fg:w="7"/><text x="82.8172%" y="943.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::send (60 samples, 0.20%)</title><rect x="82.4021%" y="997" width="0.1981%" height="15" fill="rgb(220,164,20)" fg:x="24953" fg:w="60"/><text x="82.6521%" y="1007.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (49 samples, 0.16%)</title><rect x="82.4384%" y="981" width="0.1618%" height="15" fill="rgb(222,203,48)" fg:x="24964" fg:w="49"/><text x="82.6884%" y="991.50"></text></g><g><title>hyper::proto::MessageHead&lt;http::status::StatusCode&gt;::into_response (20 samples, 0.07%)</title><rect x="82.6002%" y="997" width="0.0660%" height="15" fill="rgb(215,159,22)" fg:x="25013" fg:w="20"/><text x="82.8502%" y="1007.50"></text></g><g><title>http::response::Parts::new (12 samples, 0.04%)</title><rect x="82.6266%" y="981" width="0.0396%" height="15" fill="rgb(216,183,47)" fg:x="25021" fg:w="12"/><text x="82.8766%" y="991.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (89 samples, 0.29%)</title><rect x="82.3757%" y="1013" width="0.2939%" height="15" fill="rgb(229,195,25)" fg:x="24945" fg:w="89"/><text x="82.6257%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Sender&gt; (8 samples, 0.03%)</title><rect x="82.6696%" y="1013" width="0.0264%" height="15" fill="rgb(224,132,51)" fg:x="25034" fg:w="8"/><text x="82.9196%" y="1023.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (7 samples, 0.02%)</title><rect x="82.8380%" y="917" width="0.0231%" height="15" fill="rgb(240,63,7)" fg:x="25085" fg:w="7"/><text x="83.0880%" y="927.50"></text></g><g><title>_mi_heap_delayed_free_partial (8 samples, 0.03%)</title><rect x="82.8380%" y="949" width="0.0264%" height="15" fill="rgb(249,182,41)" fg:x="25085" fg:w="8"/><text x="83.0880%" y="959.50"></text></g><g><title>_mi_free_delayed_block (8 samples, 0.03%)</title><rect x="82.8380%" y="933" width="0.0264%" height="15" fill="rgb(243,47,26)" fg:x="25085" fg:w="8"/><text x="83.0880%" y="943.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (16 samples, 0.05%)</title><rect x="82.8347%" y="981" width="0.0528%" height="15" fill="rgb(233,48,2)" fg:x="25084" fg:w="16"/><text x="83.0847%" y="991.50"></text></g><g><title>_mi_malloc_generic (15 samples, 0.05%)</title><rect x="82.8380%" y="965" width="0.0495%" height="15" fill="rgb(244,165,34)" fg:x="25085" fg:w="15"/><text x="83.0880%" y="975.50"></text></g><g><title>mi_find_page (7 samples, 0.02%)</title><rect x="82.8644%" y="949" width="0.0231%" height="15" fill="rgb(207,89,7)" fg:x="25093" fg:w="7"/><text x="83.1144%" y="959.50"></text></g><g><title>futures_channel::mpsc::channel (44 samples, 0.15%)</title><rect x="82.7984%" y="997" width="0.1453%" height="15" fill="rgb(244,117,36)" fg:x="25073" fg:w="44"/><text x="83.0484%" y="1007.50"></text></g><g><title>mi_malloc_aligned (17 samples, 0.06%)</title><rect x="82.8875%" y="981" width="0.0561%" height="15" fill="rgb(226,144,34)" fg:x="25100" fg:w="17"/><text x="83.1375%" y="991.50"></text></g><g><title>_mi_heap_delayed_free_partial (4 samples, 0.01%)</title><rect x="82.9437%" y="965" width="0.0132%" height="15" fill="rgb(213,23,19)" fg:x="25117" fg:w="4"/><text x="83.1937%" y="975.50"></text></g><g><title>_mi_free_delayed_block (4 samples, 0.01%)</title><rect x="82.9437%" y="949" width="0.0132%" height="15" fill="rgb(217,75,12)" fg:x="25117" fg:w="4"/><text x="83.1937%" y="959.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (5 samples, 0.02%)</title><rect x="82.9437%" y="997" width="0.0165%" height="15" fill="rgb(224,159,17)" fg:x="25117" fg:w="5"/><text x="83.1937%" y="1007.50"></text></g><g><title>_mi_malloc_generic (5 samples, 0.02%)</title><rect x="82.9437%" y="981" width="0.0165%" height="15" fill="rgb(217,118,1)" fg:x="25117" fg:w="5"/><text x="83.1937%" y="991.50"></text></g><g><title>hyper::body::incoming::Incoming::new_channel (84 samples, 0.28%)</title><rect x="82.7026%" y="1013" width="0.2774%" height="15" fill="rgb(232,180,48)" fg:x="25044" fg:w="84"/><text x="82.9526%" y="1023.50"></text></g><g><title>mi_malloc_aligned (6 samples, 0.02%)</title><rect x="82.9602%" y="997" width="0.0198%" height="15" fill="rgb(230,27,33)" fg:x="25122" fg:w="6"/><text x="83.2102%" y="1007.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (5 samples, 0.02%)</title><rect x="82.9800%" y="997" width="0.0165%" height="15" fill="rgb(205,31,21)" fg:x="25128" fg:w="5"/><text x="83.2300%" y="1007.50"></text></g><g><title>hyper::body::incoming::Sender::poll_ready (19 samples, 0.06%)</title><rect x="82.9800%" y="1013" width="0.0627%" height="15" fill="rgb(253,59,4)" fg:x="25128" fg:w="19"/><text x="83.2300%" y="1023.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (14 samples, 0.05%)</title><rect x="82.9965%" y="997" width="0.0462%" height="15" fill="rgb(224,201,9)" fg:x="25133" fg:w="14"/><text x="83.2465%" y="1007.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (6 samples, 0.02%)</title><rect x="83.0890%" y="981" width="0.0198%" height="15" fill="rgb(229,206,30)" fg:x="25161" fg:w="6"/><text x="83.3390%" y="991.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (4 samples, 0.01%)</title><rect x="83.1154%" y="933" width="0.0132%" height="15" fill="rgb(212,67,47)" fg:x="25169" fg:w="4"/><text x="83.3654%" y="943.50"></text></g><g><title>tokio::runtime::context::with_scheduler (4 samples, 0.01%)</title><rect x="83.1154%" y="917" width="0.0132%" height="15" fill="rgb(211,96,50)" fg:x="25169" fg:w="4"/><text x="83.3654%" y="927.50"></text></g><g><title>futures_util::stream::futures_unordered::task::waker_ref::wake_arc_raw (8 samples, 0.03%)</title><rect x="83.1088%" y="981" width="0.0264%" height="15" fill="rgb(252,114,18)" fg:x="25167" fg:w="8"/><text x="83.3588%" y="991.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (7 samples, 0.02%)</title><rect x="83.1121%" y="965" width="0.0231%" height="15" fill="rgb(223,58,37)" fg:x="25168" fg:w="7"/><text x="83.3621%" y="975.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (6 samples, 0.02%)</title><rect x="83.1154%" y="949" width="0.0198%" height="15" fill="rgb(237,70,4)" fg:x="25169" fg:w="6"/><text x="83.3654%" y="959.50"></text></g><g><title>pthread_mutex_unlock (4 samples, 0.01%)</title><rect x="83.1517%" y="981" width="0.0132%" height="15" fill="rgb(244,85,46)" fg:x="25180" fg:w="4"/><text x="83.4017%" y="991.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="83.1880%" y="965" width="0.0132%" height="15" fill="rgb(223,39,52)" fg:x="25191" fg:w="4"/><text x="83.4380%" y="975.50"></text></g><g><title>_mi_malloc_generic (4 samples, 0.01%)</title><rect x="83.1880%" y="949" width="0.0132%" height="15" fill="rgb(218,200,14)" fg:x="25191" fg:w="4"/><text x="83.4380%" y="959.50"></text></g><g><title>_mi_heap_delayed_free_partial (4 samples, 0.01%)</title><rect x="83.1880%" y="933" width="0.0132%" height="15" fill="rgb(208,171,16)" fg:x="25191" fg:w="4"/><text x="83.4380%" y="943.50"></text></g><g><title>_mi_free_delayed_block (4 samples, 0.01%)</title><rect x="83.1880%" y="917" width="0.0132%" height="15" fill="rgb(234,200,18)" fg:x="25191" fg:w="4"/><text x="83.4380%" y="927.50"></text></g><g><title>pthread_mutex_init (8 samples, 0.03%)</title><rect x="83.2111%" y="949" width="0.0264%" height="15" fill="rgb(228,45,11)" fg:x="25198" fg:w="8"/><text x="83.4611%" y="959.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (57 samples, 0.19%)</title><rect x="83.0592%" y="997" width="0.1882%" height="15" fill="rgb(237,182,11)" fg:x="25152" fg:w="57"/><text x="83.3092%" y="1007.50"></text></g><g><title>std::sys::sync::once_box::OnceBox&lt;T&gt;::initialize (22 samples, 0.07%)</title><rect x="83.1748%" y="981" width="0.0727%" height="15" fill="rgb(241,175,49)" fg:x="25187" fg:w="22"/><text x="83.4248%" y="991.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::init (13 samples, 0.04%)</title><rect x="83.2045%" y="965" width="0.0429%" height="15" fill="rgb(247,38,35)" fg:x="25196" fg:w="13"/><text x="83.4545%" y="975.50"></text></g><g><title>hyper::body::incoming::Sender::try_send_data (63 samples, 0.21%)</title><rect x="83.0427%" y="1013" width="0.2080%" height="15" fill="rgb(228,39,49)" fg:x="25147" fg:w="63"/><text x="83.2927%" y="1023.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (6 samples, 0.02%)</title><rect x="83.2871%" y="997" width="0.0198%" height="15" fill="rgb(226,101,26)" fg:x="25221" fg:w="6"/><text x="83.5371%" y="1007.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (6 samples, 0.02%)</title><rect x="83.2871%" y="981" width="0.0198%" height="15" fill="rgb(206,141,19)" fg:x="25221" fg:w="6"/><text x="83.5371%" y="991.50"></text></g><g><title>tokio::runtime::context::with_scheduler (6 samples, 0.02%)</title><rect x="83.2871%" y="965" width="0.0198%" height="15" fill="rgb(211,200,13)" fg:x="25221" fg:w="6"/><text x="83.5371%" y="975.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (5 samples, 0.02%)</title><rect x="83.2904%" y="949" width="0.0165%" height="15" fill="rgb(241,121,6)" fg:x="25222" fg:w="5"/><text x="83.5404%" y="959.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (5 samples, 0.02%)</title><rect x="83.2904%" y="933" width="0.0165%" height="15" fill="rgb(234,221,29)" fg:x="25222" fg:w="5"/><text x="83.5404%" y="943.50"></text></g><g><title>pthread_cond_signal (4 samples, 0.01%)</title><rect x="83.2937%" y="917" width="0.0132%" height="15" fill="rgb(229,136,5)" fg:x="25223" fg:w="4"/><text x="83.5437%" y="927.50"></text></g><g><title>__psynch_cvsignal (4 samples, 0.01%)</title><rect x="83.2937%" y="901" width="0.0132%" height="15" fill="rgb(238,36,11)" fg:x="25223" fg:w="4"/><text x="83.5437%" y="911.50"></text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (14 samples, 0.05%)</title><rect x="83.3697%" y="981" width="0.0462%" height="15" fill="rgb(251,55,41)" fg:x="25246" fg:w="14"/><text x="83.6197%" y="991.50"></text></g><g><title>_platform_memmove (12 samples, 0.04%)</title><rect x="83.4159%" y="981" width="0.0396%" height="15" fill="rgb(242,34,40)" fg:x="25260" fg:w="12"/><text x="83.6659%" y="991.50"></text></g><g><title>_tlv_get_addr (11 samples, 0.04%)</title><rect x="83.4555%" y="981" width="0.0363%" height="15" fill="rgb(215,42,17)" fg:x="25272" fg:w="11"/><text x="83.7055%" y="991.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (60 samples, 0.20%)</title><rect x="83.4918%" y="981" width="0.1981%" height="15" fill="rgb(207,44,46)" fg:x="25283" fg:w="60"/><text x="83.7418%" y="991.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (123 samples, 0.41%)</title><rect x="83.3069%" y="997" width="0.4062%" height="15" fill="rgb(211,206,28)" fg:x="25227" fg:w="123"/><text x="83.5569%" y="1007.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (7 samples, 0.02%)</title><rect x="83.6900%" y="981" width="0.0231%" height="15" fill="rgb(237,167,16)" fg:x="25343" fg:w="7"/><text x="83.9400%" y="991.50"></text></g><g><title>hyper::client::dispatch::Receiver&lt;T,U&gt;::poll_recv (141 samples, 0.47%)</title><rect x="83.2508%" y="1013" width="0.4656%" height="15" fill="rgb(233,66,6)" fg:x="25210" fg:w="141"/><text x="83.5008%" y="1023.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 0.07%)</title><rect x="83.8452%" y="981" width="0.0660%" height="15" fill="rgb(246,123,29)" fg:x="25390" fg:w="20"/><text x="84.0952%" y="991.50"></text></g><g><title>&lt;hyper::proto::h1::encode::EncodedBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (4 samples, 0.01%)</title><rect x="83.9112%" y="981" width="0.0132%" height="15" fill="rgb(209,62,40)" fg:x="25410" fg:w="4"/><text x="84.1612%" y="991.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write_vectored (1,867 samples, 6.17%)</title><rect x="83.9443%" y="933" width="6.1654%" height="15" fill="rgb(218,4,25)" fg:x="25420" fg:w="1867"/><text x="84.1943%" y="943.50">&lt;&amp;std::f..</text></g><g><title>writev (1,861 samples, 6.15%)</title><rect x="83.9641%" y="917" width="6.1456%" height="15" fill="rgb(253,91,49)" fg:x="25426" fg:w="1861"/><text x="84.2141%" y="927.50">writev</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored (1,892 samples, 6.25%)</title><rect x="83.9410%" y="949" width="6.2479%" height="15" fill="rgb(228,155,29)" fg:x="25419" fg:w="1892"/><text x="84.1910%" y="959.50">&lt;&amp;mio::n..</text></g><g><title>writev (24 samples, 0.08%)</title><rect x="90.1096%" y="933" width="0.0793%" height="15" fill="rgb(243,57,37)" fg:x="27287" fg:w="24"/><text x="90.3596%" y="943.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (4 samples, 0.01%)</title><rect x="90.1889%" y="949" width="0.0132%" height="15" fill="rgb(244,167,17)" fg:x="27311" fg:w="4"/><text x="90.4389%" y="959.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (1,902 samples, 6.28%)</title><rect x="83.9244%" y="981" width="6.2810%" height="15" fill="rgb(207,181,38)" fg:x="25414" fg:w="1902"/><text x="84.1744%" y="991.50">&lt;tokio::..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_io (1,901 samples, 6.28%)</title><rect x="83.9277%" y="965" width="6.2777%" height="15" fill="rgb(211,8,23)" fg:x="25415" fg:w="1901"/><text x="84.1777%" y="975.50">tokio::r..</text></g><g><title>mi_free (7 samples, 0.02%)</title><rect x="90.2285%" y="965" width="0.0231%" height="15" fill="rgb(235,11,44)" fg:x="27323" fg:w="7"/><text x="90.4785%" y="975.50"></text></g><g><title>mi_free_block_delayed_mt (5 samples, 0.02%)</title><rect x="90.2516%" y="965" width="0.0165%" height="15" fill="rgb(248,18,52)" fg:x="27330" fg:w="5"/><text x="90.5016%" y="975.50"></text></g><g><title>bytes::bytes::shared_drop (20 samples, 0.07%)</title><rect x="90.2054%" y="981" width="0.0660%" height="15" fill="rgb(208,4,7)" fg:x="27316" fg:w="20"/><text x="90.4554%" y="991.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (1,987 samples, 6.56%)</title><rect x="83.7197%" y="1013" width="6.5617%" height="15" fill="rgb(240,17,39)" fg:x="25352" fg:w="1987"/><text x="83.9697%" y="1023.50">hyper::pr..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (1,981 samples, 6.54%)</title><rect x="83.7395%" y="997" width="6.5418%" height="15" fill="rgb(207,170,3)" fg:x="25358" fg:w="1981"/><text x="83.9895%" y="1007.50">hyper::pr..</text></g><g><title>_mi_free_delayed_block.cold.1 (44 samples, 0.15%)</title><rect x="90.3606%" y="885" width="0.1453%" height="15" fill="rgb(236,100,52)" fg:x="27363" fg:w="44"/><text x="90.6106%" y="895.50"></text></g><g><title>_mi_heap_delayed_free_partial (46 samples, 0.15%)</title><rect x="90.3606%" y="917" width="0.1519%" height="15" fill="rgb(246,78,51)" fg:x="27363" fg:w="46"/><text x="90.6106%" y="927.50"></text></g><g><title>_mi_free_delayed_block (46 samples, 0.15%)</title><rect x="90.3606%" y="901" width="0.1519%" height="15" fill="rgb(211,17,15)" fg:x="27363" fg:w="46"/><text x="90.6106%" y="911.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (52 samples, 0.17%)</title><rect x="90.3573%" y="949" width="0.1717%" height="15" fill="rgb(209,59,46)" fg:x="27362" fg:w="52"/><text x="90.6073%" y="959.50"></text></g><g><title>_mi_malloc_generic (52 samples, 0.17%)</title><rect x="90.3573%" y="933" width="0.1717%" height="15" fill="rgb(210,92,25)" fg:x="27362" fg:w="52"/><text x="90.6073%" y="943.50"></text></g><g><title>mi_find_page (5 samples, 0.02%)</title><rect x="90.5125%" y="917" width="0.0165%" height="15" fill="rgb(238,174,52)" fg:x="27409" fg:w="5"/><text x="90.7625%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (59 samples, 0.19%)</title><rect x="90.3408%" y="965" width="0.1948%" height="15" fill="rgb(230,73,7)" fg:x="27357" fg:w="59"/><text x="90.5908%" y="975.50"></text></g><g><title>_tlv_get_addr (5 samples, 0.02%)</title><rect x="90.5422%" y="933" width="0.0165%" height="15" fill="rgb(243,124,40)" fg:x="27418" fg:w="5"/><text x="90.7922%" y="943.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (71 samples, 0.23%)</title><rect x="90.3342%" y="997" width="0.2345%" height="15" fill="rgb(244,170,11)" fg:x="27355" fg:w="71"/><text x="90.5842%" y="1007.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (69 samples, 0.23%)</title><rect x="90.3408%" y="981" width="0.2279%" height="15" fill="rgb(207,114,54)" fg:x="27357" fg:w="69"/><text x="90.5908%" y="991.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (10 samples, 0.03%)</title><rect x="90.5356%" y="965" width="0.0330%" height="15" fill="rgb(205,42,20)" fg:x="27416" fg:w="10"/><text x="90.7856%" y="975.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (8 samples, 0.03%)</title><rect x="90.5422%" y="949" width="0.0264%" height="15" fill="rgb(230,30,28)" fg:x="27418" fg:w="8"/><text x="90.7922%" y="959.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (20 samples, 0.07%)</title><rect x="90.5918%" y="965" width="0.0660%" height="15" fill="rgb(205,73,54)" fg:x="27433" fg:w="20"/><text x="90.8418%" y="975.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (4 samples, 0.01%)</title><rect x="90.6446%" y="949" width="0.0132%" height="15" fill="rgb(254,227,23)" fg:x="27449" fg:w="4"/><text x="90.8946%" y="959.50"></text></g><g><title>_mi_heap_delayed_free_partial (29 samples, 0.10%)</title><rect x="90.6710%" y="901" width="0.0958%" height="15" fill="rgb(228,202,34)" fg:x="27457" fg:w="29"/><text x="90.9210%" y="911.50"></text></g><g><title>_mi_free_delayed_block (29 samples, 0.10%)</title><rect x="90.6710%" y="885" width="0.0958%" height="15" fill="rgb(222,225,37)" fg:x="27457" fg:w="29"/><text x="90.9210%" y="895.50"></text></g><g><title>_mi_free_delayed_block.cold.1 (29 samples, 0.10%)</title><rect x="90.6710%" y="869" width="0.0958%" height="15" fill="rgb(221,14,54)" fg:x="27457" fg:w="29"/><text x="90.9210%" y="879.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (33 samples, 0.11%)</title><rect x="90.6644%" y="949" width="0.1090%" height="15" fill="rgb(254,102,2)" fg:x="27455" fg:w="33"/><text x="90.9144%" y="959.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_generic (33 samples, 0.11%)</title><rect x="90.6644%" y="933" width="0.1090%" height="15" fill="rgb(232,104,17)" fg:x="27455" fg:w="33"/><text x="90.9144%" y="943.50"></text></g><g><title>_mi_malloc_generic (32 samples, 0.11%)</title><rect x="90.6677%" y="917" width="0.1057%" height="15" fill="rgb(250,220,14)" fg:x="27456" fg:w="32"/><text x="90.9177%" y="927.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (317 samples, 1.05%)</title><rect x="90.7767%" y="917" width="1.0468%" height="15" fill="rgb(241,158,9)" fg:x="27489" fg:w="317"/><text x="91.0267%" y="927.50"></text></g><g><title>__recvfrom (317 samples, 1.05%)</title><rect x="90.7767%" y="901" width="1.0468%" height="15" fill="rgb(246,9,43)" fg:x="27489" fg:w="317"/><text x="91.0267%" y="911.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (319 samples, 1.05%)</title><rect x="90.7767%" y="933" width="1.0534%" height="15" fill="rgb(206,73,33)" fg:x="27489" fg:w="319"/><text x="91.0267%" y="943.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (356 samples, 1.18%)</title><rect x="90.6578%" y="965" width="1.1756%" height="15" fill="rgb(222,79,8)" fg:x="27453" fg:w="356"/><text x="90.9078%" y="975.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (320 samples, 1.06%)</title><rect x="90.7767%" y="949" width="1.0567%" height="15" fill="rgb(234,8,54)" fg:x="27489" fg:w="320"/><text x="91.0267%" y="959.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (471 samples, 1.56%)</title><rect x="90.2814%" y="1013" width="1.5554%" height="15" fill="rgb(209,134,38)" fg:x="27339" fg:w="471"/><text x="90.5314%" y="1023.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (384 samples, 1.27%)</title><rect x="90.5687%" y="997" width="1.2681%" height="15" fill="rgb(230,127,29)" fg:x="27426" fg:w="384"/><text x="90.8187%" y="1007.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (382 samples, 1.26%)</title><rect x="90.5753%" y="981" width="1.2615%" height="15" fill="rgb(242,44,41)" fg:x="27428" fg:w="382"/><text x="90.8253%" y="991.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get (11 samples, 0.04%)</title><rect x="91.8665%" y="997" width="0.0363%" height="15" fill="rgb(222,56,43)" fg:x="27819" fg:w="11"/><text x="92.1165%" y="1007.50"></text></g><g><title>http::header::map::hash_elem_using (4 samples, 0.01%)</title><rect x="91.8896%" y="981" width="0.0132%" height="15" fill="rgb(238,39,47)" fg:x="27826" fg:w="4"/><text x="92.1396%" y="991.50"></text></g><g><title>bytes::bytes::Bytes::slice (12 samples, 0.04%)</title><rect x="92.0646%" y="965" width="0.0396%" height="15" fill="rgb(226,79,43)" fg:x="27879" fg:w="12"/><text x="92.3146%" y="975.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (4 samples, 0.01%)</title><rect x="92.0910%" y="949" width="0.0132%" height="15" fill="rgb(242,105,53)" fg:x="27887" fg:w="4"/><text x="92.3410%" y="959.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (10 samples, 0.03%)</title><rect x="92.1075%" y="965" width="0.0330%" height="15" fill="rgb(251,132,46)" fg:x="27892" fg:w="10"/><text x="92.3575%" y="975.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::contains_key (9 samples, 0.03%)</title><rect x="92.1438%" y="965" width="0.0297%" height="15" fill="rgb(231,77,14)" fg:x="27903" fg:w="9"/><text x="92.3938%" y="975.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert_entry (7 samples, 0.02%)</title><rect x="92.2099%" y="949" width="0.0231%" height="15" fill="rgb(240,135,9)" fg:x="27923" fg:w="7"/><text x="92.4599%" y="959.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_append2 (20 samples, 0.07%)</title><rect x="92.1769%" y="965" width="0.0660%" height="15" fill="rgb(248,109,14)" fg:x="27913" fg:w="20"/><text x="92.4269%" y="975.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (41 samples, 0.14%)</title><rect x="92.2495%" y="965" width="0.1354%" height="15" fill="rgb(227,146,52)" fg:x="27935" fg:w="41"/><text x="92.4995%" y="975.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (21 samples, 0.07%)</title><rect x="92.3156%" y="949" width="0.0693%" height="15" fill="rgb(232,54,3)" fg:x="27955" fg:w="21"/><text x="92.5656%" y="959.50"></text></g><g><title>http::status::StatusCode::canonical_reason (5 samples, 0.02%)</title><rect x="92.3849%" y="965" width="0.0165%" height="15" fill="rgb(229,201,43)" fg:x="27976" fg:w="5"/><text x="92.6349%" y="975.50"></text></g><g><title>httparse::parse_headers_iter_uninit (36 samples, 0.12%)</title><rect x="92.4510%" y="949" width="0.1189%" height="15" fill="rgb(252,161,33)" fg:x="27996" fg:w="36"/><text x="92.7010%" y="959.50"></text></g><g><title>httparse::Response::parse_with_config_and_uninit_headers (55 samples, 0.18%)</title><rect x="92.4047%" y="965" width="0.1816%" height="15" fill="rgb(226,146,40)" fg:x="27982" fg:w="55"/><text x="92.6547%" y="975.50"></text></g><g><title>httparse::parse_reason (5 samples, 0.02%)</title><rect x="92.5698%" y="949" width="0.0165%" height="15" fill="rgb(219,47,25)" fg:x="28032" fg:w="5"/><text x="92.8198%" y="959.50"></text></g><g><title>core::str::_&lt;impl str&gt;::trim_matches (5 samples, 0.02%)</title><rect x="92.5996%" y="949" width="0.0165%" height="15" fill="rgb(250,135,13)" fg:x="28041" fg:w="5"/><text x="92.8496%" y="959.50"></text></g><g><title>hyper::headers::content_length_parse_all (18 samples, 0.06%)</title><rect x="92.5864%" y="965" width="0.0594%" height="15" fill="rgb(219,229,18)" fg:x="28037" fg:w="18"/><text x="92.8364%" y="975.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get_all (6 samples, 0.02%)</title><rect x="92.6260%" y="949" width="0.0198%" height="15" fill="rgb(217,152,27)" fg:x="28049" fg:w="6"/><text x="92.8760%" y="959.50"></text></g><g><title>&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::parse (220 samples, 0.73%)</title><rect x="91.9259%" y="981" width="0.7265%" height="15" fill="rgb(225,71,47)" fg:x="27837" fg:w="220"/><text x="92.1759%" y="991.50"></text></g><g><title>__recvfrom (1,739 samples, 5.74%)</title><rect x="92.7449%" y="917" width="5.7427%" height="15" fill="rgb(220,139,14)" fg:x="28085" fg:w="1739"/><text x="92.9949%" y="927.50">__recvf..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1,742 samples, 5.75%)</title><rect x="92.7383%" y="933" width="5.7526%" height="15" fill="rgb(247,54,32)" fg:x="28083" fg:w="1742"/><text x="92.9883%" y="943.50">&lt;&amp;std::..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1,755 samples, 5.80%)</title><rect x="92.7317%" y="949" width="5.7955%" height="15" fill="rgb(252,131,39)" fg:x="28081" fg:w="1755"/><text x="92.9817%" y="959.50">&lt;&amp;mio::..</text></g><g><title>__recvfrom (11 samples, 0.04%)</title><rect x="98.4909%" y="933" width="0.0363%" height="15" fill="rgb(210,108,39)" fg:x="29825" fg:w="11"/><text x="98.7409%" y="943.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (29 samples, 0.10%)</title><rect x="98.5272%" y="949" width="0.0958%" height="15" fill="rgb(205,23,29)" fg:x="29836" fg:w="29"/><text x="98.7772%" y="959.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1,806 samples, 5.96%)</title><rect x="92.6623%" y="981" width="5.9639%" height="15" fill="rgb(246,139,46)" fg:x="28060" fg:w="1806"/><text x="92.9123%" y="991.50">hyper::p..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1,798 samples, 5.94%)</title><rect x="92.6887%" y="965" width="5.9375%" height="15" fill="rgb(250,81,26)" fg:x="28068" fg:w="1798"/><text x="92.9387%" y="975.50">tokio::i..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (2,057 samples, 6.79%)</title><rect x="91.8367%" y="1013" width="6.7928%" height="15" fill="rgb(214,104,7)" fg:x="27810" fg:w="2057"/><text x="92.0867%" y="1023.50">hyper::pr..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (2,037 samples, 6.73%)</title><rect x="91.9028%" y="997" width="6.7268%" height="15" fill="rgb(233,189,8)" fg:x="27830" fg:w="2037"/><text x="92.1528%" y="1007.50">hyper::pr..</text></g><g><title>_tlv_get_addr (12 samples, 0.04%)</title><rect x="98.7682%" y="949" width="0.0396%" height="15" fill="rgb(228,141,17)" fg:x="29909" fg:w="12"/><text x="99.0182%" y="959.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (82 samples, 0.27%)</title><rect x="98.6461%" y="997" width="0.2708%" height="15" fill="rgb(247,157,1)" fg:x="29872" fg:w="82"/><text x="98.8961%" y="1007.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (73 samples, 0.24%)</title><rect x="98.6758%" y="981" width="0.2411%" height="15" fill="rgb(249,225,5)" fg:x="29881" fg:w="73"/><text x="98.9258%" y="991.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (55 samples, 0.18%)</title><rect x="98.7352%" y="965" width="0.1816%" height="15" fill="rgb(242,55,13)" fg:x="29899" fg:w="55"/><text x="98.9852%" y="975.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (33 samples, 0.11%)</title><rect x="98.8079%" y="949" width="0.1090%" height="15" fill="rgb(230,49,50)" fg:x="29921" fg:w="33"/><text x="99.0579%" y="959.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (88 samples, 0.29%)</title><rect x="98.6295%" y="1013" width="0.2906%" height="15" fill="rgb(241,111,38)" fg:x="29867" fg:w="88"/><text x="98.8795%" y="1023.50"></text></g><g><title>hyper::proto::h1::encode::Encoder::encode_and_end (5 samples, 0.02%)</title><rect x="98.9301%" y="997" width="0.0165%" height="15" fill="rgb(252,155,4)" fg:x="29958" fg:w="5"/><text x="99.1801%" y="1007.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (4 samples, 0.01%)</title><rect x="98.9334%" y="981" width="0.0132%" height="15" fill="rgb(212,69,32)" fg:x="29959" fg:w="4"/><text x="99.1834%" y="991.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_body_and_end (9 samples, 0.03%)</title><rect x="98.9202%" y="1013" width="0.0297%" height="15" fill="rgb(243,107,47)" fg:x="29955" fg:w="9"/><text x="99.1702%" y="1023.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (29 samples, 0.10%)</title><rect x="99.1051%" y="965" width="0.0958%" height="15" fill="rgb(247,130,12)" fg:x="30011" fg:w="29"/><text x="99.3551%" y="975.50"></text></g><g><title>core::fmt::write (14 samples, 0.05%)</title><rect x="99.1546%" y="949" width="0.0462%" height="15" fill="rgb(233,74,16)" fg:x="30026" fg:w="14"/><text x="99.4046%" y="959.50"></text></g><g><title>&lt;hyper::proto::h1::role::FastWrite as core::fmt::Write&gt;::write_str (9 samples, 0.03%)</title><rect x="99.1711%" y="933" width="0.0297%" height="15" fill="rgb(208,58,18)" fg:x="30031" fg:w="9"/><text x="99.4211%" y="943.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="99.1810%" y="917" width="0.0198%" height="15" fill="rgb(242,225,1)" fg:x="30034" fg:w="6"/><text x="99.4310%" y="927.50"></text></g><g><title>core::fmt::write (42 samples, 0.14%)</title><rect x="99.0688%" y="981" width="0.1387%" height="15" fill="rgb(249,39,40)" fg:x="30000" fg:w="42"/><text x="99.3188%" y="991.50"></text></g><g><title>bytes::bytes::promotable_even_drop (4 samples, 0.01%)</title><rect x="99.2273%" y="965" width="0.0132%" height="15" fill="rgb(207,72,44)" fg:x="30048" fg:w="4"/><text x="99.4773%" y="975.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (4 samples, 0.01%)</title><rect x="99.2273%" y="949" width="0.0132%" height="15" fill="rgb(215,193,12)" fg:x="30048" fg:w="4"/><text x="99.4773%" y="959.50"></text></g><g><title>bytes::bytes::shared_drop (5 samples, 0.02%)</title><rect x="99.2405%" y="965" width="0.0165%" height="15" fill="rgb(248,41,39)" fg:x="30052" fg:w="5"/><text x="99.4905%" y="975.50"></text></g><g><title>mi_free (8 samples, 0.03%)</title><rect x="99.2570%" y="965" width="0.0264%" height="15" fill="rgb(253,85,4)" fg:x="30057" fg:w="8"/><text x="99.5070%" y="975.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::clear (28 samples, 0.09%)</title><rect x="99.2074%" y="981" width="0.0925%" height="15" fill="rgb(243,70,31)" fg:x="30042" fg:w="28"/><text x="99.4574%" y="991.50"></text></g><g><title>hyper::headers::content_length_parse_all (5 samples, 0.02%)</title><rect x="99.3230%" y="981" width="0.0165%" height="15" fill="rgb(253,195,26)" fg:x="30077" fg:w="5"/><text x="99.5730%" y="991.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::get_all (4 samples, 0.01%)</title><rect x="99.3263%" y="965" width="0.0132%" height="15" fill="rgb(243,42,11)" fg:x="30078" fg:w="4"/><text x="99.5763%" y="975.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (7 samples, 0.02%)</title><rect x="99.3726%" y="949" width="0.0231%" height="15" fill="rgb(239,66,17)" fg:x="30092" fg:w="7"/><text x="99.6226%" y="959.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (5 samples, 0.02%)</title><rect x="99.3957%" y="949" width="0.0165%" height="15" fill="rgb(217,132,21)" fg:x="30099" fg:w="5"/><text x="99.6457%" y="959.50"></text></g><g><title>&lt;http::header::value::HeaderValue as core::convert::From&lt;u64&gt;&gt;::from (22 samples, 0.07%)</title><rect x="99.3561%" y="965" width="0.0727%" height="15" fill="rgb(252,202,21)" fg:x="30087" fg:w="22"/><text x="99.6061%" y="975.50"></text></g><g><title>mi_malloc_aligned (4 samples, 0.01%)</title><rect x="99.4155%" y="949" width="0.0132%" height="15" fill="rgb(233,98,36)" fg:x="30105" fg:w="4"/><text x="99.6655%" y="959.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_insert_entry (5 samples, 0.02%)</title><rect x="99.4287%" y="965" width="0.0165%" height="15" fill="rgb(216,153,54)" fg:x="30109" fg:w="5"/><text x="99.6787%" y="975.50"></text></g><g><title>hyper::proto::h1::role::set_content_length (35 samples, 0.12%)</title><rect x="99.3395%" y="981" width="0.1156%" height="15" fill="rgb(250,99,7)" fg:x="30082" fg:w="35"/><text x="99.5895%" y="991.50"></text></g><g><title>hyper::proto::h1::role::write_headers (21 samples, 0.07%)</title><rect x="99.4551%" y="981" width="0.0693%" height="15" fill="rgb(207,56,50)" fg:x="30117" fg:w="21"/><text x="99.7051%" y="991.50"></text></g><g><title>_platform_memmove (10 samples, 0.03%)</title><rect x="99.4914%" y="965" width="0.0330%" height="15" fill="rgb(244,61,34)" fg:x="30128" fg:w="10"/><text x="99.7414%" y="975.50"></text></g><g><title>&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::encode (161 samples, 0.53%)</title><rect x="98.9961%" y="997" width="0.5317%" height="15" fill="rgb(241,50,38)" fg:x="29978" fg:w="161"/><text x="99.2461%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (6 samples, 0.02%)</title><rect x="99.5344%" y="997" width="0.0198%" height="15" fill="rgb(212,166,30)" fg:x="30141" fg:w="6"/><text x="99.7844%" y="1007.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (187 samples, 0.62%)</title><rect x="98.9499%" y="1013" width="0.6175%" height="15" fill="rgb(249,127,32)" fg:x="29964" fg:w="187"/><text x="99.1999%" y="1023.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::can_buffer (9 samples, 0.03%)</title><rect x="99.5773%" y="1013" width="0.0297%" height="15" fill="rgb(209,103,0)" fg:x="30154" fg:w="9"/><text x="99.8273%" y="1023.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.03%)</title><rect x="99.5806%" y="997" width="0.0264%" height="15" fill="rgb(238,209,51)" fg:x="30155" fg:w="8"/><text x="99.8306%" y="1007.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (5,441 samples, 17.97%)</title><rect x="81.6525%" y="1045" width="17.9678%" height="15" fill="rgb(237,56,23)" fg:x="24726" fg:w="5441"/><text x="81.9025%" y="1055.50">&lt;hyper::client::conn::http1:..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (5,426 samples, 17.92%)</title><rect x="81.7020%" y="1029" width="17.9182%" height="15" fill="rgb(215,153,46)" fg:x="24741" fg:w="5426"/><text x="81.9520%" y="1039.50">hyper::proto::h1::dispatch::..</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5,459 samples, 18.03%)</title><rect x="81.5963%" y="1077" width="18.0272%" height="15" fill="rgb(224,49,31)" fg:x="24709" fg:w="5459"/><text x="81.8463%" y="1087.50">&lt;futures_util::future::futur..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5,446 samples, 17.98%)</title><rect x="81.6393%" y="1061" width="17.9843%" height="15" fill="rgb(250,18,42)" fg:x="24722" fg:w="5446"/><text x="81.8893%" y="1071.50">&lt;futures_util::future::futur..</text></g><g><title>core::hash::BuildHasher::hash_one (12 samples, 0.04%)</title><rect x="99.6797%" y="1013" width="0.0396%" height="15" fill="rgb(215,176,39)" fg:x="30185" fg:w="12"/><text x="99.9297%" y="1023.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.04%)</title><rect x="99.6830%" y="997" width="0.0363%" height="15" fill="rgb(223,77,29)" fg:x="30186" fg:w="11"/><text x="99.9330%" y="1007.50"></text></g><g><title>hyper_util::client::legacy::pool::PoolInner&lt;T,K&gt;::put (21 samples, 0.07%)</title><rect x="99.6632%" y="1029" width="0.0693%" height="15" fill="rgb(234,94,52)" fg:x="30180" fg:w="21"/><text x="99.9132%" y="1039.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4 samples, 0.01%)</title><rect x="99.7193%" y="1013" width="0.0132%" height="15" fill="rgb(220,154,50)" fg:x="30197" fg:w="4"/><text x="99.9693%" y="1023.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (39 samples, 0.13%)</title><rect x="99.6235%" y="1077" width="0.1288%" height="15" fill="rgb(212,11,10)" fg:x="30168" fg:w="39"/><text x="99.8735%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper_util::client::legacy::pool::Pooled&lt;hyper_util::client::legacy::client::PoolClient&lt;http_body_util::full::Full&lt;bytes::bytes::Bytes&gt;&gt;,(http::uri::scheme::Scheme,http::uri::authority::Authority)&gt;&gt; (34 samples, 0.11%)</title><rect x="99.6401%" y="1061" width="0.1123%" height="15" fill="rgb(205,166,19)" fg:x="30173" fg:w="34"/><text x="99.8901%" y="1071.50"></text></g><g><title>&lt;hyper_util::client::legacy::pool::Pooled&lt;T,K&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.11%)</title><rect x="99.6467%" y="1045" width="0.1057%" height="15" fill="rgb(244,198,16)" fg:x="30175" fg:w="32"/><text x="99.8967%" y="1055.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (6 samples, 0.02%)</title><rect x="99.7325%" y="1029" width="0.0198%" height="15" fill="rgb(219,69,12)" fg:x="30201" fg:w="6"/><text x="99.9825%" y="1039.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (5 samples, 0.02%)</title><rect x="99.7358%" y="1013" width="0.0165%" height="15" fill="rgb(245,30,7)" fg:x="30202" fg:w="5"/><text x="99.9858%" y="1023.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (4 samples, 0.01%)</title><rect x="99.7391%" y="997" width="0.0132%" height="15" fill="rgb(218,221,48)" fg:x="30203" fg:w="4"/><text x="99.9891%" y="1007.50"></text></g><g><title>__psynch_mutexwait (4 samples, 0.01%)</title><rect x="99.7391%" y="981" width="0.0132%" height="15" fill="rgb(216,66,15)" fg:x="30203" fg:w="4"/><text x="99.9891%" y="991.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (11 samples, 0.04%)</title><rect x="99.7523%" y="1077" width="0.0363%" height="15" fill="rgb(226,122,50)" fg:x="30207" fg:w="11"/><text x="100.0023%" y="1087.50"></text></g><g><title>_tlv_get_addr (10 samples, 0.03%)</title><rect x="99.7556%" y="1061" width="0.0330%" height="15" fill="rgb(239,156,16)" fg:x="30208" fg:w="10"/><text x="100.0056%" y="1071.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (10 samples, 0.03%)</title><rect x="99.8184%" y="1029" width="0.0330%" height="15" fill="rgb(224,27,38)" fg:x="30227" fg:w="10"/><text x="100.0684%" y="1039.50"></text></g><g><title>pthread_cond_signal (8 samples, 0.03%)</title><rect x="99.8250%" y="1013" width="0.0264%" height="15" fill="rgb(224,39,27)" fg:x="30229" fg:w="8"/><text x="100.0750%" y="1023.50"></text></g><g><title>__psynch_cvsignal (8 samples, 0.03%)</title><rect x="99.8250%" y="997" width="0.0264%" height="15" fill="rgb(215,92,29)" fg:x="30229" fg:w="8"/><text x="100.0750%" y="1007.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (21 samples, 0.07%)</title><rect x="99.7986%" y="1077" width="0.0693%" height="15" fill="rgb(207,159,16)" fg:x="30221" fg:w="21"/><text x="100.0486%" y="1087.50"></text></g><g><title>tokio::runtime::context::with_scheduler (21 samples, 0.07%)</title><rect x="99.7986%" y="1061" width="0.0693%" height="15" fill="rgb(238,163,47)" fg:x="30221" fg:w="21"/><text x="100.0486%" y="1071.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (18 samples, 0.06%)</title><rect x="99.8085%" y="1045" width="0.0594%" height="15" fill="rgb(219,91,49)" fg:x="30224" fg:w="18"/><text x="100.0585%" y="1055.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (5 samples, 0.02%)</title><rect x="99.8514%" y="1029" width="0.0165%" height="15" fill="rgb(227,167,31)" fg:x="30237" fg:w="5"/><text x="100.1014%" y="1039.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (5 samples, 0.02%)</title><rect x="99.8679%" y="1077" width="0.0165%" height="15" fill="rgb(234,80,54)" fg:x="30242" fg:w="5"/><text x="100.1179%" y="1087.50"></text></g><g><title>_tlv_get_addr (4 samples, 0.01%)</title><rect x="99.8712%" y="1061" width="0.0132%" height="15" fill="rgb(212,114,2)" fg:x="30243" fg:w="4"/><text x="100.1212%" y="1071.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5,556 samples, 18.35%)</title><rect x="81.5666%" y="1093" width="18.3475%" height="15" fill="rgb(234,50,24)" fg:x="24700" fg:w="5556"/><text x="81.8166%" y="1103.50">tokio::runtime::task::harness..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (29,246 samples, 96.58%)</title><rect x="3.3981%" y="1109" width="96.5788%" height="15" fill="rgb(221,68,8)" fg:x="1029" fg:w="29246"/><text x="3.6481%" y="1119.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::raw::poll (16 samples, 0.05%)</title><rect x="99.9240%" y="1093" width="0.0528%" height="15" fill="rgb(254,180,31)" fg:x="30259" fg:w="16"/><text x="100.1740%" y="1103.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (6 samples, 0.02%)</title><rect x="99.9769%" y="1109" width="0.0198%" height="15" fill="rgb(247,130,50)" fg:x="30275" fg:w="6"/><text x="100.2269%" y="1119.50"></text></g><g><title>all (30,282 samples, 100%)</title><rect x="0.0000%" y="1317" width="100.0000%" height="15" fill="rgb(211,109,4)" fg:x="0" fg:w="30282"/><text x="0.2500%" y="1327.50"></text></g><g><title>thread_start (30,276 samples, 99.98%)</title><rect x="0.0198%" y="1301" width="99.9802%" height="15" fill="rgb(238,50,21)" fg:x="6" fg:w="30276"/><text x="0.2698%" y="1311.50">thread_start</text></g><g><title>_pthread_start (30,276 samples, 99.98%)</title><rect x="0.0198%" y="1285" width="99.9802%" height="15" fill="rgb(225,57,45)" fg:x="6" fg:w="30276"/><text x="0.2698%" y="1295.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (30,276 samples, 99.98%)</title><rect x="0.0198%" y="1269" width="99.9802%" height="15" fill="rgb(209,196,50)" fg:x="6" fg:w="30276"/><text x="0.2698%" y="1279.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (30,276 samples, 99.98%)</title><rect x="0.0198%" y="1253" width="99.9802%" height="15" fill="rgb(242,140,13)" fg:x="6" fg:w="30276"/><text x="0.2698%" y="1263.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (30,276 samples, 99.98%)</title><rect x="0.0198%" y="1237" width="99.9802%" height="15" fill="rgb(217,111,7)" fg:x="6" fg:w="30276"/><text x="0.2698%" y="1247.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (30,276 samples, 99.98%)</title><rect x="0.0198%" y="1221" width="99.9802%" height="15" fill="rgb(253,193,51)" fg:x="6" fg:w="30276"/><text x="0.2698%" y="1231.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (30,276 samples, 99.98%)</title><rect x="0.0198%" y="1205" width="99.9802%" height="15" fill="rgb(252,70,29)" fg:x="6" fg:w="30276"/><text x="0.2698%" y="1215.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (30,276 samples, 99.98%)</title><rect x="0.0198%" y="1189" width="99.9802%" height="15" fill="rgb(232,127,12)" fg:x="6" fg:w="30276"/><text x="0.2698%" y="1199.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (30,276 samples, 99.98%)</title><rect x="0.0198%" y="1173" width="99.9802%" height="15" fill="rgb(211,180,21)" fg:x="6" fg:w="30276"/><text x="0.2698%" y="1183.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (30,276 samples, 99.98%)</title><rect x="0.0198%" y="1157" width="99.9802%" height="15" fill="rgb(229,72,13)" fg:x="6" fg:w="30276"/><text x="0.2698%" y="1167.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (30,276 samples, 99.98%)</title><rect x="0.0198%" y="1141" width="99.9802%" height="15" fill="rgb(240,211,49)" fg:x="6" fg:w="30276"/><text x="0.2698%" y="1151.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (30,275 samples, 99.98%)</title><rect x="0.0231%" y="1125" width="99.9769%" height="15" fill="rgb(219,149,40)" fg:x="7" fg:w="30275"/><text x="0.2731%" y="1135.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g></svg></svg>