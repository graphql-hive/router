schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY) {
  query: Query
}

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  A @join__graph(name: "a", url: "")
  B @join__graph(name: "b", url: "")
  C @join__graph(name: "c", url: "")
  D @join__graph(name: "d", url: "")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Product
  @join__type(graph: A, key: "id")
  @join__type(graph: B, key: "id")
  @join__type(graph: C, key: "id")
  @join__type(graph: D, key: "id") {
  id: ID!
  price: Float!
    @inaccessible
    @join__field(graph: A)
    @join__field(graph: C, external: true)
  hasDiscount: Boolean!
    @join__field(graph: B)
    @join__field(graph: C, external: true)
  isExpensive: Boolean!
    @join__field(graph: C, requires: "price")
    @join__field(graph: D, external: true)
  isExpensiveWithDiscount: Boolean!
    @join__field(graph: C, requires: "hasDiscount")
    @join__field(graph: D, external: true)
  canAfford: Boolean! @join__field(graph: D, requires: "isExpensive")
  canAfford2: Boolean! @join__field(graph: D, requires: "isExpensive")
  fieldInD: String @join__field(graph: D)
  canAffordWithDiscount: Boolean!
    @join__field(graph: D, requires: "isExpensiveWithDiscount")
  canAffordWithDiscount2: Boolean!
    @join__field(graph: D, requires: "isExpensiveWithDiscount")
  canAffordWithAndWithoutDiscount: Boolean!
    @join__field(graph: D, requires: "isExpensiveWithDiscount isExpensive")
  canAffordWithAndWithoutDiscount2: Boolean!
    @join__field(graph: D, requires: "isExpensive isExpensiveWithDiscount")
}

type Query
  @join__type(graph: A)
  @join__type(graph: B)
  @join__type(graph: C)
  @join__type(graph: D) {
  product: Product @join__field(graph: B)
}
