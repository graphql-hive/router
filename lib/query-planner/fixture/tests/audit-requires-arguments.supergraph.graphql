schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Author
  @join__type(graph: D)
{
  id: ID!
  name: String
}

type Comment
  @join__type(graph: C, key: "id")
  @join__type(graph: D, key: "id")
{
  id: ID!
  authorId: ID @join__field(graph: C) @join__field(graph: D, external: true)
  body: String! @join__field(graph: C)
  date: String @join__field(graph: D)
}

scalar join__FieldSet

enum join__Graph {
  A @join__graph(name: "a", url: "http://localhost:4200/requires-with-argument/a")
  B @join__graph(name: "b", url: "http://localhost:4200/requires-with-argument/b")
  C @join__graph(name: "c", url: "http://localhost:4200/requires-with-argument/c")
  D @join__graph(name: "d", url: "http://localhost:4200/requires-with-argument/d")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Post
  @join__type(graph: C, key: "id")
  @join__type(graph: D, key: "id")
{
  id: ID!
  author: Author @join__field(graph: D, requires: "comments(limit: 3) { authorId }")
  comments(limit: Int!): [Comment] @join__field(graph: D)
}

type Product
  @join__type(graph: A, key: "upc")
  @join__type(graph: B, key: "upc")
{
  upc: String!
  weight: Int @join__field(graph: A, external: true) @join__field(graph: B)
  price(currency: String!): Int @join__field(graph: A, external: true) @join__field(graph: B)
  shippingEstimate: Int @join__field(graph: A, requires: "price(currency: \"USD\") weight")
  name: String @join__field(graph: B)
}

type Query
  @join__type(graph: A)
  @join__type(graph: B)
  @join__type(graph: C)
  @join__type(graph: D)
{
  products: [Product] @join__field(graph: B)
  feed: [Post] @join__field(graph: C)
}