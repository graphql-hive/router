schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) {
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

type Category
  @join__type(graph: CATEGORY, key: "id")
  @join__type(graph: SUBCATEGORIES, key: "id") {
  id: ID!

  """
  This field is provided by Query.products
  and we deliberately don't resolve it.
  The test suite is about checking if @provides is used correctly.
  """
  name: String @join__field(graph: CATEGORY)
  subCategories: [Category]
    @join__field(graph: CATEGORY, external: true)
    @join__field(graph: SUBCATEGORIES)
}

scalar join__FieldSet

enum join__Graph {
  ALL_PRODUCTS @join__graph(name: "all-products", url: "")
  CATEGORY @join__graph(name: "category", url: "")
  SUBCATEGORIES @join__graph(name: "subcategories", url: "")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Product
  @join__type(graph: ALL_PRODUCTS, key: "id")
  @join__type(graph: CATEGORY, key: "id")
  @join__type(graph: SUBCATEGORIES, key: "id") {
  id: ID!
  categories: [Category]
    @join__field(graph: CATEGORY, external: true)
    @join__field(graph: SUBCATEGORIES)
}

type Query
  @join__type(graph: ALL_PRODUCTS)
  @join__type(graph: CATEGORY)
  @join__type(graph: SUBCATEGORIES) {
  products: [Product]
    @join__field(
      graph: CATEGORY
      provides: "categories { id name subCategories { id name } }"
    )
}
