schema
    @link(url: "https://specs.apollo.dev/link/v1.0")
    @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) {
    query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
    graph: join__Graph
    requires: join__FieldSet
    provides: join__FieldSet
    type: String
    external: Boolean
    override: String
    usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
    graph: join__Graph!
    interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
    graph: join__Graph!
    key: join__FieldSet
    extension: Boolean! = false
    resolvable: Boolean! = true
    isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
    graph: join__Graph!
    member: String!
) repeatable on UNION

directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
    COST @join__graph(name: "cost", url: "")
    INFO @join__graph(name: "info", url: "")
    STORE @join__graph(name: "store", url: "")
}

scalar link__Import

enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
}

type Price @join__type(graph: COST) {
    amount: Float!
    currency: String!
}

type Product
    @join__type(graph: COST, key: "uuid")
    @join__type(graph: INFO, key: "id")
    @join__type(graph: INFO, key: "uuid")
    @join__type(graph: STORE, key: "id") {
    uuid: ID! @join__field(graph: COST) @join__field(graph: INFO)
    price: Price @join__field(graph: COST)
    id: ID! @join__field(graph: INFO) @join__field(graph: STORE)
    isAvailable: Boolean! @join__field(graph: INFO)
    name: String! @join__field(graph: STORE)
}

type Query
    @join__type(graph: COST)
    @join__type(graph: INFO)
    @join__type(graph: STORE) {
    products: Product @join__field(graph: STORE)
}
